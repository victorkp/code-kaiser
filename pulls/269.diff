diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 6b61e52..480ff1e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -27,7 +27,6 @@
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
-import android.view.ViewGroup;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -70,7 +69,7 @@
     private boolean updatingPreviewViewport = false;
     private boolean updatingChartViewport = false;
     private BgGraphBuilder bgGraphBuilder;
-    private SharedPreferences prefs;
+    private SharedPreferences mPreferences;
     private Viewport tempViewport = new Viewport();
     private Viewport holdViewport = new Viewport();
     private boolean isBTShare;
@@ -88,7 +87,7 @@
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        mPreferences = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         checkEula();
         setContentView(R.layout.activity_home);
 
@@ -103,10 +102,10 @@ protected void onCreate(Bundle savedInstanceState) {
             Log.d(TAG, "Maybe ignoring battery optimization");
             PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
             if (!pm.isIgnoringBatteryOptimizations(packageName) &&
-                    !prefs.getBoolean("requested_ignore_battery_optimizations", false)) {
+                    !mPreferences.getBoolean("requested_ignore_battery_optimizations", false)) {
                 Log.d(TAG, "Requesting ignore battery optimization");
 
-                prefs.edit().putBoolean("requested_ignore_battery_optimizations", true).apply();
+                mPreferences.edit().putBoolean("requested_ignore_battery_optimizations", true).apply();
                 intent.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);
                 intent.setData(Uri.parse("package:" + packageName));
                 startActivity(intent);
@@ -120,7 +119,7 @@ public String getMenuName() {
     }
 
     private void checkEula() {
-        boolean IUnderstand = prefs.getBoolean("I_understand", false);
+        boolean IUnderstand = mPreferences.getBoolean("I_understand", false);
         if (!IUnderstand) {
             Intent intent = new Intent(getApplicationContext(), LicenseAgreementActivity.class);
             startActivity(intent);
@@ -173,7 +172,7 @@ private void setupCharts() {
 
         //Transmitter Battery Level
         final Sensor sensor = Sensor.currentSensor();
-        if (sensor != null && sensor.latest_battery_level != 0 && sensor.latest_battery_level <= Constants.TRANSMITTER_BATTERY_LOW && ! prefs.getBoolean("disable_battery_warning", false)) {
+        if (sensor != null && sensor.latest_battery_level != 0 && sensor.latest_battery_level <= Constants.TRANSMITTER_BATTERY_LOW && ! mPreferences.getBoolean("disable_battery_warning", false)) {
             Drawable background = new Drawable() {
 
                 @Override
@@ -267,19 +266,19 @@ private void updateCurrentBgInfo() {
         if (isWifiWixel || isWifiBluetoothWixel) {
             updateCurrentBgInfoForWifiWixel(notificationText);
         }
-        if (prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
+        if (mPreferences.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
             notificationText.append("\n ALL ALERTS CURRENTLY DISABLED");
-        } else if (prefs.getLong("low_alerts_disabled_until", 0) > new Date().getTime()
+        } else if (mPreferences.getLong("low_alerts_disabled_until", 0) > new Date().getTime()
 			&&
-			prefs.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
+			mPreferences.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
             notificationText.append("\nLOW AND HIGH ALERTS CURRENTLY DISABLED");
-        } else if (prefs.getLong("low_alerts_disabled_until", 0) > new Date().getTime()) {
+        } else if (mPreferences.getLong("low_alerts_disabled_until", 0) > new Date().getTime()) {
             notificationText.append("\nLOW ALERTS CURRENTLY DISABLED");
-        } else if (prefs.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
+        } else if (mPreferences.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
             notificationText.append("\nHIGH ALERTS CURRENTLY DISABLED");
         }
-        if(prefs.getBoolean("extra_status_line", false)) {
-            extraStatusLineText.setText(extraStatusLine());
+        if(mPreferences.getBoolean("extra_status_line", false)) {
+            extraStatusLineText.setText(extraStatusLine(mPreferences));
             extraStatusLineText.setVisibility(View.VISIBLE);
         } else {
             extraStatusLineText.setText("");
@@ -357,7 +356,7 @@ private void updateCurrentBgInfoForBtShare(TextView notificationText) {
             return;
         }
 
-        String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
+        String receiverSn = mPreferences.getString("share_key", "SM00000000").toUpperCase();
         if (receiverSn.compareTo("SM00000000") == 0 || receiverSn.length() == 0) {
             notificationText.setText("Please set your Dex Receiver Serial Number in App Settings");
             return;
@@ -386,8 +385,8 @@ private void displayCurrentInfo() {
         df.setMaximumFractionDigits(0);
 
         boolean isDexbridge = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
-        boolean displayBattery = prefs.getBoolean("display_bridge_battery",false);
-        int bridgeBattery = prefs.getInt("bridge_battery", 0);
+        boolean displayBattery = mPreferences.getBoolean("display_bridge_battery",false);
+        int bridgeBattery = mPreferences.getInt("bridge_battery", 0);
 
         if (isDexbridge && displayBattery) {
             if(BgGraphBuilder.isXLargeTablet(getApplicationContext())) {
@@ -425,7 +424,7 @@ private void displayCurrentInfo() {
     }
 
     @NonNull
-    private String extraStatusLine() {
+    public static String extraStatusLine(SharedPreferences prefs) {
         StringBuilder extraline = new StringBuilder();
         Calibration lastCalibration = Calibration.last();
         if (prefs.getBoolean("status_line_calibration_long", true) && lastCalibration != null){
@@ -551,16 +550,16 @@ public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.menu_home, menu);
 
         //wear integration
-        if (!prefs.getBoolean("wear_sync", false)) {
+        if (!mPreferences.getBoolean("wear_sync", false)) {
             menu.removeItem(R.id.action_open_watch_settings);
             menu.removeItem(R.id.action_resend_last_bg);
         }
 
         //speak readings
         MenuItem menuItem =  menu.findItem(R.id.action_toggle_speakreadings);
-        if(prefs.getBoolean("bg_to_speech_shortcut", false)){
+        if(mPreferences.getBoolean("bg_to_speech_shortcut", false)){
             menuItem.setVisible(true);
-            if(prefs.getBoolean("bg_to_speech", false)){
+            if(mPreferences.getBoolean("bg_to_speech", false)){
                 menuItem.setChecked(true);
             } else {
                 menuItem.setChecked(false);
@@ -665,7 +664,7 @@ protected void onPostExecute(String filename) {
         }
 
         if (item.getItemId() == R.id.action_toggle_speakreadings) {
-            prefs.edit().putBoolean("bg_to_speech", !prefs.getBoolean("bg_to_speech", false)).commit();
+            mPreferences.edit().putBoolean("bg_to_speech", !mPreferences.getBoolean("bg_to_speech", false)).commit();
             invalidateOptionsMenu();
             return true;
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index f4e9cf9..145a125 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -312,7 +312,6 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             final PreferenceScreen calibrationAlertsScreen = (PreferenceScreen) findPreference("calibration_alerts_screen");
             final PreferenceCategory alertsCategory = (PreferenceCategory) findPreference("alerts_category");
             final Preference disableAlertsStaleDataMinutes = findPreference("disable_alerts_stale_data_minutes");
-            final Preference widgetRangeLines = findPreference("widget_range_lines");
 
             disableAlertsStaleDataMinutes.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override
@@ -368,16 +367,9 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     return true;
                 }
             });
-            widgetRangeLines.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
-                @Override
-                public boolean onPreferenceChange(Preference preference, Object newValue) {
-                    Context context = preference.getContext();
-                    if(AppWidgetManager.getInstance(context).getAppWidgetIds(new ComponentName(context, xDripWidget.class)).length > 0){
-                        context.startService(new Intent(context, WidgetUpdateService.class));
-                    }
-                    return true;
-                }
-            });
+
+            bindWidgetUpdater();
+
             bindPreferenceSummaryToValue(collectionMethod);
             bindPreferenceSummaryToValue(shareKey);
             bindPreferenceSummaryToValue(wifiRecievers);
@@ -468,6 +460,21 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             });
         }
 
+        private void bindWidgetUpdater() {
+            findPreference("widget_range_lines").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("extra_status_line").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("widget_status_line").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_calibration_long").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_calibration_short").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_avg").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_a1c_dcct").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_a1c_ifcc").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_in").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_high").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("status_line_low").setOnPreferenceChangeListener(new WidgetListener());
+            findPreference("extra_status_line").setOnPreferenceChangeListener(new WidgetListener());
+        }
+
         private void setupBarcodeConfigScanner() {
             findPreference("auto_configure").setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
                 @Override
@@ -529,6 +536,16 @@ private void bindBgMissedAlertsListener(){
           findPreference("other_alerts_snooze").setOnPreferenceChangeListener(sBgMissedAlertsHandler);
         }
 
+        private static class WidgetListener implements Preference.OnPreferenceChangeListener {
+            @Override
+            public boolean onPreferenceChange(Preference preference, Object newValue) {
+                Context context = preference.getContext();
+                if(AppWidgetManager.getInstance(context).getAppWidgetIds(new ComponentName(context, xDripWidget.class)).length > 0){
+                    context.startService(new Intent(context, WidgetUpdateService.class));
+                }
+                return true;
+            }
+        }
     }
 
     public static boolean isNumeric(String str) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
index e86fbef..743e618 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
@@ -11,6 +11,7 @@
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import android.preference.PreferenceManager;
+import android.view.View;
 import android.widget.RemoteViews;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
@@ -117,6 +118,14 @@ private static void displayCurrentInfo(AppWidgetManager appWidgetManager, int ap
                 views.setTextColor(R.id.readingAge, Color.WHITE);
             }
 
+            if(settings.getBoolean("extra_status_line", false) && settings.getBoolean("widget_status_line", false)) {
+                views.setTextViewText(R.id.widgetStatusLine, Home.extraStatusLine(settings));
+                views.setViewVisibility(R.id.widgetStatusLine, View.VISIBLE);
+            } else {
+                views.setTextViewText(R.id.widgetStatusLine, "");
+                views.setViewVisibility(R.id.widgetStatusLine, View.GONE);
+            }
+
             if (bgGraphBuilder.unitized(estimate) <= bgGraphBuilder.lowMark) {
                 views.setTextColor(R.id.widgetBg, Color.parseColor("#C30909"));
                 views.setTextColor(R.id.widgetDelta, Color.parseColor("#C30909"));
diff --git a/app/src/main/res/layout/x_drip_widget.xml b/app/src/main/res/layout/x_drip_widget.xml
index e523adb..2b1e481 100644
--- a/app/src/main/res/layout/x_drip_widget.xml
+++ b/app/src/main/res/layout/x_drip_widget.xml
@@ -63,5 +63,13 @@
                 android:text="--- minutes ago"
                 android:id="@+id/readingAge"
                 android:layout_gravity="center_horizontal"/>
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textColor="#ffffff"
+            android:textSize="13sp"
+            android:text="---"
+            android:id="@+id/widgetStatusLine"
+            android:layout_gravity="center_horizontal"/>
     </LinearLayout>
 </FrameLayout>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 0ab4c68..22b1bf6 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -71,6 +71,12 @@
                 android:title="Show Extra Line"
                 android:summary="Show Extra Line"
                 android:defaultValue="false" />
+            <SwitchPreference
+                android:key="widget_status_line"
+                android:title="Show on widget"
+                android:summary="Also show the extra status line on the widget"
+                android:dependency="extra_status_line"
+                android:defaultValue="false" />
             <CheckBoxPreference
                 android:key="status_line_calibration_long"
                 android:title="Calibration Data (long)"

diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
index d69f9d2..352cfdc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
@@ -203,9 +203,9 @@ public String shortPath(String path) {
         return "";
     }
 
-    public String timeFormatString(int Hour, int Minute) {
+    public String timeFormatString(int hour, int minute) {
         SimpleDateFormat timeFormat24 = new SimpleDateFormat("HH:mm");
-        String selected = Hour+":"+Minute;
+        String selected = hour+":" + ((minute<10)?"0":"") + minute;
         if (!android.text.format.DateFormat.is24HourFormat(mContext)) {
             try {
                 Date date = timeFormat24.parse(selected);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
index dc7d977..4131d4a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -315,7 +315,7 @@ void enableVibrateControls() {
         }
     }
 
-    private boolean verifyThreshold(double threshold) {
+    private boolean verifyThreshold(double threshold, boolean allDay, int startTime, int endTime) {
         List<AlertType> lowAlerts = AlertType.getAll(false);
         List<AlertType> highAlerts = AlertType.getAll(true);
 
@@ -323,27 +323,30 @@ private boolean verifyThreshold(double threshold) {
             Toast.makeText(getApplicationContext(), "threshold has to be between " +unitsConvert2Disp(doMgdl, MIN_ALERT) + " and " + unitsConvert2Disp(doMgdl, MAX_ALERT),Toast.LENGTH_LONG).show();
             return false;
         }
-        if (uuid == null) {
-            // We want to make sure that for each threashold there is only one alert. Otherwise, which file should we play.
-            for (AlertType lowAlert : lowAlerts) {
-                if(lowAlert.threshold == threshold) {
+        // We want to make sure that for each threashold there is only one alert. Otherwise, which file should we play.
+        for (AlertType lowAlert : lowAlerts) {
+            if(lowAlert.threshold == threshold  && overlapping(lowAlert, allDay, startTime, endTime)) {
+                if(uuid == null || ! uuid.equals(lowAlert.uuid)){ //new alert or not myself
                     Toast.makeText(getApplicationContext(),
                             "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
                 }
             }
-            for (AlertType highAlert : highAlerts) {
-                if(highAlert.threshold == threshold) {
+        }
+        for (AlertType highAlert : highAlerts) {
+            if(highAlert.threshold == threshold  && overlapping(highAlert, allDay, startTime, endTime)) {
+                if(uuid == null || ! uuid.equals(highAlert.uuid)){ //new alert or not myself
                     Toast.makeText(getApplicationContext(),
                             "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
                 }
             }
         }
+
         // high alerts have to be higher than all low alerts...
         if(above) {
             for (AlertType lowAlert : lowAlerts) {
-                if(threshold < lowAlert.threshold  ) {
+                if(threshold < lowAlert.threshold  && overlapping(lowAlert, allDay, startTime, endTime)) {
                     Toast.makeText(getApplicationContext(),
                             "High alert threshold has to be higher than all low alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
@@ -352,7 +355,7 @@ private boolean verifyThreshold(double threshold) {
         } else {
             // low alert has to be lower than all high alerts
             for (AlertType highAlert : highAlerts) {
-                if(threshold > highAlert.threshold  ) {
+                if(threshold > highAlert.threshold  && overlapping(highAlert, allDay, startTime, endTime)) {
                     Toast.makeText(getApplicationContext(),
                             "Low alert threshold has to be lower than all high alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
@@ -363,6 +366,25 @@ private boolean verifyThreshold(double threshold) {
         return true;
     }
 
+    // determines if an alertType is 'at' has a temporal overlap with a new alert with parameters
+    // allday, startTime, entTime
+    private boolean overlapping(AlertType at, boolean allday, int startTime, int endTime){
+        //shortcut: if one is all day, they must overlap
+        if(at.all_day || allday) {
+            return true;
+        }
+        int st1 = at.start_time_minutes;
+        int st2 = startTime;
+        int et1 = at.end_time_minutes;
+        int et2 = endTime;
+
+        return  st1 <= st2 && et1 > st2 ||
+                st1 <= st2 && (et2 < st2) && et2 > st1 || //2nd timeframe passes midnight
+                st2 <= st1 && et2 > st1 ||
+                st2 <= st1 && (et1 < st1) && et1 > st2; //1st timeframe passes midnight
+
+    }
+
     private double parseDouble(String str) {
         try {
             final DecimalFormat numberFormatter = getNumberFormatter(doMgdl);
@@ -399,9 +421,6 @@ public void onClick(View v) {
                     return;
 
                 threshold = unitsConvertFromDisp(threshold);
-                if(!verifyThreshold(threshold)) {
-                    return;
-                }
 
                 alertReraise = 1;
                 Integer alterReraiseInt = parseInt(reraise.getText().toString());
@@ -436,6 +455,9 @@ public void onClick(View v) {
                     Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
                     return;
                 }
+                if(!verifyThreshold(threshold, allDay, timeStart, timeEnd)) {
+                    return;
+                }
                 boolean vibrate = checkboxVibrate.isChecked();
                 boolean overrideSilentMode = checkboxAlertOverride.isChecked();
 
@@ -532,7 +554,7 @@ public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinut
                         startMinute = selectedMinute;
                         setTimeRanges();
                     }
-                }, 0, 0, DateFormat.is24HourFormat(mContext));
+                }, startHour, startMinute, DateFormat.is24HourFormat(mContext));
                 mTimePicker.setTitle("Select Time");
                 mTimePicker.show();
 
@@ -550,7 +572,7 @@ public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinut
                         endMinute = selectedMinute;
                         setTimeRanges();
                     }
-                }, 23, 59, DateFormat.is24HourFormat(mContext));
+                }, endHour, endMinute, DateFormat.is24HourFormat(mContext));
                 mTimePicker.setTitle("Select Time");
                 mTimePicker.show();
 
@@ -613,9 +635,9 @@ public String getPath(Uri uri) {
         }
     }
 
-    public String timeFormatString(int Hour, int Minute) {
+    public String timeFormatString(int hour, int minute) {
         SimpleDateFormat timeFormat24 = new SimpleDateFormat("HH:mm");
-        String selected = Hour+":"+Minute;
+        String selected = hour+":" + ((minute<10)?"0":"") + minute;
         if (!DateFormat.is24HourFormat(mContext)) {
             try {
                 Date date = timeFormat24.parse(selected);
@@ -749,9 +771,6 @@ public void testAlert() {
             return;
 
         threshold = unitsConvertFromDisp(threshold);
-        if(!verifyThreshold(threshold)) {
-            return;
-        }
 
         int timeStart = AlertType.toTime(startHour, startMinute);
         int timeEnd = AlertType.toTime(endHour, endMinute);
@@ -772,6 +791,9 @@ public void testAlert() {
             Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
             return;
         }
+        if(!verifyThreshold(threshold, allDay, timeStart, timeEnd)) {
+            return;
+        }
         boolean vibrate = checkboxVibrate.isChecked();
         boolean overrideSilentMode = checkboxAlertOverride.isChecked();
         String mp3_file = audioPath;

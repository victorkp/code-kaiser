diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 28d2eb8..5137ea8 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -102,10 +102,19 @@
         </service>
 
         <activity
+            android:name=".SnoozeActivity"
+            android:label="@string/title_snooze" >
+        </activity>
+        
+        <activity
             android:name=".FakeNumbers"
             android:label="@string/title_activity_fake_numbers" >
         </activity>
         <activity
+            android:name=".EditAlertActivity"
+            android:label="@string/title_activity_edit_alert" >
+        </activity>
+        <activity
             android:name=".DoubleCalibrationActivity"
             android:label="@string/title_activity_double_calibration" >
         </activity>
@@ -141,6 +150,12 @@
                 android:name="android.hardware.usb.action.USB_DEVICE_ATTACHED"
                 android:resource="@xml/device_filter" />
         </activity>
+        
+        <receiver android:name="com.eveningoutpost.dexdrip.UtilityModels.NotificationsReceiver" >
+            <intent-filter>
+                <action android:name="com.eveningoutpost.dexdrip.UtilityModels.Notifications" />
+            </intent-filter>
+        </receiver>
     </application>
 
 </manifest>
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
new file mode 100644
index 0000000..16fc095
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -0,0 +1,367 @@
+package com.eveningoutpost.dexdrip;
+
+import java.util.Date;
+import java.util.List;
+
+import android.database.Cursor;
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.provider.MediaStore;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.view.View.OnClickListener;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.CompoundButton.OnCheckedChangeListener;
+import android.widget.DatePicker;
+import android.widget.EditText;
+import android.widget.TextView;
+import android.widget.TimePicker;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+
+import android.net.Uri;
+
+public class EditAlertActivity extends Activity {
+    
+    TextView viewHeader;
+    
+    EditText alertText;
+    EditText alertThreshold;
+    EditText alertMp3File;
+    Button buttonalertMp3;
+    
+    Button buttonSave;
+    Button buttonRemove;
+    CheckBox checkboxAllDay;
+    
+    TextView viewTimeStart;
+    TextView viewTimeEnd;
+    TimePicker tpTimeStart;
+    TimePicker tpTimeEnd;
+    
+    TextView viewAlertOverrideText;
+    CheckBox checkboxAlertOverride;
+       
+    String uuid;
+    boolean above;
+    final int CHOOSE_FILE = 1;
+    final int MIN_ALERT = 40;
+    final int MAX_ALERT = 400;
+    
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    
+    String getExtra(Bundle savedInstanceState, String paramName) {
+        String newString;
+        if (savedInstanceState == null) {
+            Bundle extras = getIntent().getExtras();
+            if(extras == null) {
+                newString= null;
+            } else {
+                newString= extras.getString(paramName);
+            }
+        } else {
+            newString= (String) savedInstanceState.getSerializable(paramName);
+        }
+        return newString;
+    }
+    
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_edit_alert);
+
+        viewHeader = (TextView) findViewById(R.id.view_alert_header);
+        
+        buttonSave = (Button)findViewById(R.id.edit_alert_save);
+        buttonRemove = (Button)findViewById(R.id.edit_alert_remove);
+        buttonalertMp3 = (Button)findViewById(R.id.Button_alert_mp3_file);
+        
+        
+        alertText = (EditText) findViewById(R.id.edit_alert_text);
+        alertThreshold = (EditText) findViewById(R.id.edit_alert_threshold);
+        alertMp3File = (EditText) findViewById(R.id.edit_alert_mp3_file);
+
+        checkboxAllDay = (CheckBox) findViewById(R.id.check_alert_time);
+        viewTimeStart = (TextView) findViewById(R.id.view_alert_time_start);
+        viewTimeEnd = (TextView) findViewById(R.id.view_alert_time_end);
+        tpTimeStart = (TimePicker) findViewById(R.id.timePicker_alert_start);
+        tpTimeEnd = (TimePicker) findViewById(R.id.timePicker_alert_end);
+        
+        viewAlertOverrideText = (TextView) findViewById(R.id.view_alert_override_silent);
+        checkboxAlertOverride = (CheckBox) findViewById(R.id.check_override_silent);
+        addListenerOnButtons();
+        
+        uuid = getExtra(savedInstanceState, "uuid");
+        String status;
+        if (uuid == null) {
+            // This is a new alert
+            above = Boolean.parseBoolean(getExtra(savedInstanceState, "above"));
+            checkboxAllDay.setChecked(true);
+            checkboxAlertOverride.setChecked(true);
+            
+            buttonRemove.setVisibility(View.GONE);
+            status = "adding " + (above ? "high" : "low") + " alert";
+            tpTimeStart.setIs24HourView(true);
+            tpTimeStart.setCurrentHour(24);
+            tpTimeStart.setCurrentMinute(0);
+            tpTimeEnd.setIs24HourView(true);
+            tpTimeEnd.setCurrentHour(24);
+            tpTimeEnd.setCurrentMinute(0);
+            
+        } else {
+            // We are editing an alert
+            AlertType at = AlertType.get_alert(uuid);
+            if(at==null) {
+                Log.wtf(TAG, "Error editing alert, when that alert does not exist...");
+                Intent returnIntent = new Intent();
+                setResult(RESULT_CANCELED, returnIntent);
+                finish();
+                return;
+            }
+         
+            above =at.above;
+            alertText.setText(at.name);
+            alertThreshold.setText(String.valueOf((int)at.threshold));
+            alertMp3File.setText(at.mp3_file);
+            checkboxAllDay.setChecked(at.all_day);
+            checkboxAlertOverride.setChecked(at.override_silent_mode);
+            
+            status = "editing " + (above ? "high" : "low") + " alert";
+            tpTimeStart.setIs24HourView(true);
+            tpTimeStart.setCurrentHour(AlertType.time2Hours(at.start_time_minutes));
+            tpTimeStart.setCurrentMinute(AlertType.time2Minutes(at.start_time_minutes));
+            tpTimeEnd.setIs24HourView(true);
+            tpTimeEnd.setCurrentHour(AlertType.time2Hours(at.end_time_minutes));
+            tpTimeEnd.setCurrentMinute(AlertType.time2Minutes(at.end_time_minutes));
+        }
+
+        viewHeader.setText(status);
+        enableAllDayControls();
+        enableVibrateControls();
+        
+        
+    }
+    
+    void enableAllDayControls() {
+        boolean allDay = checkboxAllDay.isChecked();
+        if(allDay) {
+            viewTimeStart.setVisibility(View.GONE);
+            viewTimeEnd.setVisibility(View.GONE);
+            tpTimeStart.setVisibility(View.GONE);
+            tpTimeEnd.setVisibility(View.GONE);
+        } else {
+            viewTimeStart.setVisibility(View.VISIBLE);
+            viewTimeEnd.setVisibility(View.VISIBLE);
+            tpTimeStart.setVisibility(View.VISIBLE);
+            tpTimeEnd.setVisibility(View.VISIBLE);
+        }
+    }
+    
+    void enableVibrateControls() {
+        boolean overrideSilence = checkboxAlertOverride.isChecked();
+        if(overrideSilence) {
+            checkboxAlertOverride.setText("");
+        } else {
+            checkboxAlertOverride.setText("Warning, no alert will be played at silent/vibrate mode!!!");
+        }
+    }
+    
+    private boolean verifyThreshold(int threshold) {
+        List<AlertType> lowAlerts = AlertType.getAll(false);
+        List<AlertType> highAlerts = AlertType.getAll(true);
+        
+        if(threshold < MIN_ALERT || threshold > MAX_ALERT) { 
+            Toast.makeText(getApplicationContext(), "threshhold has to be between " + MIN_ALERT + " and " + MAX_ALERT,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        if (uuid == null) {
+            // We want to make sure that for each threashold there is only one alert. Otherwise, which file should we play.
+            for (AlertType lowAlert : lowAlerts) {
+                if(lowAlert.threshold == threshold) {
+                    Toast.makeText(getApplicationContext(), 
+                            "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+            for (AlertType highAlert : highAlerts) {
+                if(highAlert.threshold == threshold) {
+                    Toast.makeText(getApplicationContext(), 
+                            "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        }
+        // high alerts have to be higher than all low alerts...
+        if(above) {
+            for (AlertType lowAlert : lowAlerts) {
+                if(threshold < lowAlert.threshold  ) {
+                    Toast.makeText(getApplicationContext(), 
+                            "High alert threshold has to be higher than all low alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        } else {
+            // low alert has to be lower than all high alerts
+            for (AlertType highAlert : highAlerts) {
+                if(threshold > highAlert.threshold  ) {
+                    Toast.makeText(getApplicationContext(), 
+                            "Low alert threshold has to be higher than all low alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        }
+        
+        return true;
+    }
+
+    public void addListenerOnButtons() {
+        
+        buttonSave.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                
+                // Check that values are ok.
+                int threshold = 0;
+                try {
+                    threshold = Integer.parseInt(alertThreshold.getText().toString());
+                }
+                catch (NumberFormatException nfe) {
+                    Log.e(TAG, "Invalid number", nfe);
+                }
+                if(!verifyThreshold(threshold)) {
+                    return;
+                }
+                
+                int timeStart = AlertType.toTime(tpTimeStart.getCurrentHour(), tpTimeStart.getCurrentMinute());
+                int timeEnd = AlertType.toTime(tpTimeEnd.getCurrentHour(), tpTimeEnd.getCurrentMinute());
+                
+                boolean allDay = checkboxAllDay.isChecked();
+                // if 23:59 was set, we increase it to 24:00
+                if(timeStart == AlertType.toTime(23, 59)) {
+                    timeStart++;
+                }
+                if(timeEnd == AlertType.toTime(23, 59)) {
+                    timeEnd++;
+                }
+                if(timeStart == AlertType.toTime(0, 0) && 
+                   timeEnd == AlertType.toTime(24, 0)) {
+                    allDay = true;
+                }
+                if (timeStart == timeEnd && (allDay==false)) {
+                    Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
+                    return;                    
+                }
+                boolean overrideSilentMode = checkboxAlertOverride.isChecked();
+                
+                String mp3_file = alertMp3File.getText().toString();
+                if (uuid != null) {
+                    AlertType.update_alert(uuid, alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode);
+                }  else {
+                    AlertType.add_alert(alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode);
+                }
+                Intent returnIntent = new Intent();
+                setResult(RESULT_OK,returnIntent);
+                finish();
+            }
+
+        });
+        
+        buttonRemove.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                
+
+                if (uuid == null) {
+                    Log.wtf(TAG, "Error remove pressed, while we were removing an alert");
+                }  else {
+                    AlertType.remove_alert(uuid);
+                }
+                Intent returnIntent = new Intent();
+                setResult(RESULT_OK,returnIntent);
+                finish();
+            }
+
+        });
+        
+        buttonalertMp3.setOnClickListener(new View.OnClickListener() {
+
+            public void onClick(View arg0) {
+            
+                // in onCreate or any event where your want the user to
+                // select a file
+                Intent intent = new Intent();
+                intent.setType("audio/mpeg3");
+                intent.setAction(Intent.ACTION_GET_CONTENT);
+                startActivityForResult(Intent.createChooser(intent,"Select Picture"), CHOOSE_FILE);
+            }
+       }); //- See more at: http://blog.kerul.net/2011/12/pick-file-using-intentactiongetcontent.html#sthash.c8xtIr1Y.dpuf
+        
+        checkboxAllDay.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+//          @Override
+            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {
+                enableAllDayControls();
+            }
+        });
+        
+        checkboxAlertOverride.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+//          @Override
+            public void onCheckedChanged(CompoundButton buttonView,boolean isChecked) {
+                enableVibrateControls();
+            }
+        });
+    }
+    
+    
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == RESULT_OK) {
+            if (requestCode == CHOOSE_FILE) {
+                Uri selectedImageUri = data.getData();
+    
+                // Todo this code is very flacky. Probably need a much better understanding of how the different programs
+                // select the file names. We might also have to 
+                // - See more at: http://blog.kerul.net/2011/12/pick-file-using-intentactiongetcontent.html#sthash.c8xtIr1Y.cx7s9nxH.dpuf
+        
+                //MEDIA GALLERY
+                String selectedImagePath = getPath(selectedImageUri);
+                if (selectedImagePath == null) {
+                    //OI FILE Manager
+                    selectedImagePath = selectedImageUri.getPath();
+                }
+                
+                //AlertPlayer.getPlayer().PlayFile(getApplicationContext(), selectedImagePath);
+                alertMp3File.setText(selectedImagePath);
+                
+                //just to display the imagepath
+                //Toast.makeText(this.getApplicationContext(), selectedImagePath, Toast.LENGTH_SHORT).show();//
+            }
+        }
+    }
+    
+    public String getPath(Uri uri) {
+        String[] projection = { MediaStore.Images.Media.DATA };
+        Cursor cursor = managedQuery(uri, projection, null, null, null);
+        if(cursor!=null)
+        {
+            //HERE YOU WILL GET A NULLPOINTER IF CURSOR IS NULL
+            //THIS CAN BE, IF YOU USED OI FILE MANAGER FOR PICKING THE MEDIA
+            int column_index;
+            try {
+                column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+            } catch ( IllegalArgumentException e) {
+                Log.e(TAG, "cursor.getColumnIndexOrThrow failed", e);
+                return null;
+            }
+            cursor.moveToFirst();
+            return cursor.getString(column_index);
+        }   else {
+            return null;
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java b/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
index b007039..2510abc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
@@ -13,8 +13,11 @@
 import android.widget.EditText;
 import android.widget.TimePicker;
 
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 
+import java.util.Date;
 
 public class FakeNumbers extends Activity {
     public Button button;
@@ -46,5 +49,24 @@ public void onClick(View v) {
             }
 
         });
+        
+        button = (Button)findViewById(R.id.StartTest);
+        button.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                ActiveBgAlert aba = ActiveBgAlert.getOnly();
+                ActiveBgAlert.ClearData();
+                ActiveBgAlert.Create("some string", true, new Date().getTime());
+                
+                
+            }
+        });
+        
+        button = (Button)findViewById(R.id.StartTestAlerts);
+        button.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                AlertType.testAll();
+                
+            }
+        });
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
new file mode 100644
index 0000000..ae9be9a
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
@@ -0,0 +1,135 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.util.Log;
+import android.provider.BaseColumns;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
+
+import java.text.DateFormat;
+import java.util.Date;
+
+/**
+ * Created by stephenblack on 1/14/15.
+ */
+@Table(name = "ActiveBgAlert", id = BaseColumns._ID)
+public class ActiveBgAlert extends Model {
+    
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    
+    @Column(name = "alert_uuid")
+    public String alert_uuid;
+
+    @Column(name = "is_snoozed") //??? Do we need this
+    public boolean is_snoozed;
+
+    @Column(name = "last_alerted_at") // Do we need this
+    public Long last_alerted_at;
+
+    @Column(name = "next_alert_at")
+    public Long next_alert_at;
+
+    public boolean ready_to_alarm() {
+        if(new Date().getTime() > next_alert_at) {
+            return true;
+        }
+        return false;
+    }
+
+    public void snooze(int minutes) {
+        next_alert_at = new Date().getTime() + minutes * 60000;
+        save();
+    }
+    
+    public String toString() {
+        
+        String alert_uuid = "alert_uuid: " + this.alert_uuid;
+        String is_snoozed = "is_snoozed: " + this.is_snoozed;
+        String last_alerted_at = "last_alerted_at: " + DateFormat.getDateTimeInstance(
+                DateFormat.LONG, DateFormat.LONG).format(new Date(this.last_alerted_at));
+        String next_alert_at = "next_alert_at: " + DateFormat.getDateTimeInstance(
+                DateFormat.LONG, DateFormat.LONG).format(new Date(this.next_alert_at)); 
+
+        return alert_uuid + " " + is_snoozed + " " + last_alerted_at + " "+ next_alert_at;
+        
+        
+    }
+    
+    // We should only have at most one active alert at any given time.
+    // This means that we will only have one of this objects at the database at any given time.
+    // so we have the following static functions: getOnly, saveData, ClearData
+
+    public static ActiveBgAlert getOnly() {
+        ActiveBgAlert aba = new Select()
+                .from(ActiveBgAlert.class)
+                .orderBy("_ID asc")
+                .executeSingle();
+        
+        if (aba != null) {
+            Log.v(TAG, "ActiveBgAlert getOnly aba = " + aba.toString());
+        } else {
+            Log.v(TAG, "ActiveBgAlert getOnly returning null");
+        }
+        
+        return aba;
+    }
+    
+    public static AlertType alertTypegetOnly() {
+        ActiveBgAlert aba = getOnly();
+        
+        if (aba == null) {
+            Log.v(TAG, "ActiveBgAlert: alertTypegetOnly returning null");
+            return null;
+        }
+        
+        AlertType alert = AlertType.get_alert(aba.alert_uuid);
+        if(alert == null) {
+            Log.e(TAG, "alertTypegetOnly did not find the active alert as part of existing alerts. returning null");
+            return null;
+        }
+        if(alert.uuid != aba.alert_uuid) {
+            Log.wtf(TAG, "AlertType.get_alert did not return the correct alert");
+        }
+        return alert;
+    }
+    
+    public static void Create(String alert_uuid, boolean is_snoozed, Long next_alert_at) {
+        Log.e(TAG, "ActiveBgAlert Create called");
+        ActiveBgAlert aba = getOnly();
+        if (aba == null) {
+            aba = new ActiveBgAlert();
+        }
+        aba.alert_uuid = alert_uuid;
+        aba.is_snoozed = is_snoozed;
+        aba.last_alerted_at = 0L;
+        aba.next_alert_at = next_alert_at;
+        aba.save();
+    }
+    
+    public static void ClearData() {
+        Log.e(TAG, "ActiveBgAlert ClearData called");
+        ActiveBgAlert aba = getOnly();
+        if (aba != null) {
+            aba.delete();
+        }
+    }
+    
+    public static void ClearIfSnoozeFinished() {
+        Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished called");
+        ActiveBgAlert aba = getOnly();
+        if (aba != null) {
+            if(new Date().getTime() > aba.next_alert_at) {
+                Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished deleting allert");
+                aba.delete();
+            }
+        }
+    }
+    
+    
+        
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
new file mode 100644
index 0000000..ee1b675
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
@@ -0,0 +1,403 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.R.bool;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.provider.BaseColumns;
+import android.util.Log;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.annotations.Expose;
+import com.google.gson.internal.bind.DateTypeAdapter;
+
+import java.text.DateFormat;
+import java.util.Date;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * Created by stephenblack on 1/14/15.
+ */
+@Table(name = "AlertType", id = BaseColumns._ID)
+public class AlertType extends Model {
+
+    @Column(name = "name")
+    public String name;
+
+    @Column(name = "active") 
+    public boolean active;
+
+    @Column(name = "volume")
+    public int volume;
+
+    @Column(name = "vibrate")
+    public boolean vibrate;
+
+    @Column(name = "light")
+    public boolean light;
+
+    @Column(name = "override_silent_mode")
+    public boolean override_silent_mode;
+
+    @Column(name = "predictive")
+    public boolean predictive;
+
+    @Column(name = "time_until_threshold_crossed")
+    public double time_until_threshold_crossed;
+
+    // If it is not above, then it must be below. 
+    @Column(name = "above")
+    public boolean above;
+
+    @Column(name = "threshold")
+    public double threshold;
+
+    @Column(name = "all_day")
+    public boolean all_day;
+
+    @Column(name = "start_time_minutes")
+    public int start_time_minutes;  // This have probable be in minutes from start of day. this is not time...
+
+    @Column(name = "end_time_minutes")
+    public int end_time_minutes;
+
+    @Column(name = "minutes_between") //??? what is the difference between minutes_between and default_snooze ???
+    public int minutes_between;
+
+    @Column(name = "default_snooze")
+    public int default_snooze;
+
+    @Column(name = "text") // ??? what's that? is it different from name?
+    public String text;
+    
+    @Column(name = "mp3_file")
+    public String mp3_file;
+    
+    @Column(name = "uuid", index = true)
+    public String uuid;
+
+    private final static String TAG = Notifications.class.getSimpleName();
+    
+    public static AlertType get_alert(String uuid) {
+
+        return new Select()
+        .from(AlertType.class)
+        .where("uuid = ? ", uuid)
+        .executeSingle();
+    }
+    
+    // bg_minute is the estimatin of the bg change rate
+    public static AlertType get_highest_active_alert(double bg, double bg_minute) {
+        // Chcek the low alerts
+        
+        List<AlertType> lowAlerts  = new Select()
+            .from(AlertType.class)
+            .where("threshold >= ?", bg)
+            .where("above = ?", false)
+            .orderBy("threshold asc")
+            .execute();
+
+        for (AlertType lowAlert : lowAlerts) {
+            if(lowAlert.should_alarm(bg)) {
+                return lowAlert;
+            }
+        }
+            
+        // If no low alert found, check higher alert.
+        List<AlertType> HighAlerts  = new Select()
+            .from(AlertType.class)
+            .where("threshold <= ?", bg)
+            .where("above = ?", true)
+            .orderBy("threshold asc")
+            .execute();
+
+        for (AlertType HighAlert : HighAlerts) {
+            //Log.e(TAG, "Testing high alert " + HighAlert.toString());
+            if(HighAlert.should_alarm(bg)) {
+                return HighAlert;
+            }
+        }
+        // no alert found 
+        return null;
+    }
+    
+    // returns true, if one allert is up and the second is down
+    public static boolean OpositeDirection(AlertType a1, AlertType a2) {
+        if (a1.above != a2.above) {
+            return true;
+        }
+        return false;
+    }
+    
+    // Checks if a1 is more important than a2. returns the higher one
+    public static AlertType HigherAlert(AlertType a1, AlertType a2) {
+        if (a1.above && !a2.above) {
+            return a2;
+        }
+        if (!a1.above && a2.above) {
+            return a1;
+        }
+        if (a1.above && a2.above) {
+            // both are high, the higher the better
+            if (a1.threshold > a2.threshold) {
+                return a1;
+            } else {
+                return a2;
+            }
+        }
+        if (a1.above || a2.above) {
+            Log.wtf(TAG, "a1.above and a2.above must be false");
+        }
+        // both are low, the lower the better
+        if (a1.threshold < a2.threshold) {
+            return a1;
+        } else {
+            return a2;
+        }
+    }
+    
+    public static void remove_all() {
+        List<AlertType> Alerts  = new Select()
+        .from(AlertType.class)
+        .execute();
+
+        for (AlertType alert : Alerts) {
+            alert.delete();
+        }
+    }
+    
+    public static void add_alert(
+            String name, 
+            boolean above,
+            double threshold, 
+            boolean all_day, 
+            int minutes_between, 
+            String mp3_file,
+            int start_time_minutes,
+            int end_time_minutes,
+            boolean override_silent_mode) {
+        AlertType at = new AlertType();
+        at.name = name;
+        at.above = above;
+        at.threshold = threshold;
+        at.all_day = all_day;
+        at.minutes_between = minutes_between;
+        at.uuid = UUID.randomUUID().toString();
+        at.active = true;
+        at.mp3_file = mp3_file;
+        at.start_time_minutes = start_time_minutes;
+        at.end_time_minutes = end_time_minutes;
+        at.override_silent_mode = override_silent_mode;
+        at.save();
+    }
+    
+    public static void update_alert(
+            String uuid, 
+            String name, 
+            boolean above, 
+            double threshold, 
+            boolean all_day, 
+            int minutes_between, 
+            String mp3_file,
+            int start_time_minutes,
+            int end_time_minutes,
+            boolean override_silent_mode) {
+        AlertType at = get_alert(uuid);
+        at.name = name;
+        at.above = above;
+        at.threshold = threshold;
+        at.all_day = all_day;
+        at.minutes_between = minutes_between;
+        at.uuid = uuid;
+        at.active = true;
+        at.mp3_file = mp3_file;
+        at.start_time_minutes = start_time_minutes;
+        at.end_time_minutes = end_time_minutes;
+        at.override_silent_mode = override_silent_mode;
+        at.save();
+    }
+    public static void remove_alert(String uuid) {
+        AlertType alert = get_alert(uuid);
+        alert.delete();
+    }
+    
+    public String toString() {
+        
+        String name = "name: " + this.name;
+        String above = "above: " + this.above;
+        String threshold = "threshold: " + this.threshold;
+        String all_day = "all_day: " + this.all_day;
+        String minutes_between = "minutes_between: " + this.minutes_between; 
+        String uuid = "uuid: " + this.uuid; 
+
+        return name + " " + above + " " + threshold + " "+ all_day + " " + minutes_between + " uuid" + uuid;
+    }
+ 
+    public static void print_all() {
+        List<AlertType> Alerts  = new Select()
+            .from(AlertType.class)
+            .execute();
+
+        Log.e(TAG,"List of all alerts");
+        for (AlertType alert : Alerts) {
+            Log.e(TAG, alert.toString());
+        }
+    }
+    
+    public static List<AlertType> getAll(boolean above) {
+        List<AlertType> alerts  = new Select()
+            .from(AlertType.class)
+            .where("above = ?", above)
+            .execute();
+
+        return alerts;
+    }
+    
+    
+    // This function is a replacment for the UI. It will make sure that there are exactly two alerts
+    // based on what the user has set as high and low. Will be replaced by a UI.
+    public static void CreateStaticAlerts(Context context) {
+        // If there are two alerts already, we are done...
+        List<AlertType> Alerts  = new Select()
+            .from(AlertType.class)
+            .execute();
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        Double highValue = Double.parseDouble(prefs.getString("highValue", "170"));
+        Double lowValue = Double.parseDouble(prefs.getString("lowValue", "70"));
+        if (Alerts.size() == 2) {
+            if(Alerts.get(0).threshold == highValue && Alerts.get(0).above == true &&
+                    Alerts.get(1).threshold == lowValue && Alerts.get(1).above == false) {
+                Log.e(TAG, "CreateStaticAlerts we have our alerts ok...");
+                return;
+            }
+            if(Alerts.get(1).threshold == highValue && Alerts.get(1).above == true &&
+                    Alerts.get(0).threshold == lowValue && Alerts.get(0).above == false) {
+                Log.e(TAG, "CreateStaticAlerts we have our alerts ok...");
+                return;
+            }
+            
+        }
+        //Log.e(TAG, "CreateStaticAlerts re-creating all our alerts again");
+        //remove_all();
+        //add_alert("high alert", true, highValue, true, 1, null, 0, 0);
+        //add_alert("low alert", false, lowValue, true, 1, null, 0, 0);
+        //print_all();
+    }
+    
+   
+    public static void testAll() {
+        
+        remove_all();
+        add_alert("high alert 1", true, 180, true, 10, null, 0, 0, true);
+        add_alert("high alert 2", true, 200, true, 10, null, 0, 0, true);
+        add_alert("high alert 3", true, 220, true, 10, null, 0, 0, true);
+        print_all();
+        AlertType a1 = get_highest_active_alert(190, 0);
+        Log.e(TAG, "a1 = " + a1.toString());
+        AlertType a2 = get_highest_active_alert(210, 0);
+        Log.e(TAG, "a2 = " + a2.toString());        
+
+        
+        AlertType a3 = get_alert(a1.uuid);
+        Log.e(TAG, "a1 == a3 ? need to see true " + (a1==a3) + a1 + " " + a3);
+        
+        add_alert("low alert 1", false, 80, true, 10, null, 0, 0, true);
+        add_alert("low alert 2", false, 60, true, 10, null, 0, 0, true);
+        
+        AlertType al1 = get_highest_active_alert(90, 0);
+        Log.e(TAG, "al1 should be null  " + al1);
+        al1 = get_highest_active_alert(80, 0);
+        Log.e(TAG, "al1 = " + al1.toString());
+        AlertType al2 = get_highest_active_alert(50, 0);
+        Log.e(TAG, "al2 = " + al2.toString());
+
+        Log.e(TAG, "HigherAlert(a1, a2) = a1?" +  (HigherAlert(a1,a2) == a2));
+        Log.e(TAG, "HigherAlert(al1, al2) = al1?" +  (HigherAlert(al1,al2) == al2));
+        Log.e(TAG, "HigherAlert(a1, al1) = al1?" +  (HigherAlert(a1,al1) == al1));
+        Log.e(TAG, "HigherAlert(al1, a2) = al1?" +  (HigherAlert(al1,a2) == al1));
+        
+        // Make sure we do not influance on real data...
+        remove_all();
+        
+    }
+ 
+ 
+    private boolean in_time_frame() {
+        int time_now = 0; //TODO: Get the actual time of day as a double this WILL NOT WORK without that
+        if (all_day) {
+            //Log.e(TAG, "in_time_frame returning true " );
+            return true; 
+        }
+
+        if(start_time_minutes < end_time_minutes) {
+            if (time_now > start_time_minutes && time_now < end_time_minutes) {
+                return true;
+            }
+        } else {
+            if (time_now < start_time_minutes || time_now > end_time_minutes) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean beyond_threshold(double bg) {
+        if (above && bg >= threshold) {
+//            Log.e(TAG, "beyond_threshold returning true " );
+            return true;
+        } else if (!above && bg <= threshold) {
+            return true;
+        }
+        return false;
+    }
+
+    private boolean trending_to_threshold(double bg) {
+        if (!predictive) { return false; }
+        if (above && bg >= threshold) {
+            return true;
+        } else if (!above && bg <= threshold) {
+            return true;
+        }
+        return false;
+    }
+
+    public boolean should_alarm(double bg) {
+//        Log.e(TAG, "should_alarm called active =  " + active );
+        if(in_time_frame() && active && (beyond_threshold(bg) || trending_to_threshold(bg))) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+    
+    // Time is calculated in minutes. that is 01:20 means 80 minutes.
+    
+    // This functions are a bit tricky. We can only set time from 00:00 to 23:59 which leaves one minute out. this is because we ignore the
+    // seconds. so if the user has set 23:59 we will consider this as 24:00
+    // This will be done at the code that reads the time from the ui.
+    
+    
+    
+    // return the minutes part of the time
+    public static int time2Minutes(int minutes) {
+        return (minutes - 60*time2Hours(minutes)) ;
+    }
+    
+ // return the hours part of the time
+    public static int time2Hours(int minutes) {
+        return minutes / 60;
+    }
+    
+    // create the time from hours and minutes. 
+    public static int toTime(int hours, int minutes) {
+        return hours * 60 + minutes;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index 386103a..02a23c0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -212,7 +212,7 @@ public static BgReading create(double raw_data, Context context, Long timestamp)
 
                 bgReading.save();
                 bgReading.perform_calculations();
-                Notifications.notificationSetter(context);
+                Notifications.getInstance(context).notificationSetter(context);
                 BgSendQueue.addToQueue(bgReading, "create", context);
             }
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index dba7923..e075c8e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -229,7 +229,7 @@ public static void initialCalibration(double bg1, double bg2, Context context) {
         }
         adjustRecentBgReadings(5);
         CalibrationRequest.createOffset(lowerCalibration.bg, 35);
-        Notifications.notificationSetter(context);
+        Notifications.getInstance(context).notificationSetter(context);
     }
 
     //Create Calibration Checkin
@@ -301,7 +301,7 @@ public static void create(CalRecord[] calRecords, Context context, boolean overr
                     Calibration.create(calRecords, context, true);
                 }
             }
-            Notifications.notificationSetter(context);
+            Notifications.getInstance(context).notificationSetter(context);
         }
     }
 
@@ -368,7 +368,7 @@ public static Calibration create(double bg, Context context) {
                 calculate_w_l_s();
                 adjustRecentBgReadings();
                 CalibrationSendQueue.addToQueue(calibration, context);
-                Notifications.notificationSetter(context);
+                Notifications.getInstance(context).notificationSetter(context);
                 Calibration.requestCalibrationIfRangeTooNarrow();
             }
         } else {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index 335ac4a..3d0aa0b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -5,6 +5,7 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
@@ -62,8 +63,9 @@
                 options.add("Scan for BT");
             }
         }
+        options.add("Snooze and alarm");
         options.add("Settings");
-//        options.add("Fake Numbers");
+        options.add("Fake Numbers");
 //        options.add("Add Double Calibration");
         return options;
     }
@@ -106,8 +108,9 @@
                 options.add(new Intent(context, BluetoothScan.class));
             }
         }
+        options.add(new Intent(context, SnoozeActivity.class));
         options.add(new Intent(context, SettingsActivity.class));
-//        options.add(new Intent(context, FakeNumbers.class));
+        options.add(new Intent(context, FakeNumbers.class));
 //        options.add(new Intent(context, DoubleCalibrationActivity.class));
         return options;
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
new file mode 100644
index 0000000..cc924e6
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
@@ -0,0 +1,241 @@
+package com.eveningoutpost.dexdrip;
+
+import java.text.DateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import android.util.Log;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemLongClickListener;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.SimpleAdapter;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+ 
+
+public class SnoozeActivity extends Activity {
+    ListView listViewLow;
+    ListView listViewHigh;
+    TextView alertStatus;
+    Button buttonSnooze;
+    Button createLowAlert;
+    Button createHighAlert;
+    
+    EditText snoozeValue;
+    final int MAX_SNOOZE = 600;
+    final int ADD_ALERT = 1;
+    final int EDIT_ALERT = 2;
+    
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    
+    String stringTimeFromAlert(AlertType alert) {
+        if(alert.all_day) {
+            return "all day";
+        }
+        String result = "" + AlertType.time2Hours(alert.start_time_minutes)+":"+ String.format("%02d", AlertType.time2Minutes(alert.start_time_minutes));
+        result += " - " + AlertType.time2Hours(alert.end_time_minutes)+":"+ String.format("%02d",AlertType.time2Minutes(alert.end_time_minutes))+ " ";
+        return result;
+    }
+    
+    HashMap<String, String> createAlertMap(AlertType alert) {
+        HashMap<String, String> map = new HashMap<String, String>();
+        // We only have place to display the file and not it's location
+        String fileName = alert.mp3_file;
+        if (fileName != null) {
+            int pos = fileName.lastIndexOf("/");
+            if (pos != -1) {
+                fileName = fileName.substring(pos+1);
+            }
+        }
+        String overrideSilentMode = "Will play even on silent/vibrate mode"; 
+        if(alert.override_silent_mode == false) {
+            overrideSilentMode = "Warning - no alert on silent/vibrate mode!!!";
+        }
+        
+        map.put("alertName", alert.name);
+        map.put("alertThreshold", String.valueOf((int)alert.threshold));
+        map.put("alertTime", stringTimeFromAlert(alert));
+        map.put("alertMp3File", fileName);
+        map.put("alertOverrideSilenceMode", overrideSilentMode);
+        map.put("uuid", alert.uuid);
+        
+        return map;
+    }
+    
+    ArrayList<HashMap<String, String>> createAlertsMap(boolean above) {
+        ArrayList<HashMap<String, String>> feedList= new ArrayList<HashMap<String, String>>();
+
+        List<AlertType> alerts = AlertType.getAll(above);
+        for (AlertType alert : alerts) {
+            Log.e(TAG, alert.toString());
+            feedList.add(createAlertMap(alert));
+        }
+        return feedList;
+    }
+    
+    
+    class AlertsOnItemLongClickListener implements OnItemLongClickListener {
+//      @Override
+      public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+        
+           
+           ListView lv = (ListView)parent;
+           @SuppressWarnings("unchecked")
+           HashMap<String, String> item = (HashMap<String, String>)lv.getItemAtPosition(position);
+           Log.e(TAG, "Item clicked " + lv.getItemAtPosition(position) + item.get("uuid"));
+           
+           //The XML for each item in the list (should you use a custom XML) must have android:longClickable="true" 
+           // as well (or you can use the convenience method lv.setLongClickable(true);). This way you can have a list 
+           // with only some items responding to longclick. (might be used for non removable alerts)
+           
+           Intent myIntent = new Intent(SnoozeActivity.this, EditAlertActivity.class);
+           myIntent.putExtra("uuid", item.get("uuid")); //Optional parameters
+           SnoozeActivity.this.startActivityForResult(myIntent, EDIT_ALERT);
+           
+           
+           return true;
+       
+      }
+    }
+    
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_snooze);
+        listViewLow = (ListView) findViewById(R.id.listView_low);
+        listViewHigh = (ListView) findViewById(R.id.listView_high);
+        alertStatus = (TextView) findViewById(R.id.alert_status);
+        snoozeValue = (EditText) findViewById(R.id.snooze);
+        
+        addListenerOnButton();
+        displayStatus();
+        FillLists();
+
+        listViewLow.setOnItemLongClickListener(new AlertsOnItemLongClickListener());
+        listViewHigh.setOnItemLongClickListener(new AlertsOnItemLongClickListener());
+    }
+    
+
+    public void addListenerOnButton() {
+
+        buttonSnooze = (Button)findViewById(R.id.button_snooze);
+        createLowAlert = (Button)findViewById(R.id.button_create_low);
+        createHighAlert = (Button)findViewById(R.id.button_create_high);
+
+        buttonSnooze.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                int intValue = 0;
+                try {
+                    intValue = Integer.parseInt(snoozeValue.getText().toString());
+                } catch (NumberFormatException nfe) {
+                    Log.e(TAG, "addListenerOnButton cought exception", nfe);
+                    intValue = Integer.MAX_VALUE;
+                }
+                if(intValue > MAX_SNOOZE) {
+                    Toast.makeText(getApplicationContext(), "Alert must be smaller than " + MAX_SNOOZE + " minutes",Toast.LENGTH_LONG).show();
+                    return;
+                } else {
+                    AlertPlayer.getPlayer().Snooze(getApplicationContext(), intValue);
+                    Intent intent = new Intent(getApplicationContext(), Home.class);
+                    startActivity(intent);
+                    finish();
+                }
+            }
+
+        });
+        
+        
+        createLowAlert.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                Intent myIntent = new Intent(SnoozeActivity.this, EditAlertActivity.class);
+                myIntent.putExtra("above", "false");
+                SnoozeActivity.this.startActivityForResult(myIntent, ADD_ALERT);
+            }
+
+        });
+        
+        createHighAlert.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                Intent myIntent = new Intent(SnoozeActivity.this, EditAlertActivity.class);
+                myIntent.putExtra("above", "true");
+                SnoozeActivity.this.startActivityForResult(myIntent, ADD_ALERT);
+            }
+        });
+        
+    }
+
+    
+    void displayStatus() {
+        ActiveBgAlert aba = ActiveBgAlert.getOnly();
+        AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
+        
+        // aba and activeBgAlert should both either exist ot not exist. all other casses are a bug in another place
+        if(aba == null && activeBgAlert!= null) {
+            Log.wtf(TAG, "ERRRO displayStatus: aba == null, but activeBgAlert != null exiting...");
+            return;
+        }
+        if(aba != null && activeBgAlert== null) {
+            Log.wtf(TAG, "ERRRO displayStatus: aba != null, but activeBgAlert == null exiting...");
+            return;
+        }
+        String status;
+        if(activeBgAlert == null ) {
+            status = "No active alert exists";
+            alertStatus.setText(status);
+            buttonSnooze.setVisibility(View.GONE);
+            snoozeValue.setVisibility(View.GONE);
+        } else {
+            
+            if (aba.next_alert_at > new Date().getTime()) {
+                status = "Active alert exists named \"" + activeBgAlert.name + "\" Alert snoozed until " + 
+                    DateFormat.getTimeInstance(DateFormat.MEDIUM).format(new Date(aba.next_alert_at)) + 
+                    " (" + (aba.next_alert_at - new Date().getTime()) / 60000 + " minutes left)";
+            } else {
+                status = "Active alert exists named \"" + activeBgAlert.name + "\" (not snoozed)";
+            }
+            alertStatus.setText(status);
+        }
+        
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        Log.e(TAG, "onActivityResult called ");
+        if (requestCode == ADD_ALERT || requestCode == EDIT_ALERT) {
+            if(resultCode == RESULT_OK) {
+                Log.e(TAG, "onActivityResult called invalidating...");
+                FillLists();
+            }
+            if (resultCode == RESULT_CANCELED) {
+                //Write your code if there's no result
+            }
+        }
+    }
+    
+    
+    void FillLists() {
+        ArrayList<HashMap<String, String>> feedList;
+        feedList = createAlertsMap(false);
+        SimpleAdapter simpleAdapter = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        listViewLow.setAdapter(simpleAdapter);
+        
+        feedList = createAlertsMap(true);
+        SimpleAdapter simpleAdapterHigh = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        listViewHigh.setAdapter(simpleAdapterHigh);
+        
+        
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index cbeda84..1ba1945 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -10,9 +10,8 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
-
 import java.util.Date;
-
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 
 public class StopSensor extends Activity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
     private String menu_name = "Stop Sensor";
@@ -54,6 +53,7 @@ public void onClick(View v) {
                 sensor.stopped_at = new Date().getTime();
                 Log.w("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
                 sensor.save();
+                AlertPlayer.getPlayer().stopAlert(true, false);
 
                 Toast.makeText(getApplicationContext(), "Sensor stopped", Toast.LENGTH_LONG).show();
                 Intent intent = new Intent(getApplicationContext(), Home.class);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
new file mode 100644
index 0000000..79c5cc0
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
@@ -0,0 +1,130 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import java.util.Date;
+
+import android.content.Context;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.R;
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+
+public class AlertPlayer {
+
+    static AlertPlayer singletone;
+    
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    private MediaPlayer mediaPlayer;
+    int volumeBeforeAlert;
+    Context context;
+    
+    
+    public static AlertPlayer getPlayer() {
+        if(singletone == null) {
+            Log.e(TAG,"getPlayer: Creating a new AlertPlayer");
+            singletone = new AlertPlayer();
+        } else {
+            Log.e("tag","getPlayer: Using existing AlertPlayer");
+        }
+        return singletone;
+    }
+
+    public synchronized  void startAlert(Context ctx, AlertType newAlert )  {
+      Log.e(TAG, "start called, Threadid " + Thread.currentThread().getId());
+      stopAlert(true, false);
+      ActiveBgAlert.Create(newAlert.uuid, false, new Date().getTime() + newAlert.minutes_between * 60000 );
+      
+      PlayFile(ctx, newAlert.mp3_file);
+
+    }
+
+    public synchronized void stopAlert(boolean ClearData, boolean clearIfSnoozeFinished) {
+        Log.e(TAG, "stopAlert: stop called ClearData" + ClearData + "  ThreadID " + Thread.currentThread().getId());
+        if (ClearData) {
+            ActiveBgAlert.ClearData();
+        }
+        if(clearIfSnoozeFinished) {
+            ActiveBgAlert.ClearIfSnoozeFinished();
+        }
+        if (mediaPlayer != null) {
+            mediaPlayer.stop();
+            mediaPlayer.release();
+            mediaPlayer = null;
+        }
+    }
+    
+    public synchronized  void Snooze(Context ctx, int repeatTime) {
+        Log.e(TAG, "Snooze called repeatTime = "+ repeatTime);
+        stopAlert(false, false);
+        ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
+        if (activeBgAlert  == null) {
+            Log.e(TAG, "Error, snooze was called but no alert is active. how can that be ??? !!! ");
+        }
+        activeBgAlert.snooze(repeatTime);
+    }
+    
+ // Check the state and alrarm if needed
+    public void ClockTick(Context ctx)
+    {
+        ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
+        if (activeBgAlert  == null) {
+            // Nothing to do ...
+            return;
+        }
+        if(activeBgAlert.ready_to_alarm()) {
+            stopAlert(false, false);
+            AlertType alert = AlertType.get_alert(activeBgAlert.alert_uuid);
+            if (alert == null) {
+                Log.w(TAG, "ClockTick: The alert was already deleted... will not play");
+                ActiveBgAlert.ClearData();
+                return;
+            }
+            Log.e(TAG,"ClockTick: Playing the alert again"); 
+            PlayFile(ctx, alert.mp3_file);
+        }
+        
+    }
+
+    private void PlayFile(Context ctx, String FileName) {
+        if(mediaPlayer != null) {
+            Log.e(TAG, "ERROR, PlayFile:going to leak a mediaplayer !!!");
+        }
+        if(FileName != null) {
+            mediaPlayer = MediaPlayer.create(ctx, Uri.parse(FileName), null);
+        }
+        if(mediaPlayer == null) {
+            Log.w(TAG, "PlayFile: Creating mediaplayer with file " + FileName + " failed. using default alarm");
+            mediaPlayer = MediaPlayer.create(ctx, R.raw.default_alert);
+        }
+        if(mediaPlayer != null) {
+            
+            AudioManager manager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);
+            int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+            volumeBeforeAlert = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
+            manager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
+            context = ctx;
+
+            mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+                @Override
+                public void onCompletion(MediaPlayer mp) {
+                    AudioManager manager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+                    int currentVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
+                    int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+                    if(maxVolume == currentVolume) {
+                        // If the user has changed the volume, don't change it again.
+                        manager.setStreamVolume(AudioManager.STREAM_MUSIC, volumeBeforeAlert, 0);
+                    }
+                }
+            });
+            
+            mediaPlayer.start();
+        } else {
+            // TODO, what should we do here???
+            Log.wtf(TAG,"PlayFile: Starting an alert failed, what should we do !!!");
+        }
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index f471600..1218efc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -1,5 +1,6 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import android.app.AlarmManager;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
@@ -9,12 +10,16 @@
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.net.Uri;
+import android.os.SystemClock;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
+import android.util.Log;
 
 import com.eveningoutpost.dexdrip.AddCalibration;
 import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
 import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.CalibrationRequest;
@@ -29,6 +34,8 @@
 /**
  * Created by stephenblack on 11/28/14.
  */
+
+
 public class Notifications {
     public static final long[] vibratePattern = {0,1000,300,1000,300,1000};
     public static boolean bg_notifications;
@@ -45,18 +52,33 @@
     public static boolean calibration_sound;
     public static int calibration_snooze;
     public static String calibration_notification_sound;
+    private final static String TAG = AlertPlayer.class.getSimpleName();
 
-    public static Context mContext;
-    public static int currentVolume;
-    public static AudioManager manager;
+    Context mContext;
+    int currentVolume;
+    AudioManager manager;
 
-    public static final int BgNotificationId = 001;
-    public static final int calibrationNotificationId = 002;
-    public static final int doubleCalibrationNotificationId = 003;
-    public static final int extraCalibrationNotificationId = 004;
+    final int BgNotificationId = 001;
+    final int calibrationNotificationId = 002;
+    final int doubleCalibrationNotificationId = 003;
+    final int extraCalibrationNotificationId = 004;
     public static final int exportCompleteNotificationId = 005;
+    final static int callbackPeriod = 60000;
 
-    public static void setNotificationSettings(Context context) {
+    private static Notifications instance = null;
+    protected Notifications() {
+       // Exists only to defeat instantiation.
+    }
+    public static Notifications getInstance(Context context) {
+       if(instance == null) {
+          instance = new Notifications();
+          instance.ArmTimer(context, callbackPeriod);
+       }
+       return instance;
+    }
+    
+    
+    private void ReadPerfs(Context context) {
         mContext = context;
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         bg_notifications = prefs.getBoolean("bg_notifications", true);
@@ -75,8 +97,98 @@ public static void setNotificationSettings(Context context) {
         calibration_notification_sound = prefs.getString("calibration_notification_sound", "content://settings/system/notification_sound");
     }
 
-    public static void notificationSetter(Context context) {
-        setNotificationSettings(context);
+/*
+ * *************************************************************************************************************
+ * Function for new notifications    
+ */
+    
+     
+    public void FileBasedNotifications(Context context) {
+        ReadPerfs(context);
+        // Make sure we have our alerts set...
+        AlertType.CreateStaticAlerts(context);
+        
+        BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(context);
+        Sensor sensor = Sensor.currentSensor();
+        
+        List<BgReading> bgReadings = BgReading.latest(1);
+        if(bgReadings == null || bgReadings.size() == 0) {
+            // Sensor is stopped, or there is not enough data
+            AlertPlayer.getPlayer().stopAlert(true, false);
+            return;
+        }
+           
+        BgReading bgReading = bgReadings.get(0);
+        
+        Log.e(TAG, "FileBasedNotifications called bgReading.calculated_value = " + bgReading.calculated_value);
+        // TODO: tzachi what is the time of this last bgReading 
+        // TODO: tzachi, what happens if the last reading does not have a sensor, or that sensor was stopped.
+        // What if the sensor was started, but the 2 hours did not still pass? or there is no calibrations.
+        if (bg_notifications && sensor != null && bgReading != null) {
+            AlertType newAlert = AlertType.get_highest_active_alert(bgGraphBuilder.unitized(bgReading.calculated_value), 0);
+            if (newAlert == null) {
+                Log.e(TAG, "FileBasedNotifications - No active notifcation exists, stopping all alerts");
+                // No alert should work, Stop all alerts, but keep the snoozing...
+                AlertPlayer.getPlayer().stopAlert(false, true);
+                return;
+            }
+            
+            AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
+            if(activeBgAlert == null) {
+                Log.e(TAG, "FileBasedNotifications we have a new alert, starting to play it...");
+                // We need to create a new alert  and start playing
+                AlertPlayer.getPlayer().startAlert(context, newAlert);
+                return;
+            }
+            
+            
+            if (activeBgAlert.uuid.equals(newAlert.uuid)) {
+                // This is the same alert. Might need to play again...
+                Log.e(TAG, "FileBasedNotifications we have found an active alert, checking if we need to play it");
+                AlertPlayer.getPlayer().ClockTick(context);
+                return;
+            }
+            // Tzachi: todo, if this alerts have the same importance we should only do a ClockTick ???????????????????????
+            
+            // we have a new alert. If it is more important than the previous one. we need to stop
+            // the older one and start a new one (We need to play even if we were snoozed).
+            // If it is a lower level alert, we should keep being snoozed.
+            
+            
+            // Example, if we have two alerts one for 90 and the other for 80. and we were already alerting for the 80
+            // and we were snoozed. Now bg is 85, the alert for 80 is cleared, but we are alerting for 90.
+            // We should not do anything if we are snoozed for the 80...
+            // If one allert was high and the second one is low however, we alarm in any case (snoozing ignored).
+            boolean opositeDirection = AlertType.OpositeDirection(activeBgAlert, newAlert);
+            AlertType  newHigherAlert = AlertType.HigherAlert(activeBgAlert, newAlert);
+            if ((newHigherAlert == activeBgAlert) && (!opositeDirection)) {
+                // the existing alert is the higher, we should not do anything
+                Log.e(TAG, "FileBasedNotifications The existing alert has the same importance, doing nothing");
+                AlertPlayer.getPlayer().ClockTick(context);
+                return;
+            }
+            
+            // For now, we are stopping the old alert and starting a new one.
+            Log.e(TAG, "Found a new allert, that is higher than the previous one will play it.");
+            AlertPlayer.getPlayer().stopAlert(true, false);
+            AlertPlayer.getPlayer().startAlert(context, newAlert);
+            return;
+            
+        } else {
+            AlertPlayer.getPlayer().stopAlert(true, false);
+        }
+        
+    }
+/*
+ * *****************************************************************************************************************
+ */
+    
+    // only function that is realy called from outside...
+    public void notificationSetter(Context context) {
+        ReadPerfs(context);
+        
+        FileBasedNotifications(context);
+        
         BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(context);
         double high = bgGraphBuilder.highMark;
         double low = bgGraphBuilder.lowMark;
@@ -88,7 +200,7 @@ public static void notificationSetter(Context context) {
 
         if (bg_notifications && sensor != null) {
             if (bgGraphBuilder.unitized(bgReading.calculated_value) >= high || bgGraphBuilder.unitized(bgReading.calculated_value) <= low) {
-                bgAlert(bgReading.displayValue(mContext), bgReading.slopeArrow());
+                bgAlert(bgReading.displayValue(mContext), BgReading.slopeArrow());
             } else {
                 clearBgAlert();
             }
@@ -117,8 +229,37 @@ public static void notificationSetter(Context context) {
             clearAllCalibrationNotifications();
         }
     }
+    
+    public void periodicTimer(Context context) {
+        // This is the timer function that will be called every minute. It is used in order to replay alerts,
+        // execute snoozes and alert if we are not recieving data for a long time.
+        Log.e(TAG, "PeriodicTimer called");
+        ArmTimer(context, callbackPeriod);
+    }
+    
+    private void  ArmTimer(Context context, int time) {
+        Log.e(TAG, "ArmTimer called");
+        Intent intent = new Intent();
+        intent.setAction("com.eveningoutpost.dexdrip.UtilityModels.Notifications");
+
+        AlarmManager alarmMgr = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
+        PendingIntent alarmIntent = PendingIntent.getBroadcast(context, 0, intent, 0);
+
+        alarmMgr.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,
+                SystemClock.elapsedRealtime() +
+                        time , alarmIntent);
+    }
+    
+    // TODO: Need to understand when we are calling this...
+    private void ClearTimer(Context context) {
+        Intent intent = new Intent();
+        intent.setAction("com.eveningoutpost.dexdrip.UtilityModels.Notifications");
+        PendingIntent.getBroadcast(context, 0, intent, 
+                PendingIntent.FLAG_UPDATE_CURRENT).cancel();
+    }
+
 
-    public static void soundAlert(String soundUri) {
+    private void soundAlert(String soundUri) {
         manager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
         int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
         currentVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
@@ -135,61 +276,63 @@ public void onCompletion(MediaPlayer mp) {
         player.start();
     }
 
-    public static void clearAllBgNotifications() {
+    private void clearAllBgNotifications() {
         notificationDismiss(BgNotificationId);
     }
-    public static void clearAllCalibrationNotifications() {
+
+    private void clearAllCalibrationNotifications() {
         notificationDismiss(calibrationNotificationId);
         notificationDismiss(extraCalibrationNotificationId);
         notificationDismiss(doubleCalibrationNotificationId);
     }
 
-
-    public static void bgNotificationCreate(String title, String content, Intent intent, int notificationId) {
+    private void bgNotificationCreate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
         if (bg_vibrate) { mBuilder.setVibrate(vibratePattern);}
         if (bg_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
         if (bg_sound && !bg_sound_in_silent) { mBuilder.setSound(Uri.parse(bg_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
         if (bg_sound && bg_sound_in_silent) { soundAlert(bg_notification_sound);}
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static void calibrationNotificationCreate(String title, String content, Intent intent, int notificationId) {
+    private void calibrationNotificationCreate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
         if (calibration_vibrate) { mBuilder.setVibrate(vibratePattern);}
         if (calibration_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
         if (calibration_sound) { mBuilder.setSound(Uri.parse(calibration_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static void notificationUpdate(String title, String content, Intent intent, int notificationId) {
+    private void notificationUpdate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static NotificationCompat.Builder notificationBuilder(String title, String content, Intent intent) {
+    private NotificationCompat.Builder notificationBuilder(String title, String content, Intent intent) {
         return new NotificationCompat.Builder(mContext)
                 .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
                 .setContentTitle(title)
                 .setContentText(content)
                 .setContentIntent(notificationIntent(intent));
     }
-    public static PendingIntent notificationIntent(Intent intent){
+    
+    private PendingIntent notificationIntent(Intent intent){
         return PendingIntent.getActivity(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
 
     }
 
-    public static void notificationDismiss(int notificationId) {
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+    private void notificationDismiss(int notificationId) {
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
     }
 
-    public static void bgAlert(String value, String slopeArrow) {
+    
+    private void bgAlert(String value, String slopeArrow) {
         UserNotification userNotification = UserNotification.lastBgAlert();
 
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * bg_snooze)))) {
@@ -208,7 +351,7 @@ public static void bgAlert(String value, String slopeArrow) {
         }
     }
 
-    public static void calibrationRequest() {
+    private void calibrationRequest() {
         UserNotification userNotification = UserNotification.lastCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -219,7 +362,8 @@ public static void calibrationRequest() {
             calibrationNotificationCreate(title, content, intent, calibrationNotificationId);
         }
     }
-    public static void doubleCalibrationRequest() {
+    
+    private void doubleCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastDoubleCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -231,7 +375,7 @@ public static void doubleCalibrationRequest() {
         }
     }
 
-    public static void extraCalibrationRequest() {
+    private void extraCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastExtraCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -243,7 +387,7 @@ public static void extraCalibrationRequest() {
         }
     }
 
-    public static void clearCalibrationRequest() {
+    private void clearCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -251,7 +395,7 @@ public static void clearCalibrationRequest() {
         }
     }
 
-    public static void clearDoubleCalibrationRequest() {
+    private void clearDoubleCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastDoubleCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -259,7 +403,7 @@ public static void clearDoubleCalibrationRequest() {
         }
     }
 
-    public static void clearExtraCalibrationRequest() {
+    private void clearExtraCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastExtraCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -267,7 +411,7 @@ public static void clearExtraCalibrationRequest() {
         }
     }
 
-    public static void clearBgAlert() {
+    private void clearBgAlert() {
         UserNotification userNotification = UserNotification.lastBgAlert();
         if (userNotification != null) {
             userNotification.delete();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java
new file mode 100644
index 0000000..a04f95c
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java
@@ -0,0 +1,25 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+
+
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
+public class NotificationsReceiver extends BroadcastReceiver {
+
+    private final static String TAG = Notifications.class.getSimpleName();
+    
+    @Override
+    public void onReceive(Context context, Intent intent) {
+
+        Log.e(TAG, "New onRecieve called Threadid " + Thread.currentThread().getId());
+
+        Notifications notifications = Notifications.getInstance(context);
+        notifications.periodicTimer(context);
+        Notifications.getInstance(context).FileBasedNotifications(context);
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/res/layout/activity_edit_alert.xml b/app/src/main/res/layout/activity_edit_alert.xml
new file mode 100644
index 0000000..500ed55
--- /dev/null
+++ b/app/src/main/res/layout/activity_edit_alert.xml
@@ -0,0 +1,226 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.eveningoutpost.dexdrip.FakeNumbers">
+
+    <TextView  
+        android:id="@+id/view_alert_header"
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" 
+        android:gravity="left"
+        android:text="replace dyanmicly (edit_alert_header)"
+        android:textSize="24dp"
+        />
+
+    <LinearLayout
+    android:id="@+id/linear_layout_alert"
+    android:orientation="vertical"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:layout_below="@+id/view_alert_header">
+    >
+        <LinearLayout
+	    android:orientation="horizontal"
+	    android:layout_width="wrap_content"
+	    android:layout_height="wrap_content"
+	    >
+	        <TextView  
+		        android:id="@+id/view_alert_text"
+		        android:layout_width="wrap_content" 
+		        android:layout_height="wrap_content" 
+		        android:gravity="left"
+		        android:text="Enter name for alert:"
+		        android:textSize="24dp"
+		        />
+	        
+		    <EditText
+		        android:id="@+id/edit_alert_text"
+		        android:layout_width="wrap_content"
+		        android:layout_height="wrap_content"
+		        android:inputType="text"
+		        android:ems="10"
+		        android:autoText="false"
+		        android:text=""
+		        android:singleLine="true"
+		        android:textAlignment="center"
+		        android:textSize="24dp"
+		        android:layout_alignParentStart="true" />
+	    </LinearLayout>
+		    
+		<LinearLayout
+        android:orientation="horizontal"
+         android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        >    
+            <TextView  
+                android:id="@+id/view_alert_threshold"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="Enter threshold for alert:"
+                android:textSize="24dp"
+                />
+		     
+		    <EditText
+		        android:layout_width="wrap_content"
+		        android:layout_height="wrap_content"
+		        android:inputType="number"
+		        android:ems="10"
+		        android:id="@+id/edit_alert_threshold"
+		        android:autoText="false"
+		        android:text=""
+		        android:singleLine="true"
+		        android:textAlignment="center"
+		        android:textSize="24dp"
+		        android:layout_alignParentStart="true" />
+		</LinearLayout>
+	    
+		<LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        >    
+
+		<TextView  
+                android:id="@+id/view_alert_mp3_file"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="Enter file to play:"
+                android:textSize="24dp"
+                />		 
+	    <EditText
+	        android:id="@+id/edit_alert_mp3_file"
+	        android:layout_width="wrap_content"
+	        android:layout_height="wrap_content"
+	        android:inputType="text"
+	        android:ems="10"
+	        android:autoText="false"
+	        android:text=""
+	        android:singleLine="true"
+	        android:textAlignment="center"
+	        android:textSize="24dp"
+	        android:layout_alignParentStart="true" />
+	    
+	    <Button
+			android:id="@+id/Button_alert_mp3_file"
+			android:layout_width="wrap_content"
+			android:layout_height="wrap_content"
+			android:text="Choose file" />
+	    
+	    </LinearLayout>
+	    
+		<LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+
+		    <TextView  
+                android:id="@+id/view_alert_time"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="Select time for alert:"
+                android:textSize="24dp"
+                />
+            
+            <CheckBox
+                android:id="@+id/check_alert_time"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content" 
+                android:text="all day"
+                android:textSize="24dp"/>
+        </LinearLayout>
+
+		<LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+		
+            <TextView  
+                android:id="@+id/view_alert_time_start"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="start time:" 
+                android:textSize="24dp"
+                />
+            
+            <TimePicker
+                android:id="@+id/timePicker_alert_start"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:timePickerMode="spinner"/>
+
+            <TextView  
+                android:id="@+id/view_alert_time_end"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="end time:"
+                android:textSize="24dp"
+                />
+            
+            <TimePicker
+            android:id="@+id/timePicker_alert_end"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:timePickerMode="spinner"/>
+            
+            
+        </LinearLayout>
+		
+		<LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content">
+
+            <TextView  
+                android:id="@+id/view_alert_override_silent"
+                android:layout_width="wrap_content" 
+                android:layout_height="wrap_content" 
+                android:gravity="left"
+                android:text="alert will override silent/vibrate mode"
+                android:textSize="24dp"
+                />
+            
+            <CheckBox
+                android:id="@+id/check_override_silent"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content" 
+                android:text=""
+                android:textSize="24dp"/>
+            
+        </LinearLayout>
+	    
+    </LinearLayout>
+
+    <LinearLayout
+	    android:id="@+id/linear_layout_buttons"
+	    android:orientation="horizontal"
+	    android:layout_width="wrap_content"
+	    android:layout_height="wrap_content"
+	    android:layout_below="@+id/linear_layout_alert">
+	    
+    
+	    <Button
+	        android:id="@+id/edit_alert_save"
+	        android:layout_width="wrap_content"
+	        android:layout_height="wrap_content"
+	        android:text="save alert"
+	       />
+	
+        <Button
+            android:id="@+id/edit_alert_remove"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="remove alert"
+            />
+    </LinearLayout>
+    
+   
+
+</RelativeLayout>
diff --git a/app/src/main/res/layout/activity_fake_numbers.xml b/app/src/main/res/layout/activity_fake_numbers.xml
index 5c1987f..521acd5 100644
--- a/app/src/main/res/layout/activity_fake_numbers.xml
+++ b/app/src/main/res/layout/activity_fake_numbers.xml
@@ -43,5 +43,19 @@
         android:id="@+id/timePicker"
         android:layout_centerVertical="true"
         android:layout_alignParentStart="true" />
+    
+        <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="StartTest"
+        android:id="@+id/StartTest"
+         android:layout_below="@+id/timePicker"/>
+        
+         <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="StartTestAlerts"
+        android:id="@+id/StartTestAlerts"
+         android:layout_below="@+id/StartTest"/>
 
 </RelativeLayout>
diff --git a/app/src/main/res/layout/activity_snooze.xml b/app/src/main/res/layout/activity_snooze.xml
new file mode 100644
index 0000000..3396e46
--- /dev/null
+++ b/app/src/main/res/layout/activity_snooze.xml
@@ -0,0 +1,91 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical" >
+ 
+    <TextView  
+        android:id="@+id/alert_status"
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" 
+        android:gravity="left"
+        android:text="replace dyanmicly (alert status)"
+        android:textSize="24dp"
+        />
+    
+    <EditText
+        android:id="@+id/snooze"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:inputType="number"
+        android:ems="10"
+        android:autoText="false"
+        android:text="120"
+        android:singleLine="true"
+        android:textAlignment="center"
+        android:textSize="24dp"
+        android:layout_below="@+id/alert_status" 
+        android:hint="@string/snooze_hint"
+        android:layout_alignParentStart="true" />
+
+    <Button
+        android:id="@+id/button_snooze"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/snooze"
+        android:layout_alignParentBottom="false"
+        android:layout_below="@+id/snooze" 
+        android:layout_centerHorizontal="true" />
+    
+    <Button
+        android:id="@+id/button_create_low"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Create low alert"
+        android:layout_alignParentBottom="false"
+        android:layout_below="@+id/button_snooze" 
+        android:layout_centerHorizontal="true" />
+    
+     <TextView  
+        android:id="@+id/low_alerts"
+        android:layout_below="@+id/button_create_low" 
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" 
+        android:gravity="left"
+        android:text="Low alerts"
+        android:textSize="24dp"
+        />
+    <ListView
+        android:id="@+id/listView_low"
+        android:layout_below="@+id/low_alerts" 
+        android:layout_width="wrap_content"
+        android:layout_height="100dp" >
+    </ListView>
+
+    <Button
+        android:id="@+id/button_create_high"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Create high alert"
+        android:layout_alignParentBottom="false"
+        android:layout_below="@+id/listView_low" 
+        android:layout_centerHorizontal="true" />
+    
+    <TextView
+        android:id="@+id/high_alerts"
+        android:layout_below="@+id/button_create_high"   
+        android:layout_width="fill_parent" 
+        android:layout_height="wrap_content" 
+        android:gravity="left"
+        android:text="high alerts"
+        android:textSize="24dp"
+        
+        />
+    <ListView
+        android:id="@+id/listView_high"
+        android:layout_below="@+id/high_alerts" 
+        android:layout_width="wrap_content"
+        android:layout_height="100dp" >
+    </ListView>
+    
+    
+</RelativeLayout>
diff --git a/app/src/main/res/layout/row_alerts.xml b/app/src/main/res/layout/row_alerts.xml
new file mode 100644
index 0000000..19ec5b4
--- /dev/null
+++ b/app/src/main/res/layout/row_alerts.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="horizontal" >
+ 
+    <TextView
+        android:id="@+id/alertName"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="TextView"
+        android:layout_weight="1"
+          android:gravity="center" 
+        android:textAppearance="?android:attr/textAppearanceMedium"  />
+ 
+ 
+     <TextView
+        android:id="@+id/alertThreshold"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="TextView"
+        android:layout_weight="1"
+        android:gravity="center" 
+        android:textAppearance="?android:attr/textAppearanceMedium" />
+
+     <TextView
+        android:id="@+id/alertTime"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="TextView"
+        android:layout_weight="1"
+        android:gravity="center" 
+        android:textAppearance="?android:attr/textAppearanceMedium"   />
+
+      <TextView
+        android:id="@+id/alertMp3File"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="TextView"
+        android:gravity="center" 
+        android:layout_weight="1"
+        android:textAppearance="?android:attr/textAppearanceMedium"  />
+      
+      <TextView
+        android:id="@+id/alertOverrideSilent"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:text="TextView"
+        android:gravity="center" 
+        android:layout_weight="1"
+        android:textAppearance="?android:attr/textAppearanceMedium"  />
+ 
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/raw/default_alert.mp3 b/app/src/main/res/raw/default_alert.mp3
new file mode 100644
index 0000000..0db04b3
Binary files /dev/null and b/app/src/main/res/raw/default_alert.mp3 differ
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 2ee0933..71435f2 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -35,6 +35,8 @@
     <string name="action_example">Example action</string>
     <string name="title_activity_calibration_check_in">CalibrationCheckInActivity</string>
     <string name="title_activity_usb_connected">UsbConnectedActivity</string>
+    <string name="snooze">Snooze</string>
+    <string name="snooze_hint">Snooze alert for x minutes</string>
 
     <string-array name="menu_options">
         <item>Dex Drip</item>
@@ -50,6 +52,8 @@
     <string name="title_activity_main">MainActivity</string>
     <string name="title_activity_calibration_data_table">CalibrationDataTable</string>
     <string name="title_activity_fake_numbers">FakeNumbers</string>
+    <string name="title_activity_edit_alert">EditAlert</string>
+    <string name="title_snooze">Snooze</string>
     <string name="title_activity_double_calibration">DoubleCalibrationActivity</string>
     <string name="title_activity_calibration_override">CalibrationOverride</string>
     <string name="title_activity_calibration_graph">CalibrationGraph</string>

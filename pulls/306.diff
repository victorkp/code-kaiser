diff --git a/Ubuntu_Assemble.md b/Ubuntu_Assemble.md
new file mode 100644
index 0000000..3018185
--- /dev/null
+++ b/Ubuntu_Assemble.md
@@ -0,0 +1,35 @@
+Quick steps to build on Ubuntu 15.10:
+
+$ sudo apt-get install gradle git lib32z1 lib32stdc++6
+
+$ mkdir ~/scratch; cd ~/scratch
+
+$ git clone https://github.com/hackingtype1/xDrip-Experimental.git
+
+$ wget http://dl.google.com/android/android-sdk_r24.4.1-linux.tgz
+
+$ tar zxvf android-sdk_r24.4.1-linux.tgz
+
+$ export ANDROID_HOME=~/scratch/android-sdk-linux
+
+$ cd $ANDROID_HOME
+
+$ tools/android list sdk --all
+
+$ tools/android update sdk --all -u -t 10,29 #  Android SDK Build-tools, revision 22.0.1, SDK Platform Android 6.0, API 23, revision 2
+
+$ tools/android update sdk --all -u -t 161,162 # Google Repository, Google Play services
+
+$ tools/android update sdk --all -u -t 155 # Android Support Library, revision 23.2.1
+
+$ tools/android update sdk --all -u -t 154 # Local Maven repository for Support Libraries, revision 28
+
+$ cd ~/scratch/xDrip-Experimental/
+
+$ gradle assemble
+
+Copy ~/scratch/xDrip-Experimental/app/build/outputs/apk/app-xdrip-debug.apk to your device and install.
+
+$ gradle build # integration tests etc
+
+$ gradle clean # clean all
diff --git a/app/build.gradle b/app/build.gradle
index 57b35c2..62b335e 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -78,7 +78,6 @@ def generateVersionName = { ->
 android {
     compileSdkVersion 23
     buildToolsVersion "22.0.1"
-
     defaultConfig {
         applicationId "com.eveningoutpost.dexdrip"
         minSdkVersion 17
@@ -136,7 +135,6 @@ dependencies {
     compile 'net.tribe7.seeds:seeds-primitives:16.0.1'
     compile 'org.slf4j:slf4j-api:1.7.7'
     /* end relevant android-uploader dependencies */
-
     compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
         transitive = true;
     }
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 0d12004..69566c5 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -182,6 +182,12 @@
             android:exported="true" >
         </service>
 
+        <service
+            android:name=".Services.G5CollectionService"
+            android:enabled="true"
+            android:exported="true" >
+        </service>
+
         <activity
             android:name=".ShareTest"
             android:label="@string/title_activity_share_test" >
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
index 825ab51..788de03 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
@@ -111,7 +111,7 @@ public Line getCalibrationsLine(List<Calibration> calibrations, int color) {
         line.setHasLines(false);
         line.setPointRadius(4);
         line.setHasPoints(true);
-        line.setHasLabels(true);
+        //line.setHasLabels(true);
         return line;
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeRxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeRxMessage.java
new file mode 100644
index 0000000..243affc
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeRxMessage.java
@@ -0,0 +1,22 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteOrder;
+import java.util.Arrays;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class AuthChallengeRxMessage extends TransmitterMessage {
+    int opcode = 0x3;
+    public byte[] tokenHash;
+    public byte[] challenge;
+
+    public AuthChallengeRxMessage(byte[] data) {
+        if (data.length >= 17) {
+            if (data[0] == opcode) {
+                tokenHash = Arrays.copyOfRange(data, 1, 9);
+                challenge = Arrays.copyOfRange(data, 9, 17);
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeTxMessage.java
new file mode 100644
index 0000000..5fa527f
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthChallengeTxMessage.java
@@ -0,0 +1,23 @@
+package com.eveningoutpost.dexdrip.G5Model;
+import com.eveningoutpost.dexdrip.G5Model.TransmitterMessage;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class AuthChallengeTxMessage extends TransmitterMessage {
+    byte opcode = 0x4;
+    byte[] challengeHash;
+
+    public AuthChallengeTxMessage(byte[] challenge) {
+        challengeHash = challenge;
+
+        data = ByteBuffer.allocate(9);
+        data.put(opcode);
+        data.put(challengeHash);
+
+        byteSequence = data.array();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthRequestTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthRequestTxMessage.java
new file mode 100644
index 0000000..ba20ae4
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthRequestTxMessage.java
@@ -0,0 +1,46 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.G5Model.TransmitterMessage;
+
+import java.io.UnsupportedEncodingException;
+import java.math.BigInteger;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+import java.util.UUID;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class AuthRequestTxMessage extends TransmitterMessage {
+    byte opcode = 0x1;
+    public byte[] singleUseToken;
+    byte endByte = 0x2;
+
+    public AuthRequestTxMessage() {
+        // Create the singleUseToken from a 16 byte array.
+        byte[] uuidBytes = new byte[]{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+        UUID uuid = UUID.nameUUIDFromBytes(uuidBytes);
+
+        try {
+            uuidBytes = uuid.toString().getBytes("UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+
+        ByteBuffer bb = ByteBuffer.allocate(8);
+        bb.put(uuidBytes, 0, 8);
+        singleUseToken = bb.array();
+
+        // Create the byteSequence.
+        data = ByteBuffer.allocate(10);
+        data.put(opcode);
+        data.put(singleUseToken);
+        data.put(endByte);
+
+        byteSequence = data.array();
+    }
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthStatusRxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthStatusRxMessage.java
new file mode 100644
index 0000000..50d9f76
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/AuthStatusRxMessage.java
@@ -0,0 +1,26 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.util.Arrays;
+import java.util.Collections;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class AuthStatusRxMessage extends TransmitterMessage {
+    int opcode = 0x5;
+    public int authenticated;
+    public int bonded;
+
+    public AuthStatusRxMessage(byte[] packet) {
+        if (packet.length >= 3) {
+            if (packet[0] == opcode) {
+                data = ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN);
+
+                authenticated = data.get(1);
+                bonded = data.get(2);
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java
new file mode 100644
index 0000000..72dabc6
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java
@@ -0,0 +1,33 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.util.UUID;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class BluetoothServices {
+
+    //Transmitter Service UUIDs
+    public static final String DeviceInfo = "180A";
+    //iOS uses FEBC?
+    public static final String Advertisement = "0000FEBC-0000-1000-8000-00805F9B34FB";
+    public static final String CGMService = "F8083532-849E-531C-C594-30F1F86A4EA5";
+    public static final String ServiceB = "F8084532-849E-531C-C594-30F1F86A4EA5";
+
+    //DeviceInfoCharacteristicUUID, Read, DexcomUN
+    public static final String ManufacturerNameString = "2A29";
+
+    //CGMServiceCharacteristicUUID
+    public static final String Communication = "F8083533-849E-531C-C594-30F1F86A4EA5";
+    public static final UUID Control = UUID.fromString("F8083534-849E-531C-C594-30F1F86A4EA5");
+    public static final String Authentication = "F8083535-849E-531C-C594-30F1F86A4EA5";
+    public static final String ProbablyBackfill = "F8083536-849E-531C-C594-30F1F86A4EA5";
+
+    //ServiceBCharacteristicUUID
+    public static final String CharacteristicE = "F8084533-849E-531C-C594-30F1F86A4EA5";
+    public static final String CharacteristicF = "F8084534-849E-531C-C594-30F1F86A4EA5";
+
+    //CharacteristicDescriptorUUID
+    public static final UUID CharacteristicUpdateNotification = UUID.fromString("00002902-0000-1000-8000-00805F9B34FB");
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BondRequestTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BondRequestTxMessage.java
new file mode 100644
index 0000000..c28948b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BondRequestTxMessage.java
@@ -0,0 +1,19 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class BondRequestTxMessage extends TransmitterMessage {
+    byte opcode = 0x7;
+
+    public BondRequestTxMessage() {
+        data = ByteBuffer.allocate(1);
+        data.put(opcode);
+
+        byteSequence = data.array();
+    }
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/CRC.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/CRC.java
new file mode 100644
index 0000000..f3f0742
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/CRC.java
@@ -0,0 +1,19 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+/**
+ * Created by jcostik1 on 3/24/16.
+ */
+public class CRC {
+
+    public static byte[] calculate(byte b) {
+        int crcShort = 0;
+        crcShort = ((crcShort >>> 8) | (crcShort << 8)) & 0xffff;
+        crcShort ^= (b & 0xff);
+        crcShort ^= ((crcShort & 0xff) >> 4);
+        crcShort ^= (crcShort << 12) & 0xffff;
+        crcShort ^= ((crcShort & 0xFF) << 5) & 0xffff;
+        crcShort &= 0xffff;
+        return new byte[] {(byte) (crcShort & 0xff), (byte) ((crcShort >> 8) & 0xff)};
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/DisconnectTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/DisconnectTxMessage.java
new file mode 100644
index 0000000..04512f1
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/DisconnectTxMessage.java
@@ -0,0 +1,18 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class DisconnectTxMessage extends TransmitterMessage {
+    byte opcode = 0x09;
+
+    public DisconnectTxMessage() {
+        data = ByteBuffer.allocate(1);
+        data.put(opcode);
+
+        byteSequence = data.array();
+    }
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Extensions.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Extensions.java
new file mode 100644
index 0000000..73860cd
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Extensions.java
@@ -0,0 +1,38 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+/**
+ * Created by joeginley on 3/19/16.
+ */
+public class Extensions {
+
+    public static String bytesToHex(byte[] in) {
+        final StringBuilder builder = new StringBuilder();
+        for(byte b : in) {
+            builder.append(String.format("%02x", b));
+        }
+        return builder.toString();
+    }
+
+    public static byte[] hexToBytes(String s) {
+        int len = s.length();
+        byte[] data = new byte[len / 2];
+        for (int i = 0; i < len; i += 2) {
+            data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4)
+                    + Character.digit(s.charAt(i+1), 16));
+        }
+        return data;
+    }
+
+    public static String lastTwoCharactersOfString(String s) {
+        return s.substring(s.length() - 2);
+    }
+
+    public static void doSleep(long time) {
+        try {
+            Thread.sleep(time);
+        } catch (InterruptedException e) {
+            e.printStackTrace();
+        }
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/KeepAliveTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/KeepAliveTxMessage.java
new file mode 100644
index 0000000..74ddbcf
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/KeepAliveTxMessage.java
@@ -0,0 +1,20 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class KeepAliveTxMessage extends TransmitterMessage {
+    int opcode = 0x6;
+    int time;
+
+    public KeepAliveTxMessage(int time) {
+        this.time = time;
+
+        data = ByteBuffer.allocate(2);
+        data.put(new byte[]{ (byte)opcode, (byte)this.time });
+        byteSequence = data.order(ByteOrder.LITTLE_ENDIAN).array();
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorRxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorRxMessage.java
new file mode 100644
index 0000000..e63b188
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorRxMessage.java
@@ -0,0 +1,29 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by jcostik1 on 3/26/16.
+ */
+public class SensorRxMessage extends TransmitterMessage {
+    byte opcode = 0x2f;
+    public TransmitterStatus status;
+    public int timestamp;
+    public int unfiltered;
+    public int filtered;
+
+    public SensorRxMessage(byte[] packet) {
+        if (packet.length >= 14) {
+            if (packet[0] == opcode) {
+                data = ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN);
+
+                status = TransmitterStatus.getBatteryLevel(data.get(1));
+                timestamp = data.getInt(2);
+
+                unfiltered = data.getInt(6);
+                filtered = data.getInt(10);
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorTxMessage.java
new file mode 100644
index 0000000..583ac7b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/SensorTxMessage.java
@@ -0,0 +1,19 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by jcostik1 on 3/26/16.
+ */
+public class SensorTxMessage extends TransmitterMessage {
+    byte opcode = 0x2e;
+    byte[] crc = CRC.calculate(opcode);
+
+    public SensorTxMessage() {
+        data = ByteBuffer.allocate(3);
+        data.put(opcode);
+        data.put(crc);
+        byteSequence = data.array();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Transmitter.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Transmitter.java
new file mode 100644
index 0000000..f7b47c1
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/Transmitter.java
@@ -0,0 +1,16 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+/**
+ * Created by joeginley on 3/19/16.
+ */
+public class Transmitter {
+    public String transmitterId = "";
+
+    public Transmitter(String id) {
+        transmitterId = id;
+    }
+
+    public void authenticate() {
+
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterMessage.java
new file mode 100644
index 0000000..4827199
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterMessage.java
@@ -0,0 +1,16 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public abstract class TransmitterMessage {
+    public byte[] byteSequence = null;
+    public ByteBuffer data = null;
+
+    public void setData() {
+        byte[] newData;
+
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterStatus.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterStatus.java
new file mode 100644
index 0000000..0272d86
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterStatus.java
@@ -0,0 +1,25 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+/**
+ * Created by joeginley on 3/28/16.
+ */
+public enum TransmitterStatus {
+    UNKNOWN, BRICKED, LOW, OK;
+
+    public static TransmitterStatus getBatteryLevel(int b) {
+        if (b > 0x81) {
+            return BRICKED;
+        }
+        else {
+            if (b == 0x81) {
+                return LOW;
+            }
+            else if (b == 0x00) {
+                return OK;
+            }
+            else {
+                return UNKNOWN;
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeRxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeRxMessage.java
new file mode 100644
index 0000000..b56c767
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeRxMessage.java
@@ -0,0 +1,26 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+
+/**
+ * Created by joeginley on 3/28/16.
+ */
+public class TransmitterTimeRxMessage extends TransmitterMessage {
+    byte opcode = 0x25;
+    public TransmitterStatus status;
+    public int currentTime;
+    public int sessionStartTime;
+
+    public TransmitterTimeRxMessage(byte[] packet) {
+        if (packet.length >= 10) {
+            if (packet[0] == opcode) {
+                data = ByteBuffer.wrap(packet).order(ByteOrder.LITTLE_ENDIAN);
+
+                status = TransmitterStatus.getBatteryLevel(data.get(1));
+                currentTime = data.getInt(2);
+                sessionStartTime = data.getInt(6);
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeTxMessage.java
new file mode 100644
index 0000000..674723f
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/TransmitterTimeTxMessage.java
@@ -0,0 +1,18 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+
+/**
+ * Created by joeginley on 3/28/16.
+ */
+public class TransmitterTimeTxMessage extends TransmitterMessage {
+    byte opcode = 0x24;
+    byte[] crc = CRC.calculate(opcode);
+
+    public TransmitterTimeTxMessage() {
+        data = ByteBuffer.allocate(3);
+        data.put(opcode);
+        data.put(crc);
+        byteSequence = data.array();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/UnbondRequestTxMessage.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/UnbondRequestTxMessage.java
new file mode 100644
index 0000000..e7470a8
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/UnbondRequestTxMessage.java
@@ -0,0 +1,17 @@
+package com.eveningoutpost.dexdrip.G5Model;
+
+import java.nio.ByteBuffer;
+
+/**
+ * Created by joeginley on 3/16/16.
+ */
+public class UnbondRequestTxMessage extends TransmitterMessage {
+    byte opcode = 0x6;
+
+    public UnbondRequestTxMessage() {
+        data = ByteBuffer.allocate(1);
+        data.put(opcode);
+
+        byteSequence = data.array();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 68e59ca..8b78d95 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -52,11 +52,13 @@
 import com.nispok.snackbar.listeners.ActionClickListener;
 
 import java.io.File;
+
 import java.text.DecimalFormat;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
 
+
 import lecho.lib.hellocharts.gesture.ZoomType;
 import lecho.lib.hellocharts.listener.ViewportChangeListener;
 import lecho.lib.hellocharts.model.Viewport;
@@ -75,6 +77,7 @@
     private Viewport tempViewport = new Viewport();
     private Viewport holdViewport = new Viewport();
     private boolean isBTShare;
+    private boolean isG5Share;
     private BroadcastReceiver _broadcastReceiver;
     private BroadcastReceiver newDataReceiver;
     private LineChartView            chart;
@@ -252,11 +255,12 @@ private void updateCurrentBgInfo() {
         setupCharts();
         final TextView notificationText = (TextView) findViewById(R.id.notices);
         notificationText.setText("");
-        notificationText.setTextColor(Color.RED);
+        notificationText.setTextColor(Color.parseColor("#FF0000"));
         boolean isBTWixel = CollectionServiceStarter.isBTWixel(getApplicationContext());
         boolean isDexbridgeWixel = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
         boolean isWifiBluetoothWixel = CollectionServiceStarter.isWifiandBTWixel(getApplicationContext());
         isBTShare = CollectionServiceStarter.isBTShare(getApplicationContext());
+        isG5Share = CollectionServiceStarter.isBTG5(getApplicationContext());
         boolean isWifiWixel = CollectionServiceStarter.isWifiWixel(getApplicationContext());
         alreadyDisplayedBgInfoCommon = false; // reset flag
         
@@ -271,16 +275,20 @@ private void updateCurrentBgInfo() {
         } else if (isWifiWixel || isWifiBluetoothWixel) {
             updateCurrentBgInfoForWifiWixel(notificationText);
         }
+        if (isG5Share) {
+            updateCurrentBgInfoCommon(notificationText);
+        }
+
         if (mPreferences.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
-            notificationText.append("\n ALL ALERTS CURRENTLY DISABLED");
+            notificationText.append("\n ALL ALERTS DISABLED");
         } else if (mPreferences.getLong("low_alerts_disabled_until", 0) > new Date().getTime()
 			&&
 			mPreferences.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
-            notificationText.append("\nLOW AND HIGH ALERTS CURRENTLY DISABLED");
+            notificationText.append("\nLOW AND HIGH ALERTS DISABLED");
         } else if (mPreferences.getLong("low_alerts_disabled_until", 0) > new Date().getTime()) {
-            notificationText.append("\nLOW ALERTS CURRENTLY DISABLED");
+            notificationText.append("\nLOW ALERTS DISABLED");
         } else if (mPreferences.getLong("high_alerts_disabled_until", 0) > new Date().getTime()) {
-            notificationText.append("\nHIGH ALERTS CURRENTLY DISABLED");
+            notificationText.append("\nHIGH ALERTS DISABLED");
         }
         if(mPreferences.getBoolean("extra_status_line", false)) {
             extraStatusLineText.setText(extraStatusLine(mPreferences));
@@ -338,7 +346,7 @@ private void updateCurrentBgInfoCommon(TextView notificationText) {
         final long now = System.currentTimeMillis();
         if (Sensor.currentSensor().started_at + 60000 * 60 * 2 >= now) {
             double waitTime = (Sensor.currentSensor().started_at + 60000 * 60 * 2 - now) / 60000.0;
-            notificationText.setText("Please wait while sensor warms up! (" + String.format("%.2f", waitTime) + " minutes)");
+            notificationText.setText("Sensor Warmup (" + String.format("%.0f", waitTime) + " minutes remaining)");
             return;
         }
 
@@ -414,7 +422,7 @@ private void displayCurrentInfo() {
             } else {
                 dexbridgeBattery.setText("xBridge Battery: " + bridgeBattery + "%");
             }
-            dexbridgeBattery.setTextColor(Color.GREEN);
+            dexbridgeBattery.setTextColor(Color.parseColor("#00FF00"));
             if (bridgeBattery < 50 && bridgeBattery >30) dexbridgeBattery.setTextColor(Color.YELLOW);
             if (bridgeBattery <= 30) dexbridgeBattery.setTextColor(Color.RED);
             dexbridgeBattery.setVisibility(View.VISIBLE);
@@ -447,7 +455,7 @@ public static String extraStatusLine(SharedPreferences prefs) {
             extraline.append(String.format("%.2f",lastCalibration.slope));
             extraline.append(' ');
             extraline.append("inter = ");
-            extraline.append(String.format("%.2f",lastCalibration.intercept));
+            extraline.append(String.format("%.2f", lastCalibration.intercept));
         }
 
         if(prefs.getBoolean("status_line_calibration_short", false) && lastCalibration != null) {
@@ -456,7 +464,7 @@ public static String extraStatusLine(SharedPreferences prefs) {
             extraline.append(String.format("%.2f",lastCalibration.slope));
             extraline.append(' ');
             extraline.append("i:");
-            extraline.append(String.format("%.2f",lastCalibration.intercept));
+            extraline.append(String.format("%.2f", lastCalibration.intercept));
         }
 
         if(prefs.getBoolean("status_line_avg", false)
@@ -551,9 +559,9 @@ private void displayCurrentInfoFromReading(BgReading lastBgReading, boolean pred
                     bgGraphBuilder.unitizedDeltaString(true, true));
         }
         if(bgGraphBuilder.unitized(estimate) <= bgGraphBuilder.lowMark) {
-            currentBgValueText.setTextColor(Color.parseColor("#C30909"));
+            currentBgValueText.setTextColor(Color.parseColor("#FF0000"));
         } else if (bgGraphBuilder.unitized(estimate) >= bgGraphBuilder.highMark) {
-            currentBgValueText.setTextColor(Color.parseColor("#FFBB33"));
+            currentBgValueText.setTextColor(Color.parseColor("#FFFF00"));
         } else {
             currentBgValueText.setTextColor(Color.WHITE);
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
new file mode 100644
index 0000000..4cd0f7f
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
@@ -0,0 +1,547 @@
+package com.eveningoutpost.dexdrip.Services;
+
+/**
+ * Created by jcostik1 on 3/15/16.
+ */
+
+import android.annotation.SuppressLint;
+import android.annotation.TargetApi;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.bluetooth.BluetoothAdapter;
+import android.bluetooth.BluetoothDevice;
+import android.bluetooth.BluetoothGatt;
+import android.bluetooth.BluetoothGattCallback;
+import android.bluetooth.BluetoothGattCharacteristic;
+import android.bluetooth.BluetoothGattDescriptor;
+import android.bluetooth.BluetoothGattService;
+import android.bluetooth.BluetoothManager;
+import android.bluetooth.BluetoothProfile;
+import android.bluetooth.le.BluetoothLeScanner;
+import android.bluetooth.le.ScanCallback;
+import android.bluetooth.le.ScanFilter;
+import android.bluetooth.le.ScanResult;
+import android.bluetooth.le.ScanSettings;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.Handler;
+import android.os.IBinder;
+import android.os.ParcelUuid;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
+
+import com.eveningoutpost.dexdrip.G5Model.AuthChallengeRxMessage;
+import com.eveningoutpost.dexdrip.G5Model.AuthChallengeTxMessage;
+
+import com.eveningoutpost.dexdrip.G5Model.AuthRequestTxMessage;
+import com.eveningoutpost.dexdrip.G5Model.AuthStatusRxMessage;
+import com.eveningoutpost.dexdrip.G5Model.BluetoothServices;
+import com.eveningoutpost.dexdrip.G5Model.BondRequestTxMessage;
+import com.eveningoutpost.dexdrip.G5Model.DisconnectTxMessage;
+import com.eveningoutpost.dexdrip.G5Model.Extensions;
+import com.eveningoutpost.dexdrip.G5Model.KeepAliveTxMessage;
+import com.eveningoutpost.dexdrip.G5Model.SensorRxMessage;
+import com.eveningoutpost.dexdrip.G5Model.SensorTxMessage;
+import com.eveningoutpost.dexdrip.G5Model.TransmitterStatus;
+import com.eveningoutpost.dexdrip.G5Model.TransmitterTimeRxMessage;
+import com.eveningoutpost.dexdrip.G5Model.TransmitterTimeTxMessage;
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.Models.Sensor;
+import com.eveningoutpost.dexdrip.Models.TransmitterData;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import com.eveningoutpost.dexdrip.G5Model.Transmitter;
+
+import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
+import com.eveningoutpost.dexdrip.utils.BgToSpeech;
+
+import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
+import java.nio.ByteOrder;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.UUID;
+
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.NoSuchPaddingException;
+import javax.crypto.spec.SecretKeySpec;
+
+@TargetApi(Build.VERSION_CODES.LOLLIPOP)
+public class G5CollectionService extends Service {
+
+    protected static final UUID CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");
+
+
+    private final static String TAG = G5CollectionService.class.getSimpleName();
+    private ForegroundServiceStarter foregroundServiceStarter;
+
+    public Service service;
+    private BgToSpeech bgToSpeech;
+    private PendingIntent pendingIntent;
+    private final static int REQUEST_ENABLE_BT = 1;
+
+    private android.bluetooth.BluetoothManager mBluetoothManager;
+    private BluetoothAdapter mBluetoothAdapter;
+    private BluetoothLeScanner mLEScanner;
+    private BluetoothGatt mGatt;
+    private Transmitter defaultTransmitter;
+    public AuthStatusRxMessage authStatus = null;
+    public AuthRequestTxMessage authRequest = null;
+
+    private BluetoothGattService cgmService;// = gatt.getService(UUID.fromString(BluetoothServices.CGMService));
+    private BluetoothGattCharacteristic authCharacteristic;// = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Authentication));
+    private BluetoothGattCharacteristic controlCharacteristic;//
+    private BluetoothGattCharacteristic commCharacteristic;//
+
+    private BluetoothDevice device;
+    private long startTimeInterval = -1;
+    private int lastBattery = 216;
+    private long lastRead = new Date().getTime() - (5 * 60 *1000);
+
+    private AlarmManager alarm;// = (AlarmManager) getSystemService(ALARM_SERVICE);
+
+    private ScanSettings settings;
+    private List<ScanFilter> filters;
+    private SharedPreferences prefs;
+
+    private Handler handler;
+
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+//        readData = new ReadDataShare(this);
+        service = this;
+        foregroundServiceStarter = new ForegroundServiceStarter(getApplicationContext(), service);
+        foregroundServiceStarter.start();
+//        final IntentFilter bondintent = new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
+//        registerReceiver(mPairReceiver, bondintent);
+//        prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+//        listenForChangeInSettings();
+        bgToSpeech = BgToSpeech.setupTTS(getApplicationContext()); //keep reference to not being garbage collected
+        handler = new Handler(getApplicationContext().getMainLooper());
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+//        PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(POWER_SERVICE);
+//        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "DexShareCollectionStart");
+//        wakeLock.acquire(40000);
+        Log.d(TAG, "onG5StartCommand");
+        Log.d(TAG, "SDK: " + Build.VERSION.SDK_INT);
+        prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+            defaultTransmitter = new Transmitter(prefs.getString("dex_txid", "ABCDEF"));
+        setMissedBgTimer();
+
+        mBluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
+        mBluetoothAdapter = mBluetoothManager.getAdapter();
+
+        setupBluetooth();
+        return START_STICKY;
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+//        close();
+//        setRetryTimer();
+//        foregroundServiceStarter.stop();
+//        unregisterReceiver(mPairReceiver);
+//        BgToSpeech.tearDownTTS();
+        Log.i(TAG, "SERVICE STOPPED");
+    }
+
+    public void setMissedBgTimer() {
+        Log.d(TAG, "Missed BG - CYCLE G5 Service");
+
+        Calendar calendar = Calendar.getInstance();
+        alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
+        if (pendingIntent != null)
+            alarm.cancel(pendingIntent);
+        long wakeTime = calendar.getTimeInMillis() + (4 * 1000 * 60);
+        pendingIntent = PendingIntent.getService(this, 0, new Intent(this, this.getClass()), 0);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            alarm.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, wakeTime, pendingIntent);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            alarm.setExact(AlarmManager.RTC_WAKEUP, wakeTime, pendingIntent);
+        } else
+            alarm.set(AlarmManager.RTC_WAKEUP, wakeTime, pendingIntent);
+    }
+
+    @Override
+    public IBinder onBind(Intent intent) {
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+
+    public void setupBluetooth() {
+        if (mBluetoothAdapter == null || !mBluetoothAdapter.isEnabled()) {
+            //First time using the app or bluetooth was turned off?
+            Intent enableBtIntent = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
+        } else {
+            if (Build.VERSION.SDK_INT >= 21) {
+                mLEScanner = mBluetoothAdapter.getBluetoothLeScanner();
+                settings = new ScanSettings.Builder()
+                        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
+                        .build();
+                filters = new ArrayList<>();
+                //Only look for CGM.
+                filters.add(new ScanFilter.Builder().setServiceUuid(new ParcelUuid(UUID.fromString(BluetoothServices.Advertisement))).build());
+            }
+            startScan();
+        }
+    }
+
+    public void stopScan() {
+        if (mBluetoothAdapter != null && mBluetoothAdapter.isEnabled()) {
+            if (Build.VERSION.SDK_INT < 21) {
+                mBluetoothAdapter.stopLeScan(mLeScanCallback);
+            } else {
+                //mLEScanner.stopScan(mScanCallback);
+            }
+        }
+    }
+
+    public void startScan() {
+        if (Build.VERSION.SDK_INT < 21) {
+            mBluetoothAdapter.startLeScan(mLeScanCallback);
+        } else {
+            Log.d(TAG, "startScan");
+            mLEScanner.startScan(filters, settings, mScanCallback);
+        }
+    }
+
+    private ScanCallback mScanCallback = new ScanCallback() {
+        @Override
+        public void onScanResult(int callbackType, ScanResult result) {
+            android.util.Log.i("result", result.toString());
+            BluetoothDevice btDevice = result.getDevice();
+            // Check if the device has a name, the Dexcom transmitter always should. Match it with the transmitter id that was entered.
+            // We get the last 2 characters to connect to the correct transmitter if there is more than 1 active or in the room.
+            // If they match, connect to the device.
+            if (btDevice.getName() != null) {
+                String transmitterIdLastTwo = Extensions.lastTwoCharactersOfString(defaultTransmitter.transmitterId);
+                String deviceNameLastTwo = Extensions.lastTwoCharactersOfString(btDevice.getName());
+
+                if (transmitterIdLastTwo.equals(deviceNameLastTwo)) {
+                    device = btDevice;
+                    connectToDevice(btDevice);
+                } else {
+                    startScan();
+                }
+            }
+        }
+
+        @Override
+        public void onBatchScanResults(List<ScanResult> results) {
+            for (ScanResult sr : results) {
+                android.util.Log.i("ScanResult - Results", sr.toString());
+            }
+        }
+
+        @Override
+        public void onScanFailed(int errorCode) {
+            android.util.Log.e("Scan Failed", "Error Code: " + errorCode);
+        }
+    };
+
+    private void runOnUiThread(Runnable r) {
+        handler.post(r);
+    }
+
+    private BluetoothAdapter.LeScanCallback mLeScanCallback =
+            new BluetoothAdapter.LeScanCallback() {
+                @Override
+                public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) {
+                    runOnUiThread(new Runnable() {
+                        public void run() {
+                            // Check if the device has a name, the Dexcom transmitter always should. Match it with the transmitter id that was entered.
+                            // We get the last 2 characters to connect to the correct transmitter if there is more than 1 active or in the room.
+                            // If they match, connect to the device.
+                            if (device.getName() != null) {
+                                String transmitterIdLastTwo = Extensions.lastTwoCharactersOfString(defaultTransmitter.transmitterId);
+                                String deviceNameLastTwo = Extensions.lastTwoCharactersOfString(device.getName());
+
+                                if (transmitterIdLastTwo.equals(deviceNameLastTwo)) {
+                                    connectToDevice(device);
+                                }
+                            }
+                        }
+                    });
+                }
+            };
+
+    private void connectToDevice(BluetoothDevice device) {
+        //if (mGatt == null) {
+        mGatt = device.connectGatt(getApplicationContext(), false, gattCallback);
+        stopScan();
+        //}
+    }
+
+    private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {
+        @Override
+        public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
+            switch (newState) {
+                case BluetoothProfile.STATE_CONNECTED:
+                    android.util.Log.i("gattCallback", "STATE_CONNECTED");
+                    gatt.discoverServices();
+                    break;
+                case BluetoothProfile.STATE_DISCONNECTED:
+                    android.util.Log.e("gattCallback", "STATE_DISCONNECTED");
+                    device = null;
+                    mGatt.close();
+                    mGatt = null;
+                    startScan();
+                    break;
+                default:
+                    android.util.Log.e("gattCallback", "STATE_OTHER");
+            }
+        }
+
+        @Override
+        public void onServicesDiscovered(BluetoothGatt gatt, int status) {
+            cgmService = gatt.getService(UUID.fromString(BluetoothServices.CGMService));
+            authCharacteristic = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Authentication));
+            controlCharacteristic = cgmService.getCharacteristic(BluetoothServices.Control);
+            commCharacteristic = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Communication));
+
+            if (!mGatt.readCharacteristic(authCharacteristic)) {
+                android.util.Log.e("onCharacteristicRead", "ReadCharacteristicError");
+            }
+        }
+
+        @Override
+        public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
+            if (status == BluetoothGatt.GATT_SUCCESS) {
+                gatt.writeCharacteristic(descriptor.getCharacteristic());
+            } else {
+                Log.e(TAG, "Unknown error writing descriptor");
+            }
+        }
+
+
+        @Override
+        public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
+            android.util.Log.i("Success Write", String.valueOf(status));
+            android.util.Log.i("Characteristic", String.valueOf(characteristic.getUuid()));
+
+            if (String.valueOf(characteristic.getUuid()) != String.valueOf(controlCharacteristic.getUuid())) {
+                gatt.readCharacteristic(characteristic);
+            } else {
+                android.util.Log.i("control?", String.valueOf(characteristic.getUuid()));
+            }
+
+//            if (status == BluetoothGatt.GATT_SUCCESS) {
+//            }
+
+//            mGatt.setCharacteristicNotification(characteristic, false);
+        }
+
+        @Override
+        public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
+            if (status == BluetoothGatt.GATT_SUCCESS) {
+                android.util.Log.i("CharBytes-or", Arrays.toString(characteristic.getValue()));
+                android.util.Log.i("CharHex-or", Extensions.bytesToHex(characteristic.getValue()));
+
+                if (characteristic.getValue()[0] == 5 || characteristic.getValue()[0] <= 0) {
+                    authStatus = new AuthStatusRxMessage(characteristic.getValue());
+                    if (authStatus.authenticated == 1 && authStatus.bonded == 1) {
+                        mGatt.setCharacteristicNotification(controlCharacteristic, true);
+                        BluetoothGattDescriptor descriptor = controlCharacteristic.getDescriptor(CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID);
+                        descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
+                        TransmitterTimeTxMessage timeMessage = new TransmitterTimeTxMessage();
+                        android.util.Log.i("timeMessage", Arrays.toString(timeMessage.byteSequence));
+                        controlCharacteristic.setValue(timeMessage.byteSequence);
+                        mGatt.writeDescriptor(descriptor);
+                    } else if (authStatus.authenticated == 1) {
+                        android.util.Log.i("Auth", "Let's Bond!");
+                        KeepAliveTxMessage keepAlive = new KeepAliveTxMessage(30);
+                        characteristic.setValue(keepAlive.byteSequence);
+                        mGatt.writeCharacteristic(characteristic);
+                        mGatt.readCharacteristic(characteristic);
+                        BondRequestTxMessage bondRequest = new BondRequestTxMessage();
+                        characteristic.setValue(bondRequest.byteSequence);
+                        mGatt.writeCharacteristic(characteristic);
+                        device.createBond();
+                    } else {
+                        android.util.Log.i("Auth", "Transmitter NOT already authenticated");
+                        //mGatt.setCharacteristicNotification(characteristic, true);
+                        authRequest = new AuthRequestTxMessage();
+                        characteristic.setValue(authRequest.byteSequence);
+                        android.util.Log.i("AuthReq", authRequest.byteSequence.toString());
+                        mGatt.writeCharacteristic(characteristic);
+                    }
+                }
+
+                if (characteristic.getValue()[0] == 8) {
+                    android.util.Log.i("Auth", "Transmitter NOT already authenticated");
+                    authRequest = new AuthRequestTxMessage();
+                    characteristic.setValue(authRequest.byteSequence);
+                    android.util.Log.i("AuthReq", authRequest.byteSequence.toString());
+                    mGatt.writeCharacteristic(characteristic);
+                }
+
+//                 Auth challenge and token have been retrieved.
+                if (characteristic.getValue()[0] == 0x3) {
+                    AuthChallengeRxMessage authChallenge = new AuthChallengeRxMessage(characteristic.getValue());
+                    if (authRequest == null) {
+                        android.util.Log.d("new auth", "hmmmm");
+                        authRequest = new AuthRequestTxMessage();
+                    }
+                    android.util.Log.i("tokenHash", Arrays.toString(authChallenge.tokenHash));
+                    android.util.Log.i("singleUSe", Arrays.toString(calculateHash(authRequest.singleUseToken)));
+
+                    byte[] challengeHash = calculateHash(authChallenge.challenge);
+                    android.util.Log.d("challenge hash", Arrays.toString(challengeHash));
+                    if (challengeHash != null) {
+                        android.util.Log.d("Auth", "Transmitter try auth challenge");
+                        AuthChallengeTxMessage authChallengeTx = new AuthChallengeTxMessage(challengeHash);
+                        android.util.Log.i("AuthChallenge", Arrays.toString(authChallengeTx.byteSequence));
+                        characteristic.setValue(authChallengeTx.byteSequence);
+                        mGatt.writeCharacteristic(characteristic);
+                    }
+                }
+            }
+
+        }
+
+        @Override
+        // Characteristic notification
+        public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
+            android.util.Log.i("CharBytes-nfy", Arrays.toString(characteristic.getValue()));
+            android.util.Log.i("CharHex-nfy", Extensions.bytesToHex(characteristic.getValue()));
+
+            byte[] buffer = characteristic.getValue();
+            byte firstByte = buffer[0];
+
+            if (firstByte == 0x2f) {
+                SensorRxMessage sensorRx = new SensorRxMessage(characteristic.getValue());
+                if (pendingIntent != null)
+                    alarm.cancel(pendingIntent);
+                long timeSince = new Date().getTime() - lastRead;
+                android.util.Log.i("ms since", Long.toString(timeSince));
+                if (timeSince > 3 * 60 * 1000) {
+                    TransmitterData txData = new TransmitterData();
+                    ByteBuffer sensorData = ByteBuffer.allocate(buffer.length);
+                    sensorData.order(ByteOrder.LITTLE_ENDIAN);
+                    sensorData.put(buffer, 0, buffer.length);
+                    txData.raw_data = sensorRx.unfiltered;
+                    txData.filtered_data = sensorRx.filtered;
+
+                    if (sensorRx.status == TransmitterStatus.BRICKED) {
+                        //TODO Handle this in UI/Notification
+                    } else if (sensorRx.status == TransmitterStatus.LOW) {
+                        txData.sensor_battery_level = 206;
+                    } else {
+                        txData.sensor_battery_level = 216;
+                    }
+
+                    txData.uuid = UUID.randomUUID().toString();
+                    //txData.timestamp = new Date().getTime();
+                    lastRead = startTimeInterval + sensorRx.timestamp;
+                    txData.timestamp = lastRead;
+                    android.util.Log.i("timestamp", Long.toString(txData.timestamp));
+
+                    processNewTransmitterData(txData, txData.timestamp);
+                }
+                setMissedBgTimer();
+                doDisconnectMessage(gatt, characteristic);
+            }
+            // Transmitter Time
+            else if (firstByte == 0x25) {
+                TransmitterTimeRxMessage transmitterTime = new TransmitterTimeRxMessage(characteristic.getValue());
+
+                startTimeInterval = new Date().getTime() - transmitterTime.currentTime;
+
+                SensorTxMessage sensorTx = new SensorTxMessage();
+                characteristic.setValue(sensorTx.byteSequence);
+                gatt.writeCharacteristic(characteristic);
+
+            } else {
+                doDisconnectMessage(gatt, characteristic);
+            }
+
+        }
+    };
+
+
+    private void processNewTransmitterData(TransmitterData transmitterData, long timestamp) {
+        if (transmitterData == null) {
+            return;
+        }
+
+        Sensor sensor = Sensor.currentSensor();
+        if (sensor == null) {
+            Log.i(TAG, "setSerialDataToTransmitterRawData: No Active Sensor, Data only stored in Transmitter Data");
+            return;
+        }
+
+        Sensor.updateBatteryLevel(sensor, transmitterData.sensor_battery_level);
+        android.util.Log.i("timestamp create", Long.toString(transmitterData.timestamp));
+
+        BgReading.create(transmitterData.raw_data, transmitterData.filtered_data, this, transmitterData.timestamp);
+    }
+
+    // Sends the disconnect tx message to our bt device.
+    private void doDisconnectMessage(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
+        gatt.setCharacteristicNotification(controlCharacteristic, false);
+
+        DisconnectTxMessage disconnectTx = new DisconnectTxMessage();
+        characteristic.setValue(disconnectTx.byteSequence);
+        gatt.writeCharacteristic(characteristic);
+    }
+
+    @SuppressLint("GetInstance")
+    private byte[] calculateHash(byte[] data) {
+        if (data.length != 8) {
+            android.util.Log.e("Decrypt", "Data length should be exactly 8.");
+            return null;
+        }
+
+        byte[] key = cryptKey();
+        if (key == null)
+            return null;
+
+        byte[] doubleData;
+        ByteBuffer bb = ByteBuffer.allocate(16);
+        bb.put(data);
+        bb.put(data);
+
+        doubleData = bb.array();
+
+        Cipher aesCipher;
+        try {
+            aesCipher = Cipher.getInstance("AES/ECB/PKCS7Padding");
+            SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
+            aesCipher.init(Cipher.ENCRYPT_MODE, skeySpec);
+            byte[] aesBytes = aesCipher.doFinal(doubleData, 0, doubleData.length);
+
+            bb = ByteBuffer.allocate(8);
+            bb.put(aesBytes, 0, 8);
+
+            return bb.array();
+        } catch (NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | InvalidKeyException e) {
+            e.printStackTrace();
+        }
+
+        return null;
+    }
+
+    private byte[] cryptKey() {
+        try {
+            return ("00" + defaultTransmitter.transmitterId + "00" + defaultTransmitter.transmitterId).getBytes("UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index a8fd1ea..80da44b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -131,7 +131,7 @@ public LineChartData previewLineData() {
 
     public Line highValuesLine() {
         Line highValuesLine = new Line(highValues);
-        highValuesLine.setColor(ChartUtils.COLOR_ORANGE);
+        highValuesLine.setColor(Color.parseColor("#FFFF00"));
         highValuesLine.setHasLines(false);
         highValuesLine.setPointRadius(pointSize);
         highValuesLine.setHasPoints(true);
@@ -140,7 +140,7 @@ public Line highValuesLine() {
 
     public Line lowValuesLine() {
         Line lowValuesLine = new Line(lowValues);
-        lowValuesLine.setColor(Color.parseColor("#C30909"));
+        lowValuesLine.setColor(Color.parseColor("#FF0000"));
         lowValuesLine.setHasLines(false);
         lowValuesLine.setPointRadius(pointSize);
         lowValuesLine.setHasPoints(true);
@@ -149,7 +149,7 @@ public Line lowValuesLine() {
 
     public Line inRangeValuesLine() {
         Line inRangeValuesLine = new Line(inRangeValues);
-        inRangeValuesLine.setColor(ChartUtils.COLOR_BLUE);
+        inRangeValuesLine.setColor(Color.parseColor("#00FF00"));
         inRangeValuesLine.setHasLines(false);
         inRangeValuesLine.setPointRadius(pointSize);
         inRangeValuesLine.setHasPoints(true);
@@ -211,7 +211,7 @@ public Line highLine(boolean show) {
         highLine.setHasPoints(false);
         highLine.setStrokeWidth(1);
         if(show) {
-            highLine.setColor(ChartUtils.COLOR_ORANGE);
+            highLine.setColor(Color.parseColor("#FFFF00"));
         } else {
             highLine.setColor(Color.TRANSPARENT);
         }
@@ -227,7 +227,7 @@ public Line lowLine(boolean show, boolean line_only) {
         Line lowLine = new Line(lowLineValues);
         lowLine.setHasPoints(false);
         if(!line_only) {
-            lowLine.setAreaTransparency(50);
+            lowLine.setAreaTransparency(20);
             lowLine.setFilled(true);
         }
         lowLine.setStrokeWidth(1);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
index cfdf123..baf6246 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
@@ -12,6 +12,7 @@
 import com.eveningoutpost.dexdrip.Services.DailyIntentService;
 import com.eveningoutpost.dexdrip.Services.DexCollectionService;
 import com.eveningoutpost.dexdrip.Services.DexShareCollectionService;
+import com.eveningoutpost.dexdrip.Services.G5CollectionService;
 import com.eveningoutpost.dexdrip.Services.SyncService;
 import com.eveningoutpost.dexdrip.Services.WifiCollectionService;
 import com.eveningoutpost.dexdrip.Services.XDripViewer;
@@ -103,6 +104,23 @@ public static boolean isBTShare(String collection_method, Context context) {
         return collection_method.equals("DexcomShare"); 
     }
 
+    public static boolean isBTG5(String collection_method, Context context) {
+       if(XDripViewer.isxDripViewerMode(context)) {
+        return false;
+       }
+        return collection_method.equals("DexcomG5");
+    }
+
+
+    public static boolean isBTG5(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
+        if(collection_method.compareTo("DexcomG5") == 0) {
+            return true;
+        }
+        return false;
+    }
+
     public static boolean isWifiWixel(Context context) {
         if(XDripViewer.isxDripViewerMode(context)) {
             return true;
@@ -134,22 +152,32 @@ public void start(Context context, String collection_method) {
             Log.d("DexDrip", "Starting bt wixel collector");
             stopWifWixelThread();
             stopBtShareService();
+            stopG5ShareService();
             startBtWixelService();
         } else if(isWifiWixel(collection_method, context)){
             Log.d("DexDrip", "Starting wifi wixel collector");
             stopBtWixelService();
             stopBtShareService();
+            stopG5ShareService();
             startWifWixelThread();
         } else if(isBTShare(collection_method, context)) {
             Log.d("DexDrip", "Starting bt share collector");
             stopBtWixelService();
             stopWifWixelThread();
+            stopG5ShareService();
             startBtShareService();
+        } else if(isBTG5(collection_method, context)) {
+            Log.d("DexDrip", "Starting G5 share collector");
+            stopBtWixelService();
+            stopWifWixelThread();
+            stopBtShareService();
+            startBtG5Service();
         } else if (isWifiandBTWixel(collection_method, context)) {
             Log.d("DexDrip", "Starting wifi and bt wixel collector");
             stopBtWixelService();
             stopWifWixelThread();
             stopBtShareService();
+            stopG5ShareService();
             // start both
             Log.d("DexDrip", "Starting wifi wixel collector first");
             startWifWixelThread();
@@ -194,6 +222,7 @@ public static void restartCollectionService(Context context) {
         collectionServiceStarter.stopBtShareService();
         collectionServiceStarter.stopBtWixelService();
         collectionServiceStarter.stopWifWixelThread();
+        collectionServiceStarter.stopG5ShareService();
         collectionServiceStarter.start(context);
     }
 
@@ -202,6 +231,7 @@ public static void restartCollectionService(Context context, String collection_m
         collectionServiceStarter.stopBtShareService();
         collectionServiceStarter.stopBtWixelService();
         collectionServiceStarter.stopWifWixelThread();
+        collectionServiceStarter.stopG5ShareService();
         collectionServiceStarter.start(context, collection_method);
     }
 
@@ -222,6 +252,14 @@ private void startBtShareService() {
             mContext.startService(new Intent(mContext, DexShareCollectionService.class));
         }
     }
+
+    private void startBtG5Service() {
+        Log.d(TAG, "starting G5 share service");
+        //if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2) {
+            mContext.startService(new Intent(mContext, G5CollectionService.class));
+        //}
+    }
+
     private void startPebbleSyncService() {
         Log.d(TAG, "starting PebbleSync service");
         mContext.startService(new Intent(mContext, PebbleSync.class));
@@ -255,4 +293,9 @@ private void stopWifWixelThread() {
         mContext.stopService(new Intent(mContext, WifiCollectionService.class));
     }
 
+    private void stopG5ShareService() {
+        Log.d(TAG, "stopping G5  service");
+        mContext.stopService(new Intent(mContext, G5CollectionService.class));
+    }
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 49c64dc..8e84c59 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -342,6 +342,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 prefs.edit().putBoolean("calibration_notifications", false).apply();
             }
 
+
             if ((prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0)
                     && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiBlueToothWixel") != 0)) {
                 String receiversIpAddresses;
@@ -357,6 +358,10 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 collectionCategory.removePreference(transmitterId);
                 collectionCategory.removePreference(displayBridgeBatt);
             }
+
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomG5") == 0) {
+                collectionCategory.addPreference(transmitterId);
+            }
             pebbleSync.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override
                 public boolean onPreferenceChange(Preference preference, Object newValue) {
@@ -427,6 +432,10 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                         collectionCategory.addPreference(displayBridgeBatt);
                     }
 
+                    if(((String) newValue).compareTo("DexcomG5") == 0) {
+                        collectionCategory.addPreference(transmitterId);
+                    }
+
                     String stringValue = newValue.toString();
                     if (preference instanceof ListPreference) {
                         ListPreference listPreference = (ListPreference) preference;
diff --git a/app/src/main/res/layout/activity_home.xml b/app/src/main/res/layout/activity_home.xml
index d435fdd..772057a 100644
--- a/app/src/main/res/layout/activity_home.xml
+++ b/app/src/main/res/layout/activity_home.xml
@@ -37,14 +37,14 @@
                     android:layout_width="900dp"
                     android:layout_height="wrap_content"
                     android:textAppearance="?android:attr/textAppearanceSmall"
-                    android:textColor="#C30909"
+                    android:textColor="#FF0000"
                     android:id="@+id/notices"
                     android:paddingEnd="10dp"
                     android:paddingStart="10dp"
                     android:gravity="left|top"
                     android:layout_alignParentLeft="true"
+                    android:text="Messages"
                     android:layout_alignParentTop="true"
-                    android:text="Alerts and messages"
                     android:background="@android:color/transparent"/>
 
 
@@ -76,7 +76,7 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:textAppearance="?android:attr/textAppearanceSmall"
-                    android:text="100%"
+                    android:text=""
                     android:id="@+id/textBridgeBattery"
                     android:textStyle="normal"
                     android:textSize="12sp"
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index 04dd47c..d19a613 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -5,7 +5,8 @@
         <item>xBridge Wixel</item>
         <item>Wifi Wixel</item>
         <item>Wifi Wixel + BT Wixel</item>
-        <item>DexcomShare</item>
+        <item>G4 Share Receiver</item>
+        <item>G5 Transmitter</item>
     </string-array>
 
     <string-array name="DexCollectionMethodValues">
@@ -14,6 +15,7 @@
         <item>WifiWixel</item>
         <item>WifiBlueToothWixel</item>
         <item>DexcomShare</item>
+        <item>DexcomG5</item>
     </string-array>
 
 
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
index df8d7db..f763089 100644
--- a/app/src/main/res/values/styles.xml
+++ b/app/src/main/res/values/styles.xml
@@ -2,7 +2,7 @@
 
     <!-- Base application theme. -->
     <style name="AppTheme" parent="android:Theme.Holo">
-        <item name="android:background">#212121</item>
+        <item name="android:background">#171717</item>
         <item name="android:actionBarStyle">@style/MyActionBar</item>
         <item name="android:textColor">@android:color/white</item>
     </style>
@@ -10,7 +10,7 @@
     <!-- ActionBar styles -->
     <style name="MyActionBar"
         parent="@android:style/Widget.Holo.ActionBar">
-        <item name="android:background">#212121</item>
+        <item name="android:background">#171717</item>
         <!--<item name="android:color">#616161</item>-->
     </style>
 </resources>
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index be9b6c7..7850942 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -26,7 +26,7 @@
             android:key="dex_txid"
             android:title="Dexcom Transmitter ID"
             android:summary="ID of your Dexcom Transmitter, eg 12AB3"
-            android:defaultValue="00000" />
+            android:defaultValue="ABCDEF" />
         <CheckBoxPreference
             android:key="display_bridge_battery"
             android:title="Display Bridge Battery"
diff --git a/wear/wear.iml b/wear/wear.iml
index 9022657..90628f4 100644
--- a/wear/wear.iml
+++ b/wear/wear.iml
@@ -8,41 +8,61 @@
     </facet>
     <facet type="android" name="Android">
       <configuration>
-        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_BUILD_VARIANT" value="xdripDebug" />
         <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
-        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
-        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
-        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
-        <option name="COMPILE_JAVA_TEST_TASK_NAME" value="compileDebugAndroidTestSources" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleXdripDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileXdripDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleXdripDebugAndroidTest" />
+        <option name="COMPILE_JAVA_TEST_TASK_NAME" value="compileXdripDebugAndroidTestSources" />
         <afterSyncTasks>
-          <task>generateDebugAndroidTestSources</task>
-          <task>generateDebugSources</task>
+          <task>generateXdripDebugAndroidTestSources</task>
+          <task>generateXdripDebugSources</task>
         </afterSyncTasks>
         <option name="ALLOW_USER_CONFIGURATION" value="false" />
         <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
         <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
-        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
         <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
       </configuration>
     </facet>
   </component>
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
-    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
-    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/xdrip/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/xdrip/debug" />
     <exclude-output />
     <content url="file://$MODULE_DIR$">
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
-      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/xdrip/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/xdrip/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/xdrip/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/xdrip/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/xdrip/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/xdrip/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdripDebug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/xdrip/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/xdrip/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/xdrip/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/xdrip/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/xdrip/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/xdrip/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/xdrip/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTestXdrip/rs" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
       <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
@@ -65,6 +85,10 @@
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
       <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/classes" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/debug" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dependency-cache" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/dex" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/recyclerview-v7/21.0.0/jars" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/support-v4/22.0.0/jars" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-base/7.3.0/jars" />
@@ -73,10 +97,16 @@
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.ustwo.android/clockwise-wearable/1.0.2/jars" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/pre-dexed" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/release" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
       <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/xdripRelease" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/xdripviewerRelease" />
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
     <orderEntry type="jdk" jdkName="Android API 23 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />

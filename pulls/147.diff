diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 5348ceb..bc6ee9d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -61,6 +61,7 @@
     private boolean isDexbridgeWixel;
     private boolean isBTShare;
     private boolean isWifiWixel;
+    private boolean isWifiBluetoothWixel;
     private BroadcastReceiver _broadcastReceiver;
     private BroadcastReceiver newDataReceiver;
     private NavigationDrawerFragment mNavigationDrawerFragment;
@@ -69,6 +70,7 @@
     private TextView                 dexbridgeBattery;
     private TextView                 currentBgValueText;
     private TextView                 notificationText;
+    private boolean                  alreadyDisplayedBgInfoCommon = false;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -200,15 +202,17 @@ public void updateCurrentBgInfo() {
         notificationText.setTextColor(Color.RED);
         isBTWixel = CollectionServiceStarter.isBTWixel(getApplicationContext());
         isDexbridgeWixel = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
+        isWifiBluetoothWixel = CollectionServiceStarter.isWifiandBTWixel(getApplicationContext());
         isBTShare = CollectionServiceStarter.isBTShare(getApplicationContext());
         isWifiWixel = CollectionServiceStarter.isWifiWixel(getApplicationContext());
+        alreadyDisplayedBgInfoCommon = false; // reset flag
         if (isBTShare) {
             updateCurrentBgInfoForBtShare(notificationText);
         }
-        if (isBTWixel || isDexbridgeWixel) {
+        if (isBTWixel || isDexbridgeWixel || isWifiBluetoothWixel) {
             updateCurrentBgInfoForBtBasedWixel(notificationText);
         }
-        if (isWifiWixel) {
+        if (isWifiWixel || isWifiBluetoothWixel) {
             updateCurrentBgInfoForWifiWixel(notificationText);
         }
         if (prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
@@ -242,6 +246,9 @@ private void updateCurrentBgInfoForBtBasedWixel(TextView notificationText) {
     }
 
     private void updateCurrentBgInfoCommon(TextView notificationText) {
+        if (alreadyDisplayedBgInfoCommon) return; // with bluetooth and wifi, skip second time
+        alreadyDisplayedBgInfoCommon = true;
+
         final boolean isSensorActive = Sensor.isActive();
         if(!isSensorActive){
             notificationText.setText("Now start your sensor");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
index c5f2a13..e3303cd 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
@@ -58,7 +58,7 @@ public static TransmitterData create(byte[] buffer, int len, Long timestamp) {
 
             randomDelay(100, 1000);
             TransmitterData lastTransmitterData = TransmitterData.last();
-            if (lastTransmitterData != null && lastTransmitterData.raw_data == Integer.parseInt(data[0]) && Math.abs(lastTransmitterData.timestamp - timestamp) < (10000)) { //Stop allowing duplicate data, its bad!
+            if (lastTransmitterData != null && lastTransmitterData.raw_data == Integer.parseInt(data[0]) && Math.abs(lastTransmitterData.timestamp - timestamp) < (100000)) { //Stop allowing duplicate data, its bad! // jamorham: increased to 100 seconds for additional safety with multiple collection modes operating at the same time
                 return null;
             }
             if (data.length > 1) { transmitterData.sensor_battery_level = Integer.parseInt(data[1]); }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index e0dac68..ddd5570 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -98,7 +98,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopSelf();
             return START_NOT_STICKY;
         }
-        if (CollectionServiceStarter.isBTWixel(getApplicationContext()) || CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())) {
+        if (CollectionServiceStarter.isBTWixel(getApplicationContext()) || CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())
+                || CollectionServiceStarter.isWifiandBTWixel(getApplicationContext())) {
             setFailoverTimer();
         } else {
             stopSelf();
@@ -144,7 +145,8 @@ public void listenForChangeInSettings() {
     }
 
     public void setRetryTimer() {
-        if (CollectionServiceStarter.isBTWixel(getApplicationContext()) || CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())) {
+        if (CollectionServiceStarter.isBTWixel(getApplicationContext()) || CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())
+                || CollectionServiceStarter.isWifiandBTWixel(getApplicationContext())) {
             long retry_in = (1000 * 65);
             Log.d(TAG, "setRetryTimer: Restarting in: " + (retry_in/1000)  + " seconds");
             Calendar calendar = Calendar.getInstance();
@@ -158,7 +160,8 @@ public void setRetryTimer() {
     }
 
     public void setFailoverTimer() {
-        if (CollectionServiceStarter.isBTWixel(getApplicationContext())|| CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())) {
+        if (CollectionServiceStarter.isBTWixel(getApplicationContext())|| CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())
+                || CollectionServiceStarter.isWifiandBTWixel(getApplicationContext())) {
             long retry_in = (1000 * 60 * 6);
             Log.d(TAG, "setFailoverTimer: Fallover Restarting in: " + (retry_in / (60 * 1000)) + " minutes");
             Calendar calendar = Calendar.getInstance();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
index 667a345..52be38f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
@@ -22,6 +22,16 @@
 
     private final static String TAG = CollectionServiceStarter.class.getSimpleName();
 
+
+    public static boolean isWifiandBTWixel(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
+        if(collection_method.compareTo("WifiBlueToothWixel") == 0) {
+            return true;
+        }
+        return false;
+    }
+
     public static boolean isBTWixel(Context context) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
@@ -86,6 +96,17 @@ public void start(Context context, String collection_method) {
             stopBtWixelService();
             stopWifWixelThread();
             startBtShareService();
+        } else if (isWifiandBTWixel(context)) {
+            Log.d("DexDrip", "Starting wifi and bt wixel collector");
+            stopBtWixelService();
+            stopWifWixelThread();
+            stopBtShareService();
+            // start both
+            Log.d("DexDrip", "Starting wifi wixel collector first");
+            startWifWixelThread();
+            Log.d("DexDrip", "Starting bt wixel collector second");
+            startBtWixelService();
+            Log.d("DexDrip", "Started wifi and bt wixel collector");
         }
         if(prefs.getBoolean("broadcast_to_pebble", false)){
             startPebbleSyncService();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index a491136..8847be0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -286,13 +286,22 @@ public void onCreate(Bundle savedInstanceState) {
                 prefs.edit().putBoolean("calibration_notifications", false).apply();
             }
 
-            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("BluetoothWixel") != 0 && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomShare") != 0 && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexbridgeWixel") != 0) {
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("BluetoothWixel") != 0
+                    && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiBlueToothWixel") != 0
+                    && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomShare") != 0
+                    && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexbridgeWixel") != 0) {
                 collectionCategory.removePreference(runInForeground);
             }
 
-            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0) {
-                collectionCategory.removePreference(wifiRecievers);
-            }
+           if ((prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0)
+                   && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiBlueToothWixel") != 0)) {
+               String receiversIpAddresses;
+               receiversIpAddresses = prefs.getString("wifi_recievers_addresses", "");
+               if (receiversIpAddresses == null || receiversIpAddresses.equals("")) {
+                   collectionCategory.removePreference(wifiRecievers);
+               }
+           }
+
 
             if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexbridgeWixel") != 0) {
                 collectionCategory.removePreference(transmitterId);
@@ -338,8 +347,16 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                         collectionCategory.addPreference(runInForeground);
                     }
 
-                    if(((String) newValue).compareTo("WifiWixel") != 0) {
-                        collectionCategory.removePreference(wifiRecievers);
+                    // jamorham always show wifi receivers option if populated as we may switch modes dynamically
+                    if((((String) newValue).compareTo("WifiWixel") != 0)
+                            && (((String) newValue).compareTo("WifiBlueToothWixel") != 0)) {
+                        String receiversIpAddresses;
+                        receiversIpAddresses = prefs.getString("wifi_recievers_addresses", "");
+                        if(receiversIpAddresses == null || receiversIpAddresses.equals("") ) {
+                            collectionCategory.removePreference(wifiRecievers);
+                        } else {
+                            collectionCategory.addPreference(wifiRecievers);
+                        }
                     } else {
                         collectionCategory.addPreference(wifiRecievers);
                     }
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index b450c67..a6f1d77 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -4,6 +4,7 @@
         <item>Bluetooth Wixel</item>
         <item>xBridge Wixel</item>
         <item>Wifi Wixel</item>
+        <item>Wifi Wixel + BT Wixel</item>
         <item>DexcomShare</item>
     </string-array>
 
@@ -11,6 +12,7 @@
         <item>BluetoothWixel</item>
         <item>DexbridgeWixel</item>
         <item>WifiWixel</item>
+        <item>WifiBlueToothWixel</item>
         <item>DexcomShare</item>
     </string-array>
 

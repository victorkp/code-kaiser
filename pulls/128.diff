diff --git a/app/app.iml b/app/app.iml
index a7b3e9b..09ecbd1 100644
--- a/app/app.iml
+++ b/app/app.iml
@@ -89,18 +89,19 @@
     <orderEntry type="jdk" jdkName="Android API 22 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
     <orderEntry type="library" exported="" name="okio-1.2.0" level="project" />
+    <orderEntry type="library" exported="" name="answers-1.3.0" level="project" />
+    <orderEntry type="library" exported="" name="crashlytics-core-2.3.3" level="project" />
     <orderEntry type="library" exported="" name="zxing-android-integration-2.0.0" level="project" />
     <orderEntry type="library" exported="" name="core-3.1.0" level="project" />
-    <orderEntry type="library" exported="" name="crashlytics-2.2.3" level="project" />
-    <orderEntry type="library" exported="" name="answers-1.1.2" level="project" />
     <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
-    <orderEntry type="library" exported="" name="acra-4.5.0" level="project" />
-    <orderEntry type="library" exported="" name="mongo-java-driver-2.10.1" level="project" />
+    <orderEntry type="library" exported="" name="crashlytics-2.5.0" level="project" />
+    <orderEntry type="library" exported="" name="guava-18.0" level="project" />
     <orderEntry type="library" exported="" name="seeds-functional-16.0.1" level="project" />
     <orderEntry type="library" exported="" name="seeds-strings-16.0.1" level="project" />
     <orderEntry type="library" exported="" name="usb-serial-for-android-v010" level="project" />
     <orderEntry type="library" exported="" name="seeds-base-16.0.1" level="project" />
-    <orderEntry type="library" exported="" name="fabric-1.3.0" level="project" />
+    <orderEntry type="library" exported="" name="mongo-java-driver-3.0.3" level="project" />
+    <orderEntry type="library" exported="" name="fabric-1.3.5" level="project" />
     <orderEntry type="library" exported="" name="recyclerview-v7-22.0.0" level="project" />
     <orderEntry type="library" exported="" name="zxing-android-minimal-2.0.0" level="project" />
     <orderEntry type="library" exported="" name="android-uploader-CORE_FOR_XDRIP" level="project" />
@@ -109,14 +110,14 @@
     <orderEntry type="library" exported="" name="zxing-android-legacy-2.0.0" level="project" />
     <orderEntry type="library" exported="" name="retrofit-1.9.0" level="project" />
     <orderEntry type="library" exported="" name="support-annotations-22.1.1" level="project" />
-    <orderEntry type="library" exported="" name="beta-1.1.2" level="project" />
-    <orderEntry type="library" exported="" name="gson-2.3.1" level="project" />
     <orderEntry type="library" exported="" name="slf4j-api-1.7.7" level="project" />
+    <orderEntry type="library" exported="" name="gson-2.3.1" level="project" />
     <orderEntry type="library" exported="" name="appcompat-v7-22.1.1" level="project" />
     <orderEntry type="library" exported="" name="snackbar-2.10.8" level="project" />
+    <orderEntry type="library" exported="" name="beta-1.1.3" level="project" />
     <orderEntry type="library" exported="" name="seeds-primitives-16.0.1" level="project" />
-    <orderEntry type="library" exported="" name="pebblekit-2.6.0" level="project" />
-    <orderEntry type="library" exported="" name="hellocharts-library-1.1" level="project" />
+    <orderEntry type="library" exported="" name="pebblekit-3.0.0" level="project" />
     <orderEntry type="library" exported="" name="support-v4-22.1.1" level="project" />
+    <orderEntry type="library" exported="" name="hellocharts-android-v1.5.5" level="project" />
   </component>
 </module>
\ No newline at end of file
diff --git a/app/build.gradle b/app/build.gradle
index 5bb5dc6..e96c184 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -83,7 +83,7 @@ android {
         applicationId "com.eveningoutpost.dexdrip"
         minSdkVersion 17
         targetSdkVersion 21
-        versionCode 1
+        versionCode 2
         versionName generateVersionName()
     }
     buildTypes {
@@ -101,7 +101,9 @@ dependencies {
     compile 'com.squareup.retrofit:retrofit:1.9.0'
     compile 'com.getpebble:pebblekit:3.0.0'
     compile 'io.reactivex:rxjava:1.0.0'
-    compile 'ch.acra:acra:4.5.0'
+    compile 'com.github.lecho:hellocharts-android:v1.5.5'
+
+    compile 'com.google.guava:guava:18.0'
 
     compile('com.github.nightscout:android-uploader:CORE_FOR_XDRIP') {
         transitive = false;
@@ -116,7 +118,7 @@ dependencies {
     compile 'org.slf4j:slf4j-api:1.7.7'
     /* end relevant android-uploader dependencies */
 
-    compile('com.crashlytics.sdk.android:crashlytics:2.2.3@aar') {
+    compile('com.crashlytics.sdk.android:crashlytics:2.5.0@aar') {
         transitive = true;
     }
 }
diff --git a/app/libs/hellocharts-library-1.1.jar b/app/libs/hellocharts-library-1.1.jar
deleted file mode 100644
index 85b2651..0000000
Binary files a/app/libs/hellocharts-library-1.1.jar and /dev/null differ
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 9327b14..4c1f57f 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -32,7 +32,7 @@
             android:value="DexDrip.db" />
         <meta-data
             android:name="AA_DB_VERSION"
-            android:value="35" />
+            android:value="36" />
 
         <provider
             android:name="com.activeandroid.content.ContentProvider"
@@ -191,8 +191,15 @@
 
         <activity
             android:name=".AlertList"
-            android:label="@string/title_activity_alert_list" >
-        </activity>
+            android:label="@string/title_activity_alert_list" />
+
+        <activity
+            android:name=".ErrorsActivity"
+            android:label="Error List" />
+
+        <activity
+            android:name=".FollowerManagementActivity"
+            android:label="Manage Followers" />
 
         <service
             android:name=".Services.SnoozeOnNotificationDismissService"
@@ -203,7 +210,11 @@
             android:enabled="true"
             android:exported="true" >
         </service>
-
+        <service
+            android:name=".ShareModels.ShareRest"
+            android:enabled="true"
+            android:exported="true" >
+        </service>
         <service
             android:name=".UtilityModels.Notifications"
             android:exported="false" >
diff --git a/app/src/main/assets/migrations/33.sql b/app/src/main/assets/migrations/33.sql
deleted file mode 100644
index f25023e..0000000
--- a/app/src/main/assets/migrations/33.sql
+++ /dev/null
@@ -1 +0,0 @@
-ALTER TABLE ActiveBgAlert ADD COLUMN alert_started_at INTEGER DEFAULT 0;
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
index 96674e4..f3882c3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
@@ -5,12 +5,12 @@
 import android.os.Bundle;
 import android.support.v4.widget.DrawerLayout;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 
 
@@ -64,7 +64,7 @@ public void onClick(View v) {
                         value.setError("Calibration Can Not be blank");
                     }
                 } else {
-                    Log.w("CALERROR", "ERROR");
+                    Log.w("CALERROR", "Sensor is not active, cannot calibrate");
                 }
             }
         });
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
index efe51e8..540ff7a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
@@ -8,7 +8,7 @@
 import android.net.Uri;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 import android.view.animation.Animation;
 import android.view.animation.AnimationUtils;
@@ -72,7 +72,7 @@ String stringTimeFromAlert(AlertType alert) {
 
         List<AlertType> alerts = AlertType.getAll(above);
         for (AlertType alert : alerts) {
-            Log.e(TAG, alert.toString());
+            Log.d(TAG, alert.toString());
             feedList.add(createAlertMap(alert));
         }
         return feedList;
@@ -161,10 +161,10 @@ public void onClick(View v) {
 
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Log.e(TAG, "onActivityResult called ");
+        Log.d(TAG, "onActivityResult called ");
         if (requestCode == ADD_ALERT || requestCode == EDIT_ALERT) {
             if(resultCode == RESULT_OK) {
-                Log.e(TAG, "onActivityResult called invalidating...");
+                Log.d(TAG, "onActivityResult called invalidating...");
                 FillLists();
             }
             if (resultCode == RESULT_CANCELED) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AutoStart.java b/app/src/main/java/com/eveningoutpost/dexdrip/AutoStart.java
index 2839563..f34ebc0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AutoStart.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AutoStart.java
@@ -3,7 +3,7 @@
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.Intent;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 
@@ -13,7 +13,7 @@
 public class AutoStart extends BroadcastReceiver {
     @Override
     public void onReceive(Context context, Intent intent) {
-        Log.w("DexDrip", "Service auto starter, starting!");
+        Log.d("DexDrip", "Service auto starter, starting!");
         CollectionServiceStarter.newStart(context);
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
index 8b567f8..f95ec32 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
@@ -17,7 +17,6 @@
 import android.os.Handler;
 import android.preference.PreferenceManager;
 import android.text.TextUtils;
-import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.Menu;
 import android.view.MenuItem;
@@ -32,6 +31,7 @@
 
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.AndroidBarcode;
 import com.eveningoutpost.dexdrip.utils.ListActivityWithMenu;
@@ -41,7 +41,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import lecho.lib.hellocharts.util.Utils;
+import lecho.lib.hellocharts.util.ChartUtils;
 
 @TargetApi(android.os.Build.VERSION_CODES.JELLY_BEAN_MR2)
 public class BluetoothScan extends ListActivityWithMenu {
@@ -116,23 +116,27 @@ public boolean onCreateOptionsMenu(Menu menu) {
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
             case R.id.menu_scan:
-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
-                    scanLeDeviceLollipop(true);
-                } else
-                    scanLeDevice(true);
                 BluetoothManager bluetooth_manager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
                 Toast.makeText(this, "Scanning", Toast.LENGTH_LONG).show();
                 if(bluetooth_manager == null) {
                     Toast.makeText(this, "This device does not seem to support bluetooth", Toast.LENGTH_LONG).show();
+                    return true;
                 } else {
                     if(!bluetooth_manager.getAdapter().isEnabled()) {
                         Toast.makeText(this, "Bluetooth is turned off on this device currently", Toast.LENGTH_LONG).show();
+                        return true;
                     } else {
-                        if(android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN_MR2){
+                        if(android.os.Build.VERSION.SDK_INT <= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2){
                             Toast.makeText(this, "The android version of this device is not compatible with Bluetooth Low Energy", Toast.LENGTH_LONG).show();
+                            return true;
                         }
                     }
                 }
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+                    scanLeDeviceLollipop(true);
+                } else {
+                    scanLeDevice(true);
+                }
                 return true;
 //            case R.id.menu_stop:
 //                Intent tableIntent = new Intent(this, RawDataTable.class);
@@ -161,7 +165,9 @@ public void run() {
             bluetooth_adapter.startLeScan(mLeScanCallback);
         } else {
             is_scanning = false;
-            bluetooth_adapter.stopLeScan(mLeScanCallback);
+            if(bluetooth_adapter != null && bluetooth_adapter.isEnabled()) {
+                bluetooth_adapter.stopLeScan(mLeScanCallback);
+            }
         }
         invalidateOptionsMenu();
     }
@@ -208,25 +214,36 @@ private void scanLeDeviceLollipop(final boolean enable) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
                 lollipopScanner = bluetooth_adapter.getBluetoothLeScanner();
             }
-
-            Log.d(TAG, "Starting scanner 21");
-            // Stops scanning after a pre-defined scan period.
-            mHandler.postDelayed(new Runnable() {
-                @Override
-                public void run() {
-                    is_scanning = false;
-                    lollipopScanner.stopScan(mScanCallback);
-                    invalidateOptionsMenu();
+            if(lollipopScanner != null) {
+                Log.d(TAG, "Starting scanner 21");
+                // Stops scanning after a pre-defined scan period.
+                mHandler.postDelayed(new Runnable() {
+                    @Override
+                    public void run() {
+                        is_scanning = false;
+                        if(bluetooth_adapter != null && bluetooth_adapter.isEnabled()) {
+                            lollipopScanner.stopScan(mScanCallback);
+                        }
+                        invalidateOptionsMenu();
+                    }
+                }, SCAN_PERIOD);
+                ScanSettings settings = new ScanSettings.Builder()
+                        .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
+                        .build();
+                is_scanning = true;
+                lollipopScanner.startScan(null, settings, mScanCallback);
+            } else {
+                try {
+                    scanLeDevice(true);
+                } catch (Exception e) {
+                    Log.e(TAG, "Failed to scan for ble device", e);
                 }
-            }, SCAN_PERIOD);
-            ScanSettings settings = new ScanSettings.Builder()
-                    .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
-                    .build();
-            is_scanning = true;
-            lollipopScanner.startScan(null, settings, mScanCallback);
+            }
         } else {
             is_scanning = false;
-            lollipopScanner.stopScan(mScanCallback);
+            if(bluetooth_adapter != null && bluetooth_adapter.isEnabled()) {
+                lollipopScanner.stopScan(mScanCallback);
+            }
         }
         invalidateOptionsMenu();
     }
@@ -363,8 +380,8 @@ public View getView(int i, View view, ViewGroup viewGroup) {
             final String deviceName = device.getName();
             SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
             if(prefs.getString("last_connected_device_address", "").compareTo(device.getAddress()) == 0) {
-                viewHolder.deviceName.setTextColor(Utils.COLOR_BLUE);
-                viewHolder.deviceAddress.setTextColor(Utils.COLOR_BLUE);
+                viewHolder.deviceName.setTextColor(ChartUtils.COLOR_BLUE);
+                viewHolder.deviceAddress.setTextColor(ChartUtils.COLOR_BLUE);
             }
             viewHolder.deviceName.setText(deviceName);
             viewHolder.deviceAddress.setText(device.getAddress());
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
index 08738be..9d1132d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
@@ -5,7 +5,7 @@
 import android.os.Bundle;
 import android.support.v4.widget.DrawerLayout;
 import android.text.TextUtils;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
index 19036d3..a2bd8b4 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
@@ -1,15 +1,9 @@
 package com.eveningoutpost.dexdrip;
 
-import android.app.Activity;
 import android.os.Bundle;
-import android.support.v4.widget.DrawerLayout;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.widget.EditText;
 import android.widget.TextView;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
-import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
 import java.text.DateFormat;
@@ -22,7 +16,7 @@
 import lecho.lib.hellocharts.model.Line;
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
-import lecho.lib.hellocharts.util.Utils;
+import lecho.lib.hellocharts.util.ChartUtils;
 import lecho.lib.hellocharts.view.LineChartView;
 
 
@@ -65,7 +59,7 @@ public void setupCharts() {
         }
 
         Line line = new Line(values);
-        line.setColor(Utils.COLOR_BLUE);
+        line.setColor(ChartUtils.COLOR_BLUE);
         line.setHasLines(false);
         line.setPointRadius(4);
         line.setHasPoints(true);
@@ -84,7 +78,7 @@ public void setupCharts() {
             GraphHeader.setText(Header);
         }
         Line calibrationLine = new Line(lineValues);
-        calibrationLine.setColor(Utils.COLOR_RED);
+        calibrationLine.setColor(ChartUtils.COLOR_RED);
         calibrationLine.setHasLines(true);
         calibrationLine.setHasPoints(false);
         Axis axisX = new Axis();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
index 79841b7..091aa06 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
@@ -5,7 +5,7 @@
 import android.os.Bundle;
 import android.support.v4.widget.DrawerLayout;
 import android.text.TextUtils;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
index c96d8b3..2be34b3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
@@ -1,17 +1,12 @@
 package com.eveningoutpost.dexdrip;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.widget.DrawerLayout;
 import android.text.TextUtils;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuItem;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.EditText;
-import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
@@ -67,7 +62,7 @@ public void onClick(View v) {
                         value_1.setError("Calibration Can Not be blank");
                     }
                 } else {
-                    Log.w("DoubleCalibration", "ERROR");
+                    Log.w("DoubleCalibration", "ERROR, sensor is not active");
                 }
             }
         });
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
index c59955b..6bef3a2 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -17,7 +17,7 @@
 import android.text.InputType;
 import android.text.format.DateFormat;
 import android.text.method.DigitsKeyListener;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.util.TypedValue;
 import android.view.MotionEvent;
 import android.view.View;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ErrorListAdapter.java b/app/src/main/java/com/eveningoutpost/dexdrip/ErrorListAdapter.java
new file mode 100644
index 0000000..1c04968
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ErrorListAdapter.java
@@ -0,0 +1,81 @@
+package com.eveningoutpost.dexdrip;
+
+import android.content.Context;
+import android.graphics.Color;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+
+import com.eveningoutpost.dexdrip.Models.UserError;
+
+import java.text.DateFormat;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by stephenblack on 8/4/15.
+ */
+public class ErrorListAdapter  extends BaseAdapter {
+    private List<UserError> list;
+    private Context context;
+
+    public ErrorListAdapter(Context context, List<UserError> list) {
+        this.context = context;
+        this.list = list;
+    }
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public UserError getItem(int pos) {
+        return list.get(pos);
+    }
+
+    @Override
+    public long getItemId(int pos) {
+        return list.get(pos).getId();
+    }
+
+    @Override
+    public View getView(final int position, View convertView, ViewGroup parent) {
+        View view = convertView;
+        if (view == null) {
+            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            view = inflater.inflate(R.layout.item_user_error, null);
+        }
+        LinearLayout row = (LinearLayout) view.findViewById(R.id.errorRow);
+        TextView shortText = (TextView) view.findViewById(R.id.errorShort);
+        TextView longText = (TextView) view.findViewById(R.id.errorLong);
+        TextView timestamp = (TextView) view.findViewById(R.id.errorTimestamp);
+
+        UserError error = list.get(position);
+
+        row.setBackgroundColor(backgroundFor(error.severity));
+        shortText.setText(error.shortError);
+        longText.setText(error.message);
+        timestamp.setText(dateformatter(error.timestamp));
+        return view;
+    }
+
+    private int backgroundFor(int severity) {
+        switch (severity) {
+            case 1:
+                return Color.rgb(255, 204, 102);
+            case 2:
+                return Color.rgb(255, 153, 102);
+        }
+        return Color.rgb(255, 102, 102);
+    }
+
+    private String dateformatter(double timestamp) {
+        Date date = new Date((long) timestamp);
+        DateFormat format = DateFormat.getDateTimeInstance();
+        return format.format(date);
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ErrorsActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/ErrorsActivity.java
new file mode 100644
index 0000000..f072e31
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ErrorsActivity.java
@@ -0,0 +1,65 @@
+package com.eveningoutpost.dexdrip;
+
+import android.os.Bundle;
+import android.view.View;
+import android.widget.CheckBox;
+import android.widget.ListView;
+
+import com.eveningoutpost.dexdrip.Models.UserError;
+import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by stephenblack on 8/3/15.
+ */
+public class ErrorsActivity extends ActivityWithMenu {
+    public static String menu_name = "Errors";
+    public String getMenuName() { return  menu_name; }
+    private CheckBox highCheckboxView;
+    private CheckBox mediumCheckboxView;
+    private CheckBox lowCheckboxView;
+    private ListView errorList;
+    private List<UserError> errors;
+    private ErrorListAdapter adapter;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_errors);
+
+        highCheckboxView = (CheckBox) findViewById(R.id.highSeverityCheckbox);
+        mediumCheckboxView = (CheckBox) findViewById(R.id.midSeverityCheckbox);
+        lowCheckboxView = (CheckBox) findViewById(R.id.lowSeverityCheckBox);
+
+        highCheckboxView.setOnClickListener(checkboxListener);
+        mediumCheckboxView.setOnClickListener(checkboxListener);
+        lowCheckboxView.setOnClickListener(checkboxListener);
+
+        updateErrors();
+        errorList = (ListView) findViewById(R.id.errorList);
+        adapter = new ErrorListAdapter(getApplicationContext(), errors);
+        errorList.setAdapter(adapter);
+    }
+
+    private View.OnClickListener checkboxListener = new View.OnClickListener() {
+        public void onClick(View v) {
+            updateErrors();
+            adapter.notifyDataSetChanged();
+        }
+    };
+
+    public void updateErrors() {
+        List<Integer> severitiesList = new ArrayList<>();
+        if (highCheckboxView.isChecked()) severitiesList.add(3);
+        if (mediumCheckboxView.isChecked()) severitiesList.add(2);
+        if (lowCheckboxView.isChecked()) severitiesList.add(1);
+        if(errors == null) {
+            errors = UserError.bySeverity(severitiesList.toArray(new Integer[severitiesList.size()]));
+        } else {
+            errors.clear();
+            errors.addAll(UserError.bySeverity(severitiesList.toArray(new Integer[severitiesList.size()])));
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/FollowerListAdapter.java b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerListAdapter.java
new file mode 100644
index 0000000..1cb7f3d
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerListAdapter.java
@@ -0,0 +1,83 @@
+package com.eveningoutpost.dexdrip;
+
+import android.content.Context;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.ShareModels.FollowerManager;
+import com.eveningoutpost.dexdrip.ShareModels.Models.ExistingFollower;
+
+import java.util.List;
+
+import rx.functions.Action1;
+
+/**
+ * Created by stephenblack on 8/11/15.
+ */
+public class FollowerListAdapter extends BaseAdapter {
+    private List<ExistingFollower> list;
+    private Context context;
+    private FollowerManager followerManager;
+
+    public FollowerListAdapter(Context context, FollowerManager followerManager, List<ExistingFollower> list) {
+        this.context = context;
+        this.list = list;
+        this.followerManager = followerManager;
+    }
+
+    @Override
+    public int getCount() {
+        return list.size();
+    }
+
+    @Override
+    public ExistingFollower getItem(int pos) {
+        return list.get(pos);
+    }
+
+    @Override
+    public long getItemId(int pos) {
+        return 0;
+    }
+
+    @Override
+    public View getView(final int position, final View convertView, ViewGroup parent) {
+        View view = convertView;
+        if (view == null) {
+            LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+            view = inflater.inflate(R.layout.item_follower, null);
+        }
+        TextView followerName = (TextView) view.findViewById(R.id.follwerName);
+        final LinearLayout row = (LinearLayout) view.findViewById(R.id.followerListRow);
+        Button deleteButton = (Button) view.findViewById(R.id.deleteFollower);
+
+        final ExistingFollower follower = list.get(position);
+
+        followerName.setText(follower.ContactName);
+        final View finalView = view;
+        deleteButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Action1<Boolean> deleteFollowerListener = new Action1<Boolean>() {
+                    @Override
+                    public void call(Boolean deleted) {
+                        if (deleted) {
+                            Toast.makeText(context, "Follower deleted succesfully", Toast.LENGTH_LONG).show();
+                            finalView.setVisibility(View.GONE);
+                        } else {
+                            Toast.makeText(context, "Failed to delete follower", Toast.LENGTH_LONG).show();
+                        }
+                    }
+                };
+                followerManager.deleteFollower(deleteFollowerListener, follower.ContactId);
+            }
+        });
+        return view;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java
new file mode 100644
index 0000000..db75b07
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java
@@ -0,0 +1,132 @@
+package com.eveningoutpost.dexdrip;
+
+import android.app.Dialog;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.text.TextUtils;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.ShareModels.FollowerManager;
+import com.eveningoutpost.dexdrip.ShareModels.Models.ExistingFollower;
+import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
+
+import java.util.List;
+
+import rx.functions.Action1;
+
+/**
+ * Created by stephenblack on 8/11/15.
+ */
+public class FollowerManagementActivity extends ActivityWithMenu {
+    static String FollowerManagementActivity = Home.class.getName();
+    public static String menu_name = "Follower Management";
+
+    ListView existingFollowersView;
+    Button addFollowerButton;
+    FollowerManager followerManager;
+    Action1<List<ExistingFollower>> existingFollowerListener;
+    List<ExistingFollower> existingFollowerList;
+    FollowerListAdapter followerListAdapter;
+
+    String login;
+    String password;
+    String receiverSn;
+
+
+    @Override
+    public String getMenuName() {
+        return menu_name;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_follower_management);
+        existingFollowersView = (ListView) findViewById(R.id.followerList);
+        addFollowerButton = (Button) findViewById(R.id.inviteFollower);
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        login = prefs.getString("dexcom_account_name", "");
+        password = prefs.getString("dexcom_account_password", "");
+        receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
+
+        populateFollowerList();
+        setInviteListener();
+    }
+
+    private void populateFollowerList() {
+        followerManager = new FollowerManager(login, password, receiverSn, getApplicationContext());
+         existingFollowerListener = new Action1<List<ExistingFollower>>() {
+            @Override
+            public void call(List<ExistingFollower> existingFollowers) {
+                if(followerListAdapter != null) {
+                    existingFollowerList.clear();
+                    existingFollowerList.addAll(existingFollowers);
+                    followerListAdapter.notifyDataSetChanged();
+                } else {
+                    existingFollowerList = existingFollowers;
+                    followerListAdapter = new FollowerListAdapter(getApplicationContext(), followerManager, existingFollowerList);
+                    existingFollowersView.setAdapter(followerListAdapter);
+                }
+            }
+        };
+        followerManager.getFollowers(existingFollowerListener);
+    }
+
+    private void setInviteListener() {
+        addFollowerButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                final Dialog dialog = new Dialog(FollowerManagementActivity.this);
+                dialog.setContentView(R.layout.dialog_invite_follower);
+                dialog.setTitle("Invite a Follower");
+                Button saveButton = (Button) dialog.findViewById(R.id.saveButton);
+                Button cancelButton = (Button) dialog.findViewById(R.id.cancelButton);
+                final EditText followerName = (EditText) dialog.findViewById(R.id.followerNameField);
+                final EditText followerNicName = (EditText) dialog.findViewById(R.id.followerDisplayNameField);
+                final EditText followerEmail = (EditText) dialog.findViewById(R.id.followerEmailField);
+                saveButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        if (!TextUtils.isEmpty(followerName.getText()) && !TextUtils.isEmpty(followerNicName.getText()) && !TextUtils.isEmpty(followerEmail.getText())) {
+                            Action1<Boolean> invitedFollowerListener = new Action1<Boolean>() {
+                                @Override
+                                public void call(Boolean deleted) {
+                                    if (deleted) {
+                                        Toast.makeText(getApplicationContext(), "Follower invite sent succesfully", Toast.LENGTH_LONG).show();
+                                        populateFollowerList();
+                                    } else {
+                                        Toast.makeText(getApplicationContext(), "Failed to invite follower", Toast.LENGTH_LONG).show();
+                                    }
+                                }
+                            };
+                            followerManager.inviteFollower(followerEmail.getText().toString().trim(), followerName.getText().toString().trim(), followerNicName.getText().toString().trim(), invitedFollowerListener);
+                        }
+                        dialog.dismiss();
+                    }
+                });
+                cancelButton.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        dialog.dismiss();
+                    }
+                });
+                WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
+                lp.copyFrom(dialog.getWindow().getAttributes());
+                lp.width = WindowManager.LayoutParams.MATCH_PARENT;
+                dialog.show();
+                dialog.getWindow().setAttributes(lp);
+            }
+        });
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 3b97a3f..5348ceb 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -12,6 +12,7 @@
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.support.v4.widget.DrawerLayout;
+import android.util.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -29,18 +30,17 @@
 import com.eveningoutpost.dexdrip.UtilityModels.Intents;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 import com.eveningoutpost.dexdrip.utils.DatabaseUtil;
+import com.nispok.snackbar.Snackbar;
+import com.nispok.snackbar.SnackbarManager;
+import com.nispok.snackbar.enums.SnackbarType;
+import com.nispok.snackbar.listeners.ActionClickListener;
 
 import java.io.File;
 import java.text.DecimalFormat;
 import java.util.Date;
 import java.util.List;
 
-import com.nispok.snackbar.Snackbar;
-import com.nispok.snackbar.SnackbarManager;
-import com.nispok.snackbar.enums.SnackbarType;
-import com.nispok.snackbar.listeners.ActionClickListener;
-
-import lecho.lib.hellocharts.ViewportChangeListener;
+import lecho.lib.hellocharts.listener.ViewportChangeListener;
 import lecho.lib.hellocharts.gesture.ZoomType;
 import lecho.lib.hellocharts.model.Viewport;
 import lecho.lib.hellocharts.view.LineChartView;
@@ -48,6 +48,7 @@
 
 
 public class Home extends ActivityWithMenu {
+    static String TAG = Home.class.getName();
     public static String menu_name = "xDrip";
     private boolean updateStuff;
     private boolean updatingPreviewViewport = false;
@@ -165,20 +166,28 @@ public void setupCharts() {
 
     public void setViewport() {
         if (tempViewport.left == 0.0 || holdViewport.left == 0.0 || holdViewport.right >= (new Date().getTime())) {
-            previewChart.setCurrentViewport(bgGraphBuilder.advanceViewport(chart, previewChart), false);
+            previewChart.setCurrentViewport(bgGraphBuilder.advanceViewport(chart, previewChart));
         } else {
-            previewChart.setCurrentViewport(holdViewport, false);
+            previewChart.setCurrentViewport(holdViewport);
         }
     }
 
     @Override
     public void onPause() {
         super.onPause();
-        if (_broadcastReceiver != null) {
-            unregisterReceiver(_broadcastReceiver);
+        if (_broadcastReceiver != null ) {
+            try {
+                unregisterReceiver(_broadcastReceiver);
+            } catch (IllegalArgumentException e) {
+                Log.e(TAG, "_broadcast_receiver not registered", e);
+            }
         }
         if (newDataReceiver != null) {
-            unregisterReceiver(newDataReceiver);
+            try {
+                unregisterReceiver(newDataReceiver);
+            } catch (IllegalArgumentException e) {
+                Log.e(TAG, "newDataReceiver not registered", e);
+            }
         }
     }
 
@@ -231,7 +240,7 @@ private void updateCurrentBgInfoForBtBasedWixel(TextView notificationText) {
         }
         updateCurrentBgInfoCommon(notificationText);
     }
-    
+
     private void updateCurrentBgInfoCommon(TextView notificationText) {
         final boolean isSensorActive = Sensor.isActive();
         if(!isSensorActive){
@@ -265,7 +274,7 @@ private void updateCurrentBgInfoCommon(TextView notificationText) {
                     notificationText.setText("Please enter two calibrations to get started!");
                 }
             }
-        }        
+        }
     }
 
     private void updateCurrentBgInfoForBtShare(TextView notificationText) {
@@ -430,7 +439,7 @@ public void onViewportChanged(Viewport newViewport) {
             if (!updatingPreviewViewport) {
                 updatingChartViewport = true;
                 previewChart.setZoomType(ZoomType.HORIZONTAL);
-                previewChart.setCurrentViewport(newViewport, false);
+                previewChart.setCurrentViewport(newViewport);
                 updatingChartViewport = false;
             }
         }
@@ -442,7 +451,7 @@ public void onViewportChanged(Viewport newViewport) {
             if (!updatingChartViewport) {
                 updatingPreviewViewport = true;
                 chart.setZoomType(ZoomType.HORIZONTAL);
-                chart.setCurrentViewport(newViewport, false);
+                chart.setCurrentViewport(newViewport);
                 tempViewport = newViewport;
                 updatingPreviewViewport = false;
             }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/PacketBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/PacketBuilder.java
index 987952f..72134cf 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/PacketBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/PacketBuilder.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadData.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadData.java
index 4019d9c..4dcfa4f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadData.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadData.java
@@ -4,7 +4,7 @@
 import android.hardware.usb.UsbDeviceConnection;
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbInterface;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.CdcAcmSerialDriver;
 import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialDriver;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadDataShare.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadDataShare.java
index dc93055..e0e567d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadDataShare.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/ReadDataShare.java
@@ -5,7 +5,7 @@
 import android.bluetooth.BluetoothGattService;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbDeviceConnection;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.EGVRecord;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
index 8470c59..3aa9c4e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
@@ -1,27 +1,25 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom;
 
 import android.app.IntentService;
-import android.bluetooth.BluetoothClass;
-import android.content.Intent;
 import android.content.Context;
+import android.content.Intent;
 import android.content.SharedPreferences;
 import android.hardware.usb.UsbDevice;
 import android.hardware.usb.UsbDeviceConnection;
 import android.hardware.usb.UsbManager;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
-import android.util.Log;
-import android.widget.Toast;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
-import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.CdcAcmSerialDriver;
-import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.ProbeTable;
-import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialDriver;
-import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialProber;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.EGVRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.GlucoseDataSet;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.MeterRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.SensorRecord;
+import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.CdcAcmSerialDriver;
+import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.ProbeTable;
+import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialDriver;
+import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialProber;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 
 import org.json.JSONArray;
@@ -103,7 +101,7 @@ protected void onHandleIntent(Intent intent) {
                 final int param1 = intent.getIntExtra(SYNC_PERIOD, 1);
                 handleActionSync(param1);
             } else if (ACTION_CALIBRATION_CHECKIN.equals(action)) {
-                Log.w("CALIBRATION-CHECK-IN: ", "Beginning check in process");
+                Log.i("CALIBRATION-CHECK-IN: ", "Beginning check in process");
                 performCalibrationCheckin();
             }
         }
@@ -118,14 +116,14 @@ private void performCalibrationCheckin(){
         PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "NSDownload");
         wl.acquire();
         try {
-            Log.w("CALIBRATION-CHECK-IN: ", "Wake Lock Acquired");
+            Log.i("CALIBRATION-CHECK-IN: ", "Wake Lock Acquired");
             if (acquireSerialDevice()) {
                 try {
                     ReadData readData = new ReadData(mSerialDevice, mConnection, dexcom);
 
 //                ReadData readData = new ReadData(mSerialDevice);
                     CalRecord[] calRecords = readData.getRecentCalRecords();
-                    Log.w("CALIBRATION-CHECK-IN: ", "Found " + calRecords.length + " Records!");
+                    Log.i("CALIBRATION-CHECK-IN: ", "Found " + calRecords.length + " Records!");
                     save_most_recent_cal_record(calRecords);
 
                 } catch (Exception e) {
@@ -257,7 +255,7 @@ private boolean acquireSerialDevice() {
                         mSerialDevice = driver;
 
                         mConnection = connection;
-                        Log.w("CALIBRATION-CHECK-IN: ", "CONNECTEDDDD!!");
+                        Log.i("CALIBRATION-CHECK-IN: ", "CONNECTEDDDD!!");
                         return true;
                     }
                 } else {
@@ -274,16 +272,16 @@ private boolean acquireSerialDevice() {
     static public boolean isG4Connected(Context c){
         UsbManager manager = (UsbManager) c.getSystemService(Context.USB_SERVICE);
         HashMap<String, UsbDevice> deviceList = manager.getDeviceList();
-        Log.w("USB DEVICES = ", deviceList.toString());
+        Log.i("USB DEVICES = ", deviceList.toString());
         Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();
-        Log.w("USB DEVICES = ", String.valueOf(deviceList.size()));
+        Log.i("USB DEVICES = ", String.valueOf(deviceList.size()));
 
         while(deviceIterator.hasNext()){
             UsbDevice device = deviceIterator.next();
             if (device.getVendorId() == 8867 && device.getProductId() == 71
                     && device.getDeviceClass() == 2 && device.getDeviceSubclass() ==0
                     && device.getDeviceProtocol() == 0){
-                Log.w("CALIBRATION-CHECK-IN: ", "Dexcom Found!");
+                Log.i("CALIBRATION-CHECK-IN: ", "Dexcom Found!");
                 return true;
             }
         }
@@ -291,13 +289,13 @@ static public boolean isG4Connected(Context c){
     }
 
     public UsbDevice findDexcom() {
-        Log.w("CALIBRATION-CHECK-IN: ", "Searching for dexcom");
+        Log.i("CALIBRATION-CHECK-IN: ", "Searching for dexcom");
         mUsbManager = (UsbManager) getApplicationContext().getSystemService(Context.USB_SERVICE);
-        Log.w("USB MANAGER = ", mUsbManager.toString());
+        Log.i("USB MANAGER = ", mUsbManager.toString());
         HashMap<String, UsbDevice> deviceList = mUsbManager.getDeviceList();
-        Log.w("USB DEVICES = ", deviceList.toString());
+        Log.i("USB DEVICES = ", deviceList.toString());
         Iterator<UsbDevice> deviceIterator = deviceList.values().iterator();
-        Log.w("USB DEVICES = ", String.valueOf(deviceList.size()));
+        Log.i("USB DEVICES = ", String.valueOf(deviceList.size()));
 
         while(deviceIterator.hasNext()){
             UsbDevice device = deviceIterator.next();
@@ -305,7 +303,7 @@ public UsbDevice findDexcom() {
                     && device.getDeviceClass() == 2 && device.getDeviceSubclass() ==0
                     && device.getDeviceProtocol() == 0){
                 dexcom = device;
-                Log.w("CALIBRATION-CHECK-IN: ", "Dexcom Found!");
+                Log.i("CALIBRATION-CHECK-IN: ", "Dexcom Found!");
                 return device;
             } else {
                 Log.w("CALIBRATION-CHECK-IN: ", "that was not a dexcom (I dont think)");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalRecord.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalRecord.java
index 7e1fb01..8353cea 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalRecord.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalRecord.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalSubrecord.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalSubrecord.java
index c0f7d7e..be2f954 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalSubrecord.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/CalSubrecord.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.Utils;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/EGVRecord.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/EGVRecord.java
index bebae24..be2d23b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/EGVRecord.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/EGVRecord.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.Constants;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/GenericXMLRecord.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/GenericXMLRecord.java
index 7cde730..73137ac 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/GenericXMLRecord.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/GenericXMLRecord.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/PageHeader.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/PageHeader.java
index 8a5b8e7..b473150 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/PageHeader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/PageHeader.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.CRC16;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.CRCFailRuntimeException;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/SensorRecord.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/SensorRecord.java
index 7b03dde..d300e8c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/SensorRecord.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/records/SensorRecord.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/CdcAcmSerialDriver.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/CdcAcmSerialDriver.java
index c3a043c..2aadb1d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/CdcAcmSerialDriver.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/CdcAcmSerialDriver.java
@@ -28,7 +28,7 @@
 import android.hardware.usb.UsbInterface;
 import android.hardware.usb.UsbRequest;
 import android.os.Build;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/Cp21xxSerialDriver.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/Cp21xxSerialDriver.java
index 197ebca..535e18b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/Cp21xxSerialDriver.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/Cp21xxSerialDriver.java
@@ -27,7 +27,7 @@
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbInterface;
 import android.hardware.usb.UsbRequest;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/FtdiSerialDriver.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/FtdiSerialDriver.java
index d0aa0e2..7506629 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/FtdiSerialDriver.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/FtdiSerialDriver.java
@@ -26,7 +26,7 @@
 import android.hardware.usb.UsbDeviceConnection;
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbRequest;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.util.HexDump;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/ProlificSerialDriver.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/ProlificSerialDriver.java
index e0da249..d666d18 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/ProlificSerialDriver.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/driver/ProlificSerialDriver.java
@@ -33,7 +33,7 @@
 import android.hardware.usb.UsbEndpoint;
 import android.hardware.usb.UsbInterface;
 import android.hardware.usb.UsbRequest;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.io.IOException;
 import java.lang.reflect.Method;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/util/SerialInputOutputManager.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/util/SerialInputOutputManager.java
index 6dbf778..8267c48 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/util/SerialInputOutputManager.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/usbserial/util/SerialInputOutputManager.java
@@ -22,7 +22,7 @@
 package com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.util;
 
 import android.hardware.usb.UsbRequest;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.usbserial.driver.UsbSerialPort;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
index b231f0c..413a92e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
@@ -1,14 +1,13 @@
 package com.eveningoutpost.dexdrip.Models;
 
-import android.util.Log;
 import android.provider.BaseColumns;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
-import com.activeandroid.annotation.Column;
 import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
-import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
 
 import java.text.DateFormat;
 import java.util.Date;
@@ -119,7 +118,7 @@ public static AlertType alertTypegetOnly() {
     }
 
     public static void Create(String alert_uuid, boolean is_snoozed, Long next_alert_at) {
-        Log.e(TAG, "ActiveBgAlert Create called");
+        Log.d(TAG, "ActiveBgAlert Create called");
         ActiveBgAlert aba = getOnly();
         if (aba == null) {
             aba = new ActiveBgAlert();
@@ -133,7 +132,7 @@ public static void Create(String alert_uuid, boolean is_snoozed, Long next_alert
     }
 
     public static void ClearData() {
-        Log.e(TAG, "ActiveBgAlert ClearData called");
+        Log.d(TAG, "ActiveBgAlert ClearData called");
         ActiveBgAlert aba = getOnly();
         if (aba != null) {
             aba.delete();
@@ -141,11 +140,11 @@ public static void ClearData() {
     }
 
     public static void ClearIfSnoozeFinished() {
-        Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished called");
+        Log.d(TAG, "ActiveBgAlert ClearIfSnoozeFinished called");
         ActiveBgAlert aba = getOnly();
         if (aba != null) {
             if(new Date().getTime() > aba.next_alert_at) {
-                Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished deleting allert");
+                Log.d(TAG, "ActiveBgAlert ClearIfSnoozeFinished deleting allert");
                 aba.delete();
             }
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
index f403012..0ad82bb 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
@@ -1,28 +1,20 @@
 package com.eveningoutpost.dexdrip.Models;
 
-import android.R.bool;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.query.Select;
-import com.eveningoutpost.dexdrip.Home;
-import com.eveningoutpost.dexdrip.Sensor;
 import com.eveningoutpost.dexdrip.Services.MissedReadingService;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
-import com.google.gson.Gson;
-import com.google.gson.GsonBuilder;
-import com.google.gson.annotations.Expose;
-import com.google.gson.internal.bind.DateTypeAdapter;
 
-import java.text.DateFormat;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
@@ -131,14 +123,14 @@ public static AlertType get_highest_active_alert(Context context, double bg) {
             Notifications.bgUnclearAlert(context);
         }
         if ((UnclearTime > 0 ) && bg_unclear_readings_alerts) {
-            Log.e(TAG_ALERT, "We are in an clear state, but not for too long. Alerts are disabled");
+            Log.w(TAG_ALERT, "We are in an clear state, but not for too long. Alerts are disabled");
             return null;
         }
         at = get_highest_active_alert_helper(bg);
         if (at != null) {
-            Log.e(TAG_ALERT, "get_highest_active_alert_helper returned alert uuid = " + at.uuid + " alert name = " + at.name);
+            Log.d(TAG_ALERT, "get_highest_active_alert_helper returned alert uuid = " + at.uuid + " alert name = " + at.name);
         } else {
-            Log.e(TAG_ALERT, "get_highest_active_alert_helper returned NULL");
+            Log.d(TAG_ALERT, "get_highest_active_alert_helper returned NULL");
         }
         return at;
     }
@@ -324,9 +316,9 @@ public static void print_all() {
             .from(AlertType.class)
             .execute();
 
-        Log.e(TAG,"List of all alerts");
+        Log.d(TAG,"List of all alerts");
         for (AlertType alert : Alerts) {
-            Log.e(TAG, alert.toString());
+            Log.d(TAG, alert.toString());
         }
     }
 
@@ -365,28 +357,28 @@ public static void testAll(Context context) {
         add_alert(null, "high alert 3", true, 220, true, 10, null, 0, 0, true, 20, true);
         print_all();
         AlertType a1 = get_highest_active_alert(context, 190);
-        Log.e(TAG, "a1 = " + a1.toString());
+        Log.d(TAG, "a1 = " + a1.toString());
         AlertType a2 = get_highest_active_alert(context, 210);
-        Log.e(TAG, "a2 = " + a2.toString());
+        Log.d(TAG, "a2 = " + a2.toString());
 
 
         AlertType a3 = get_alert(a1.uuid);
-        Log.e(TAG, "a1 == a3 ? need to see true " + (a1==a3) + a1 + " " + a3);
+        Log.d(TAG, "a1 == a3 ? need to see true " + (a1==a3) + a1 + " " + a3);
 
         add_alert(null, "low alert 1", false, 80, true, 10, null, 0, 0, true, 20, true);
         add_alert(null, "low alert 2", false, 60, true, 10, null, 0, 0, true, 20, true);
 
         AlertType al1 = get_highest_active_alert(context, 90);
-        Log.e(TAG, "al1 should be null  " + al1);
+        Log.d(TAG, "al1 should be null  " + al1);
         al1 = get_highest_active_alert(context, 80);
-        Log.e(TAG, "al1 = " + al1.toString());
+        Log.d(TAG, "al1 = " + al1.toString());
         AlertType al2 = get_highest_active_alert(context, 50);
-        Log.e(TAG, "al2 = " + al2.toString());
+        Log.d(TAG, "al2 = " + al2.toString());
 
-        Log.e(TAG, "HigherAlert(a1, a2) = a1?" +  (HigherAlert(a1,a2) == a2));
-        Log.e(TAG, "HigherAlert(al1, al2) = al1?" +  (HigherAlert(al1,al2) == al2));
-        Log.e(TAG, "HigherAlert(a1, al1) = al1?" +  (HigherAlert(a1,al1) == al1));
-        Log.e(TAG, "HigherAlert(al1, a2) = al1?" +  (HigherAlert(al1,a2) == al1));
+        Log.d(TAG, "HigherAlert(a1, a2) = a1?" +  (HigherAlert(a1,a2) == a2));
+        Log.d(TAG, "HigherAlert(al1, al2) = al1?" +  (HigherAlert(al1,al2) == al2));
+        Log.d(TAG, "HigherAlert(a1, al1) = al1?" +  (HigherAlert(a1,al1) == al1));
+        Log.d(TAG, "HigherAlert(al1, a2) = al1?" +  (HigherAlert(al1,a2) == al1));
 
         // Make sure we do not influance on real data...
         remove_all();
@@ -402,7 +394,7 @@ private boolean in_time_frame() {
         // time_now is the number of minutes that have passed from the start of the day.
         Calendar rightNow = Calendar.getInstance();
         int time_now = toTime(rightNow.get(Calendar.HOUR_OF_DAY), rightNow.get(Calendar.MINUTE));
-        Log.e(TAG, "time_now is " + time_now + " minutes" + " start_time " + start_time_minutes + " end_time " + end_time_minutes);
+        Log.d(TAG, "time_now is " + time_now + " minutes" + " start_time " + start_time_minutes + " end_time " + end_time_minutes);
         if(start_time_minutes < end_time_minutes) {
             if (time_now >= start_time_minutes && time_now <= end_time_minutes) {
                 return true;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index d62a781..dbe251b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -5,7 +5,7 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -14,6 +14,7 @@
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.EGVRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.SensorRecord;
 import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.ShareModels.ShareUploadableBg;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
@@ -30,7 +31,7 @@
 import java.util.UUID;
 
 @Table(name = "BgReadings", id = BaseColumns._ID)
-public class BgReading extends Model {
+public class BgReading extends Model implements ShareUploadableBg{
     private static boolean predictBG;
     private final static String TAG = BgReading.class.getSimpleName();
     private final static String TAG_ALERT = TAG +" AlertBg";
@@ -155,7 +156,7 @@ public static double activeSlope() {
         BgReading bgReading = BgReading.lastNoSenssor();
         if (bgReading != null) {
             double slope = (2 * bgReading.a * (new Date().getTime() + BESTOFFSET)) + bgReading.b;
-            Log.w(TAG, "ESTIMATE SLOPE" + slope);
+            Log.i(TAG, "ESTIMATE SLOPE" + slope);
             return slope;
         }
         return 0;
@@ -202,7 +203,7 @@ public static void create(SensorRecord[] sensorRecords, long addativeOffset, Con
     }
 
     public static void create(SensorRecord sensorRecord, long addativeOffset, Context context) {
-        Log.w(TAG, "create: gonna make some sensor records: " + sensorRecord.getUnfiltered());
+        Log.i(TAG, "create: gonna make some sensor records: " + sensorRecord.getUnfiltered());
         if(BgReading.is_new(sensorRecord, addativeOffset)) {
             BgReading bgReading = new BgReading();
             Sensor sensor = Sensor.currentSensor();
@@ -227,7 +228,7 @@ public static void create(SensorRecord sensorRecord, long addativeOffset, Contex
 
     public static void create(EGVRecord egvRecord, long addativeOffset, Context context) {
         BgReading bgReading = BgReading.getForTimestamp(egvRecord.getSystemTime().getTime() + addativeOffset);
-        Log.w(TAG, "create: Looking for BG reading to tag this thing to: " + egvRecord.getBGValue());
+        Log.i(TAG, "create: Looking for BG reading to tag this thing to: " + egvRecord.getBGValue());
         if(bgReading != null) {
             bgReading.calculated_value = egvRecord.getBGValue();
             if (egvRecord.getBGValue() <= 13) {
@@ -237,10 +238,11 @@ public static void create(EGVRecord egvRecord, long addativeOffset, Context cont
                 double calIntercept = ((calibration.first_scale * calibration.first_intercept) / firstAdjSlope)*-1;
                 bgReading.raw_calculated = (((calSlope * bgReading.raw_data) + calIntercept) - 5);
             }
-            Log.w(TAG, "create: NEW VALUE CALCULATED AT: " + bgReading.calculated_value);
+            Log.i(TAG, "create: NEW VALUE CALCULATED AT: " + bgReading.calculated_value);
             bgReading.calculated_value_slope = bgReading.slopefromName(egvRecord.getTrend().friendlyTrendName());
             bgReading.noise = egvRecord.noiseValue();
-            if(egvRecord.getTrend().friendlyTrendName().compareTo("NOT_COMPUTABLE") == 0 || egvRecord.getTrend().friendlyTrendName().compareTo("OUT_OF_RANGE") == 0) {
+            String friendlyName = egvRecord.getTrend().friendlyTrendName();
+            if(friendlyName.compareTo("NONE") == 0 || friendlyName.compareTo("NOT_COMPUTABLE") == 0 || friendlyName.compareTo("OUT_OF_RANGE") == 0) {
                 bgReading.hide_slope = true;
             }
             bgReading.save();
@@ -263,7 +265,7 @@ public static BgReading getForTimestamp(double timestamp) {
                     .orderBy("timestamp desc")
                     .executeSingle();
             if(bgReading != null && Math.abs(bgReading.timestamp - timestamp) < (3*60*1000)) { //cool, so was it actually within 4 minutes of that bg reading?
-                Log.w(TAG, "getForTimestamp: Found a BG timestamp match");
+                Log.i(TAG, "getForTimestamp: Found a BG timestamp match");
                 return bgReading;
             }
         }
@@ -282,11 +284,11 @@ public static boolean is_new(SensorRecord sensorRecord, long addativeOffset) {
                     .orderBy("timestamp desc")
                     .executeSingle();
             if(bgReading != null && Math.abs(bgReading.timestamp - timestamp) < (3*60*1000)) { //cool, so was it actually within 4 minutes of that bg reading?
-                Log.w(TAG, "isNew; Old Reading");
+                Log.i(TAG, "isNew; Old Reading");
                 return false;
             }
         }
-        Log.w(TAG, "isNew: New Reading");
+        Log.i(TAG, "isNew: New Reading");
         return true;
     }
 
@@ -294,7 +296,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
         BgReading bgReading = new BgReading();
         Sensor sensor = Sensor.currentSensor();
         if (sensor == null) {
-            Log.w("BG GSON: ",bgReading.toS());
+            Log.i("BG GSON: ",bgReading.toS());
 
             return bgReading;
         }
@@ -352,7 +354,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
             } else {
                 bgReading.calculated_value = Math.min(400, Math.max(39, bgReading.calculated_value));
             }
-            Log.w(TAG, "NEW VALUE CALCULATED AT: " + bgReading.calculated_value);
+            Log.i(TAG, "NEW VALUE CALCULATED AT: " + bgReading.calculated_value);
 
             bgReading.save();
             bgReading.perform_calculations();
@@ -360,7 +362,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
             BgSendQueue.addToQueue(bgReading, "create", context);
         }
 
-        Log.w("BG GSON: ",bgReading.toS());
+        Log.i("BG GSON: ",bgReading.toS());
 
         return bgReading;
     }
@@ -411,7 +413,7 @@ public String slopeName() {
             arrow = "DoubleUp";
         }
         if(hide_slope) {
-            arrow = "9";
+            arrow = "NOT_COMPUTABLE";
         }
         return arrow;
     }
@@ -432,7 +434,7 @@ public double slopefromName(String slope_name) {
             slope_by_minute = 3.5;
         } else if (slope_name.compareTo("DoubleUp") == 0) {
             slope_by_minute = 4;
-        } else if (slope_name.compareTo("NOT_COMPUTABLE") == 0 || slope_name.compareTo("OUT_OF_RANGE") == 0) {
+        } else if (slope_name.compareTo("NOT_COMPUTABLE") == 0 || slope_name.compareTo("OUT_OF_RANGE") == 0 || slope_name.compareTo("NONE") == 0) {
             slope_by_minute = 0;
         }
         return slope_by_minute /60000;
@@ -541,12 +543,12 @@ public static double estimated_raw_bg(double timestamp) {
         double estimate;
         BgReading latest = BgReading.last();
         if (latest == null) {
-            Log.w(TAG, "No data yet, assume perfect!");
+            Log.i(TAG, "No data yet, assume perfect!");
             estimate = 160;
         } else {
             estimate = (latest.ra * timestamp * timestamp) + (latest.rb * timestamp) + latest.rc;
         }
-        Log.w(TAG, "ESTIMATE RAW BG" + estimate);
+        Log.i(TAG, "ESTIMATE RAW BG" + estimate);
         return estimate;
     }
 
@@ -591,12 +593,12 @@ public void find_new_curve() {
             b = (-y1*(x2+x3)/((x1-x2)*(x1-x3))-y2*(x1+x3)/((x2-x1)*(x2-x3))-y3*(x1+x2)/((x3-x1)*(x3-x2)));
             c = (y1*x2*x3/((x1-x2)*(x1-x3))+y2*x1*x3/((x2-x1)*(x2-x3))+y3*x1*x2/((x3-x1)*(x3-x2)));
 
-            Log.w(TAG, "find_new_curve: BG PARABOLIC RATES: "+a+"x^2 + "+b+"x + "+c);
+            Log.i(TAG, "find_new_curve: BG PARABOLIC RATES: "+a+"x^2 + "+b+"x + "+c);
 
             save();
         } else if (last_3.size() == 2) {
 
-            Log.w(TAG, "find_new_curve: Not enough data to calculate parabolic rates - assume Linear");
+            Log.i(TAG, "find_new_curve: Not enough data to calculate parabolic rates - assume Linear");
                 BgReading latest = last_3.get(0);
                 BgReading second_latest = last_3.get(1);
 
@@ -613,15 +615,15 @@ public void find_new_curve() {
                 a = 0;
                 c = -1 * ((latest.b * x1) - y1);
 
-            Log.w(TAG, ""+latest.a+"x^2 + "+latest.b+"x + "+latest.c);
+            Log.i(TAG, ""+latest.a+"x^2 + "+latest.b+"x + "+latest.c);
                 save();
             } else {
-            Log.w(TAG, "find_new_curve: Not enough data to calculate parabolic rates - assume static data");
+            Log.i(TAG, "find_new_curve: Not enough data to calculate parabolic rates - assume static data");
             a = 0;
             b = 0;
             c = calculated_value;
 
-            Log.w(TAG, ""+a+"x^2 + "+b+"x + "+c);
+            Log.i(TAG, ""+a+"x^2 + "+b+"x + "+c);
             save();
         }
     }
@@ -630,7 +632,7 @@ public void calculateAgeAdjustedRawValue(){
         double adjust_for = (86400000 * 1.9) - time_since_sensor_started;
         if (adjust_for > 0) {
             age_adjusted_raw_value = (((.45) * (adjust_for / (86400000 * 1.9))) * raw_data) + raw_data;
-            Log.w(TAG, "calculateAgeAdjustedRawValue: RAW VALUE ADJUSTMENT FROM:" + raw_data + " TO: " + age_adjusted_raw_value);
+            Log.i(TAG, "calculateAgeAdjustedRawValue: RAW VALUE ADJUSTMENT FROM:" + raw_data + " TO: " + age_adjusted_raw_value);
         } else {
             age_adjusted_raw_value = raw_data;
         }
@@ -653,7 +655,7 @@ public void find_new_raw_curve() {
             rb = (-y1*(x2+x3)/((x1-x2)*(x1-x3))-y2*(x1+x3)/((x2-x1)*(x2-x3))-y3*(x1+x2)/((x3-x1)*(x3-x2)));
             rc = (y1*x2*x3/((x1-x2)*(x1-x3))+y2*x1*x3/((x2-x1)*(x2-x3))+y3*x1*x2/((x3-x1)*(x3-x2)));
 
-            Log.w(TAG, "find_new_raw_curve: RAW PARABOLIC RATES: "+ra+"x^2 + "+rb+"x + "+rc);
+            Log.i(TAG, "find_new_raw_curve: RAW PARABOLIC RATES: "+ra+"x^2 + "+rb+"x + "+rc);
             save();
         } else if (last_3.size() == 2) {
             BgReading latest = last_3.get(0);
@@ -671,12 +673,12 @@ public void find_new_raw_curve() {
             ra = 0;
             rc = -1 * ((latest.rb * x1) - y1);
 
-            Log.w(TAG, "find_new_raw_curve: Not enough data to calculate parabolic rates - assume Linear data");
+            Log.i(TAG, "find_new_raw_curve: Not enough data to calculate parabolic rates - assume Linear data");
 
-            Log.w(TAG, "RAW PARABOLIC RATES: "+ra+"x^2 + "+rb+"x + "+rc);
+            Log.i(TAG, "RAW PARABOLIC RATES: "+ra+"x^2 + "+rb+"x + "+rc);
             save();
         } else {
-            Log.w(TAG, "find_new_raw_curve: Not enough data to calculate parabolic rates - assume static data");
+            Log.i(TAG, "find_new_raw_curve: Not enough data to calculate parabolic rates - assume static data");
             BgReading latest_entry = BgReading.lastNoSenssor();
             ra = 0;
             rb = 0;
@@ -718,19 +720,19 @@ public int noiseValue() {
         if (latest == null || latest.size() != NumReadings) {
             // for less than NumReadings readings, we can't tell what the situation
             //
-            Log.e(TAG_ALERT, "getXRecentPoints we don't have enough readings, returning null");
+            Log.d(TAG_ALERT, "getXRecentPoints we don't have enough readings, returning null");
             return null;
         }
         // So, we have at least three values...
         for(BgReading bgReading : latest) {
-            Log.e(TAG_ALERT, "getXRecentPoints - reading: time = " + bgReading.timestamp + " calculated_value " + bgReading.calculated_value);
+            Log.d(TAG_ALERT, "getXRecentPoints - reading: time = " + bgReading.timestamp + " calculated_value " + bgReading.calculated_value);
         }
 
         // now let's check that they are relevant. the last reading should be from the last 5 minutes,
         // x-1 more readings should be from the last (x-1)*5 minutes. we will allow 5 minutes for the last
         // x to allow one packet to be missed.
         if (new Date().getTime() - latest.get(NumReadings - 1).timestamp > (NumReadings * 5 + 6) * 60 * 1000) {
-            Log.e(TAG_ALERT, "getXRecentPoints we don't have enough points from the last " + (NumReadings * 5 + 6) + " minutes, returning null");
+            Log.d(TAG_ALERT, "getXRecentPoints we don't have enough points from the last " + (NumReadings * 5 + 6) + " minutes, returning null");
             return null;
         }
         return latest;
@@ -744,12 +746,12 @@ public static void checkForRisingAllert(Context context) {
             return;
         }
         if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
-            Log.w("NOTIFICATIONS", "checkForRisingAllert: Notifications are currently disabled!!");
+            Log.i("NOTIFICATIONS", "checkForRisingAllert: Notifications are currently disabled!!");
             return;
         }
 
         if(IsUnclearTime(context)) {
-            Log.e(TAG_ALERT, "checkForRisingAllert we are in an clear time, returning without doing anything");
+            Log.d(TAG_ALERT, "checkForRisingAllert we are in an clear time, returning without doing anything");
             return ;
         }
 
@@ -764,7 +766,7 @@ public static void checkForRisingAllert(Context context) {
         {
             Log.e(TAG_ALERT, "checkForRisingAllert reading falling_bg_val failed, continuing with 2", nfe);
         }
-        Log.w(TAG_ALERT, "checkForRisingAllert will check for rate of " + friseRate);
+        Log.d(TAG_ALERT, "checkForRisingAllert will check for rate of " + friseRate);
 
         boolean riseAlert = checkForDropRiseAllert(friseRate, false);
         Notifications.RisingAlert(context, riseAlert);
@@ -783,7 +785,7 @@ public static void checkForDropAllert(Context context) {
         }
 
         if(IsUnclearTime(context)) {
-            Log.e(TAG_ALERT, "checkForDropAllert we are in an clear time, returning without doing anything");
+            Log.d(TAG_ALERT, "checkForDropAllert we are in an clear time, returning without doing anything");
             return ;
         }
 
@@ -798,7 +800,7 @@ public static void checkForDropAllert(Context context) {
         {
             Log.e(TAG_ALERT, "reading falling_bg_val failed, continuing with 2", nfe);
         }
-        Log.w(TAG_ALERT, "checkForDropAllert will check for rate of " + fdropRate);
+        Log.i(TAG_ALERT, "checkForDropAllert will check for rate of " + fdropRate);
 
         boolean dropAlert = checkForDropRiseAllert(fdropRate, true);
         Notifications.DropAlert(context, dropAlert);
@@ -806,10 +808,10 @@ public static void checkForDropAllert(Context context) {
 
     // true say, alert is on.
     private static boolean checkForDropRiseAllert(float MaxSpeed, boolean drop) {
-        Log.e(TAG_ALERT, "checkForDropRiseAllert called drop=" + drop);
+        Log.d(TAG_ALERT, "checkForDropRiseAllert called drop=" + drop);
         List<BgReading> latest = getXRecentPoints(4);
         if(latest == null) {
-            Log.e(TAG_ALERT, "checkForDropRiseAllert we don't have enough points from the last 15 minutes, returning false");
+            Log.d(TAG_ALERT, "checkForDropRiseAllert we don't have enough points from the last 15 minutes, returning false");
             return false;
         }
         float time3 = (latest.get(0).timestamp - latest.get(3).timestamp) / 60000;
@@ -817,9 +819,9 @@ private static boolean checkForDropRiseAllert(float MaxSpeed, boolean drop) {
         if (!drop) {
             bg_diff3 *= (-1);
         }
-        Log.w(TAG_ALERT, "bg_diff3=" + bg_diff3 + " time3 = " + time3);
+        Log.i(TAG_ALERT, "bg_diff3=" + bg_diff3 + " time3 = " + time3);
         if(bg_diff3 < time3 * MaxSpeed) {
-            Log.e(TAG_ALERT, "checkForDropRiseAllert for latest 4 points not fast enough, returning false");
+            Log.d(TAG_ALERT, "checkForDropRiseAllert for latest 4 points not fast enough, returning false");
             return false;
         }
         // we should alert here, but if the last measurement was less than MaxSpeed / 2, I won't.
@@ -832,14 +834,14 @@ private static boolean checkForDropRiseAllert(float MaxSpeed, boolean drop) {
         }
 
         if(time1 > 7.0) {
-            Log.e(TAG_ALERT, "checkForDropRiseAllert the two points are not close enough, returning true");
+            Log.d(TAG_ALERT, "checkForDropRiseAllert the two points are not close enough, returning true");
             return true;
         }
         if(bg_diff1 < time1 * MaxSpeed /2) {
-            Log.e(TAG_ALERT, "checkForDropRiseAllert for latest 2 points not fast enough, returning false");
+            Log.d(TAG_ALERT, "checkForDropRiseAllert for latest 2 points not fast enough, returning false");
             return false;
         }
-        Log.e(TAG_ALERT, "checkForDropRiseAllert returning true speed is " + (bg_diff3 / time3));
+        Log.d(TAG_ALERT, "checkForDropRiseAllert returning true speed is " + (bg_diff3 / time3));
         return true;
     }
 
@@ -851,7 +853,7 @@ private static boolean IsUnclearTime(Context context) {
             Long UnclearTimeSetting = Long.parseLong(prefs.getString("bg_unclear_readings_minutes", "90")) * 60000;
             Long unclearTime = getUnclearTime(UnclearTimeSetting);
             if (unclearTime > 0) {
-                Log.e(TAG_ALERT, "IsUnclearTime we are in an clear time, returning true");
+                Log.d(TAG_ALERT, "IsUnclearTime we are in an clear time, returning true");
                 return true;
             }
         }
@@ -868,16 +870,16 @@ private static boolean IsUnclearTime(Context context) {
 
     public static boolean trendingToAlertEnd(Context context, boolean above) {
         // TODO: check if we are not in an UnclerTime.
-        Log.e(TAG_ALERT, "trendingToAlertEnd called");
+        Log.d(TAG_ALERT, "trendingToAlertEnd called");
 
         if(IsUnclearTime(context)) {
-            Log.e(TAG_ALERT, "trendingToAlertEnd we are in an clear time, returning false");
+            Log.d(TAG_ALERT, "trendingToAlertEnd we are in an clear time, returning false");
             return false;
         }
 
         List<BgReading> latest = getXRecentPoints(3);
         if(latest == null) {
-            Log.e(TAG_ALERT, "trendingToAlertEnd we don't have enough points from the last 15 minutes, returning false");
+            Log.d(TAG_ALERT, "trendingToAlertEnd we don't have enough points from the last 15 minutes, returning false");
             return false;
         }
 
@@ -885,25 +887,25 @@ public static boolean trendingToAlertEnd(Context context, boolean above) {
             // This is a low alert, we should be going up
             if((latest.get(0).calculated_value - latest.get(1).calculated_value > 4) ||
                (latest.get(0).calculated_value - latest.get(2).calculated_value > 10)) {
-                Log.e(TAG_ALERT, "trendingToAlertEnd returning true for low alert");
+                Log.d(TAG_ALERT, "trendingToAlertEnd returning true for low alert");
                 return true;
             }
         } else {
             // This is a high alert we should be heading down
             if((latest.get(1).calculated_value - latest.get(0).calculated_value > 4) ||
                (latest.get(2).calculated_value - latest.get(0).calculated_value > 10)) {
-                Log.e(TAG_ALERT, "trendingToAlertEnd returning true for high alert");
+                Log.d(TAG_ALERT, "trendingToAlertEnd returning true for high alert");
                 return true;
             }
         }
-        Log.e(TAG_ALERT, "trendingToAlertEnd returning false, not in the right direction (or not fast enough)");
+        Log.d(TAG_ALERT, "trendingToAlertEnd returning false, not in the right direction (or not fast enough)");
         return false;
 
     }
 
     // Should that be combined with noiseValue?
     private Boolean Unclear() {
-        Log.e(TAG_ALERT, "Unclear filtered_data=" + filtered_data + " raw_data=" + raw_data);
+        Log.d(TAG_ALERT, "Unclear filtered_data=" + filtered_data + " raw_data=" + raw_data);
         return raw_data > filtered_data * 1.3 || raw_data < filtered_data * 0.7;
     }
 
@@ -917,7 +919,7 @@ private Boolean Unclear() {
      * */
 
     // The extra 120,000 is to allow the packet to be delayed for some time and still be counted in that group
-    // Please don't use for MAX_INFLUANCE a number that is complete multiply of 5 minutes (300,000) 
+    // Please don't use for MAX_INFLUANCE a number that is complete multiply of 5 minutes (300,000)
     static final int MAX_INFLUANCE = 30 * 60000 - 120000; // A bad point means data is untrusted for 30 minutes.
     private static Long getUnclearTimeHelper(List<BgReading> latest, Long interstingTime, final Long now) {
 
@@ -934,19 +936,19 @@ private static Long getUnclearTimeHelper(List<BgReading> latest, Long intersting
                 break;
             }
             if(bgReading.timestamp <= now - MAX_INFLUANCE  && UnclearTime == 0) {
-                Log.e(TAG_ALERT, "We did not have a problematic reading for MAX_INFLUANCE time, so now all is well");
+                Log.d(TAG_ALERT, "We did not have a problematic reading for MAX_INFLUANCE time, so now all is well");
                 return 0l;
 
             }
             if (bgReading.Unclear()) {
                 // here we assume that there are no missing points. Missing points might join the good and bad values as well...
                 // we should have checked if we have a period, but it is hard to say how to react to them.
-                Log.e(TAG_ALERT, "We have a bad reading, so setting UnclearTime to " + bgReading.timestamp);
+                Log.d(TAG_ALERT, "We have a bad reading, so setting UnclearTime to " + bgReading.timestamp);
                 UnclearTime = bgReading.timestamp;
                 LastGoodTime = 0l;
             } else {
                 if (LastGoodTime == 0l) {
-                    Log.e(TAG_ALERT, "We are starting a good period at "+ bgReading.timestamp);
+                    Log.d(TAG_ALERT, "We are starting a good period at "+ bgReading.timestamp);
                     LastGoodTime = bgReading.timestamp;
                 } else {
                     // we have some good period, is it good enough?
@@ -955,7 +957,7 @@ private static Long getUnclearTimeHelper(List<BgReading> latest, Long intersting
                         if (UnclearTime ==0) {
                             Log.wtf(TAG_ALERT, "ERROR - UnclearTime must not be 0 here !!!");
                         }
-                        Log.e(TAG_ALERT, "We have a good period from " + bgReading.timestamp + " to " + LastGoodTime + "returning " + (now - UnclearTime +5 *60000));
+                        Log.d(TAG_ALERT, "We have a good period from " + bgReading.timestamp + " to " + LastGoodTime + "returning " + (now - UnclearTime +5 *60000));
                         return now - UnclearTime + 5 *60000;
                     }
                 }
@@ -963,10 +965,10 @@ private static Long getUnclearTimeHelper(List<BgReading> latest, Long intersting
         }
         // if we are here, we have a problem... or not.
         if(UnclearTime == 0l) {
-            Log.e(TAG_ALERT, "Since we did not find a good period, but we also did not find a single bad value, we assume things are good");
+            Log.d(TAG_ALERT, "Since we did not find a good period, but we also did not find a single bad value, we assume things are good");
             return 0l;
         }
-        Log.e(TAG_ALERT, "We scanned all over, but could not find a good period. we have a bad value, so assuming that the whole period is bad" +
+        Log.w(TAG_ALERT, "We scanned all over, but could not find a good period. we have a bad value, so assuming that the whole period is bad" +
                 " returning " + interstingTime);
         // Note that we might now have all the points, and in this case, since we don't have a good period I return a bad period.
         return interstingTime;
@@ -1028,9 +1030,9 @@ static void TestgetUnclearTime(String input, Long interstingTime, Long expectedR
         List<BgReading> readings = createlatestTest(input, now);
         Long result = getUnclearTimeHelper(readings, interstingTime * 60000, now);
         if (result >= expectedResult * 60000 - 20000 && result <= expectedResult * 60000+20000) {
-            Log.e(TAG_ALERT, "Test passed");
+            Log.d(TAG_ALERT, "Test passed");
         } else {
-            Log.e(TAG_ALERT, "Test failed expectedResult = " + expectedResult + " result = "+ result / 60000.0);
+            Log.d(TAG_ALERT, "Test failed expectedResult = " + expectedResult + " result = "+ result / 60000.0);
         }
 
     }
@@ -1067,4 +1069,34 @@ public static void TestgetUnclearTimes() {
         TestgetUnclearTime("bb",                       10l, 2l * 5);
     }
 
+    public int getSlopeOrdinal() {
+        double slope_by_minute = calculated_value_slope * 60000;
+        int ordinal = 0;
+        if(!hide_slope) {
+            if (slope_by_minute <= (-3.5)) {
+                ordinal = 7;
+            } else if (slope_by_minute <= (-2)) {
+                ordinal = 6;
+            } else if (slope_by_minute <= (-1)) {
+                ordinal = 5;
+            } else if (slope_by_minute <= (1)) {
+                ordinal = 4;
+            } else if (slope_by_minute <= (2)) {
+                ordinal = 3;
+            } else if (slope_by_minute <= (3.5)) {
+                ordinal = 2;
+            } else {
+                ordinal = 1;
+            }
+        }
+        return ordinal;
+    }
+
+    public int getMgdlValue() {
+        return (int) calculated_value;
+    }
+
+    public long getEpochTimestamp() {
+        return timestamp;
+    }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index 73e76ee..a72f95d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -5,7 +5,7 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -238,7 +238,7 @@ public static void initialCalibration(double bg1, double bg2, Context context) {
     public static void create(CalRecord[] calRecords, Context context) { create(calRecords, context, false, 0); }
     public static void create(CalRecord[] calRecords, Context context, boolean override, long addativeOffset) {
         //TODO: Change calibration.last and other queries to order calibrations by timestamp rather than ID
-        Log.w("CALIBRATION-CHECK-IN: ", "Creating Calibration Record");
+        Log.i("CALIBRATION-CHECK-IN: ", "Creating Calibration Record");
         Sensor sensor = Sensor.currentSensor();
         CalRecord firstCalRecord = calRecords[0];
         CalRecord secondCalRecord = calRecords[0];
@@ -494,7 +494,7 @@ private double calculateWeight() {
         double lastTimeStarted =   Calibration.last().sensor_age_at_time_of_estimation;
         double time_percentage = Math.min(((sensor_age_at_time_of_estimation - firstTimeStarted) / (lastTimeStarted - firstTimeStarted)) / (.85), 1);
         time_percentage = (time_percentage + .01);
-        Log.w(TAG, "CALIBRATIONS TIME PERCENTAGE WEIGHT: " + time_percentage);
+        Log.i(TAG, "CALIBRATIONS TIME PERCENTAGE WEIGHT: " + time_percentage);
         return Math.max((((((slope_confidence + sensor_confidence) * (time_percentage))) / 2) * 100), 1);
     }
     public static void adjustRecentBgReadings() {// This just adjust the last 30 bg readings transition from one calibration point to the next
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
index 5d44bb9..592562d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
@@ -1,7 +1,7 @@
 package com.eveningoutpost.dexdrip.Models;
 
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -41,16 +41,16 @@ public static TransmitterData create(byte[] buffer, int len, Long timestamp) {
         TransmitterData transmitterData = new TransmitterData();
         if (buffer[0] == 0x11 && buffer[1] == 0x00) {
             //this is a dexbridge packet.  Process accordingly.
-            Log.w(TAG, "create Processing a Dexbridge packet");
+            Log.i(TAG, "create Processing a Dexbridge packet");
             ByteBuffer txData = ByteBuffer.allocate(len);
             txData.order(ByteOrder.LITTLE_ENDIAN);
             txData.put(buffer, 0, len);
             transmitterData.raw_data = txData.getInt(2);
             transmitterData.filtered_data = txData.getInt(6);
             transmitterData.sensor_battery_level = txData.get(10);
-            Log.w(TAG, "Created transmitterData record with Raw value of " + transmitterData.raw_data + " and Filtered value of " + transmitterData.filtered_data + " at " + transmitterData.timestamp);
+            Log.i(TAG, "Created transmitterData record with Raw value of " + transmitterData.raw_data + " and Filtered value of " + transmitterData.filtered_data + " at " + transmitterData.timestamp);
         } else { //this is NOT a dexbridge packet.  Process accordingly.
-            Log.w(TAG, "create Processing a BTWixel or IPWixel packet");
+            Log.i(TAG, "create Processing a BTWixel or IPWixel packet");
             StringBuilder data_string = new StringBuilder();
             for (int i = 0; i < len; ++i) { data_string.append((char) buffer[i]); }
             String[] data = data_string.toString().split("\\s+");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/User.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/User.java
index 338cd70..226f933 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/User.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/User.java
@@ -1,7 +1,7 @@
 package com.eveningoutpost.dexdrip.Models;
 
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -79,7 +79,6 @@ public void success(String gsonResponse, Response response) {
                     @Override
                     public void failure(RetrofitError error) {
                         Response response = error.getResponse();
-                        Log.w("REST CALL ERROR:", "****************");
                         Log.w("REST CALL STATUS:", "" + response.getStatus());
                         Log.w("REST CALL REASON:", response.getReason());
                     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserError.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserError.java
new file mode 100644
index 0000000..dc6cf1c
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserError.java
@@ -0,0 +1,169 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.os.AsyncTask;
+import android.provider.BaseColumns;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by stephenblack on 8/3/15.
+ */
+
+@Table(name = "UserErrors", id = BaseColumns._ID)
+public class UserError extends Model {
+
+    @Column(name = "shortError")
+    public String shortError; // Short error message to be displayed on table
+
+    @Column(name = "message")
+    public String message; // Additional text when error is expanded
+
+    @Column(name = "severity", index = true)
+    public int severity; // int between 1 and 3, 3 being most severe
+
+    @Column(name = "timestamp", index = true)
+    public double timestamp; // Time the error was raised
+
+    //todo: rather than include multiples of the same error, should we have a "Count" and just increase that on duplicates?
+    //or rather, perhaps we should group up the errors
+
+
+    public UserError() {}
+
+    public UserError(int severity, String shortError, String message) {
+        this.severity = severity;
+        this.shortError = shortError;
+        this.message = message;
+        this.timestamp = new Date().getTime();
+        this.save();
+        cleanup();
+    }
+
+    public UserError(String shortError, String message) {
+        this(2, shortError, message);
+    }
+
+    public static UserError UserErrorHigh(String shortError, String message) {
+        return new UserError(3, shortError, message);
+    }
+
+    public static UserError UserErrorLow(String shortError, String message) {
+        return new UserError(1, shortError, message);
+    }
+
+    public static void cleanup() {
+       new Cleanup().execute(deletable());
+    }
+
+    public static List<UserError> all() {
+        return new Select()
+                .from(UserError.class)
+                .orderBy("timestamp desc")
+                .execute();
+    }
+
+    public static List<UserError> deletable() {
+        List<UserError> userErrors = new Select()
+                .from(UserError.class)
+                .where("severity < ?", 3)
+                .where("timestamp < ?", (new Date().getTime() - 1000 * 60 * 60 * 24))
+                .orderBy("timestamp desc")
+                .execute();
+        List<UserError> highErrors = new Select()
+                .from(UserError.class)
+                .where("severity = ?", 3)
+                .where("timestamp < ?", (new Date().getTime() - 1000*60*60*24*3))
+                .orderBy("timestamp desc")
+                .execute();
+        userErrors.addAll(highErrors);
+        return userErrors;
+    }
+
+    public static List<UserError> bySeverity(Integer[] levels) {
+        String levelsString = " ";
+        for (int level : levels) {
+            levelsString += level + ",";
+        }
+        Log.d("TEST", "severity in ("+levelsString.substring(0,levelsString.length() - 1)+")");
+        return new Select()
+                .from(UserError.class)
+                .where("severity in ("+levelsString.substring(0,levelsString.length() - 1)+")")
+                .orderBy("timestamp desc")
+                .execute();
+    }
+
+    private static class Cleanup extends AsyncTask<List<UserError>, Integer, Boolean> {
+        @Override
+        protected Boolean doInBackground(List<UserError>... errors) {
+            try {
+                for(UserError userError : errors[0]) {
+                    userError.delete();
+                }
+                return true;
+            } catch(Exception e) {
+                return false;
+            }
+        }
+    }
+
+    public static List<UserError> bySeverity(int level) {
+        return bySeverity(new Integer[]{level});
+    }
+    public static List<UserError> bySeverity(int level, int level2) {
+        return bySeverity(new Integer[]{ level, level2 });
+    }
+    public static List<UserError> bySeverity(int level, int level2, int level3) {
+        return bySeverity(new Integer[]{ level, level2, level3 });
+    }
+
+
+    public static class Log {
+        public static void e(String a, String b){
+            android.util.Log.e(a, b);
+            new UserError(a, b);
+        }
+
+        public static void e(String a, String b, Exception e){
+            android.util.Log.e(a, b, e);
+            new UserError(a, b + "\n" + e.toString());
+        }
+
+        public static void w(String a, String b){
+            android.util.Log.w(a, b);
+            UserError.UserErrorLow(a, b);
+        }
+        public static void w(String a, String b, Exception e){
+            android.util.Log.w(a, b, e);
+            UserError.UserErrorLow(a, b + "\n" + e.toString());
+        }
+        public static void wtf(String a, String b){
+            android.util.Log.wtf(a, b);
+            UserError.UserErrorHigh(a, b);
+        }
+        public static void wtf(String a, String b, Exception e){
+            android.util.Log.wtf(a, b, e);
+            UserError.UserErrorHigh(a, b + "\n" + e.toString());
+        }
+        public static void wtf(String a, Exception e){
+            android.util.Log.wtf(a, e);
+            UserError.UserErrorHigh(a, e.toString());
+        }
+        public static void d(String a, String b){
+            android.util.Log.d(a, b);
+        }
+
+        public static void v(String a, String b){
+            android.util.Log.v(a, b);
+        }
+
+        public static void i(String a, String b){
+            android.util.Log.i(a, b);
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index 9d5e27d..d44dfe8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -3,10 +3,8 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.preference.Preference;
 import android.preference.PreferenceManager;
 
-import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
@@ -36,7 +34,7 @@ public NavDrawerBuilder(Context aContext) {
         context = aContext;
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         boolean IUnderstand = prefs.getBoolean("I_understand", false);
-        if(IUnderstand == false) {
+        if (IUnderstand == false) {
             this.nav_drawer_options.add("Settings");
             this.nav_drawer_intents.add(new Intent(context, Preferences.class));
             return;
@@ -44,14 +42,18 @@ public NavDrawerBuilder(Context aContext) {
 
         this.nav_drawer_options.add(Home.menu_name);
         this.nav_drawer_intents.add(new Intent(context, Home.class));
-        if(is_active_sensor) {
+        if (is_active_sensor) {
             this.nav_drawer_options.add("Calibration Graph");
             this.nav_drawer_intents.add(new Intent(context, CalibrationGraph.class));
         }
-        this.nav_drawer_options.add("BG Data Table");
-        this.nav_drawer_intents.add(new Intent(context, BgReadingTable.class));
-        this.nav_drawer_options.add("Calibration Data Table");
-        this.nav_drawer_intents.add(new Intent(context, CalibrationDataTable.class));
+
+        if (prefs.getBoolean("show_data_tables", false)) {
+            this.nav_drawer_options.add("BG Data Table");
+            this.nav_drawer_intents.add(new Intent(context, BgReadingTable.class));
+            this.nav_drawer_options.add("Calibration Data Table");
+            this.nav_drawer_intents.add(new Intent(context, CalibrationDataTable.class));
+        }
+
         if(is_active_sensor) {
             if(!CollectionServiceStarter.isBTShare(context)) {
                 if (last_two_bgReadings.size() > 1) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
index faf63e3..c9ba2a3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
@@ -1,7 +1,7 @@
 package com.eveningoutpost.dexdrip;
 
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -40,7 +40,7 @@ public static Sensor create(long started_at) {
         sensor.uuid = UUID.randomUUID().toString();
         sensor.save();
         SensorSendQueue.addToQueue(sensor);
-        Log.w("SENSOR MODEL:", sensor.toString());
+        Log.d("SENSOR MODEL:", sensor.toString());
         return sensor;
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index cdc568c..e0dac68 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -35,7 +35,7 @@
 import android.os.IBinder;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
@@ -89,7 +89,7 @@ public void onCreate() {
         dexCollectionService = this;
         prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         listenForChangeInSettings();
-        Log.w(TAG, "onCreate: STARTING SERVICE");
+        Log.i(TAG, "onCreate: STARTING SERVICE");
     }
 
     @Override
@@ -112,24 +112,23 @@ public int onStartCommand(Intent intent, int flags, int startId) {
     @Override
     public void onDestroy() {
         super.onDestroy();
-        Log.w(TAG, "onDestroy entered");
         close();
         foregroundServiceStarter.stop();
         setRetryTimer();
-        Log.w(TAG, "SERVICE STOPPED");
+        Log.i(TAG, "SERVICE STOPPED");
     }
 
     public SharedPreferences.OnSharedPreferenceChangeListener prefListener = new SharedPreferences.OnSharedPreferenceChangeListener() {
         public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
             if (key.compareTo("run_service_in_foreground") == 0) {
-                Log.e("FOREGROUND", "run_service_in_foreground changed!");
+                Log.d("FOREGROUND", "run_service_in_foreground changed!");
                 if (prefs.getBoolean("run_service_in_foreground", false)) {
                     foregroundServiceStarter = new ForegroundServiceStarter(getApplicationContext(), dexCollectionService);
                     foregroundServiceStarter.start();
-                    Log.w(TAG, "Moving to foreground");
+                    Log.d(TAG, "Moving to foreground");
                 } else {
                     dexCollectionService.stopForeground(true);
-                    Log.w(TAG, "Removing from foreground");
+                    Log.d(TAG, "Removing from foreground");
                 }
             }
             if(key.equals("dex_collection_method") || key.equals("dex_txid")){
@@ -196,7 +195,7 @@ public void attemptConnection() {
             }
         }
 
-        Log.w(TAG, "attemptConnection: Connection state: " + getStateStr(mConnectionState));
+        Log.i(TAG, "attemptConnection: Connection state: " + getStateStr(mConnectionState));
         if (mConnectionState == STATE_DISCONNECTED || mConnectionState == STATE_DISCONNECTING) {
             ActiveBluetoothDevice btDevice = ActiveBluetoothDevice.first();
             if (btDevice != null) {
@@ -207,7 +206,7 @@ public void attemptConnection() {
                 }
             }
         } else if (mConnectionState == STATE_CONNECTED) { //WOOO, we are good to go, nothing to do here!
-            Log.w(TAG, "attemptConnection: Looks like we are already connected, going to read!");
+            Log.i(TAG, "attemptConnection: Looks like we are already connected, going to read!");
             return;
         }
 
@@ -240,20 +239,20 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
                 case BluetoothProfile.STATE_CONNECTED:
                     mConnectionState = STATE_CONNECTED;
                     ActiveBluetoothDevice.connected();
-                    Log.w(TAG, "onConnectionStateChange: Connected to GATT server.");
+                    Log.i(TAG, "onConnectionStateChange: Connected to GATT server.");
                     mBluetoothGatt.discoverServices();
                     break;
                 case BluetoothProfile.STATE_DISCONNECTED:
                     mConnectionState = STATE_DISCONNECTED;
                     ActiveBluetoothDevice.disconnected();
                     if (mBluetoothGatt != null) {
-                        Log.w(TAG, "onConnectionStateChange: mBluetoothGatt is not null, closing.");
+                        Log.i(TAG, "onConnectionStateChange: mBluetoothGatt is not null, closing.");
                         mBluetoothGatt.close();
                         mBluetoothGatt = null;
                         mCharacteristic = null;
                     }
                     lastdata = null;
-                    Log.w(TAG, "onConnectionStateChange: Disconnected from GATT server.");
+                    Log.i(TAG, "onConnectionStateChange: Disconnected from GATT server.");
                     setRetryTimer();
                     break;
             }
@@ -298,7 +297,7 @@ public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteris
                     "DexCollectionService");
             wakeLock1.acquire();
             try {
-                Log.w(TAG, "onCharacteristicChanged entered");
+                Log.i(TAG, "onCharacteristicChanged entered");
                 final byte[] data = characteristic.getValue();
                 if (lastdata != null && data != null && data.length > 0) {
                     if (!Arrays.equals(lastdata, data)) {
@@ -343,14 +342,14 @@ private void listAvailableServices(BluetoothGatt bluetoothGatt) {
 
     private boolean sendBtMessage(final ByteBuffer message) {
         //check mBluetoothGatt is available
-        Log.w(TAG, "sendBtMessage: entered");
+        Log.i(TAG, "sendBtMessage: entered");
         if (mBluetoothGatt == null) {
-            Log.e(TAG, "sendBtMessage: lost connection");
+            Log.w(TAG, "sendBtMessage: lost connection");
             return false;
         }
 
         byte[] value = message.array();
-        Log.w(TAG, "sendBtMessage: sending message");
+        Log.i(TAG, "sendBtMessage: sending message");
         mCharacteristic.setValue(value);
 
         return mBluetoothGatt.writeCharacteristic(mCharacteristic);
@@ -377,14 +376,14 @@ private int getSrcValue(char ch) {
     }
 
     public boolean connect(final String address) {
-        Log.w(TAG, "connect: going to connect to device at address: " + address);
+        Log.i(TAG, "connect: going to connect to device at address: " + address);
         if (mBluetoothAdapter == null || address == null) {
-            Log.w(TAG, "connect: BluetoothAdapter not initialized or unspecified address.");
+            Log.i(TAG, "connect: BluetoothAdapter not initialized or unspecified address.");
             setRetryTimer();
             return false;
         }
         if (mBluetoothGatt != null) {
-            Log.w(TAG, "connect: mBluetoothGatt isnt null, Closing.");
+            Log.i(TAG, "connect: mBluetoothGatt isnt null, Closing.");
             mBluetoothGatt.close();
             mBluetoothGatt = null;
         }
@@ -394,14 +393,14 @@ public boolean connect(final String address) {
             setRetryTimer();
             return false;
         }
-        Log.w(TAG, "connect: Trying to create a new connection.");
+        Log.i(TAG, "connect: Trying to create a new connection.");
         mBluetoothGatt = device.connectGatt(getApplicationContext(), true, mGattCallback);
         mConnectionState = STATE_CONNECTING;
         return true;
     }
 
     public void close() {
-        Log.w(TAG, "close: Closing Connection");
+        Log.i(TAG, "close: Closing Connection");
         if (mBluetoothGatt == null) {
             return;
         }
@@ -415,7 +414,7 @@ public void close() {
     public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
         long timestamp = new Date().getTime();
         if (CollectionServiceStarter.isDexbridgeWixel(getApplicationContext())) {
-            Log.w(TAG, "setSerialDataToTransmitterRawData: Dealing with Dexbridge packet!");
+            Log.i(TAG, "setSerialDataToTransmitterRawData: Dealing with Dexbridge packet!");
             int DexSrc;
             int TransmitterID;
             String TxId;
@@ -428,7 +427,7 @@ public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
             txidMessage.order(ByteOrder.LITTLE_ENDIAN);
             if (buffer[0] == 0x07 && buffer[1] == -15) {
                 //We have a Beacon packet.  Get the TXID value and compare with dex_txid
-                Log.w(TAG, "setSerialDataToTransmitterRawData: Received Beacon packet.");
+                Log.i(TAG, "setSerialDataToTransmitterRawData: Received Beacon packet.");
                 //DexSrc starts at Byte 2 of a Beacon packet.
                 DexSrc = tmpBuffer.getInt(2);
                 TxId = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getString("dex_txid", "00000");
@@ -444,7 +443,7 @@ public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
             }
             if (buffer[0] == 0x11 && buffer[1] == 0x00) {
                 //we have a data packet.  Check to see if the TXID is what we are expecting.
-                Log.w(TAG, "setSerialDataToTransmitterRawData: Received Data packet");
+                Log.i(TAG, "setSerialDataToTransmitterRawData: Received Data packet");
                 //make sure we are not processing a packet we already have
                 if (secondsNow - lastPacketTime < 60000) {
                     Log.v(TAG, "setSerialDataToTransmitterRawData: Received Duplicate Packet.  Exiting.");
@@ -488,7 +487,7 @@ private void processNewTransmitterData(TransmitterData transmitterData, long tim
 
         Sensor sensor = Sensor.currentSensor();
         if (sensor == null) {
-            Log.w(TAG, "setSerialDataToTransmitterRawData: No Active Sensor, Data only stored in Transmitter Data");
+            Log.i(TAG, "setSerialDataToTransmitterRawData: No Active Sensor, Data only stored in Transmitter Data");
             return;
         }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
index dc6701f..0761c98 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
@@ -22,7 +22,7 @@
 import android.os.IBinder;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.ReadDataShare;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalRecord;
@@ -134,7 +134,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                 setRetryTimer();
                 return START_NOT_STICKY;
             }
-            Log.w(TAG, "STARTING SERVICE");
+            Log.i(TAG, "STARTING SERVICE");
             attemptConnection();
         } finally {
             if(wakeLock != null && wakeLock.isHeld()) wakeLock.release();
@@ -149,7 +149,7 @@ public void onDestroy() {
         setRetryTimer();
         foregroundServiceStarter.stop();
         unregisterReceiver(mPairReceiver);
-        Log.w(TAG, "SERVICE STOPPED");
+        Log.i(TAG, "SERVICE STOPPED");
     }
 
     public SharedPreferences.OnSharedPreferenceChangeListener prefListener = new SharedPreferences.OnSharedPreferenceChangeListener() {
@@ -159,10 +159,10 @@ public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
                 if (prefs.getBoolean("run_service_in_foreground", false)) {
                     foregroundServiceStarter = new ForegroundServiceStarter(getApplicationContext(), service);
                     foregroundServiceStarter.start();
-                    Log.w(TAG, "Moving to foreground");
+                    Log.i(TAG, "Moving to foreground");
                 } else {
                     service.stopForeground(true);
-                    Log.w(TAG, "Removing from foreground");
+                    Log.i(TAG, "Removing from foreground");
                 }
             }
         }
@@ -220,7 +220,7 @@ public void attemptConnection() {
                     }
                 }
             }
-            Log.w(TAG, "Connection state: " + mConnectionState);
+            Log.i(TAG, "Connection state: " + mConnectionState);
             if (mConnectionState == STATE_DISCONNECTED || mConnectionState == STATE_DISCONNECTING) {
                 ActiveBluetoothDevice btDevice = ActiveBluetoothDevice.first();
                 if (btDevice != null) {
@@ -241,7 +241,7 @@ public void attemptConnection() {
                     return;
                 }
             } else if (mConnectionState == STATE_CONNECTED) {
-                Log.w(TAG, "Looks like we are already connected, going to read!");
+                Log.i(TAG, "Looks like we are already connected, going to read!");
                 attemptRead();
                 return;
             } else {
@@ -335,14 +335,15 @@ public boolean connect(final String address) {
         PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(getApplicationContext().POWER_SERVICE);
         PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                 "DexShareCollectionStart");
-        wakeLock.acquire(30000);Log.w(TAG, "going to connect to device at address" + address);
+        wakeLock.acquire(30000);
+        Log.i(TAG, "going to connect to device at address" + address);
         if (mBluetoothAdapter == null || address == null) {
             Log.w(TAG, "BluetoothAdapter not initialized or unspecified address.");
             setRetryTimer();
             return false;
         }
         if (mBluetoothGatt != null) {
-            Log.w(TAG, "BGatt isnt null, Closing.");
+            Log.i(TAG, "BGatt isnt null, Closing.");
             mBluetoothGatt.close();
             mBluetoothGatt = null;
         }
@@ -362,14 +363,14 @@ public boolean connect(final String address) {
             setRetryTimer();
             return false;
         }
-        Log.w(TAG, "Trying to create a new connection.");
+        Log.i(TAG, "Trying to create a new connection.");
         mBluetoothGatt = device.connectGatt(getApplicationContext(), false, mGattCallback);
         mConnectionState = STATE_CONNECTING;
         return true;
     }
 
     public void authenticateConnection() {
-        Log.w(TAG, "Trying to auth");
+        Log.i(TAG, "Trying to auth");
         String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase() + "000000";
         if(receiverSn.compareTo("SM00000000000000") == 0) { // They havnt set their serial number, dont bond!
             setRetryTimer();
@@ -421,7 +422,7 @@ public void assignCharacteristics() {
     }
 
     public void setListeners(int listener_number) {
-        Log.w(TAG, "Setting Listener: #" + listener_number);
+        Log.i(TAG, "Setting Listener: #" + listener_number);
         if (listener_number == 1) {
             step = 2;
             setCharacteristicIndication(mReceiveDataCharacteristic);
@@ -440,7 +441,7 @@ public void close() {
         setRetryTimer();
         mBluetoothGatt = null;
         mConnectionState = STATE_DISCONNECTED;
-        Log.w(TAG, "bt Disconnected");
+        Log.i(TAG, "bt Disconnected");
     }
 
     public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic) {
@@ -448,10 +449,10 @@ public void setCharacteristicNotification(BluetoothGattCharacteristic characteri
     }
 
     public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) {
-        Log.w(TAG, "Characteristic setting notification");
+        Log.i(TAG, "Characteristic setting notification");
         mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);
         BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(HM10Attributes.CLIENT_CHARACTERISTIC_CONFIG));
-        Log.w(TAG, "Descriptor found: " + descriptor.getUuid());
+        Log.i(TAG, "Descriptor found: " + descriptor.getUuid());
         descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
         mBluetoothGatt.writeDescriptor(descriptor);
     }
@@ -461,10 +462,10 @@ public void setCharacteristicIndication(BluetoothGattCharacteristic characterist
     }
 
     public void setCharacteristicIndication(BluetoothGattCharacteristic characteristic, boolean enabled) {
-        Log.w(TAG, "Characteristic setting indication");
+        Log.i(TAG, "Characteristic setting indication");
         mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);
         BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(HM10Attributes.CLIENT_CHARACTERISTIC_CONFIG));
-        Log.w(TAG, "Descriptor found: " + descriptor.getUuid());
+        Log.i(TAG, "Descriptor found: " + descriptor.getUuid());
         descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
         mBluetoothGatt.writeDescriptor(descriptor);
     }
@@ -536,7 +537,7 @@ public void onReceive(Context context, Intent intent) {
     private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {
         @Override
         public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
-            Log.w(TAG, "Gatt state change status: " + status + " new state: " + newState);
+            Log.i(TAG, "Gatt state change status: " + status + " new state: " + newState);
             writeStatusConnectionFailures(status);
             if (status == 133) {
                 Log.e(TAG, "Got the status 133 bug, GROSS!!");
@@ -546,9 +547,9 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
                 device = mBluetoothGatt.getDevice();
                 mConnectionState = STATE_CONNECTED;
                 ActiveBluetoothDevice.connected();
-                Log.w(TAG, "Connected to GATT server.");
+                Log.i(TAG, "Connected to GATT server.");
 
-                Log.w(TAG, "discovering services");
+                Log.i(TAG, "discovering services");
                 currentGattTask = GATT_SETUP;
                 if (!mBluetoothGatt.discoverServices()) {
                     Log.w(TAG, "discovering failed");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
index 0876eb7..358ccca 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
@@ -12,7 +12,7 @@
 import android.os.Build;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.ReadDataShare;
 import com.eveningoutpost.dexdrip.Models.BgReading;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MongoWrapper.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MongoWrapper.java
index 0a83674..7853a71 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MongoWrapper.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MongoWrapper.java
@@ -1,22 +1,18 @@
 package com.eveningoutpost.dexdrip.Services;
-import java.io.IOException;
-import java.net.UnknownHostException;
-
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.mongodb.BasicDBObject;
 import com.mongodb.DB;
 import com.mongodb.DBCollection;
 import com.mongodb.DBCursor;
-import com.mongodb.DBObject;
 import com.mongodb.MongoClient;
-import com.mongodb.MongoException;
 import com.mongodb.MongoClientURI;
+import com.mongodb.MongoException;
 
+import java.net.UnknownHostException;
 import java.util.Date;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.Set;
 
 public class MongoWrapper {
 
@@ -79,13 +75,13 @@ public boolean WriteToMongo(BasicDBObject bdbo)
          	coll.insert(bdbo);
 
  		} catch (UnknownHostException e) {
- 		   Log.e(TAG, "WriteToMongo cought UnknownHostException! ",e);
+ 		   Log.e(TAG, "WriteToMongo caught UnknownHostException! ",e);
  			return false;
  		} catch (MongoException e) {
- 		   Log.e(TAG, "WriteToMongo cought MongoException! ", e);
+ 		   Log.e(TAG, "WriteToMongo caught MongoException! ", e);
  			return false;
  		} catch (Exception e) {
- 		   Log.e(TAG, "WriteToMongo cought Exception! ", e);
+ 		   Log.e(TAG, "WriteToMongo caught Exception! ", e);
  			closeMongoDb();
  			return false;
  		}
@@ -110,7 +106,7 @@ public boolean WriteToMongo(BasicDBObject bdbo)
             try {
                 while(cursor.hasNext() && trd_list.size() < numberOfRecords) {
                     //System.out.println(cursor.next());
-                    Log.e(TAG, "Read an object from mongodb");
+                    Log.d(TAG, "Read an object from mongodb");
                     TransmitterRawData trd = new TransmitterRawData((BasicDBObject)cursor.next());
                     // Do our best to fix the relative time...
                     trd.RelativeTime = new Date().getTime() - trd.CaptureDateTime;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java
index c4b054d..04e2380 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java
@@ -5,7 +5,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.Home;
 import com.eveningoutpost.dexdrip.SnoozeActivity;
@@ -30,7 +30,7 @@ public SnoozeOnNotificationDismissService() {
     @Override
     protected void onHandleIntent(Intent intent) {
         AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
-        
+
         int snooze = 30;
         if(activeBgAlert != null) {
             if(activeBgAlert.default_snooze != 0) {
@@ -39,7 +39,7 @@ protected void onHandleIntent(Intent intent) {
                 snooze = SnoozeActivity.getDefaultSnooze(activeBgAlert.above);
             }
         }
-        
+
         AlertPlayer.getPlayer().Snooze(getApplicationContext(), snooze);
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
index 87299e7..b4adc75 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
@@ -9,7 +9,7 @@
 import android.content.SharedPreferences;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
index 6ac90bf..d5259e6 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
@@ -14,7 +14,7 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java
new file mode 100644
index 0000000..d3a7170
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java
@@ -0,0 +1,97 @@
+package com.eveningoutpost.dexdrip.ShareModels;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.ShareModels.Models.ShareUploadPayload;
+
+import retrofit.Callback;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+import rx.Observable;
+import rx.functions.Action1;
+
+/**
+ * Created by stephenblack on 7/31/15.
+ */
+public class BgUploader {
+    public static String TAG = BgUploader.class.getSimpleName();
+    private String sessionId;
+
+    private String username;
+    private String password;
+    private String serialNumber;
+    private Context context;
+    private SharedPreferences prefs;
+    private ShareUploadableBg bg;
+
+    private boolean uploadRetried = false;
+    private Action1<Boolean> successListener;
+
+    public BgUploader(String username, String password, String serialNumber, Context context, Action1<Boolean> successListener) {
+        this.username = username;
+        this.password = password;
+        this.serialNumber = serialNumber;
+        this.context = context;
+        this.prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        this.successListener = successListener;
+    }
+
+    public BgUploader(String username, String password, String serialNumber, Context context) {
+        this.username = username;
+        this.password = password;
+        this.serialNumber = serialNumber;
+        this.context = context;
+        this.prefs = PreferenceManager.getDefaultSharedPreferences(context);
+    }
+
+    public void upload(ShareUploadableBg bg) {
+        this.uploadRetried = false;
+        this.bg = bg;
+        tryUpload();
+    }
+
+    private void tryUpload() {
+        Action1<Boolean> authListener = new Action1<Boolean>() {
+            @Override
+            public void call(Boolean authed) {
+                if (authed) {
+                    sessionId = prefs.getString("dexcom_share_session_id", "");
+                    upload();
+                } else {
+                    if(successListener != null) {
+                        Observable.just(false).subscribe(successListener);
+                    }
+                }
+            }
+        };
+        new ShareAuthentication(username, password, serialNumber, context, authListener).authenticate();
+    }
+
+    private void upload() {
+       ShareRest.jsonBodyInterface().uploadBGRecords(ShareRest.querySessionMap(sessionId), new ShareUploadPayload(serialNumber, bg), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d(TAG, "Success!! Uploaded!!");
+                if(successListener != null) {
+                    Observable.just(true).subscribe(successListener);
+                }
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Upload failure", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, uploadRetried)) {
+                    uploadRetried = true;
+                    tryUpload();
+                } else {
+                    if(successListener != null) {
+                        Observable.just(false).subscribe(successListener);
+                    }
+                }
+            }
+        });
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/DexcomShareInterface.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/DexcomShareInterface.java
index 9e4139d..65dedc3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/DexcomShareInterface.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/DexcomShareInterface.java
@@ -1,7 +1,12 @@
 package com.eveningoutpost.dexdrip.ShareModels;
 
+import com.eveningoutpost.dexdrip.ShareModels.Models.ExistingFollower;
+import com.eveningoutpost.dexdrip.ShareModels.Models.InvitationPayload;
+import com.eveningoutpost.dexdrip.ShareModels.Models.ShareAuthenticationBody;
+import com.eveningoutpost.dexdrip.ShareModels.Models.ShareUploadPayload;
 import com.eveningoutpost.dexdrip.ShareModels.UserAgentInfo.UserAgent;
 
+import java.util.List;
 import java.util.Map;
 
 import retrofit.Callback;
@@ -60,6 +65,36 @@
 
 
     //Follower Related
+    @POST("/Publisher/ListPublisherAccountSubscriptions")
+   void getContacts(@QueryMap Map<String, String> options, Callback<List<ExistingFollower>> callback);
+    // needs ?sessionId={YourSessionId}
+    // returns
+    // [
+    //    {
+    //        "ContactId":"FollowersContactId",
+    //            "ContactName":"FollowersName",
+    //            "DateTimeCreated":{
+    //        "DateTime":"\/Date(1437101121008)\/",
+    //                "OffsetMinutes":0
+    //          },
+    //        "DateTimeModified":{
+    //        "DateTime":"\/Date(1437101121008)\/",
+    //                "OffsetMinutes":0
+    //          },
+    //        "DisplayName":"YourDisplayName",
+    //            "InviteExpires":{
+    //        "DateTime":"\/Date(1437705921008)\/",
+    //                "OffsetMinutes":0
+    //          },
+    //        "IsEnabled":false,
+    //        "IsMonitoringSessionActive":true,
+    //        "Permissions":1,
+    //        "State":2,
+    //        "SubscriberId":"00000000-0000-0000-0000-000000000000",
+    //        "SubscriptionId":"theirSubscriptionIdIsuppose?"
+    //    }
+    //]
+
     @POST("/Publisher/DoesContactExistByName")
     void doesContactExist(@QueryMap Map<String, String> options, Callback<Response> callback);
     // needs ?sessionId={YourSessionId}&contactName={newcontactName}
@@ -75,4 +110,9 @@
     // needs ?sessionId={YourSessionId}&contactId={ContactId}
     // returns a contact id
 
+    @POST("/Publisher/DeleteContact")
+    void deleteContact(@QueryMap Map<String, String> options, Callback<Response> callback);
+    // needs ?sessionId={YourSessionId}&contactId={followersContactId}
+    // just a status
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Egv.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Egv.java
deleted file mode 100644
index 9537753..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Egv.java
+++ /dev/null
@@ -1,65 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-import com.eveningoutpost.dexdrip.Models.BgReading;
-import com.google.gson.annotations.Expose;
-
-/**
- * Created by stephenblack on 3/19/15.
- */
-public class Egv {
-    @Expose
-    public int Trend;
-
-    @Expose
-    public int Value;
-
-    @Expose
-    public String ST;
-
-    @Expose
-    public String DT;
-
-
-    public Egv(BgReading bg) {
-        this.Value = (int) bg.calculated_value;
-        this.DT = toDateString(bg.timestamp);
-        this.ST = toDateString(bg.timestamp);
-        this.Trend = slopeOrdinal(bg);
-    }
-
-    public String toDateString(double timestamp) {
-        long shortened = (long) Math.floor((timestamp/1000));
-        return "/Date(" + Long.toString(shortened*1000) + ")/";
-    }
-
-    public int slopeOrdinal(BgReading bg) {
-        double slope_by_minute = bg.calculated_value_slope * 60000;
-        int arrow = 0;
-        if (slope_by_minute <= (-3.5)) {
-            arrow = 7;
-        } else if (slope_by_minute <= (-2)) {
-            arrow = 6;
-        } else if (slope_by_minute <= (-1)) {
-            arrow = 5;
-        } else if (slope_by_minute <= (1)) {
-            arrow = 4;
-        } else if (slope_by_minute <= (2)) {
-            arrow = 3;
-        } else if (slope_by_minute <= (3.5)) {
-            arrow = 2;
-        } else {
-            arrow = 1;
-        }
-        if(bg.hide_slope) {
-            arrow = 9;
-        }
-        return arrow;
-    }
-//    {
-//
-//        "Trend":4,
-//            "ST":"\/Date(1426783106000 - 1426754317000)\/",
-//            "DT":"\/Date(1426754317000)\/",
-//            "Value":97
-//    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerInvite.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerInvite.java
deleted file mode 100644
index 1f65e71..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerInvite.java
+++ /dev/null
@@ -1,146 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-import android.provider.BaseColumns;
-import android.util.Log;
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.query.Select;
-import com.google.gson.GsonBuilder;
-
-import java.util.HashMap;
-import java.util.Map;
-
-import retrofit.Callback;
-import retrofit.RestAdapter;
-import retrofit.RetrofitError;
-import retrofit.android.AndroidLog;
-import retrofit.client.Response;
-import retrofit.converter.GsonConverter;
-import retrofit.mime.TypedByteArray;
-
-/**
- * Created by stephenblack on 7/17/15.
- */
-
-@Table(name = "FollowerInvites", id = BaseColumns._ID)
-public class FollowerInvite extends Model {
-    private String sessionId;
-    private String contactId;
-
-    @Column(name = "email")
-    public String email;
-
-    @Column(name = "follower_name")
-    public String followerName;
-
-    @Column(name = "display_name")
-    public String displayName;
-
-    @Column(name = "invited")
-    public boolean invited;
-
-    public static FollowerInvite nextFollowerInvite() {
-        return new Select().from(FollowerInvite.class)
-                .where("invited = ?", false)
-                .orderBy("_ID desc")
-                .executeSingle();
-    }
-
-    public void startSendingInvite(String sessionId) {
-        this.sessionId = sessionId;
-        new ShareRest().emptyBodyInterface().doesContactExist(queryCheckContactExists(), new Callback() {
-            @Override
-            public void success(Object o, Response response) {
-                if (new String(((TypedByteArray) response.getBody()).getBytes()).toLowerCase().contains("true")) {
-                    Log.d("ShareFollower", "contact already exists");
-                    delete();
-                } else {
-                    createContact();
-                }
-            }
-
-            @Override
-            public void failure(RetrofitError retrofitError) {
-                Log.e("RETROFIT ERROR: ", "Trouble Checking if contact exists", retrofitError);
-            }
-        });
-    }
-
-    private void createContact() {
-        new ShareRest().emptyBodyInterface().createContact(queryCreateContact(), new Callback() {
-            @Override
-            public void success(Object o, Response response) {
-                Log.d("ShareFollower", "contact created!");
-                contactId = new String(((TypedByteArray) response.getBody()).getBytes()).replace("\"", "");
-                sendInviteToContact();
-            }
-
-            @Override
-            public void failure(RetrofitError retrofitError) {
-                Log.e("RETROFIT ERROR", "Creating new Contact", retrofitError);
-            }
-        });
-    }
-
-    private void sendInviteToContact() {
-        jsonBodyInterface().createInvitationForContact(invitationPayload(), querySendInvite(), new Callback() {
-            @Override
-            public void success(Object o, Response response) {
-                Log.d("ShareFollower", "contact Invite sent!");
-                delete();
-            }
-
-            @Override
-            public void failure(RetrofitError retrofitError) {
-                Log.e("RETROFIT ERROR", "Sending invite", retrofitError);
-            }
-        });
-    }
-
-    private InvitationPayload invitationPayload() {
-        return new InvitationPayload(displayName);
-    }
-
-    public Map<String, String> queryCheckContactExists() {
-        Map<String, String> map = new HashMap<>();
-        map.put("sessionID", sessionId);
-        map.put("contactName", followerName);
-        return map;
-    }
-
-    public Map<String, String> queryCreateContact() {
-        Map<String, String> map = new HashMap<>();
-        map.put("sessionID", sessionId);
-        map.put("contactName", followerName);
-        map.put("emailAddress", email);
-        return map;
-    }
-
-    public Map<String, String> querySendInvite() {
-        Map<String, String> map = new HashMap<>();
-        map.put("sessionID", sessionId);
-        map.put("contactId", contactId);
-        return map;
-    }
-
-
-    private RestAdapter.Builder authoirizeAdapterBuilder() {
-        RestAdapter.Builder adapterBuilder = new RestAdapter.Builder();
-        adapterBuilder
-                .setClient(new ShareRest().getOkClient())
-                .setLogLevel(RestAdapter.LogLevel.FULL).setLog(new AndroidLog("FollowerInvite"))
-                .setEndpoint("https://share1.dexcom.com/ShareWebServices/Services")
-                .setRequestInterceptor(ShareRest.authorizationRequestInterceptor)
-                .setConverter(new GsonConverter(new GsonBuilder().create()));
-        return adapterBuilder;
-    }
-
-    public DexcomShareInterface jsonBodyInterface() {
-        RestAdapter adapter = authoirizeAdapterBuilder().build();
-        DexcomShareInterface dexcomShareInterface =
-                adapter.create(DexcomShareInterface.class);
-        return dexcomShareInterface;
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerManager.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerManager.java
new file mode 100644
index 0000000..994a616
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/FollowerManager.java
@@ -0,0 +1,273 @@
+package com.eveningoutpost.dexdrip.ShareModels;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
+
+import com.eveningoutpost.dexdrip.ShareModels.Models.ExistingFollower;
+import com.eveningoutpost.dexdrip.ShareModels.Models.InvitationPayload;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import retrofit.Callback;
+import retrofit.RetrofitError;
+import retrofit.client.Response;
+import retrofit.mime.TypedByteArray;
+import rx.Observable;
+import rx.functions.Action1;
+
+/**
+ * Created by stephenblack on 8/10/15.
+ */
+public class FollowerManager {
+    public static String TAG = FollowerManager.class.getSimpleName();
+    private String sessionId;
+
+    private String username;
+    private String password;
+    private String serialNumber;
+    private Context context;
+    private SharedPreferences prefs;
+
+    private Action1<List <ExistingFollower>> followerListener;
+
+    private Action1<Boolean> deletedListener;
+
+    private boolean getFollowersRetried = false;
+    private boolean deleteFollowerRetried = false;
+
+    private String contactId;
+    private String email;
+    private String followerName;
+    private String displayName;
+    private Action1<Boolean> invitedListener;
+    private boolean inviteRetried = false;
+
+
+    public FollowerManager(String username, String password, String serialNumber, Context context) {
+        this.username = username;
+        this.password = password;
+        this.serialNumber = serialNumber;
+        this.context = context;
+        this.prefs = PreferenceManager.getDefaultSharedPreferences(context);
+    }
+
+    public void getFollowers(Action1<List <ExistingFollower>> followerListener) {
+        this.getFollowersRetried = false;
+        this.followerListener = followerListener;
+        tryGetFollowers();
+    }
+
+    public void deleteFollower(Action1<Boolean> deletedListener, String contactId) {
+        this.deleteFollowerRetried = false;
+        this.deletedListener = deletedListener;
+        this.contactId = contactId;
+        tryDelete();
+    }
+
+    public void inviteFollower(String email, String followerName, String displayName, Action1<Boolean> invitedListener) {
+        this.email = email;
+        this.followerName = followerName;
+        this.displayName = displayName;
+        this.invitedListener = invitedListener;
+        inviteRetried = false;
+        tryInviteFollower();
+    }
+
+
+
+    //GET FOLLOWERS RELATED
+    private void tryGetFollowers() {
+        Action1<Boolean> followerAuthListener = new Action1<Boolean>() {
+            @Override
+            public void call(Boolean authed) {
+                if (authed) {
+                    sessionId = prefs.getString("dexcom_share_session_id", "");
+                    getListOfFollowers();
+                } else {
+                    Observable.just(new ArrayList<ExistingFollower>()).subscribe(followerListener);
+                }
+            }
+        };
+        new ShareAuthentication(username, password, serialNumber, context, followerAuthListener).authenticate();
+    }
+
+    private void getListOfFollowers() {
+        ShareRest.emptyBodyInterface().getContacts(ShareRest.querySessionMap(sessionId), new Callback<List<ExistingFollower>>() {
+            @Override
+            public void success(List<ExistingFollower> followers, Response response) {
+                Observable.just(followers).subscribe(followerListener);
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "List Followers failure", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, getFollowersRetried)) {
+                    getFollowersRetried = true;
+                    tryGetFollowers();
+                } else {
+                    Observable.just(new ArrayList<ExistingFollower>()).subscribe(followerListener);
+                }
+            }
+        });
+    }
+
+
+
+
+    //Delete Follower Related
+    private void tryDelete() {
+        Action1<Boolean> authListener = new Action1<Boolean>() {
+            @Override
+            public void call(Boolean authed) {
+                if (authed) {
+                    sessionId = prefs.getString("dexcom_share_session_id", "");
+                    deleteFollower();
+                } else {
+                    Observable.just(false).subscribe(deletedListener);
+                }
+            }
+        };
+        new ShareAuthentication(username, password, serialNumber, context, authListener).authenticate();
+    }
+
+    private void deleteFollower() {
+        ShareRest.emptyBodyInterface().deleteContact(deleteFollowerPayload(sessionId, contactId), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d("ShareFollower", "contact Invite sent!");
+                Observable.just(true).subscribe(deletedListener);
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Deleting Follower Failure", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, deleteFollowerRetried)) {
+                    deleteFollowerRetried = true;
+                    tryDelete();
+                } else {
+                    Observable.just(false).subscribe(deletedListener);
+                }
+            }
+        });
+    }
+
+    private Map<String, String> deleteFollowerPayload(String sessionId, String contactId) {
+        Map map = new HashMap<String, String>();
+        map.put("sessionID", sessionId);
+        map.put("contactId", contactId);
+        return map;
+    }
+
+
+
+   //Invite follower Related
+    private void tryInviteFollower() {
+        Action1<Boolean> authListener = new Action1<Boolean>() {
+            @Override
+            public void call(Boolean authed) {
+                if (authed) {
+                    sessionId = prefs.getString("dexcom_share_session_id", "");
+                    invite();
+                } else {
+                    Observable.just(false).subscribe(invitedListener);
+                }
+            }
+        };
+        new ShareAuthentication(username, password, serialNumber, context, authListener).authenticate();
+    }
+
+    private void invite() {
+        ShareRest.emptyBodyInterface().doesContactExist(queryCheckContactExists(), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                if (new String(((TypedByteArray) response.getBody()).getBytes()).toLowerCase().contains("true")) {
+                    Log.e("ShareFollower", "contact already exists");
+                    Observable.just(true).subscribe(invitedListener);
+                } else {
+                    createContact();
+                }
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Trouble Checking if contact exists", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, inviteRetried)) {
+                    inviteRetried = true;
+                    tryInviteFollower();
+                } else {
+                    Observable.just(false).subscribe(invitedListener);
+                }
+            }
+        });
+    }
+
+    private void createContact() {
+        ShareRest.emptyBodyInterface().createContact(queryCreateContact(), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d("ShareFollower", "contact created!");
+                contactId = new String(((TypedByteArray) response.getBody()).getBytes()).replace("\"", "");
+                sendInviteToContact();
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Creating new Contact", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, inviteRetried)) {
+                    inviteRetried = true;
+                    tryInviteFollower();
+                } else {
+                    Observable.just(false).subscribe(invitedListener);
+                }
+            }
+        });
+    }
+
+    private void sendInviteToContact() {
+        ShareRest.jsonBodyInterface().createInvitationForContact(new InvitationPayload(displayName), querySendInvite(), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d("ShareFollower", "contact Invite sent!");
+                Observable.just(true).subscribe(invitedListener);
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Sending invite", retrofitError);
+                if (ShareAuthentication.shouldReAuth(context, retrofitError, inviteRetried)) {
+                    inviteRetried = true;
+                    tryInviteFollower();
+                } else {
+                    Observable.just(false).subscribe(invitedListener);
+                }
+            }
+        });
+    }
+
+    private Map<String, String> queryCheckContactExists() {
+        Map<String, String> map = new HashMap<>();
+        map.put("sessionID", sessionId);
+        map.put("contactName", followerName);
+        return map;
+    }
+
+    private Map<String, String> queryCreateContact() {
+        Map<String, String> map = new HashMap<>();
+        map.put("sessionID", sessionId);
+        map.put("contactName", followerName);
+        map.put("emailAddress", email);
+        return map;
+    }
+
+    private Map<String, String> querySendInvite() {
+        Map<String, String> map = new HashMap<>();
+        map.put("sessionID", sessionId);
+        map.put("contactId", contactId);
+        return map;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/InvitationPayload.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/InvitationPayload.java
deleted file mode 100644
index c106049..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/InvitationPayload.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-/**
- * Created by stephenblack on 7/17/15.
- */
-public class InvitationPayload {
-    public InvitationPayload(String displayName) {
-        this.DisplayName = displayName;
-    }
-    public AlertSettings AlertSettings;
-    public int Permissions = 1;
-    public String DisplayName;
-
-    public class AlertSettings {
-        public HighAlert HighAlert;
-        public LowAlert LowAlert;
-        public FixedLowAlert FixedLowAlert;
-        public NoDataAlert NoDataAlert;
-
-        public class HighAlert {
-            public int MinValue = 200;
-            public String AlarmDelay = "PT1H";
-            public int AlertType = 1;
-            public boolean IsEnabled = false;
-            public String RealarmDelay = "PT2H";
-            public String Sound = "High.wav";
-            public int MaxValue = 401;
-        }
-        public class LowAlert {
-            public int MinValue = 39;
-            public String AlarmDelay = "PT30M";
-            public int AlertType = 2;
-            public boolean IsEnabled = false;
-            public String RealarmDelay = "PT2H";
-            public String Sound = "Low.wav";
-            public int MaxValue = 70;
-        }
-        public class FixedLowAlert {
-            public int MinValue = 39;
-            public String AlarmDelay = "PT0M";
-            public int AlertType = 3;
-            public boolean IsEnabled = false;
-            public String RealarmDelay = "PT30M";
-            public String Sound = "UrgentLow.wav";
-            public int MaxValue = 55;
-        }
-        public class NoDataAlert {
-            public int MinValue = 39;
-            public String AlarmDelay = "PT1H";
-            public int AlertType = 4;
-            public boolean IsEnabled = false;
-            public String RealarmDelay = "PT0M";
-            public String Sound = "NoData.wav";
-            public int MaxValue = 401;
-        }
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/Egv.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/Egv.java
new file mode 100644
index 0000000..bf3699b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/Egv.java
@@ -0,0 +1,42 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import com.eveningoutpost.dexdrip.ShareModels.ShareUploadableBg;
+import com.google.gson.annotations.Expose;
+
+/**
+ * Created by stephenblack on 3/19/15.
+ */
+public class Egv {
+    @Expose
+    public int Trend;
+
+    @Expose
+    public int Value;
+
+    @Expose
+    public String ST;
+
+    @Expose
+    public String DT;
+
+
+    public Egv(ShareUploadableBg bg) {
+        this.Value = bg.getMgdlValue();
+        this.DT = toDateString(bg.getEpochTimestamp());
+        this.ST = toDateString(bg.getEpochTimestamp());
+        this.Trend = bg.getSlopeOrdinal();
+    }
+
+    private String toDateString(double timestamp) {
+        long shortened = (long) Math.floor((timestamp/1000));
+        return "/Date(" + Long.toString(shortened*1000) + ")/";
+    }
+
+//    {
+//
+//        "Trend":4,
+//            "ST":"\/Date(1426783106000 - 1426754317000)\/",
+//            "DT":"\/Date(1426754317000)\/",
+//            "Value":97
+//    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ExistingFollower.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ExistingFollower.java
new file mode 100644
index 0000000..dc90004
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ExistingFollower.java
@@ -0,0 +1,44 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import com.google.gson.annotations.Expose;
+
+/**
+ * Created by stephenblack on 8/10/15.
+ */
+public class ExistingFollower {
+
+    @Expose
+    public String ContactId;
+    @Expose
+    public String ContactName;
+    @Expose
+    public String DisplayName;
+
+    @Expose
+    public boolean IsEnabled;
+    @Expose
+    public boolean IsMonitoringSessionActive;
+    @Expose
+    public int Permissions;
+    @Expose
+    public int State;
+
+    @Expose
+    public String SubscriberId;
+    @Expose
+    public String SubscriptionId;
+
+    @Expose
+    public DateTime DateTimeCreated;
+    @Expose
+    public DateTime DateTimeModified;
+    @Expose
+    public DateTime InviteExpires;
+
+    public class DateTime {
+        @Expose
+        public String DateTime;
+        @Expose
+        public int OffsetMinutes;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/InvitationPayload.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/InvitationPayload.java
new file mode 100644
index 0000000..c64ba50
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/InvitationPayload.java
@@ -0,0 +1,95 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import com.google.gson.annotations.Expose;
+
+/**
+ * Created by stephenblack on 7/17/15.
+ */
+public class InvitationPayload {
+    public InvitationPayload(String displayName) {
+        this.DisplayName = displayName;
+    }
+
+    @Expose
+    public AlertSettings AlertSettings = new AlertSettings();
+    @Expose
+    public int Permissions = 1;
+    @Expose
+    public String DisplayName;
+
+    public class AlertSettings {
+        @Expose
+        public HighAlert HighAlert = new HighAlert();
+        @Expose
+        public LowAlert LowAlert = new LowAlert();
+        @Expose
+        public FixedLowAlert FixedLowAlert = new FixedLowAlert();
+        @Expose
+        public NoDataAlert NoDataAlert = new NoDataAlert();
+
+        public class HighAlert {
+            @Expose
+            public int MinValue = 200;
+            @Expose
+            public String AlarmDelay = "PT1H";
+            @Expose
+            public int AlertType = 1;
+            @Expose
+            public boolean IsEnabled = false;
+            @Expose
+            public String RealarmDelay = "PT2H";
+            @Expose
+            public String Sound = "High.wav";
+            @Expose
+            public int MaxValue = 401;
+        }
+        public class LowAlert {
+            @Expose
+            public int MinValue = 39;
+            @Expose
+            public String AlarmDelay = "PT30M";
+            @Expose
+            public int AlertType = 2;
+            @Expose
+            public boolean IsEnabled = false;
+            @Expose
+            public String RealarmDelay = "PT2H";
+            @Expose
+            public String Sound = "Low.wav";
+            @Expose
+            public int MaxValue = 70;
+        }
+        public class FixedLowAlert {
+            @Expose
+            public int MinValue = 39;
+            @Expose
+            public String AlarmDelay = "PT0M";
+            @Expose
+            public int AlertType = 3;
+            @Expose
+            public boolean IsEnabled = false;
+            @Expose
+            public String RealarmDelay = "PT30M";
+            @Expose
+            public String Sound = "UrgentLow.wav";
+            @Expose
+            public int MaxValue = 55;
+        }
+        public class NoDataAlert {
+            @Expose
+            public int MinValue = 39;
+            @Expose
+            public String AlarmDelay = "PT1H";
+            @Expose
+            public int AlertType = 4;
+            @Expose
+            public boolean IsEnabled = false;
+            @Expose
+            public String RealarmDelay = "PT0M";
+            @Expose
+            public String Sound = "NoData.wav";
+            @Expose
+            public int MaxValue = 401;
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareAuthenticationBody.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareAuthenticationBody.java
new file mode 100644
index 0000000..fc91de0
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareAuthenticationBody.java
@@ -0,0 +1,23 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import com.google.gson.annotations.Expose;
+
+/**
+ * Created by stephenblack on 3/16/15.
+ */
+public class ShareAuthenticationBody {
+    @Expose
+    public String password;
+
+    @Expose
+    public String applicationId;
+
+    @Expose
+    public String accountName;
+
+    public ShareAuthenticationBody(String aPassword, String aAccountName) {
+        this.password = aPassword;
+        this.accountName = aAccountName;
+        this.applicationId = "d89443d2-327c-4a6f-89e5-496bbb0317db";
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareGlucose.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareGlucose.java
new file mode 100644
index 0000000..abf1bac
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareGlucose.java
@@ -0,0 +1,105 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.os.BatteryManager;
+import android.provider.BaseColumns;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.google.gson.annotations.Expose;
+
+/**
+ * Created by stephenblack on 3/16/15.
+ */
+@Table(name = "ShareGlucose", id = BaseColumns._ID)
+public class ShareGlucose extends Model {
+    public Context mContext;
+    @Expose
+    @Column(name = "DT")
+    public String DT;
+
+    @Expose
+    @Column(name = "ST")
+    public String ST;
+
+    @Expose
+    @Column(name = "Trend")
+    public double Trend;
+
+    @Expose
+    @Column(name = "Value")
+    public double Value;
+
+    @Expose
+    @Column(name = "WT")
+    public String WT;
+
+    public void processShareData(Context context) {
+        Log.d("SHARE", "Share Data being processed!"); // TODO maybe set this up??
+//        mContext = context;
+//        Log.d("SHARE", "Timestamp before parsing: " + WT);
+//        Log.d("SHARE", "Timestamp before parsing: " + WT.replaceAll("[^\\d.]", ""));
+//
+//        double timestamp = (Double.parseDouble(WT.replaceAll("[^\\d.]", "")));
+//        Log.d("SHARE", "Timestamp: " + timestamp);
+//        if (!Bg.alreadyExists(timestamp)) {
+//            Log.d("SHARE", "Data looks new!!");
+//            Bg bg = new Bg();
+//            bg.direction = slopeDirection();
+//            bg.battery = Integer.toString(getBatteryLevel());
+//            bg.bgdelta = calculateDelta(timestamp, Value);
+//            bg.datetime = timestamp;
+//            bg.sgv = Integer.toString((int) Value);
+//            bg.save();
+//            DataCollectionService.newDataArrived(mContext, true);
+//            Log.d("SHARE", "Share Data Processed Successfully!");
+//        } else {
+//            Log.d("SHARE", "A Bg Value similar to this timestamp already exists.");
+//        }
+    }
+
+    public String slopeDirection() {
+        switch((int) Trend) {
+            case 1:
+                return "DoubleUp";
+            case 2:
+                return "SingleUp";
+            case 3:
+                return "FortyFiveUp";
+            case 4:
+                return "Flat";
+            case 5:
+                return "FortyFiveDown";
+            case 6:
+                return "SingleDown";
+            case 7:
+                return "DoubleDown";
+            default:
+                return "";
+        }
+    }
+
+
+    public int getBatteryLevel() {
+        Intent batteryIntent = mContext.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
+        int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
+        int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
+        if(level == -1 || scale == -1) {
+            return 50;
+        }
+        return (int)(((float)level / (float)scale) * 100.0f);
+    }
+
+    public double calculateDelta(double timestamp, double currentValue) {
+//        Bg bg = Bg.mostRecentBefore(timestamp);
+//        if (bg != null && Math.abs(bg.datetime - timestamp) < (60*1000*15)) {
+//            return (bg.sgv_double() - currentValue);
+//        } else {
+            return 0;
+//        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareUploadPayload.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareUploadPayload.java
new file mode 100644
index 0000000..8cbd305
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/Models/ShareUploadPayload.java
@@ -0,0 +1,28 @@
+package com.eveningoutpost.dexdrip.ShareModels.Models;
+
+import com.eveningoutpost.dexdrip.ShareModels.ShareUploadableBg;
+import com.google.gson.annotations.Expose;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * Created by stephenblack on 3/19/15.
+ */
+public class ShareUploadPayload {
+    @Expose
+    public String SN;
+
+    @Expose
+    public Egv[] Egvs;
+
+    @Expose
+    public long TA = -5;
+
+    public ShareUploadPayload(String sn, ShareUploadableBg bg) {
+        this.SN = sn;
+        List<Egv> egvList = new ArrayList<Egv>();
+        egvList.add(new Egv(bg));
+        this.Egvs = egvList.toArray(new Egv[egvList.size()]);
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthentication.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthentication.java
new file mode 100644
index 0000000..06a5121
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthentication.java
@@ -0,0 +1,348 @@
+package com.eveningoutpost.dexdrip.ShareModels;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.ShareModels.Models.ShareAuthenticationBody;
+import com.eveningoutpost.dexdrip.ShareModels.UserAgentInfo.UserAgent;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.squareup.okhttp.OkHttpClient;
+
+import java.security.cert.CertificateException;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocketFactory;
+import javax.net.ssl.TrustManager;
+import javax.net.ssl.X509TrustManager;
+
+import retrofit.Callback;
+import retrofit.RequestInterceptor;
+import retrofit.RestAdapter;
+import retrofit.RetrofitError;
+import retrofit.android.AndroidLog;
+import retrofit.client.OkClient;
+import retrofit.client.Response;
+import retrofit.converter.GsonConverter;
+import retrofit.mime.TypedByteArray;
+import rx.Observable;
+import rx.functions.Action1;
+
+/**
+ * Created by stephenblack on 7/31/15.
+ */
+public class ShareAuthentication {
+    private final static String TAG = ShareAuthentication.class.getSimpleName();
+    private Context mContext;
+    private String login;
+    private String password;
+    private String receiverSn;
+    private String sessionId = null;
+    private SharedPreferences prefs;
+    private boolean retrying = false;
+    private Action1<Boolean> authListener;
+    private BgReading bg = null;
+    OkClient client;
+
+    public static Gson gson = new GsonBuilder()
+            .excludeFieldsWithoutExposeAnnotation()
+            .create();
+
+    public ShareAuthentication(String login, String password, String receiverSerialNumber, Context context, final Action1<Boolean> authListener) {
+        this.client = getOkClient();
+        this.mContext = context;
+        this.prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
+        this.login = login;
+        this.password = password;
+        this.receiverSn = receiverSerialNumber.toUpperCase();
+        this.authListener = authListener;
+    }
+
+    public static void invalidate(Context context){
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        prefs.edit().putString("dexcom_share_session_id", "").apply();
+    }
+
+    public void authenticate() {
+        if (login.length() == 0 || password.length() == 0 || receiverSn.length() == 0 || receiverSn.equals("SM00000000")) {
+            authFailure();
+        }
+
+        sessionId = prefs.getString("dexcom_share_session_id", "");
+        if(sessionId.length() != 0) {
+            Log.d(TAG, "We already have a stored session ID");
+            authSuccess();
+        } else {
+            Log.d(TAG, "There is no stored session id, we need to get a new one");
+            getValidSessionId();
+        }
+    }
+
+    private void authSuccess() {
+        prefs.edit().putString("dexcom_share_session_id", sessionId).apply();
+        Observable.just(true).subscribe(authListener);
+    }
+
+    private void authFailure() {
+        prefs.edit().putString("dexcom_share_session_id", "").apply();
+        Observable.just(false).subscribe(authListener);
+    }
+
+    public void getValidSessionId() {
+        if (sessionId != null && !sessionId.equalsIgnoreCase("")) {
+            Log.d(TAG, "Session ID not null, checking if active");
+            emptyBodyInterface().checkSessionActive(querySessionMap(sessionId), new Callback<Response>() {
+                @Override
+                public void success(Response o, Response response) {
+                    Log.d(TAG, "Success!! got a response checking if session is active");
+                    if (response.getBody() != null) {
+                        if(new String(((TypedByteArray) response.getBody()).getBytes()).toLowerCase().contains("true")) {
+                            Log.d(TAG, "Session is active :-)");
+                            authSuccess();
+                        } else {
+                            Log.w(TAG, "Session is apparently not active :-( " + new String(((TypedByteArray) response.getBody()).getBytes()));
+                            StartRemoteMonitoringSession();
+                        }
+                    }
+                }
+
+                @Override
+                public void failure(RetrofitError retrofitError) {
+                    sessionId = null;
+                    Log.e(TAG, "Failed to check if session is active", retrofitError);
+                    getValidSessionId();
+                }
+            });
+        } else {
+            Log.d(TAG, "Session ID is null, Getting a new one");
+            jsonBodyInterface().getSessionId(new ShareAuthenticationBody(password, login), new Callback<Response>() {
+                @Override
+                public void success(Response o, Response response) {
+                    Log.d(TAG, "Success!! got a response on auth.");
+                    sessionId = new String(((TypedByteArray) response.getBody()).getBytes()).replace("\"", "");
+                    sendUserAgentData();
+                }
+
+                @Override
+                public void failure(RetrofitError retrofitError) {
+                    Log.e(TAG, "Unable to auth", retrofitError);
+                    authFailure();
+                }
+            });
+        }
+    }
+
+    public void sendUserAgentData() {
+        jsonBodyInterface().updatePublisherAccountInfo(new UserAgent(sessionId), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d(TAG, "User Agent Data Updated!!");
+                checkAndSetRecieverAssignment();
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Error updating user agent data", retrofitError);
+                authFailure();
+            }
+        });
+    }
+
+    public void StartRemoteMonitoringSession() {
+        if (sessionId != null && !sessionId.equalsIgnoreCase("")) {
+            jsonBodyInterface().authenticatePublisherAccount(new ShareAuthenticationBody(password, login), queryActivateSessionMap(), new Callback<Response>() {
+                @Override
+                public void success(Response o, Response response) {
+                    Log.d(TAG, "Success!! Authenticated Publisher account!!!");
+                    emptyBodyInterface().StartRemoteMonitoringSession(queryActivateSessionMap(), new Callback<Response>() {
+                        @Override
+                        public void success(Response o, Response response) {
+                            Log.d(TAG, "Success!! Our remote monitoring session is up!");
+                            if (response.getBody() != null) {
+                                authSuccess();
+                            }
+                        }
+
+                        @Override
+                        public void failure(RetrofitError retrofitError) {
+                            Log.e(TAG, "Unable to start a remote monitoring session", retrofitError);
+                            authFailure();
+                        }
+                    });
+                }
+
+                @Override
+                public void failure(RetrofitError retrofitError) {
+                    Log.e(TAG, "Unable to authenticate publisher account", retrofitError);
+                    authFailure();
+                }
+            });
+        }
+    }
+
+    public void checkAndSetRecieverAssignment() {
+        emptyBodyInterface().checkMonitorAssignment(queryActivateSessionMap(), new Callback<Response>() {
+            @Override
+            public void success(Response o, Response response) {
+                Log.d(TAG, "Success!! Our remote monitoring session is up!");
+                if (response.getBody() != null) {
+                    if (!(new String(((TypedByteArray) response.getBody()).getBytes()).contains("AssignedToYou"))) {
+
+                        Log.e("Receiver trouble: ", "That receiver is not assigned to your account, trying to re-assign");
+                        emptyBodyInterface().updateMonitorAssignment(queryActivateSessionMap(), new Callback<Response>() {
+                            @Override
+                            public void success(Response o, Response response) {
+                                getValidSessionId();
+                            }
+                            @Override
+                            public void failure(RetrofitError retrofitError) {
+                                Log.e(TAG, "Unable to set yourself as the publisher for that receiver", retrofitError);
+                                authFailure();
+                            }
+                        });
+                    } else {
+                        getValidSessionId();
+                    }
+                }
+            }
+
+            @Override
+            public void failure(RetrofitError retrofitError) {
+                Log.e(TAG, "Unable to check receiver ownership", retrofitError);
+                authFailure();
+            }
+        });
+    }
+
+    public DexcomShareInterface jsonBodyInterface() {
+        RestAdapter adapter = authoirizeAdapterBuilder().build();
+        DexcomShareInterface dexcomShareInterface =
+                adapter.create(DexcomShareInterface.class);
+        return dexcomShareInterface;
+    }
+
+    public DexcomShareInterface emptyBodyInterface() {
+        RestAdapter adapter = getBgAdapterBuilder().build();
+        DexcomShareInterface checkSessionActive =
+                adapter.create(DexcomShareInterface.class);
+        return checkSessionActive;
+    }
+
+    private RestAdapter.Builder authoirizeAdapterBuilder() {
+        RestAdapter.Builder adapterBuilder = new RestAdapter.Builder();
+        adapterBuilder
+                .setClient(client)
+                .setLogLevel(RestAdapter.LogLevel.FULL).setLog(new AndroidLog(TAG))
+                .setEndpoint("https://share1.dexcom.com/ShareWebServices/Services")
+                .setRequestInterceptor(authorizationRequestInterceptor)
+                .setConverter(new GsonConverter(new GsonBuilder()
+                        .excludeFieldsWithoutExposeAnnotation()
+                        .create()));
+        return adapterBuilder;
+    }
+
+    private RestAdapter.Builder getBgAdapterBuilder() {
+        RestAdapter.Builder adapterBuilder = new RestAdapter.Builder();
+        adapterBuilder
+                .setClient(client)
+                .setLogLevel(RestAdapter.LogLevel.FULL).setLog(new AndroidLog(TAG))
+                .setEndpoint("https://share1.dexcom.com/ShareWebServices/Services")
+                .setRequestInterceptor(getBgRequestInterceptor)
+                .setConverter(new GsonConverter(new GsonBuilder()
+                        .excludeFieldsWithoutExposeAnnotation()
+                        .create()));
+        return adapterBuilder;
+    }
+
+    static RequestInterceptor authorizationRequestInterceptor = new RequestInterceptor() {
+        @Override
+        public void intercept(RequestInterceptor.RequestFacade request) {
+            request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
+            request.addHeader("Content-Type", "application/json");
+            request.addHeader("Accept", "application/json");
+        }
+    };
+    RequestInterceptor getBgRequestInterceptor = new RequestInterceptor() {
+        @Override
+        public void intercept(RequestInterceptor.RequestFacade request) {
+            request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
+            request.addHeader("Content-Type", "application/json");
+            request.addHeader("Content-Length", "0");
+            request.addHeader("Accept", "application/json");
+        }
+    };
+
+    public OkHttpClient getOkHttpClient() {
+        try {
+            final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
+                @Override
+                public void checkClientTrusted(
+                        java.security.cert.X509Certificate[] chain,
+                        String authType) throws CertificateException {
+                }
+
+                @Override
+                public void checkServerTrusted( java.security.cert.X509Certificate[] chain,
+                        String authType) throws CertificateException {
+                }
+
+                @Override
+                public java.security.cert.X509Certificate[] getAcceptedIssuers() {
+                    return null;
+                }
+            } };
+
+            final SSLContext sslContext = SSLContext.getInstance("SSL");
+            sslContext.init(null, trustAllCerts, new java.security.SecureRandom());
+            final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();
+
+            OkHttpClient okHttpClient = new OkHttpClient();
+            okHttpClient.setSslSocketFactory(sslSocketFactory);
+            okHttpClient.setHostnameVerifier(new HostnameVerifier() {
+
+                @Override
+                public boolean verify(String hostname, SSLSession session) {
+                    return true;
+                }
+            });
+
+            return okHttpClient;
+        } catch (Exception e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public OkClient getOkClient (){
+        OkHttpClient client1 = getOkHttpClient();
+        OkClient _client = new OkClient(client1);
+        return _client;
+    }
+
+    public Map<String, String> querySessionMap(String sessionId) {
+        Map map = new HashMap<String, String>();
+        map.put("sessionID", sessionId);
+        return map;
+    }
+
+    public Map<String, String> queryActivateSessionMap() {
+        Map map = new HashMap<String, String>();
+        map.put("sessionID", sessionId);
+        map.put("serialNumber", receiverSn);
+        return map;
+    }
+
+    public static boolean shouldReAuth(Context context, RetrofitError retrofitError, boolean retried) {
+        if (retrofitError.toString().toLowerCase().contains("session") && !retried) {
+            ShareAuthentication.invalidate(context);
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthenticationBody.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthenticationBody.java
deleted file mode 100644
index 8627217..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareAuthenticationBody.java
+++ /dev/null
@@ -1,23 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-import com.google.gson.annotations.Expose;
-
-/**
- * Created by stephenblack on 3/16/15.
- */
-public class ShareAuthenticationBody {
-    @Expose
-    public String password;
-
-    @Expose
-    public String applicationId;
-
-    @Expose
-    public String accountName;
-
-    public ShareAuthenticationBody(String aPassword, String aAccountName) {
-        this.password = aPassword;
-        this.accountName = aAccountName;
-        this.applicationId = "d89443d2-327c-4a6f-89e5-496bbb0317db";
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareGlucose.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareGlucose.java
deleted file mode 100644
index 17dbb1b..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareGlucose.java
+++ /dev/null
@@ -1,105 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-import android.content.Context;
-import android.content.Intent;
-import android.content.IntentFilter;
-import android.os.BatteryManager;
-import android.provider.BaseColumns;
-import android.util.Log;
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.google.gson.annotations.Expose;
-
-/**
- * Created by stephenblack on 3/16/15.
- */
-@Table(name = "ShareGlucose", id = BaseColumns._ID)
-public class ShareGlucose extends Model {
-    public Context mContext;
-    @Expose
-    @Column(name = "DT")
-    public String DT;
-
-    @Expose
-    @Column(name = "ST")
-    public String ST;
-
-    @Expose
-    @Column(name = "Trend")
-    public double Trend;
-
-    @Expose
-    @Column(name = "Value")
-    public double Value;
-
-    @Expose
-    @Column(name = "WT")
-    public String WT;
-
-    public void processShareData(Context context) {
-        Log.d("SHARE", "Share Data being processed!"); // TODO maybe set this up??
-//        mContext = context;
-//        Log.d("SHARE", "Timestamp before parsing: " + WT);
-//        Log.d("SHARE", "Timestamp before parsing: " + WT.replaceAll("[^\\d.]", ""));
-//
-//        double timestamp = (Double.parseDouble(WT.replaceAll("[^\\d.]", "")));
-//        Log.d("SHARE", "Timestamp: " + timestamp);
-//        if (!Bg.alreadyExists(timestamp)) {
-//            Log.d("SHARE", "Data looks new!!");
-//            Bg bg = new Bg();
-//            bg.direction = slopeDirection();
-//            bg.battery = Integer.toString(getBatteryLevel());
-//            bg.bgdelta = calculateDelta(timestamp, Value);
-//            bg.datetime = timestamp;
-//            bg.sgv = Integer.toString((int) Value);
-//            bg.save();
-//            DataCollectionService.newDataArrived(mContext, true);
-//            Log.d("SHARE", "Share Data Processed Successfully!");
-//        } else {
-//            Log.d("SHARE", "A Bg Value similar to this timestamp already exists.");
-//        }
-    }
-
-    public String slopeDirection() {
-        switch((int) Trend) {
-            case 1:
-                return "DoubleUp";
-            case 2:
-                return "SingleUp";
-            case 3:
-                return "FortyFiveUp";
-            case 4:
-                return "Flat";
-            case 5:
-                return "FortyFiveDown";
-            case 6:
-                return "SingleDown";
-            case 7:
-                return "DoubleDown";
-            default:
-                return "";
-        }
-    }
-
-
-    public int getBatteryLevel() {
-        Intent batteryIntent = mContext.registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));
-        int level = batteryIntent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
-        int scale = batteryIntent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
-        if(level == -1 || scale == -1) {
-            return 50;
-        }
-        return (int)(((float)level / (float)scale) * 100.0f);
-    }
-
-    public double calculateDelta(double timestamp, double currentValue) {
-//        Bg bg = Bg.mostRecentBefore(timestamp);
-//        if (bg != null && Math.abs(bg.datetime - timestamp) < (60*1000*15)) {
-//            return (bg.sgv_double() - currentValue);
-//        } else {
-            return 0;
-//        }
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
index 108bdb1..20db159 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
@@ -1,16 +1,5 @@
 package com.eveningoutpost.dexdrip.ShareModels;
 
-import android.app.Service;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.AsyncTask;
-import android.os.IBinder;
-import android.preference.PreferenceManager;
-import android.util.Log;
-
-import com.eveningoutpost.dexdrip.Models.BgReading;
-import com.eveningoutpost.dexdrip.ShareModels.UserAgentInfo.UserAgent;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.squareup.okhttp.OkHttpClient;
@@ -26,307 +15,85 @@
 import javax.net.ssl.TrustManager;
 import javax.net.ssl.X509TrustManager;
 
-import retrofit.Callback;
 import retrofit.RequestInterceptor;
 import retrofit.RestAdapter;
-import retrofit.RetrofitError;
 import retrofit.android.AndroidLog;
 import retrofit.client.OkClient;
-import retrofit.client.Response;
 import retrofit.converter.GsonConverter;
-import retrofit.mime.TypedByteArray;
 
 /**
  * Created by stephenblack on 12/26/14.
  */
-public class ShareRest extends Service {
-    private final static String TAG = ShareRest.class.getSimpleName();
-    private Context mContext;
-    private String login;
-    private String password;
-    private String receiverSn;
-    private String sessionId = null;
-    private SharedPreferences prefs;
-    private boolean retrying = false;
-    private BgReading bg = null;
-    OkClient client;
+public class ShareRest {
+    public final static String TAG = ShareRest.class.getSimpleName();
 
     public static Gson gson = new GsonBuilder()
             .excludeFieldsWithoutExposeAnnotation()
             .create();
 
-    @Override
-    public IBinder onBind(Intent intent) {
-        throw new UnsupportedOperationException("Not yet implemented");
-    }
-
-    @Override
-    public void onCreate() {
-        Log.d(TAG, "Creating service");
-        client = getOkClient();
-        mContext = getApplicationContext();
-        prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
-        login = prefs.getString("dexcom_account_name", "");
-        password = prefs.getString("dexcom_account_password", "");
-        receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
-     }
-
-    @Override
-    public int onStartCommand (Intent intent,int flags, int startId) {
-        retrying = false;
-        bg = null;
-        login = prefs.getString("dexcom_account_name", "");
-        password = prefs.getString("dexcom_account_password", "");
-        receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
-        Log.d(TAG, "Starting service");
-        if (prefs.getBoolean("share_upload", false) && login.compareTo("") != 0 && password.compareTo("") != 0 && receiverSn.compareTo("SM00000000") != 0) {
-            if(intent != null ) {
-                String uuid = intent.getStringExtra("BgUuid");
-
-                Log.d(TAG, "UUID: " + uuid);
-                bg = BgReading.findByUuid(uuid);
-                if(uuid != null && !uuid.contentEquals("")) {
-                    if(sessionId != null && !sessionId.contentEquals("")) {
-                        Log.d(TAG, "New BG reading found and session exists");
-                        continueUpload();
-                    } else {
-                        Log.d(TAG, "New BG reading found but session does not exist");
-                        getValidSessionId();
-                    }
-                }
-            }
-        } else {
-            stopSelf();
-        }
-        return START_NOT_STICKY;
-    }
-
-    public void getValidSessionId() {
-        if (sessionId != null && !sessionId.equalsIgnoreCase("")) {
-            try {
-                Log.d(TAG, "Session ID not null, checking if active");
-                emptyBodyInterface().checkSessionActive(querySessionMap(sessionId), new Callback() {
-                    @Override
-                    public void success(Object o, Response response) {
-                        Log.d(TAG, "Success!! got a response checking if session is active");
-                        if (response.getBody() != null) {
-                            if(new String(((TypedByteArray) response.getBody()).getBytes()).toLowerCase().contains("true")) {
-                                Log.d(TAG, "Session is active :-)");
-                                continueUpload();
-                            } else {
-                                Log.d(TAG, "Session is apparently not active :-(");
-                                Log.d(TAG, new String(((TypedByteArray) response.getBody()).getBytes()));
-                                StartRemoteMonitoringSession();
-                            }
-                        }
-                    }
-
-                    @Override
-                    public void failure(RetrofitError retrofitError) {
-                        sessionId = null;
-                        Log.e("RETROFIT ERROR: ", "" + retrofitError.toString());
-                        getValidSessionId();
-                    }
-                });
-            } catch (Exception e) {
-                Log.e("REST CALL ERROR: ", "BOOOO");
-            }
-        } else {
-            try {
-                Log.d(TAG, "Session ID is null, Getting a new one");
-                jsonBodyInterface().getSessionId(new ShareAuthenticationBody(password, login), new Callback() {
-                    @Override
-                    public void success(Object o, Response response) {
-                        Log.d(TAG, "Success!! got a response on auth.");
-                        Log.e("RETROFIT ERROR: ", "Auth succesfull");
-                        sessionId = new String(((TypedByteArray) response.getBody()).getBytes()).replace("\"", "");
-                        sendUserAgentData();
-                    }
-
-                    @Override
-                    public void failure(RetrofitError retrofitError) {
-                        sessionId = null;
-                        Log.e("RETROFIT ERROR: ", "" + retrofitError.toString());
-                        Log.e("RETROFIT ERROR: ", "Unable to auth");
-                    }
-                });
-            } catch (Exception e) {
-                Log.e("REST CALL ERROR: ", "BOOOO");
-            }
-        }
-    }
-
-    public void sendUserAgentData() {
-        try {
-            jsonBodyInterface().updatePublisherAccountInfo(new UserAgent(sessionId), new Callback() {
-                @Override
-                public void success(Object o, Response response) {
-                    Log.d(TAG, "User Agent Data Updated!!");
-                    checkAndSetRecieverAssignment();
-                }
-
-                @Override
-                public void failure(RetrofitError retrofitError) {
-                    Log.e("RETROFIT ERROR: ", ""+retrofitError.toString());
-                    Log.e("RETROFIT ERROR: ", "Error updating user agent data");
-
-                }
-            });
-        }
-        catch (RetrofitError e) { Log.d("Retrofit Error: ", "BOOOO"); }
-        catch (Exception ex) { Log.d("Unrecognized Error: ", "BOOOO"); }
-    }
-
-    public void StartRemoteMonitoringSession() {
-        if (sessionId != null && !sessionId.equalsIgnoreCase("")) {
-            try {
-                jsonBodyInterface().authenticatePublisherAccount(new ShareAuthenticationBody(password, login), queryActivateSessionMap(), new Callback() {
-                    @Override
-                    public void success(Object o, Response response) {
-                        Log.d(TAG, "Success!! Authenticated Publisher account!!!");
-
-                        try {
-                            emptyBodyInterface().StartRemoteMonitoringSession(queryActivateSessionMap(), new Callback() {
-                                @Override
-                                public void success(Object o, Response response) {
-                                    Log.d(TAG, "Success!! Our remote monitoring session is up!");
-                                    if (response.getBody() != null) {
-                                        continueUpload();
-                                    }
-                                }
-
-                                @Override
-                                public void failure(RetrofitError retrofitError) {
-                                    sessionId = null;
-                                    Log.e("RETROFIT ERROR: ", "Unable to start a remote monitoring session");
-                                }
-                            });
-                        } catch (Exception e) {
-                            Log.e("REST CALL ERROR: ", "BOOOO");
-                        }
-                    }
-
-                    @Override
-                    public void failure(RetrofitError retrofitError) {
-                        sessionId = null;
-                        Log.e("RETROFIT ERROR: ", "Unable to authenticate publisher account");
-                    }
-                });
-            } catch (Exception e) {
-                Log.e("REST CALL ERROR: ", "BOOOO");
-            }
-
-
-        }
-    }
-
-    public void checkAndSetRecieverAssignment() {
-        emptyBodyInterface().checkMonitorAssignment(queryActivateSessionMap(), new Callback() {
-            @Override
-            public void success(Object o, Response response) {
-                Log.d(TAG, "Success!! Our remote monitoring session is up!");
-                if (response.getBody() != null) {
-                    if (!(new String(((TypedByteArray) response.getBody()).getBytes()).contains("AssignedToYou"))) {
-
-                        Log.e("Receiver trouble: ", "That receiver is not assigned to your account, trying to re-assign");
-                        emptyBodyInterface().updateMonitorAssignment(queryActivateSessionMap(), new Callback() {
-                            @Override
-                            public void success(Object o, Response response) {
-                                getValidSessionId();
-
-                            }
-                            @Override
-                            public void failure(RetrofitError retrofitError) {
-                                Log.e("RETROFIT ERROR: ", "Unable to set yourself as the publisher for that receiver");
-                            }
-                        });
-                    } else {
-                        getValidSessionId();
-
-                    }
-                }
-            }
-
-            @Override
-            public void failure(RetrofitError retrofitError) {
-                sessionId = null;
-                Log.e("RETROFIT ERROR: ", "Unable to check receiver ownership");
-            }
-        });
-    }
-
-    public void continueUpload() {
-        if(bg != null) {
-            sendBgData(sessionId, bg);
-        } else {
-            Log.d(TAG, "No BG, cannot continue");
-        }
-    }
-
-    private void sendBgData(String sessionId, BgReading bg) {
-        DataSender dataSender = new DataSender(mContext, sessionId, bg);
-        dataSender.execute((Void) null);
-    }
-
-    public DexcomShareInterface jsonBodyInterface() {
+    public static DexcomShareInterface jsonBodyInterface() {
         RestAdapter adapter = authoirizeAdapterBuilder().build();
         DexcomShareInterface dexcomShareInterface =
                 adapter.create(DexcomShareInterface.class);
         return dexcomShareInterface;
     }
 
-    public DexcomShareInterface emptyBodyInterface() {
+    public static DexcomShareInterface emptyBodyInterface() {
         RestAdapter adapter = getBgAdapterBuilder().build();
         DexcomShareInterface checkSessionActive =
                 adapter.create(DexcomShareInterface.class);
         return checkSessionActive;
     }
 
-    private RestAdapter.Builder authoirizeAdapterBuilder() {
+    private static RestAdapter.Builder authoirizeAdapterBuilder() {
         RestAdapter.Builder adapterBuilder = new RestAdapter.Builder();
         adapterBuilder
-                .setClient(client)
+                .setClient(getOkClient())
                 .setLogLevel(RestAdapter.LogLevel.FULL).setLog(new AndroidLog(TAG))
                 .setEndpoint("https://share1.dexcom.com/ShareWebServices/Services")
-                .setRequestInterceptor(authorizationRequestInterceptor)
+                .setRequestInterceptor(authorizationRequestInterceptor())
                 .setConverter(new GsonConverter(new GsonBuilder()
                         .excludeFieldsWithoutExposeAnnotation()
                         .create()));
         return adapterBuilder;
     }
 
-    private RestAdapter.Builder getBgAdapterBuilder() {
+    private static RestAdapter.Builder getBgAdapterBuilder() {
         RestAdapter.Builder adapterBuilder = new RestAdapter.Builder();
         adapterBuilder
-                .setClient(client)
+                .setClient(getOkClient())
                 .setLogLevel(RestAdapter.LogLevel.FULL).setLog(new AndroidLog(TAG))
                 .setEndpoint("https://share1.dexcom.com/ShareWebServices/Services")
-                .setRequestInterceptor(getBgRequestInterceptor)
+                .setRequestInterceptor(getBgRequestInterceptor())
                 .setConverter(new GsonConverter(new GsonBuilder()
                         .excludeFieldsWithoutExposeAnnotation()
                         .create()));
         return adapterBuilder;
     }
 
-    static RequestInterceptor authorizationRequestInterceptor = new RequestInterceptor() {
-        @Override
-        public void intercept(RequestInterceptor.RequestFacade request) {
-            request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
-            request.addHeader("Content-Type", "application/json");
-            request.addHeader("Accept", "application/json");
-        }
-    };
-    RequestInterceptor getBgRequestInterceptor = new RequestInterceptor() {
-        @Override
-        public void intercept(RequestInterceptor.RequestFacade request) {
-            request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
-            request.addHeader("Content-Type", "application/json");
-            request.addHeader("Content-Length", "0");
-            request.addHeader("Accept", "application/json");
-        }
-    };
+    public static RequestInterceptor authorizationRequestInterceptor() {
+        return new RequestInterceptor() {
+            @Override
+            public void intercept(RequestInterceptor.RequestFacade request) {
+                request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
+                request.addHeader("Content-Type", "application/json");
+                request.addHeader("Accept", "application/json");
+            }
+        };
+    }
+    public static RequestInterceptor getBgRequestInterceptor() {
+        return new RequestInterceptor() {
+            @Override
+            public void intercept(RequestInterceptor.RequestFacade request) {
+                request.addHeader("User-Agent", "Dexcom Share/3.0.2.11 CFNetwork/711.2.23 Darwin/14.0.0");
+                request.addHeader("Content-Type", "application/json");
+                request.addHeader("Content-Length", "0");
+                request.addHeader("Accept", "application/json");
+            }
+        };
+    }
 
-    public OkHttpClient getOkHttpClient() {
+    public static OkHttpClient getOkHttpClient() {
         try {
             final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
                 @Override
@@ -367,64 +134,15 @@ public boolean verify(String hostname, SSLSession session) {
         }
     }
 
-    public OkClient getOkClient (){
+    public static OkClient getOkClient (){
         OkHttpClient client1 = getOkHttpClient();
         OkClient _client = new OkClient(client1);
         return _client;
     }
 
-    public class DataSender extends AsyncTask<Void, Void, Boolean> {
-        Context mContext;
-        String mSessionId;
-        BgReading mBg;
-        DataSender(Context context, String sessionId, BgReading bg) {
-            mContext = context;
-            mSessionId = sessionId;
-            mBg = bg;
-        }
-
-        @Override
-        protected Boolean doInBackground(Void... params) {
-            try {
-                SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(mContext);
-                String receiverSn = preferences.getString("share_key", "SM00000000").toUpperCase();
-                jsonBodyInterface().uploadBGRecords(querySessionMap(mSessionId), new ShareUploadPayload(receiverSn, mBg), new Callback() {
-                    @Override
-                    public void success(Object o, Response response) {
-                        Log.d(TAG, "Success!! Uploaded!!");
-                        bg = null;
-                    }
-
-                    @Override
-                    public void failure(RetrofitError retrofitError) {
-                        Log.e("RETROFIT ERROR: ", ""+retrofitError.toString());
-                        if((retrofitError.toString().contains("EvgPost is only allowed when monitoring session is active") && retrying == false) ||
-                                (retrofitError.toString().contains("SessionNotValid")  && retrying == false)) {
-                            sessionId = null;
-                            retrying = true;
-                            getValidSessionId();
-                        } else {
-                            bg = null;
-                        }
-                    }
-                });
-            }
-            catch (RetrofitError e) { Log.d("Retrofit Error: ", "BOOOO"); }
-            catch (Exception ex) { Log.d("Unrecognized Error: ", "BOOOO"); }
-            return false;
-        }
-    }
-
-    public Map<String, String> querySessionMap(String sessionId) {
-        Map map = new HashMap<String, String>();
-        map.put("sessionID", sessionId);
-        return map;
-    }
-
-    public Map<String, String> queryActivateSessionMap() {
+    public static Map<String, String> querySessionMap(String sessionId) {
         Map map = new HashMap<String, String>();
         map.put("sessionID", sessionId);
-        map.put("serialNumber", receiverSn);
         return map;
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadPayload.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadPayload.java
deleted file mode 100644
index f589c4c..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadPayload.java
+++ /dev/null
@@ -1,28 +0,0 @@
-package com.eveningoutpost.dexdrip.ShareModels;
-
-import com.eveningoutpost.dexdrip.Models.BgReading;
-import com.google.gson.annotations.Expose;
-
-import java.util.ArrayList;
-import java.util.List;
-
-/**
- * Created by stephenblack on 3/19/15.
- */
-public class ShareUploadPayload {
-    @Expose
-    public String SN;
-
-    @Expose
-    public Egv[] Egvs;
-
-    @Expose
-    public long TA = -5;
-
-    public ShareUploadPayload(String sn, BgReading bg) {
-        this.SN = sn;
-        List<Egv> egvList = new ArrayList<Egv>();
-        egvList.add(new Egv(bg));
-        this.Egvs = egvList.toArray(new Egv[egvList.size()]);
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadableBg.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadableBg.java
new file mode 100644
index 0000000..e5ca195
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareUploadableBg.java
@@ -0,0 +1,22 @@
+package com.eveningoutpost.dexdrip.ShareModels;
+
+/**
+ * Created by stephenblack on 8/10/15.
+ */
+public interface ShareUploadableBg {
+    public int getMgdlValue();
+    public long getEpochTimestamp(); //in milliseconds
+    public int getSlopeOrdinal();
+
+    //Ordinals:
+    //  0 - NONE
+    //  1 - DOUBLE_UP
+    //  2 - SINGLE_UP
+    //  3 - UP_45
+    //  4 - FLAT
+    //  5 - DOWN_45
+    //  6 - SINGLE_DOWN
+    //  7 - DOUBLE_DOWN
+    //  8 - NOT_COMPUTABLE
+    //  9 - OUT_OF_RANGE
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareTest.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareTest.java
index bdcd815..36c0b43 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareTest.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareTest.java
@@ -20,7 +20,7 @@
 import android.os.Bundle;
 import android.preference.PreferenceManager;
 import android.text.TextUtils;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.Menu;
 import android.view.MenuItem;
 import android.view.View;
@@ -130,7 +130,7 @@ protected void onCreate(Bundle savedInstanceState) {
     public void onDestroy() {
         super.onDestroy();
         close();
-        Log.w(TAG, "CLOSING CONNECTION");
+        Log.i(TAG, "CLOSING CONNECTION");
     }
 
     public void addListenerOnButton() {
@@ -167,8 +167,8 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
                 mBluetoothGatt = gatt;
                 mConnectionState = STATE_CONNECTED;
                 ActiveBluetoothDevice.connected();
-                Log.w(TAG, "Connected to GATT server.");
-                Log.w(TAG, "Connection state: Bonded - " + device.getBondState());
+                Log.i(TAG, "Connected to GATT server.");
+                Log.i(TAG, "Connection state: Bonded - " + device.getBondState());
 
                 if (device.getBondState() == BluetoothDevice.BOND_BONDED) {
                     currentGattTask = GATT_SETUP;
@@ -188,7 +188,7 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
         @Override
         public void onServicesDiscovered(BluetoothGatt gatt, int status) {
             if (status == BluetoothGatt.GATT_SUCCESS) {
-                Log.w(TAG, "Services Discovered: " + status);
+                Log.i(TAG, "Services Discovered: " + status);
                 authenticateConnection(gatt);
 
             }
@@ -197,10 +197,10 @@ public void onServicesDiscovered(BluetoothGatt gatt, int status) {
         @Override
         public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
             if (status == BluetoothGatt.GATT_SUCCESS) {
-                Log.w(TAG, "Characteristic Read");
+                Log.i(TAG, "Characteristic Read");
                 byte[] value = characteristic.getValue();
                 if(value != null) {
-                    Log.w(TAG, "VALUE" + value);
+                    Log.i(TAG, "VALUE" + value);
                 } else {
                     Log.w(TAG, "Characteristic was null");
                 }
@@ -212,37 +212,37 @@ public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic
 
         @Override
         public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
-            Log.w(TAG, "Characteristic changed");
+            Log.i(TAG, "Characteristic changed");
             UUID charUuid = characteristic.getUuid();
-            Log.w(TAG, "Characteristic Update Received: " + charUuid);
+            Log.i(TAG, "Characteristic Update Received: " + charUuid);
             if(charUuid.compareTo(mResponseCharacteristic.getUuid()) == 0) {
-                Log.w(TAG, "mResponseCharacteristic Update");
+                Log.i(TAG, "mResponseCharacteristic Update");
             }
             if(charUuid.compareTo(mCommandCharacteristic.getUuid()) == 0) {
-                Log.w(TAG, "mCommandCharacteristic Update");
+                Log.i(TAG, "mCommandCharacteristic Update");
             }
             if(charUuid.compareTo(mHeartBeatCharacteristic.getUuid()) == 0) {
-                Log.w(TAG, "mHeartBeatCharacteristic Update");
+                Log.i(TAG, "mHeartBeatCharacteristic Update");
             }
             if(charUuid.compareTo(mReceiveDataCharacteristic.getUuid()) == 0) {
-                Log.w(TAG, "mReceiveDataCharacteristic Update");
+                Log.i(TAG, "mReceiveDataCharacteristic Update");
                 byte[] value = characteristic.getValue();
                 if(value != null) {
-                    Log.w(TAG, "Characteristic: " + value);
-                    Log.w(TAG, "Characteristic: " + value.toString());
-                    Log.w(TAG, "Characteristic getstring: " + characteristic.getStringValue(0));
-                    Log.w(TAG, "SUBSCRIBED TO RESPONSE LISTENER");
+                    Log.i(TAG, "Characteristic: " + value);
+                    Log.i(TAG, "Characteristic: " + value.toString());
+                    Log.i(TAG, "Characteristic getstring: " + characteristic.getStringValue(0));
+                    Log.i(TAG, "SUBSCRIBED TO RESPONSE LISTENER");
                     Observable.just(characteristic.getValue()).subscribe(mDataResponseListener);
                 } else {
                     Log.w(TAG, "Characteristic was null");
                 }
             }
-            Log.w(TAG, "NEW VALUE: " + characteristic.getValue().toString());
+            Log.i(TAG, "NEW VALUE: " + characteristic.getValue().toString());
         }
 
         @Override
         public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
-            Log.w(TAG, "Wrote a discriptor, status: " + status);
+            Log.i(TAG, "Wrote a discriptor, status: " + status);
             if(step == 2 && currentGattTask == GATT_SETUP) {
                 setListeners(2);
             } else if(step == 3) {
@@ -250,13 +250,13 @@ public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descri
             } else if(step == 4) {
                 setListeners(4);
             } else if(step == 5) {
-                Log.w(TAG, "Done setting Listeners");
+                Log.i(TAG, "Done setting Listeners");
             }
         }
 
         @Override
         public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
-            Log.w(TAG, "Wrote a characteristic: " + status);
+            Log.i(TAG, "Wrote a characteristic: " + status);
             nextGattStep();
         }
     };
@@ -268,7 +268,7 @@ public void attemptConnection() {
             mConnectionState = mBluetoothManager.getConnectionState(device, BluetoothProfile.GATT);
         }
 
-        Log.w(TAG, "Connection state: " + mConnectionState);
+        Log.i(TAG, "Connection state: " + mConnectionState);
         details.append("\nConnection state: " + mConnectionState);
         if (mConnectionState == STATE_DISCONNECTED || mConnectionState == STATE_DISCONNECTING) {
             ActiveBluetoothDevice btDevice = new Select().from(ActiveBluetoothDevice.class)
@@ -339,7 +339,7 @@ public void bond(BluetoothGatt gatt) {
     public boolean connect(final String address) {
 
         details.append("\nConnecting to device");
-        Log.w(TAG, "CONNECTING TO DEVICE");
+        Log.i(TAG, "CONNECTING TO DEVICE");
         if (mBluetoothAdapter == null || address == null) {
             details.append("\nBT adapter is null");
             Log.w(TAG, "BluetoothAdapter not initialized or unspecified address.");
@@ -362,7 +362,7 @@ public boolean connect(final String address) {
                 return false;
             }
             mBluetoothGatt = device.connectGatt(getApplicationContext(), true, mGattCallback);
-            Log.w(TAG, "Trying to create a new connection.");
+            Log.i(TAG, "Trying to create a new connection.");
             details.append("\nTrying to create a new connection to device");
             mConnectionState = STATE_CONNECTING;
             return true;
@@ -370,7 +370,7 @@ public boolean connect(final String address) {
     }
 
     public void authenticateConnection(BluetoothGatt bluetoothGatt) {
-        Log.w(TAG, "Trying to auth");
+        Log.i(TAG, "Trying to auth");
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
         if(bluetoothGatt != null) {
@@ -379,7 +379,7 @@ public void authenticateConnection(BluetoothGatt bluetoothGatt) {
             if (mShareService != null) {
                 mAuthenticationCharacteristic = mShareService.getCharacteristic(DexShareAttributes.AuthenticationCode);
                 if(mAuthenticationCharacteristic != null) {
-                    Log.w(TAG, "Auth Characteristic found: " + mAuthenticationCharacteristic.toString());
+                    Log.i(TAG, "Auth Characteristic found: " + mAuthenticationCharacteristic.toString());
                     mAuthenticationCharacteristic.setValue((receiverSn + "000000").getBytes(StandardCharsets.US_ASCII));
                     currentGattTask = GATT_SETUP;
                     step = 1;
@@ -403,7 +403,7 @@ public void assignCharacteristics() {
 
     public void setListeners(int listener_number) {
 
-        Log.w(TAG, "Setting Listener: #" + listener_number);
+        Log.i(TAG, "Setting Listener: #" + listener_number);
         if(listener_number == 1) {
             step = 3;
             setCharacteristicIndication(mReceiveDataCharacteristic);
@@ -442,22 +442,22 @@ public void readCharacteristic(BluetoothGattCharacteristic characteristic) {
 
     public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic){ setCharacteristicNotification(characteristic, true);}
     public void setCharacteristicNotification(BluetoothGattCharacteristic characteristic, boolean enabled) {
-        Log.w(TAG, "Characteristic setting notification");
+        Log.i(TAG, "Characteristic setting notification");
         mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);
-        Log.w(TAG, "UUID FOUND: " + characteristic.getUuid());
+        Log.i(TAG, "UUID FOUND: " + characteristic.getUuid());
         BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(HM10Attributes.CLIENT_CHARACTERISTIC_CONFIG));
-        Log.w(TAG, "Descriptor found: " + descriptor.getUuid());
+        Log.i(TAG, "Descriptor found: " + descriptor.getUuid());
         descriptor.setValue(BluetoothGattDescriptor.ENABLE_NOTIFICATION_VALUE);
         mBluetoothGatt.writeDescriptor(descriptor);
     }
 
     public void setCharacteristicIndication(BluetoothGattCharacteristic characteristic){ setCharacteristicIndication(characteristic, true);}
     public void setCharacteristicIndication(BluetoothGattCharacteristic characteristic, boolean enabled) {
-        Log.w(TAG, "Characteristic setting notification");
+        Log.i(TAG, "Characteristic setting notification");
         mBluetoothGatt.setCharacteristicNotification(characteristic, enabled);
-        Log.w(TAG, "UUID FOUND: " + characteristic.getUuid());
+        Log.i(TAG, "UUID FOUND: " + characteristic.getUuid());
         BluetoothGattDescriptor descriptor = characteristic.getDescriptor(UUID.fromString(HM10Attributes.CLIENT_CHARACTERISTIC_CONFIG));
-        Log.w(TAG, "Descriptor found: " + descriptor.getUuid());
+        Log.i(TAG, "Descriptor found: " + descriptor.getUuid());
         descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
         mBluetoothGatt.writeDescriptor(descriptor);
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
index 81a974b..6dab5dc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
@@ -13,7 +13,7 @@
 import android.content.SharedPreferences;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.util.TypedValue;
 import android.view.View;
 import android.widget.AdapterView;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
index 8cbd8a5..3499727 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
@@ -1,12 +1,8 @@
 package com.eveningoutpost.dexdrip;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.widget.DrawerLayout;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuItem;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.DatePicker;
@@ -17,7 +13,6 @@
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
 import java.util.Calendar;
-import java.util.List;
 
 
 public class StartNewSensor extends ActivityWithMenu {
@@ -60,7 +55,7 @@ public void onClick(View v) {
               long startTime = calendar.getTime().getTime();
 
               Sensor sensor = Sensor.create(startTime);
-              Log.w("NEW SENSOR", "Sensor started at " + startTime);
+              Log.i("NEW SENSOR", "Sensor started at " + startTime);
 
               Toast.makeText(getApplicationContext(), "NEW SENSOR STARTED", Toast.LENGTH_LONG).show();
               Intent intent = new Intent(getApplicationContext(), Home.class);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index 457ded3..87de692 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -1,19 +1,17 @@
 package com.eveningoutpost.dexdrip;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
-import android.support.v4.widget.DrawerLayout;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuItem;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
-import java.util.Date;
+
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
+import java.util.Date;
+
 public class StopSensor extends ActivityWithMenu {
     public static String menu_name = "Stop Sensor";
    public Button button;
@@ -45,7 +43,7 @@ public void addListenerOnButton() {
             public void onClick(View v) {
                 Sensor sensor = Sensor.currentSensor();
                 sensor.stopped_at = new Date().getTime();
-                Log.w("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
+                Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
                 sensor.save();
                 AlertPlayer.getPlayer().stopAlert(getApplicationContext(),true, false);
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java b/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
index 923cf0e..ad0fb15 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
@@ -11,7 +11,7 @@
 import android.os.Bundle;
 import android.os.Handler;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.Display;
 import android.view.View;
 import android.widget.Button;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
index 8866bf9..2bc81bc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
@@ -10,7 +10,7 @@
 import android.net.Uri;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.EditAlertActivity;
 import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
@@ -43,7 +43,7 @@
 
     public static AlertPlayer getPlayer() {
         if(singletone == null) {
-            Log.e(TAG,"getPlayer: Creating a new AlertPlayer");
+            Log.i(TAG,"getPlayer: Creating a new AlertPlayer");
             singletone = new AlertPlayer();
         } else {
             Log.i(TAG,"getPlayer: Using existing AlertPlayer");
@@ -52,9 +52,9 @@ public static AlertPlayer getPlayer() {
     }
 
     public synchronized  void startAlert(Context ctx, boolean trendingToAlertEnd, AlertType newAlert, String bgValue )  {
-        Log.e(TAG, "startAlert called, Threadid " + Thread.currentThread().getId());
+        Log.d(TAG, "startAlert called, Threadid " + Thread.currentThread().getId());
         if (trendingToAlertEnd) {
-            Log.e(TAG,"startAlert: This alert is trending to it's end will not do anything");
+            Log.d(TAG,"startAlert: This alert is trending to it's end will not do anything");
             return;
         }
 
@@ -67,7 +67,7 @@ public synchronized  void startAlert(Context ctx, boolean trendingToAlertEnd, Al
 
     public synchronized void stopAlert(Context ctx, boolean ClearData, boolean clearIfSnoozeFinished) {
 
-        Log.e(TAG, "stopAlert: stop called ClearData " + ClearData + "  ThreadID " + Thread.currentThread().getId());
+        Log.d(TAG, "stopAlert: stop called ClearData " + ClearData + "  ThreadID " + Thread.currentThread().getId());
         if (ClearData) {
             ActiveBgAlert.ClearData();
         }
@@ -83,7 +83,7 @@ public synchronized void stopAlert(Context ctx, boolean ClearData, boolean clear
     }
 
     public synchronized  void Snooze(Context ctx, int repeatTime) {
-        Log.e(TAG, "Snooze called repeatTime = " + repeatTime);
+        Log.i(TAG, "Snooze called repeatTime = " + repeatTime);
         stopAlert(ctx, false, false);
         ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
         if (activeBgAlert  == null) {
@@ -94,12 +94,12 @@ public synchronized  void Snooze(Context ctx, int repeatTime) {
     }
 
     public synchronized  void PreSnooze(Context ctx, String uuid, int repeatTime) {
-        Log.e(TAG, "PreSnooze called repeatTime = "+ repeatTime);
+        Log.i(TAG, "PreSnooze called repeatTime = "+ repeatTime);
         stopAlert(ctx, true, false);
         ActiveBgAlert.Create(uuid, true, new Date().getTime() + repeatTime * 60000 );
         ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
         if (activeBgAlert  == null) {
-            Log.wtf(TAG, "Just created the allert, where did it go...");
+            Log.wtf(TAG, "Just created the alert, where did it go...");
             return;
         }
         activeBgAlert.snooze(repeatTime);
@@ -109,7 +109,7 @@ public synchronized  void PreSnooze(Context ctx, String uuid, int repeatTime) {
     public void ClockTick(Context ctx, boolean trendingToAlertEnd, String bgValue)
     {
         if (trendingToAlertEnd) {
-            Log.e(TAG,"ClockTick: This alert is trending to it's end will not do anything");
+            Log.d(TAG,"ClockTick: This alert is trending to it's end will not do anything");
             return;
         }
         ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
@@ -127,22 +127,22 @@ public void ClockTick(Context ctx, boolean trendingToAlertEnd, String bgValue)
                 ActiveBgAlert.ClearData();
                 return;
             }
-            Log.e(TAG,"ClockTick: Playing the alert again");
+            Log.d(TAG,"ClockTick: Playing the alert again");
             Vibrate(ctx, alert, bgValue, alert.override_silent_mode, timeFromStartPlaying);
         }
 
     }
 
     private void PlayFile(Context ctx, String FileName, float VolumeFrac) {
-        Log.e(TAG, "PlayFile: called FileName = " + FileName);
+        Log.i(TAG, "PlayFile: called FileName = " + FileName);
         if(mediaPlayer != null) {
-            Log.e(TAG, "ERROR, PlayFile:going to leak a mediaplayer !!!");
+            Log.i(TAG, "ERROR, PlayFile:going to leak a mediaplayer !!!");
         }
         if(FileName != null && FileName.length() > 0) {
             mediaPlayer = MediaPlayer.create(ctx, Uri.parse(FileName), null);
         }
         if(mediaPlayer == null) {
-            Log.w(TAG, "PlayFile: Creating mediaplayer with file " + FileName + " failed. using default alarm");
+            Log.i(TAG, "PlayFile: Creating mediaplayer with file " + FileName + " failed. using default alarm");
             mediaPlayer = MediaPlayer.create(ctx, R.raw.default_alert);
         }
         if(mediaPlayer != null) {
@@ -156,7 +156,7 @@ private void PlayFile(Context ctx, String FileName, float VolumeFrac) {
             mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
                 @Override
                 public void onCompletion(MediaPlayer mp) {
-                    Log.e(TAG, "PlayFile: onCompletion called (finished playing) ");
+                    Log.i(TAG, "PlayFile: onCompletion called (finished playing) ");
                     AudioManager manager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
                     int currentVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
                     if(volumeForThisAlert == currentVolume) {
@@ -165,7 +165,7 @@ public void onCompletion(MediaPlayer mp) {
                     }
                 }
             });
-            Log.e(TAG, "PlayFile: calling mediaPlayer.start() ");
+            Log.i(TAG, "PlayFile: calling mediaPlayer.start() ");
             mediaPlayer.start();
         } else {
             // TODO, what should we do here???
@@ -186,23 +186,23 @@ static private int getAlertProfile(Context ctx){
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
         String profile = prefs.getString("bg_alert_profile", "ascending");
         if(profile.equals("High")) {
-            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_HIGH");
+            Log.i(TAG, "getAlertProfile returning ALERT_PROFILE_HIGH");
             return ALERT_PROFILE_HIGH;
         }
         if(profile.equals("ascending")) {
-            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_ASCENDING");
+            Log.i(TAG, "getAlertProfile returning ALERT_PROFILE_ASCENDING");
             return ALERT_PROFILE_ASCENDING;
         }
         if(profile.equals("medium")) {
-            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_MEDIUM");
+            Log.i(TAG, "getAlertProfile returning ALERT_PROFILE_MEDIUM");
             return ALERT_PROFILE_MEDIUM;
         }
         if(profile.equals("vibrate only")) {
-            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_VIBRATE_ONLY");
+            Log.i(TAG, "getAlertProfile returning ALERT_PROFILE_VIBRATE_ONLY");
             return ALERT_PROFILE_VIBRATE_ONLY;
         }
         if(profile.equals("Silent")) {
-            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_SILENT");
+            Log.i(TAG, "getAlertProfile returning ALERT_PROFILE_SILENT");
             return ALERT_PROFILE_SILENT;
         }
         Log.wtf(TAG, "getAlertProfile unknown value " + profile + " ALERT_PROFILE_ASCENDING");
@@ -211,8 +211,8 @@ static private int getAlertProfile(Context ctx){
     }
 
     private void Vibrate(Context ctx, AlertType alert, String bgValue, Boolean overrideSilent, int timeFromStartPlaying) {
-        Log.e(TAG, "Vibrate called timeFromStartPlaying = " + timeFromStartPlaying);
-        Log.e("ALARM", "setting vibrate alarm");
+        Log.d(TAG, "Vibrate called timeFromStartPlaying = " + timeFromStartPlaying);
+        Log.d("ALARM", "setting vibrate alarm");
         int profile = getAlertProfile(ctx);
         if(alert.uuid.equals(AlertType.LOW_ALERT_55)) {
             // boost alerts...
@@ -245,7 +245,7 @@ private void Vibrate(Context ctx, AlertType alert, String bgValue, Boolean overr
                 if(profile == ALERT_PROFILE_MEDIUM) {
                     volumeFrac = (float)0.7;
                 }
-                Log.e(TAG, "Vibrate volumeFrac = " + volumeFrac);
+                Log.d(TAG, "Vibrate volumeFrac = " + volumeFrac);
                 boolean isRingTone = EditAlertActivity.isPathRingtone(ctx, alert.mp3_file);
                 if(isRingTone && !overrideSilent) {
                         builder.setSound(Uri.parse(alert.mp3_file));
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index aa12c10..6d2e450 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -27,7 +27,7 @@
 import lecho.lib.hellocharts.model.LineChartData;
 import lecho.lib.hellocharts.model.PointValue;
 import lecho.lib.hellocharts.model.Viewport;
-import lecho.lib.hellocharts.util.Utils;
+import lecho.lib.hellocharts.util.ChartUtils;
 import lecho.lib.hellocharts.view.Chart;
 
 /**
@@ -111,7 +111,7 @@ public LineChartData previewLineData() {
 
     public Line highValuesLine() {
         Line highValuesLine = new Line(highValues);
-        highValuesLine.setColor(Utils.COLOR_ORANGE);
+        highValuesLine.setColor(ChartUtils.COLOR_ORANGE);
         highValuesLine.setHasLines(false);
         highValuesLine.setPointRadius(pointSize);
         highValuesLine.setHasPoints(true);
@@ -129,7 +129,7 @@ public Line lowValuesLine() {
 
     public Line inRangeValuesLine() {
         Line inRangeValuesLine = new Line(inRangeValues);
-        inRangeValuesLine.setColor(Utils.COLOR_BLUE);
+        inRangeValuesLine.setColor(ChartUtils.COLOR_BLUE);
         inRangeValuesLine.setHasLines(false);
         inRangeValuesLine.setPointRadius(pointSize);
         inRangeValuesLine.setHasPoints(true);
@@ -152,7 +152,7 @@ public Line rawInterpretedLine() {
         lines[0].setPointRadius(pointSize * 3 / 2);
         lines[0].setHasPoints(true);
         lines[1] = new Line(calibrationValues);
-        lines[1].setColor(Utils.COLOR_RED);
+        lines[1].setColor(ChartUtils.COLOR_RED);
         lines[1].setHasLines(false);
         lines[1].setPointRadius(pointSize * 3 / 4);
         lines[1].setHasPoints(true);
@@ -188,7 +188,7 @@ public Line highLine() {
         Line highLine = new Line(highLineValues);
         highLine.setHasPoints(false);
         highLine.setStrokeWidth(1);
-        highLine.setColor(Utils.COLOR_ORANGE);
+        highLine.setColor(ChartUtils.COLOR_ORANGE);
         return highLine;
     }
 
@@ -300,7 +300,7 @@ public Axis previewXAxis(){
     /////////VIEWPORT RELATED//////////////
     public Viewport advanceViewport(Chart chart, Chart previewChart) {
         viewport = new Viewport(previewChart.getMaximumViewport());
-        viewport.inset((float)((86400000 / 2.5)/ FUZZER), 0);
+        viewport.inset((float) ((86400000 / 2.5) / FUZZER), 0);
         double distance_to_move = ((new Date().getTime())/ FUZZER) - viewport.left - (((viewport.right - viewport.left) /2));
         viewport.offset((float) distance_to_move, 0);
         return viewport;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index 78c8db8..002d19f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -11,7 +11,7 @@
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
 import com.activeandroid.annotation.Column;
@@ -19,7 +19,7 @@
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Services.SyncService;
-import com.eveningoutpost.dexdrip.ShareModels.ShareRest;
+import com.eveningoutpost.dexdrip.ShareModels.BgUploader;
 import com.eveningoutpost.dexdrip.widgetUpdateService;
 import com.eveningoutpost.dexdrip.xDripWidget;
 
@@ -128,10 +128,12 @@ public static void addToQueue(BgReading bgReading, String operation_type, Contex
             }
 
             if (prefs.getBoolean("share_upload", false)) {
-                Log.w("ShareRest", "About to call ShareRest!!");
-                Intent shareIntent = new Intent(context, ShareRest.class);
-                shareIntent.putExtra("BgUuid", bgReading.uuid);
-                context.startService(shareIntent);
+                Log.d("ShareRest", "About to call ShareRest!!");
+                String login = prefs.getString("dexcom_account_name", "");
+                String password = prefs.getString("dexcom_account_password", "");
+                String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
+                BgUploader bgUploader = new BgUploader(login, password, receiverSn, context);
+                bgUploader.upload(bgReading);
             }
             context.startService(new Intent(context, SyncService.class));
         } finally {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
index 82e760d..b934b49 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
@@ -1,21 +1,21 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
-import android.bluetooth.BluetoothGattService;
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.util.DisplayMetrics;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
-import lecho.lib.hellocharts.model.Line;
-import lecho.lib.hellocharts.model.LineChartData;
-import lecho.lib.hellocharts.model.Viewport;
-import lecho.lib.hellocharts.view.LineChartView;
 
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
 
+import lecho.lib.hellocharts.model.Line;
+import lecho.lib.hellocharts.model.LineChartData;
+import lecho.lib.hellocharts.model.Viewport;
+import lecho.lib.hellocharts.view.LineChartView;
+
 /**
  * Created by matthiasgranberry on 5/4/15.
  */
@@ -184,7 +184,7 @@ public Bitmap build() {
         viewport.right = end;
         chart.setViewportCalculationEnabled(false);
         chart.setInteractive(false);
-        chart.setCurrentViewport(viewport, false);
+        chart.setCurrentViewport(viewport);
         chart.setPadding(0, 0, 0, 0);
         chart.setLeft(0);
         chart.setTop(0);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
index b417832..667a345 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
@@ -5,8 +5,8 @@
 import android.content.SharedPreferences;
 import android.os.Environment;
 import android.preference.PreferenceManager;
-import android.util.Log;
 
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Services.DexCollectionService;
 import com.eveningoutpost.dexdrip.Services.DexShareCollectionService;
 import com.eveningoutpost.dexdrip.Services.SyncService;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
index 2ac6441..1c6066b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
@@ -2,12 +2,11 @@
 
 import android.app.Service;
 import android.content.Context;
-import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Handler;
 import android.os.Looper;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 /**
  * Created by stephenblack on 12/25/14.
@@ -29,7 +28,7 @@ public ForegroundServiceStarter(Context context, Service service) {
 
     public void start() {
         if (run_service_in_foreground) {
-            Log.e("FOREGROUND", "should be moving to foreground");
+            Log.d("FOREGROUND", "should be moving to foreground");
             mHandler.post(new Runnable() {
                 @Override
                 public void run() {
@@ -41,7 +40,7 @@ public void run() {
 
     public void stop() {
         if (run_service_in_foreground) {
-            Log.e("FOREGROUND", "should be moving out of foreground");
+            Log.d("FOREGROUND", "should be moving out of foreground");
             mService.stopForeground(true);
         }
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
index 3397a4b..fa2029e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
@@ -2,7 +2,7 @@
 
 import android.content.Context;
 import android.os.AsyncTask;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index a24dadc..865e483 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -6,10 +6,11 @@
 import android.content.SharedPreferences;
 import android.os.BatteryManager;
 import android.preference.PreferenceManager;
-import android.util.Log;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import com.google.common.hash.Hashing;
 import com.mongodb.BasicDBObject;
 import com.mongodb.DB;
 import com.mongodb.DBCollection;
@@ -17,6 +18,8 @@
 import com.mongodb.MongoClientURI;
 import com.mongodb.WriteConcern;
 
+import net.tribe7.common.base.Charsets;
+
 import org.apache.http.Header;
 import org.apache.http.client.ResponseHandler;
 import org.apache.http.client.methods.HttpPost;
@@ -30,7 +33,6 @@
 import org.json.JSONObject;
 
 import java.net.URI;
-import java.security.MessageDigest;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
@@ -111,7 +113,6 @@ private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDat
                     doRESTUploadTo(URI.create(baseURI), glucoseDataSets, meterRecords, calRecords);
                 } catch (Exception e) {
                     Log.e(TAG, "Unable to do REST API Upload " + e.getMessage());
-                    Log.e(TAG, "Unable to do REST API Upload", e.getCause());
                     return false;
                 }
             }
@@ -152,15 +153,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                     if (secret == null || secret.isEmpty()) {
                         throw new Exception("Starting with API v1, a pass phase is required");
                     } else {
-                        MessageDigest digest = MessageDigest.getInstance("SHA-1");
-                        byte[] bytes = secret.getBytes("UTF-8");
-                        digest.update(bytes, 0, bytes.length);
-                        bytes = digest.digest();
-                        StringBuilder sb = new StringBuilder(bytes.length * 2);
-                        for (byte b: bytes) {
-                            sb.append(String.format("%02x", b & 0xff));
-                        }
-                        String token = sb.toString();
+                        String token =  Hashing.sha1().hashBytes(secret.getBytes(Charsets.UTF_8)).toString();
                         apiSecretHeader = new BasicHeader("api-secret", token);
                     }
                 }
@@ -178,7 +171,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                         else
                             populateLegacyAPIEntry(json, record);
                     } catch (Exception e) {
-                        Log.w(TAG, "Unable to populate entry");
+                        Log.e(TAG, "Unable to populate entry", e);
                         continue;
                     }
 
@@ -195,7 +188,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                         ResponseHandler responseHandler = new BasicResponseHandler();
                         httpclient.execute(post, responseHandler);
                     } catch (Exception e) {
-                        Log.w(TAG, "Unable to populate entry");
+                        Log.e(TAG, "Unable to populate entry", e);
                     }
                 }
 
@@ -206,7 +199,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                         try {
                             populateV1APIMeterReadingEntry(json, record);
                         } catch (Exception e) {
-                            Log.w(TAG, "Unable to populate entry");
+                            Log.e(TAG, "Unable to populate entry", e);
                             continue;
                         }
 
@@ -222,7 +215,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                             ResponseHandler responseHandler = new BasicResponseHandler();
                             httpclient.execute(post, responseHandler);
                         } catch (Exception e) {
-                            Log.w(TAG, "Unable to post data");
+                            Log.e(TAG, "Unable to post data", e);
                         }
                     }
                 }
@@ -235,7 +228,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                         try {
                             populateV1APICalibrationEntry(json, calRecord);
                         } catch (Exception e) {
-                            Log.w(TAG, "Unable to populate entry");
+                            Log.e(TAG, "Unable to populate entry", e);
                             continue;
                         }
 
@@ -251,7 +244,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                             ResponseHandler responseHandler = new BasicResponseHandler();
                             httpclient.execute(post, responseHandler);
                         } catch (Exception e) {
-                            Log.w(TAG, "Unable to post data");
+                            Log.e(TAG, "Unable to post data", e);
                         }
                     }
                 }
@@ -260,7 +253,7 @@ private void doRESTUploadTo(URI baseURI, List<BgReading> glucoseDataSets, List<C
                 postDeviceStatus(baseURL, apiSecretHeader, httpclient);
 
             } catch (Exception e) {
-                Log.w(TAG, "Unable to post data");
+                Log.e(TAG, "Unable to post data", e);
             }
         }
 
@@ -425,7 +418,6 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
 
                     } catch (Exception e) {
                         Log.e(TAG, "Unable to upload data to mongo " + e.getMessage());
-                        Log.e(TAG, "Unable to upload data to mongo", e.getCause());
                     } finally {
                         if(client != null) { client.close(); }
                     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index bbefdd0..70e47df 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -21,7 +21,7 @@
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.AddCalibration;
 import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
@@ -88,7 +88,7 @@
 
     public Notifications() {
         super("Notifications");
-        Log.w("Notifications", "Running Notifications Intent Service");
+        Log.i("Notifications", "Running Notifications Intent Service");
     }
 
     @Override
@@ -136,7 +136,7 @@ public void FileBasedNotifications(Context context) {
             return;
         }
 
-        Log.e(TAG, "FileBasedNotifications called bgReading.calculated_value = " + bgReading.calculated_value);
+        Log.d(TAG, "FileBasedNotifications called bgReading.calculated_value = " + bgReading.calculated_value);
 
         // TODO: tzachi what is the time of this last bgReading
         // If the last reading does not have a sensor, or that sensor was stopped.
@@ -146,7 +146,7 @@ public void FileBasedNotifications(Context context) {
             AlertType newAlert = AlertType.get_highest_active_alert(context, bgReading.calculated_value);
 
             if (newAlert == null) {
-                Log.e(TAG, "FileBasedNotifications - No active notifcation exists, stopping all alerts");
+                Log.d(TAG, "FileBasedNotifications - No active notifcation exists, stopping all alerts");
                 // No alert should work, Stop all alerts, but keep the snoozing...
                 AlertPlayer.getPlayer().stopAlert(context, false, true);
                 return;
@@ -154,7 +154,7 @@ public void FileBasedNotifications(Context context) {
 
             AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
             if(activeBgAlert == null) {
-                Log.e(TAG, "FileBasedNotifications we have a new alert, starting to play it... " + newAlert.name);
+                Log.d(TAG, "FileBasedNotifications we have a new alert, starting to play it... " + newAlert.name);
                 // We need to create a new alert  and start playing
                 boolean trendingToAlertEnd = trendingToAlertEnd(context, true, newAlert);
                 AlertPlayer.getPlayer().startAlert(context, trendingToAlertEnd, newAlert, EditAlertActivity.unitsConvert2Disp(doMgdl, bgReading.calculated_value));
@@ -164,7 +164,7 @@ public void FileBasedNotifications(Context context) {
 
             if (activeBgAlert.uuid.equals(newAlert.uuid)) {
                 // This is the same alert. Might need to play again...
-                Log.e(TAG, "FileBasedNotifications we have found an active alert, checking if we need to play it " + newAlert.name);
+                Log.d(TAG, "FileBasedNotifications we have found an active alert, checking if we need to play it " + newAlert.name);
                 boolean trendingToAlertEnd = trendingToAlertEnd(context, false, newAlert);
                 AlertPlayer.getPlayer().ClockTick(context, trendingToAlertEnd, EditAlertActivity.unitsConvert2Disp(doMgdl, bgReading.calculated_value));
                 return;
@@ -173,7 +173,7 @@ public void FileBasedNotifications(Context context) {
 
             boolean alertSnoozeOver = ActiveBgAlert.alertSnoozeOver();
             if (alertSnoozeOver) {
-                Log.e(TAG, "FileBasedNotifications we had two alerts, the snoozed one is over, we fall down to deleting the snoozed and staring the new");
+                Log.d(TAG, "FileBasedNotifications we had two alerts, the snoozed one is over, we fall down to deleting the snoozed and staring the new");
                 // in such case it is not important which is higher.
 
             } else {
@@ -190,7 +190,7 @@ public void FileBasedNotifications(Context context) {
                 AlertType  newHigherAlert = AlertType.HigherAlert(activeBgAlert, newAlert);
                 if ((newHigherAlert == activeBgAlert) && (!opositeDirection)) {
                     // the existing alert is the higher, we should check if to play it
-                    Log.e(TAG, "FileBasedNotifications The existing alert has the same direcotion, checking if to playit newHigherAlert = " + newHigherAlert.name +
+                    Log.d(TAG, "FileBasedNotifications The existing alert has the same direcotion, checking if to playit newHigherAlert = " + newHigherAlert.name +
                             "activeBgAlert = " + activeBgAlert.name);
 
                     boolean trendingToAlertEnd = trendingToAlertEnd(context, false, newHigherAlert);
@@ -199,7 +199,7 @@ public void FileBasedNotifications(Context context) {
                 }
             }
             // For now, we are stopping the old alert and starting a new one.
-            Log.e(TAG, "Found a new alert, that is higher than the previous one will play it. " + newAlert.name);
+            Log.d(TAG, "Found a new alert, that is higher than the previous one will play it. " + newAlert.name);
             AlertPlayer.getPlayer().stopAlert(context, true, false);
             boolean trendingToAlertEnd = trendingToAlertEnd(context, true, newAlert);
             AlertPlayer.getPlayer().startAlert(context, trendingToAlertEnd, newAlert, EditAlertActivity.unitsConvert2Disp(doMgdl, bgReading.calculated_value));
@@ -260,7 +260,7 @@ public void notificationSetter(Context context) {
                 extraCalibrationRequest();
             } else { clearExtraCalibrationRequest(); }
             if (calibrations.size() >= 1 && Math.abs((new Date().getTime() - calibrations.get(0).timestamp))/(1000*60*60) > 12) {
-                Log.e("NOTIFICATIONS", "Calibration difference in hours: " + ((new Date().getTime() - calibrations.get(0).timestamp))/(1000*60*60));
+                Log.d("NOTIFICATIONS", "Calibration difference in hours: " + ((new Date().getTime() - calibrations.get(0).timestamp))/(1000*60*60));
                 calibrationRequest();
             } else { clearCalibrationRequest(); }
 
@@ -270,7 +270,7 @@ public void notificationSetter(Context context) {
     }
 
     private void  ArmTimer() {
-        Log.e(TAG, "ArmTimer called");
+        Log.d(TAG, "ArmTimer called");
         ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
         if(activeBgAlert != null ) {
             AlertType alert = AlertType.get_alert(activeBgAlert.alert_uuid);
@@ -492,7 +492,7 @@ public static void RisingAlert(Context context, boolean on) {
         RiseDropAlert(context, on, "bg_rise_alert", "bg rising fast", riseAlertNotificationId);
     }
     public static void DropAlert(Context context, boolean on) {
-        RiseDropAlert(context, on, "bg_fall_alert", "bg failing fast", failAlertNotificationId);
+        RiseDropAlert(context, on, "bg_fall_alert", "bg falling fast", failAlertNotificationId);
     }
 
     public static void RiseDropAlert(Context context, boolean on, String type, String message, int notificatioId) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
index a1910c4..6791b89 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
@@ -8,7 +8,7 @@
 import android.os.BatteryManager;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.getpebble.android.kit.PebbleKit;
 import com.getpebble.android.kit.util.PebbleDictionary;
@@ -60,7 +60,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopSelf();
             return START_NOT_STICKY;
         }
-        Log.w(TAG, "STARTING SERVICE");
+        Log.i(TAG, "STARTING SERVICE");
         sendData();
         return START_STICKY;
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/RestCalls.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/RestCalls.java
index 8208958..411fc56 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/RestCalls.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/RestCalls.java
@@ -1,6 +1,6 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.Interfaces.BgReadingInterface;
 import com.eveningoutpost.dexdrip.Interfaces.CalibrationInterface;
@@ -50,7 +50,6 @@ public void success(Gson gsonResponse, Response response) {
                     @Override
                     public void failure(RetrofitError error) {
                         Response response = error.getResponse();
-                        Log.w("REST CALL ERROR:", "****************");
                         Log.w("REST CALL STATUS:", "" + response.getStatus());
                         Log.w("REST CALL REASON:", response.getReason());
                     }
@@ -64,14 +63,12 @@ public static void updateBgReading(final BgSendQueue bgSendQueue) {
         bgReadingInterface().updateReading(user.uuid, bgSendQueue.bgReading.uuid, bgSendQueue.bgReading, new Callback<Gson>() {
                     @Override
                     public void success(Gson gsonResponse, Response response) {
-                        Log.w("REST CALL Update Success!:", "****************");
                         bgSendQueue.success = true;
                         bgSendQueue.save();
                     }
                     @Override
                     public void failure(RetrofitError error) {
                         Response response = error.getResponse();
-                        Log.w("REST CALL ERROR:", "****************");
                         Log.w("REST CALL STATUS:", "" + response.getStatus());
                         Log.w("REST CALL REASON:", response.getReason());
                     }
@@ -93,7 +90,6 @@ public void success(Gson gsonResponse, Response response) {
                     @Override
                     public void failure(RetrofitError error) {
                         Response response = error.getResponse();
-                        Log.w("REST CALL ERROR:", "****************");
                         Log.w("REST CALL STATUS:", "" + response.getStatus());
                         Log.w("REST CALL REASON:", response.getReason());
                     }
@@ -115,7 +111,6 @@ public void success(Gson gsonResponse, Response response) {
                     @Override
                     public void failure(RetrofitError error) {
                         Response response = error.getResponse();
-                        Log.w("REST CALL ERROR:", "****************");
                         Log.w("REST CALL STATUS:", "" + response.getStatus());
                         Log.w("REST CALL REASON:", response.getReason());
                     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java
index 5c74d0b..8fcd0e7 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java
@@ -3,7 +3,7 @@
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java
index 31c385e..6c37688 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java
@@ -7,7 +7,7 @@
 import android.graphics.Paint;
 import android.graphics.RectF;
 import android.util.DisplayMetrics;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 
 /**
@@ -117,4 +117,4 @@ public void run() {
         public int belowRange;
     }
 
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java
index ea20c91..60f8c9a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java
@@ -5,7 +5,7 @@
 import android.database.Cursor;
 import android.database.sqlite.SQLiteDatabase;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Cache;
 import com.activeandroid.query.Select;
@@ -181,4 +181,4 @@ public Bounds invoke() {
             return this;
         }
     }
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java
index 1caefb8..1ae2618 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java
@@ -6,7 +6,7 @@
 import android.preference.PreferenceManager;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java
index e101a2a..dd63e2e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java
@@ -3,7 +3,7 @@
 import android.os.Bundle;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java
index 0da5a0b..cdcd1a2 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java
@@ -11,7 +11,7 @@
 import android.graphics.Path;
 import android.preference.PreferenceManager;
 import android.util.DisplayMetrics;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.View;
 
 import com.eveningoutpost.dexdrip.R;
@@ -313,4 +313,4 @@ public void run() {
         public double[] q90;
     }
 
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java
index 202a4b0..a6cf54e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java
@@ -10,7 +10,7 @@
 import android.support.v4.app.FragmentManager;
 import android.support.v4.app.FragmentStatePagerAdapter;
 import android.support.v4.view.ViewPager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.view.Gravity;
 import android.view.View;
 import android.view.ViewGroup;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
index 597af2e..10d6de0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
@@ -1,20 +1,16 @@
 package com.eveningoutpost.dexdrip.utils;
 
-import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.support.v4.widget.DrawerLayout;
-import android.util.Log;
 
 import com.eveningoutpost.dexdrip.Home;
 import com.eveningoutpost.dexdrip.NavDrawerBuilder;
 import com.eveningoutpost.dexdrip.NavigationDrawerFragment;
 import com.eveningoutpost.dexdrip.R;
 
-import java.util.Iterator;
 import java.util.List;
-import java.util.Set;
 
 /**
  * Created by stephenblack on 6/8/15.
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
index 6fc3611..8939df2 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
@@ -4,7 +4,7 @@
 import android.net.Uri;
 import android.os.Environment;
 import android.text.format.DateFormat;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.widget.Toast;
 
 import com.activeandroid.Configuration;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 7b8417c..a491136 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -14,17 +14,15 @@
 import android.preference.PreferenceActivity;
 import android.preference.PreferenceCategory;
 import android.preference.PreferenceFragment;
-import android.preference.PreferenceGroup;
 import android.preference.PreferenceManager;
 import android.preference.PreferenceScreen;
 import android.preference.RingtonePreference;
 import android.text.InputFilter;
 import android.text.TextUtils;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.R;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
-import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.PebbleSync;
 import com.google.zxing.integration.android.IntentIntegrator;
 import com.google.zxing.integration.android.IntentResult;
@@ -268,6 +266,7 @@ public void onCreate(Bundle savedInstanceState) {
             final Preference predictiveBG = findPreference("predictive_bg");
             final Preference interpretRaw = findPreference("interpret_raw");
             final Preference shareKey = findPreference("share_key");
+            final Preference scanShare = findPreference("scan_share2_barcode");
             final EditTextPreference transmitterId = (EditTextPreference) findPreference("dex_txid");
             final Preference pebbleSync = findPreference("broadcast_to_pebble");
             final PreferenceCategory collectionCategory = (PreferenceCategory) findPreference("collection_category");
@@ -278,6 +277,7 @@ public void onCreate(Bundle savedInstanceState) {
             Log.d(TAG, prefs.getString("dex_collection_method", "BluetoothWixel"));
             if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomShare") != 0) {
                 collectionCategory.removePreference(shareKey);
+                collectionCategory.removePreference(scanShare);
                 otherCategory.removePreference(interpretRaw);
                 alertsCategory.addPreference(calibrationAlertsScreen);
             } else {
@@ -319,11 +319,13 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 public boolean onPreferenceChange(Preference preference, Object newValue) {
                     if(((String) newValue).compareTo("DexcomShare") != 0) { // NOT USING SHARE
                         collectionCategory.removePreference(shareKey);
+                        collectionCategory.removePreference(scanShare);
                         otherCategory.removePreference(interpretRaw);
                         otherCategory.addPreference(predictiveBG);
                         alertsCategory.addPreference(calibrationAlertsScreen);
                     } else {
                         collectionCategory.addPreference(shareKey);
+                        collectionCategory.addPreference(scanShare);
                         otherCategory.addPreference(interpretRaw);
                         otherCategory.removePreference(predictiveBG);
                         alertsCategory.removePreference(calibrationAlertsScreen);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/widgetUpdateService.java b/app/src/main/java/com/eveningoutpost/dexdrip/widgetUpdateService.java
index 43d0296..c1eac41 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/widgetUpdateService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/widgetUpdateService.java
@@ -12,7 +12,7 @@
 import android.content.IntentFilter;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.ReadDataShare;
 import com.eveningoutpost.dexdrip.Models.BgReading;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
index b7483d3..0f8f574 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
@@ -7,7 +7,7 @@
 import android.content.Intent;
 import android.graphics.Color;
 import android.graphics.Paint;
-import android.util.Log;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.widget.RemoteViews;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java b/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
index ca17fb8..dde447d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
@@ -4,43 +4,16 @@
 
 import com.crashlytics.android.Crashlytics;
 import io.fabric.sdk.android.Fabric;
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.sender.HttpSender;
 
 /**
  * Created by stephenblack on 3/21/15.
  */
-@ReportsCrashes(
-        formUri = "https://yoursolace.cloudant.com/acra-xdrip/_design/acra-storage/_update/report",
-        reportType = HttpSender.Type.JSON,
-        httpMethod = HttpSender.Method.POST,
-        formUriBasicAuthLogin = "nateriverldstiondrephery",
-        formUriBasicAuthPassword = "GEK5Nv7NtMkloAkufNvFgast",
-        formKey = "", // This is required for backward compatibility but not used
-        customReportContent = {
-                ReportField.APP_VERSION_CODE,
-                ReportField.APP_VERSION_NAME,
-                ReportField.ANDROID_VERSION,
-                ReportField.PACKAGE_NAME,
-                ReportField.REPORT_ID,
-                ReportField.BUILD,
-                ReportField.STACK_TRACE
-        },
-        mode = ReportingInteractionMode.TOAST,
-        logcatArguments = {"-t", "500", "-v", "time"},
-        resToastText = R.string.toast_crash
-)
 
 public class xdrip extends Application {
 
     @Override
     public void onCreate() {
         super.onCreate();
-        //Fabric.with(this, new Crashlytics());
-        // The following line triggers the initialization of ACRA
-        //ACRA.init(this);
+        Fabric.with(this, new Crashlytics());
     }
 }
diff --git a/app/src/main/res/layout/activity_errors.xml b/app/src/main/res/layout/activity_errors.xml
new file mode 100644
index 0000000..f9d0987
--- /dev/null
+++ b/app/src/main/res/layout/activity_errors.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.v4.widget.DrawerLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent" android:layout_height="match_parent">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content">
+
+            <CheckBox
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Low"
+                android:id="@+id/lowSeverityCheckBox"
+                android:checked="false"/>
+            <CheckBox
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="Mid"
+                android:id="@+id/midSeverityCheckbox"
+                android:checked="true"/>
+            <CheckBox
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="High"
+                android:id="@+id/highSeverityCheckbox"
+                android:checked="true"/>
+        </LinearLayout>
+
+        <ListView
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:id="@+id/errorList"/>
+    </LinearLayout>
+    <fragment
+        android:id="@+id/navigation_drawer"
+        android:layout_width="@dimen/navigation_drawer_width" android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:name="com.eveningoutpost.dexdrip.NavigationDrawerFragment"
+        tools:layout="@layout/fragment_navigation_drawer" />
+
+</android.support.v4.widget.DrawerLayout>
diff --git a/app/src/main/res/layout/activity_follower_management.xml b/app/src/main/res/layout/activity_follower_management.xml
new file mode 100644
index 0000000..dd6b51b
--- /dev/null
+++ b/app/src/main/res/layout/activity_follower_management.xml
@@ -0,0 +1,33 @@
+<android.support.v4.widget.DrawerLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:id="@+id/drawer_layout"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    tools:context="com.eveningoutpost.dexdrip.Home">
+    <FrameLayout
+        android:id="@+id/container" android:layout_width="match_parent"
+        android:layout_height="match_parent"/>
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            <ListView
+                android:layout_width="fill_parent"
+                android:layout_height="0dp"
+                android:layout_weight=".8"
+                android:id="@+id/followerList"/>
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="0dp"
+                android:layout_weight=".2"
+                android:text="Invite a Follower"
+                android:id="@+id/inviteFollower"
+                android:layout_gravity="center"/>
+        </LinearLayout>
+    <fragment
+        android:id="@+id/navigation_drawer"
+        android:layout_width="@dimen/navigation_drawer_width" android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:name="com.eveningoutpost.dexdrip.NavigationDrawerFragment"
+        tools:layout="@layout/fragment_navigation_drawer" />
+</android.support.v4.widget.DrawerLayout>
+
diff --git a/app/src/main/res/layout/activity_home.xml b/app/src/main/res/layout/activity_home.xml
index 0d549e1..e45f027 100644
--- a/app/src/main/res/layout/activity_home.xml
+++ b/app/src/main/res/layout/activity_home.xml
@@ -13,51 +13,51 @@
         <LinearLayout
             android:orientation="vertical"
             android:layout_width="fill_parent"
-            android:layout_height="fill_parent">
+            android:layout_height="fill_parent"
+            android:background="#212121">
 
-            <RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
-                xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+            <RelativeLayout
+                android:layout_width="match_parent"
                 android:layout_height="0dp"
                 android:paddingLeft="0dp"
                 android:paddingRight="0dp"
                 android:layout_weight="0.80"
                 android:paddingTop="0dp"
-                android:paddingBottom="0dp" tools:context=".Home"
                 android:layout_marginTop="0dp">
 
+                <lecho.lib.hellocharts.view.LineChartView
+                    android:id="@+id/chart"
+                    android:layout_width="match_parent"
+                    android:layout_alignParentStart="false"
+                    android:layout_alignParentEnd="true"
+                    android:layout_height="match_parent"
+                    android:layout_marginTop="55dp"/>
+
                 <TextView
                     android:layout_width="900dp"
                     android:layout_height="wrap_content"
                     android:textAppearance="?android:attr/textAppearanceSmall"
                     android:textColor="#C30909"
                     android:id="@+id/notices"
-                    android:background="#212121"
                     android:paddingEnd="10dp"
                     android:paddingStart="10dp"
                     android:gravity="left|top"
                     android:layout_alignParentLeft="true"
                     android:layout_alignParentTop="true"
-                    android:text="Alerts and messages" />
+                    android:text="Alerts and messages"
+                    android:background="@android:color/transparent"/>
 
-                <lecho.lib.hellocharts.view.LineChartView
-                    android:id="@+id/chart"
-                    android:layout_width="match_parent"
-                    android:layout_alignParentStart="false"
-                    android:layout_alignParentEnd="true"
-                    android:layout_height="match_parent"
-                    android:layout_marginTop="55dp">
-                </lecho.lib.hellocharts.view.LineChartView>
 
                 <TextView
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
-                    android:background="#212121"
                     android:id="@+id/currentBgValueRealTime"
                     android:gravity="right"
                     android:layout_alignParentEnd="true"
                     android:paddingEnd="20dp"
                     android:textSize="50dp"
-                    android:paddingTop="0dp" />
+                    android:paddingTop="0dp"
+                    android:background="@android:color/transparent"/>
 
                 <TextView
                     android:layout_width="wrap_content"
@@ -69,7 +69,8 @@
                     android:textSize="12sp"
                     android:inputType="none"
                     android:layout_below="@+id/notices"
-                    android:layout_alignParentStart="true" />
+                    android:layout_alignParentStart="true"
+                    android:background="@android:color/transparent"/>
             </RelativeLayout>
 
             <lecho.lib.hellocharts.view.PreviewLineChartView
diff --git a/app/src/main/res/layout/dialog_invite_follower.xml b/app/src/main/res/layout/dialog_invite_follower.xml
new file mode 100644
index 0000000..940bc4b
--- /dev/null
+++ b/app/src/main/res/layout/dialog_invite_follower.xml
@@ -0,0 +1,71 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="15dp">
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Followers Name:"
+            android:labelFor="@+id/followerNameField"/>
+        <EditText
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="wrap_content"
+            android:id="@+id/followerNameField"/>
+    </LinearLayout>
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Your display name:"
+            android:labelFor="@+id/followerDisplayNameField"/>
+        <EditText
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="wrap_content"
+            android:id="@+id/followerDisplayNameField"/>
+    </LinearLayout>
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Followers Email:"
+            android:labelFor="@+id/followerEmailField"/>
+        <EditText
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="wrap_content"
+            android:id="@+id/followerEmailField"/>
+    </LinearLayout>
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <Button
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="wrap_content"
+            android:text="Cancel"
+            android:id="@+id/cancelButton"/>
+        <Button
+            android:layout_width="0dp"
+            android:layout_weight="1"
+            android:layout_height="wrap_content"
+            android:text="Send Invite"
+            android:id="@+id/saveButton"/>
+    </LinearLayout>
+</LinearLayout>
diff --git a/app/src/main/res/layout/item_follower.xml b/app/src/main/res/layout/item_follower.xml
new file mode 100644
index 0000000..4e4d16c
--- /dev/null
+++ b/app/src/main/res/layout/item_follower.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="horizontal"
+    android:layout_width="fill_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/followerListRow"
+    android:gravity="center_horizontal"
+    android:paddingLeft="20dp"
+    android:paddingRight="20dp">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:id="@+id/follwerName"
+        android:gravity="center_vertical"
+        android:text="follower"
+        android:layout_gravity="center_vertical"
+        android:textStyle="bold"
+        android:textSize="18sp"
+        />
+    <Space
+        android:layout_width="0dp"
+        android:layout_weight="1"
+        android:layout_height="wrap_content" />
+    <Button
+       android:layout_width="wrap_content"
+       android:layout_height="wrap_content"
+       android:text="Delete"
+       android:id="@+id/deleteFollower"
+       android:gravity="center_vertical|center_horizontal"
+       android:layout_gravity="center"
+        />
+
+</LinearLayout>
diff --git a/app/src/main/res/layout/item_user_error.xml b/app/src/main/res/layout/item_user_error.xml
new file mode 100644
index 0000000..7f0c2fc
--- /dev/null
+++ b/app/src/main/res/layout/item_user_error.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:id="@+id/errorRow">
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/errorShort"
+            android:textSize="14dp"/>
+        <TextView
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:layout_gravity="right"
+            android:gravity="right"
+            android:id="@+id/errorTimestamp"
+            android:textSize="12dp"/>
+    </LinearLayout>
+
+    <TextView
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content"
+        android:id="@+id/errorLong"
+        android:textSize="10dp"/>
+</LinearLayout>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index ce70cb2..146e0bc 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -61,7 +61,7 @@
     <string name="auto_configure_title">Auto configure</string>
     <string name="prefs_auto_config_summary">Auto configure using a barcode. See http://nightscout.github.io/pages/configure/ for more details</string>
     <string name="scan_share2_barcode">Scan Share Barcode</string>
-    <string name="pref_share2_scan_barcode_summary">Scan the barcode on the share receiver</string>
+    <string name="pref_share2_scan_barcode_summary">Or scan the barcode on the share receiver</string>
 
     <!-- MongoDB Settings -->
     <string name="pref_title_mongodb">MongoDB</string>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 4a4de5b..99a5aed 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -30,5 +30,18 @@
             android:title="Store logs for troubleshooting"
             android:summary="Only enable if you are having trouble with the app."
             android:defaultValue="false" />
+        <CheckBoxPreference
+            android:key="show_data_tables"
+            android:title="Show Datatables"
+            android:summary="Show Calibration and BG datatables in the app drawer."
+            android:defaultValue="false" />
+        <Preference
+            android:title="View Recent Errors/Warnings"
+            android:key="recent_errors">
+            <intent
+                android:action="android.intent.action.MAIN"
+                android:targetPackage="com.eveningoutpost.dexdrip"
+                android:targetClass="com.eveningoutpost.dexdrip.ErrorsActivity"/>
+        </Preference>
     </PreferenceCategory>
 </PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index b591bd5..967dfff 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -13,7 +13,7 @@
             android:entryValues="@array/DexCollectionMethodValues"
             android:defaultValue="BluetoothWixel"/>
         <EditTextPreference
-            android:title="10 Character Dexcom Receiver Serial Number"
+            android:title="Enter 10 Character Dexcom Receiver Serial Number"
             android:key="share_key"
             android:shouldDisableView="true"
             android:defaultValue="SM00000000"/>
diff --git a/app/src/main/res/xml/pref_data_sync.xml b/app/src/main/res/xml/pref_data_sync.xml
index a1d0c58..5065bd4 100644
--- a/app/src/main/res/xml/pref_data_sync.xml
+++ b/app/src/main/res/xml/pref_data_sync.xml
@@ -99,6 +99,15 @@
                 android:key="share_key"
                 android:shouldDisableView="true"
                 android:defaultValue="SM00000000"/>
+            <Preference
+                android:dependency="share_upload"
+                android:title="Manage Followers"
+                android:summary="Manage your existing followers and invite new ones.">
+                <intent
+                    android:action="android.intent.action.MAIN"
+                    android:targetPackage="com.eveningoutpost.dexdrip"
+                    android:targetClass="com.eveningoutpost.dexdrip.FollowerManagementActivity"/>
+            </Preference>
         </PreferenceScreen>
 
     </PreferenceCategory>
diff --git a/build.gradle b/build.gradle
index 04e3b67..9783c15 100644
--- a/build.gradle
+++ b/build.gradle
@@ -9,8 +9,6 @@ buildscript {
         classpath 'com.android.tools.build:gradle:1.1.3'
         apply plugin: 'java'
         apply plugin: 'maven'
-//        compile 'com.mcxiaoke.volley:library:1.0.+'
-
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }

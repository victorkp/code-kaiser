diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java
index 23c0021..6d92c04 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/FollowerManagementActivity.java
@@ -80,6 +80,7 @@ public void onResponse(Response<List<ExistingFollower>> response, Retrofit retro
 
             @Override
             public void onFailure(Throwable t) {
+                Toast.makeText(FollowerManagementActivity.this, "Failed to retrieve follower list: " + t.getMessage(), Toast.LENGTH_LONG).show();
                 // If it fails, don't show followers.
             }
         };
@@ -124,7 +125,7 @@ public void onResponse(Response<String> response, Retrofit retrofit) {
 
                                                     @Override
                                                     public void onFailure(Throwable t) {
-                                                        Toast.makeText(getApplicationContext(), "Failed to invite follower", Toast.LENGTH_LONG).show();
+                                                        Toast.makeText(getApplicationContext(), "Failed to invite follower: " + t.getMessage(), Toast.LENGTH_LONG).show();
                                                     }
                                                 });
                                             } else {
@@ -134,7 +135,7 @@ public void onFailure(Throwable t) {
 
                                         @Override
                                         public void onFailure(Throwable t) {
-                                            Toast.makeText(getApplicationContext(), "Failed to invite follower", Toast.LENGTH_LONG).show();
+                                            Toast.makeText(getApplicationContext(), "Failed to invite follower: " +t.getMessage(), Toast.LENGTH_LONG).show();
                                         }
                                     }
                             );
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java
index 2178cd5..1ca1d03 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/BgUploader.java
@@ -2,6 +2,7 @@
 
 import android.content.Context;
 
+import com.eveningoutpost.dexdrip.Models.UserError;
 import com.eveningoutpost.dexdrip.ShareModels.Models.ShareUploadPayload;
 import com.squareup.okhttp.ResponseBody;
 
@@ -31,7 +32,7 @@ public void onResponse(Response<ResponseBody> response, Retrofit retrofit) {
 
             @Override
             public void onFailure(Throwable t) {
-                // TODO add error handling in a refactoring pass
+                UserError.Log.d(TAG, "Error uploading Share records: "+ t.getMessage());
             }
         });
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
index 700386c..ae53541 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ShareModels/ShareRest.java
@@ -40,6 +40,16 @@
  * Created by stephenblack on 12/26/14.
  */
 public class ShareRest {
+    public class ShareException extends RuntimeException {
+        ShareException(String message) {
+            super(message);
+        }
+
+        ShareException(String message, Exception e) {
+            super(message, e);
+        }
+    }
+
     public static String TAG = ShareRest.class.getSimpleName();
 
     private String sessionId;
@@ -86,9 +96,11 @@ public ShareRest (Context context, OkHttpClient okHttpClient) {
         sharedPreferences.registerOnSharedPreferenceChangeListener(preferenceChangeListener);
         if ("".equals(sessionId)) // migrate previous empty sessionIds to null;
             sessionId = null;
+        if ("".equals(serialNumber))
+            serialNumber = null;
     }
 
-    public OkHttpClient getOkHttpClient() {
+    private OkHttpClient getOkHttpClient() {
         try {
             final TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
                 @Override
@@ -157,30 +169,40 @@ public boolean verify(String hostname, SSLSession session) {
         }
     }
 
-    public String getSessionId() {
-        AsyncTask<String, Void, String> task = new AsyncTask<String, Void, String>() {
+    private String getSessionId() throws ShareException {
+        AsyncTask<String, Void, Object> task = new AsyncTask<String, Void, Object>() {
 
             @Override
-            protected String doInBackground(String... params) {
+            protected Object doInBackground(String... params) {
                 try {
                     Boolean isActive = null;
+                    Log.d(TAG, "validating session ID");
                     if (params[0] != null)
                         isActive = dexcomShareApi.checkSessionActive(params[0]).execute().body();
                     if (isActive == null || !isActive) {
+                        Log.d(TAG, "uppdating auth params");
                         return updateAuthenticationParams();
                     } else
                         return params[0];
                 } catch (IOException e) {
-                    return null;
+                    return new ShareException("Error retrieving Share session id. " +e.getMessage(), e);
+                } catch (ShareException e) {
+                    return e;
                 }
             }
 
-            private String updateAuthenticationParams() throws IOException {
+            private String updateAuthenticationParams() throws IOException, ShareException {
                 sessionId = dexcomShareApi.getSessionId(new ShareAuthenticationBody(password, username).toMap()).execute().body();
+                if (serialNumber == null || serialNumber.equals("")) {
+                    throw new ShareException("No receiver serial number specified.");
+                }
+                if (sessionId == null) {
+                    throw new ShareException("Unable to retrieve Share session ID.  Check username and password.");
+                }
                 dexcomShareApi.authenticatePublisherAccount(sessionId, serialNumber, new ShareAuthenticationBody(password, username).toMap()).execute().body();
                 dexcomShareApi.StartRemoteMonitoringSession(sessionId, serialNumber).execute();
                 String assignment = dexcomShareApi.checkMonitorAssignment(sessionId, serialNumber).execute().body();
-                if (!assignment.equals("AssignedToYou")) {
+                if (!"AssignedToYou".equals(assignment)) {
                     dexcomShareApi.updateMonitorAssignment(sessionId, serialNumber).execute();
                 }
                 return sessionId;
@@ -190,63 +212,87 @@ private String updateAuthenticationParams() throws IOException {
 
         if (sessionId == null || sessionId.equals(""))
             try {
-                sessionId = task.execute(sessionId).get();
-            } catch (InterruptedException | ExecutionException e) {
-                e.printStackTrace();
+                Object result = task.execute(sessionId).get();
+                if (result instanceof ShareException) {
+                    throw (ShareException) result;
+                }
+                sessionId = (String) result;
+            } catch (InterruptedException | ExecutionException | ShareException e) {
+                throw new ShareException("Unable to start Share session.  "+e.getMessage(), e);
             }
         return sessionId;
     }
 
     public void getContacts(Callback<List<ExistingFollower>> existingFollowerListener) {
-        dexcomShareApi.getContacts(getSessionId()).enqueue(new AuthenticatingCallback<List<ExistingFollower>>(existingFollowerListener) {
-            @Override
-            public void onRetry() {
-                dexcomShareApi.getContacts(getSessionId()).enqueue(this);
-            }
-        });
+        try {
+            dexcomShareApi.getContacts(getSessionId()).enqueue(new AuthenticatingCallback<List<ExistingFollower>>(existingFollowerListener) {
+                @Override
+                public void onRetry() {
+                    dexcomShareApi.getContacts(getSessionId()).enqueue(this);
+                }
+            });
+        } catch (ShareException e) {
+            existingFollowerListener.onFailure(e);
+        }
     }
 
     public void uploadBGRecords(final ShareUploadPayload bg, Callback<ResponseBody> callback) {
-        dexcomShareApi.uploadBGRecords(getSessionId(), bg).enqueue(new AuthenticatingCallback<ResponseBody>(callback) {
-            @Override
-            public void onRetry() {
+        try {
+            dexcomShareApi.uploadBGRecords(getSessionId(), bg).enqueue(new AuthenticatingCallback<ResponseBody>(callback) {
+                @Override
+                public void onRetry() {
                 dexcomShareApi.uploadBGRecords(getSessionId(), bg).enqueue(this);
             }
         });
+        } catch (ShareException e) {
+            callback.onFailure(e);
+        }
     }
 
     public void createContact(final String followerName, final String followerEmail, Callback<String> callback) {
-        dexcomShareApi.createContact(getSessionId(), followerName, followerEmail).enqueue(new AuthenticatingCallback<String>(callback) {
-            @Override
-            public void onRetry() {
-                dexcomShareApi.createContact(getSessionId(), followerName, followerEmail).enqueue(this);
-            }
-        });
+        try {
+            dexcomShareApi.createContact(getSessionId(), followerName, followerEmail).enqueue(new AuthenticatingCallback<String>(callback) {
+                @Override
+                public void onRetry() {
+                    dexcomShareApi.createContact(getSessionId(), followerName, followerEmail).enqueue(this);
+                }
+            });
+        } catch (ShareException e) {
+            callback.onFailure(e);
+        }
     }
 
     public void createInvitationForContact(final String contactId, final InvitationPayload invitationPayload, Callback<String> callback) {
-        dexcomShareApi.createInvitationForContact(getSessionId(), contactId, invitationPayload).enqueue(new AuthenticatingCallback<String>(callback) {
-            @Override
-            public void onRetry() {
-                dexcomShareApi.createInvitationForContact(getSessionId(), contactId, invitationPayload).enqueue(this);
-            }
-        });
+        try {
+            dexcomShareApi.createInvitationForContact(getSessionId(), contactId, invitationPayload).enqueue(new AuthenticatingCallback<String>(callback) {
+                @Override
+                public void onRetry() {
+                    dexcomShareApi.createInvitationForContact(getSessionId(), contactId, invitationPayload).enqueue(this);
+                }
+            });
+        } catch (ShareException e) {
+            callback.onFailure(e);
+        }
     }
 
     public void deleteContact(final String contactId, Callback<ResponseBody> deleteFollowerListener) {
-        dexcomShareApi.deleteContact(getSessionId(), contactId).enqueue(new AuthenticatingCallback<ResponseBody>(deleteFollowerListener) {
-            @Override
-            public void onRetry() {
-                dexcomShareApi.deleteContact(getSessionId(), contactId).enqueue(this);
-            }
-        });
+        try {
+            dexcomShareApi.deleteContact(getSessionId(), contactId).enqueue(new AuthenticatingCallback<ResponseBody>(deleteFollowerListener) {
+                @Override
+                public void onRetry() {
+                    dexcomShareApi.deleteContact(getSessionId(), contactId).enqueue(this);
+                }
+            });
+        } catch (ShareException e) {
+            deleteFollowerListener.onFailure(e);
+        }
     }
 
-    public abstract class AuthenticatingCallback<T> implements Callback<T> {
+    private abstract class AuthenticatingCallback<T> implements Callback<T> {
 
         private int attempts = 0;
         private Callback<T> delegate;
-        public AuthenticatingCallback (Callback<T> callback) {
+        AuthenticatingCallback(Callback<T> callback) {
             this.delegate = callback;
         }
 
@@ -257,21 +303,25 @@ public void onResponse(retrofit.Response<T> response, Retrofit retrofit) {
             if (response.code() == 500 && attempts == 0) {
                 // retry with new session ID
                 attempts += 1;
-                dexcomShareApi.getSessionId(new ShareAuthenticationBody(password, username).toMap()).enqueue(new Callback<String>() {
-                    @Override
-                    public void onResponse(retrofit.Response<String> response, Retrofit retrofit) {
-                        if (response.isSuccess()) {
-                            sessionId = response.body();
-                            ShareRest.this.sharedPreferences.edit().putString("dexcom_share_session_id", sessionId).apply();
-                            onRetry();
+                try {
+                    dexcomShareApi.getSessionId(new ShareAuthenticationBody(password, username).toMap()).enqueue(new Callback<String>() {
+                        @Override
+                        public void onResponse(retrofit.Response<String> response, Retrofit retrofit) {
+                            if (response.isSuccess()) {
+                                sessionId = response.body();
+                                ShareRest.this.sharedPreferences.edit().putString("dexcom_share_session_id", sessionId).apply();
+                                onRetry();
+                            }
                         }
-                    }
 
-                    @Override
-                    public void onFailure(Throwable t) {
-                        delegate.onFailure(t);
-                    }
-                });
+                        @Override
+                        public void onFailure(Throwable t) {
+                            delegate.onFailure(t);
+                        }
+                    });
+                } catch (ShareException e) {
+                    delegate.onFailure(e);
+                }
             } else {
                 delegate.onResponse(response, retrofit);
             }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index e568220..9d6c75c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -235,6 +235,8 @@ private static void bindPreferenceSummaryToValueAndEnsureNumeric(Preference pref
         @Override
         public void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
+            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
+
             addPreferencesFromResource(R.xml.pref_license);
             addPreferencesFromResource(R.xml.pref_general);
             bindPreferenceSummaryToValueAndEnsureNumeric(findPreference("highValue"));
@@ -274,7 +276,29 @@ public void onCreate(Bundle savedInstanceState) {
             final Preference wifiRecievers = findPreference("wifi_recievers_addresses");
             final Preference predictiveBG = findPreference("predictive_bg");
             final Preference interpretRaw = findPreference("interpret_raw");
+
             final Preference shareKey = findPreference("share_key");
+            shareKey.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener() {
+                @Override
+                public boolean onPreferenceClick(Preference preference) {
+                    prefs.edit().remove("dexcom_share_session_id").apply();
+                    return true;
+                }
+            });
+
+            Preference.OnPreferenceChangeListener shareTokenResettingListener = new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue) {
+                    prefs.edit().remove("dexcom_share_session_id").apply();
+                    return true;
+                }
+            };
+
+            final Preference sharePassword = findPreference("dexcom_account_password");
+            sharePassword.setOnPreferenceChangeListener(shareTokenResettingListener);
+            final Preference shareAccountName = findPreference("dexcom_account_name");
+            shareAccountName.setOnPreferenceChangeListener(shareTokenResettingListener);
+
             final Preference scanShare = findPreference("scan_share2_barcode");
             final EditTextPreference transmitterId = (EditTextPreference) findPreference("dex_txid");
             final Preference pebbleSync = findPreference("broadcast_to_pebble");
@@ -282,7 +306,6 @@ public void onCreate(Bundle savedInstanceState) {
             final PreferenceCategory otherCategory = (PreferenceCategory) findPreference("other_category");
             final PreferenceScreen calibrationAlertsScreen = (PreferenceScreen) findPreference("calibration_alerts_screen");
             final PreferenceCategory alertsCategory = (PreferenceCategory) findPreference("alerts_category");
-            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
             final Preference disableAlertsStaleDataMinutes = findPreference("disable_alerts_stale_data_minutes");
             disableAlertsStaleDataMinutes.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override

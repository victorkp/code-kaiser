diff --git a/app/build.gradle b/app/build.gradle
index bd9f7db..e8ac8e8 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -16,13 +16,13 @@ repositories {
 
 
 android {
-    compileSdkVersion 21
-    buildToolsVersion "20.0.0"
+    compileSdkVersion 22
+    buildToolsVersion "22.0.1"
 
     defaultConfig {
         applicationId "com.eveningoutpost.dexdrip"
         minSdkVersion 19
-        targetSdkVersion 21
+        targetSdkVersion 22
         versionCode 1
         versionName "1.0"
     }
@@ -33,6 +33,7 @@ android {
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     testCompile 'com.squareup.okhttp:mockwebserver:2.2.0'
+    compile 'com.android.support:appcompat-v7:22.1.1'
     compile 'com.squareup.okhttp:okhttp:2.2.0'
     compile 'com.google.code.gson:gson:2.3'
     compile 'org.mongodb:mongo-java-driver:2.10.1'
diff --git a/app/libs/android-support-v4.jar b/app/libs/android-support-v4.jar
deleted file mode 100644
index ab68dfa..0000000
Binary files a/app/libs/android-support-v4.jar and /dev/null differ
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
index 2f9ae59..fdcd278 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
@@ -174,7 +174,7 @@ public void setRetryTimer() {
             BgReading bgReading = BgReading.last();
             long retry_in;
             if (bgReading != null) {
-                retry_in = Math.min(Math.max((1000 * 30), (1000 * 60 * 5) - (new Date().getTime() - bgReading.timestamp) - (1000 * 15)), (1000 * 60 * 5));
+                retry_in = Math.min(Math.max((1000 * 30), (1000 * 60 * 5) - (new Date().getTime() - bgReading.timestamp) + (1000 * 15)), (1000 * 60 * 5));
             } else {
                 retry_in = (1000 * 20);
             }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 0259bdc..69713c7 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -31,9 +31,9 @@
  * Created by stephenblack on 11/15/14.
  */
 public class BgGraphBuilder {
-    public int fuzzer = (1000 * 30 * 5);
-    public double  end_time = (new Date().getTime() + (60000 * 10)) / fuzzer;
-    public double  start_time = end_time - ((60000 * 60 * 24)) / fuzzer;
+    public static final int FUZZER = (1000 * 30 * 5);
+    public double  end_time = (new Date().getTime() + (60000 * 10)) / FUZZER;
+    public double  start_time = end_time - ((60000 * 60 * 24)) / FUZZER;
     public Context context;
     public SharedPreferences prefs;
     public double highMark;
@@ -48,7 +48,7 @@
 
     private double endHour;
     private final int numValues =(60/5)*24;
-    private final List<BgReading> bgReadings = BgReading.latestForGraph( numValues, (start_time * fuzzer));
+    private final List<BgReading> bgReadings = BgReading.latestForGraph( numValues, (start_time * FUZZER));
     private List<PointValue> inRangeValues = new ArrayList<PointValue>();
     private List<PointValue> highValues = new ArrayList<PointValue>();
     private List<PointValue> lowValues = new ArrayList<PointValue>();
@@ -139,17 +139,17 @@ public Line rawInterpretedLine() {
     private void addBgReadingValues() {
         for (BgReading bgReading : bgReadings) {
             if (bgReading.raw_calculated != 0 && prefs.getBoolean("interpret_raw", false)) {
-                rawInterpretedValues.add(new PointValue((float) (bgReading.timestamp/fuzzer), (float) unitized(bgReading.raw_calculated)));
+                rawInterpretedValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.raw_calculated)));
             } else if (bgReading.calculated_value >= 400) {
-                highValues.add(new PointValue((float) (bgReading.timestamp/fuzzer), (float) unitized(400)));
+                highValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(400)));
             } else if (unitized(bgReading.calculated_value) >= highMark) {
-                highValues.add(new PointValue((float) (bgReading.timestamp/fuzzer), (float) unitized(bgReading.calculated_value)));
+                highValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (unitized(bgReading.calculated_value) >= lowMark) {
-                inRangeValues.add(new PointValue((float) (bgReading.timestamp/fuzzer), (float) unitized(bgReading.calculated_value)));
+                inRangeValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (bgReading.calculated_value >= 40) {
-                lowValues.add(new PointValue((float)(bgReading.timestamp/fuzzer), (float) unitized(bgReading.calculated_value)));
+                lowValues.add(new PointValue((float)(bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (bgReading.calculated_value > 13) {
-                lowValues.add(new PointValue((float)(bgReading.timestamp/fuzzer), (float) unitized(40)));
+                lowValues.add(new PointValue((float)(bgReading.timestamp/ FUZZER), (float) unitized(40)));
             }
         }
     }
@@ -239,7 +239,7 @@ public Axis xAxis() {
         }
         for(int l=0; l<=24; l++) {
             double timestamp = (endHour - (60000 * 60 * l));
-            xAxisValues.add(new AxisValue((long)(timestamp/fuzzer), (timeFormat.format(timestamp)).toCharArray()));
+            xAxisValues.add(new AxisValue((long)(timestamp/ FUZZER), (timeFormat.format(timestamp)).toCharArray()));
         }
         xAxis.setValues(xAxisValues);
         xAxis.setHasLines(true);
@@ -261,7 +261,7 @@ public Axis previewXAxis(){
         timeFormat.setTimeZone(TimeZone.getDefault());
         for(int l=0; l<=24; l+=hoursPreviewStep) {
             double timestamp = (endHour - (60000 * 60 * l));
-            previewXaxisValues.add(new AxisValue((long)(timestamp/fuzzer), (timeFormat.format(timestamp)).toCharArray()));
+            previewXaxisValues.add(new AxisValue((long)(timestamp/ FUZZER), (timeFormat.format(timestamp)).toCharArray()));
         }
         Axis previewXaxis = new Axis();
         previewXaxis.setValues(previewXaxisValues);
@@ -273,8 +273,8 @@ public Axis previewXAxis(){
     /////////VIEWPORT RELATED//////////////
     public Viewport advanceViewport(Chart chart, Chart previewChart) {
         viewport = new Viewport(previewChart.getMaximumViewport());
-        viewport.inset((float)((86400000 / 2.5)/fuzzer), 0);
-        double distance_to_move = ((new Date().getTime())/fuzzer) - viewport.left - (((viewport.right - viewport.left) /2));
+        viewport.inset((float)((86400000 / 2.5)/ FUZZER), 0);
+        double distance_to_move = ((new Date().getTime())/ FUZZER) - viewport.left - (((viewport.right - viewport.left) /2));
         viewport.offset((float) distance_to_move, 0);
         return viewport;
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
new file mode 100644
index 0000000..adb1bdd
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
@@ -0,0 +1,194 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import android.bluetooth.BluetoothGattService;
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Bitmap;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.View;
+import lecho.lib.hellocharts.model.Line;
+import lecho.lib.hellocharts.model.LineChartData;
+import lecho.lib.hellocharts.model.Viewport;
+import lecho.lib.hellocharts.view.LineChartView;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * Created by matthiasgranberry on 5/4/15.
+ */
+public class BgSparklineBuilder {
+    private Context mContext;
+
+    private static final String TAG = "BgSparklineBuilder";
+    private static final int NOTIFICATION_WIDTH_DP = 460; // 476 width minus 8 padding on each side
+    private static final int NOTIFICATION_HEIGHT_DP = 256;
+
+    private int width;
+    private int height;
+    private BgGraphBuilder bgGraphBuilder;
+    private LineChartView chart;
+    private long end = new Date().getTime() / BgGraphBuilder.FUZZER;
+    private long start = end - (60000*180 / BgGraphBuilder.FUZZER); // 3h
+    private boolean showLowLine = false;
+    private boolean showHighLine = false;
+    private boolean showAxes = false;
+    private boolean useSmallDots = false;
+
+    public BgSparklineBuilder setStart(long start) {
+        this.start = start / BgGraphBuilder.FUZZER;
+        return this;
+    }
+
+    public BgSparklineBuilder setEnd(long end) {
+        this.end = end / BgGraphBuilder.FUZZER;
+        return this;
+    }
+
+    public BgSparklineBuilder showHighLine(boolean show) {
+        this.showHighLine = show;
+        return this;
+    }
+
+    public BgSparklineBuilder showHighLine() {
+        return showHighLine(true);
+    }
+
+    public BgSparklineBuilder showLowLine(boolean show) {
+        this.showLowLine = show;
+        return this;
+    }
+
+    public BgSparklineBuilder showLowLine() {
+        return showLowLine(true);
+    }
+
+    public BgSparklineBuilder showAxes(boolean show) {
+        this.showAxes = show;
+        return this;
+    }
+
+    public BgSparklineBuilder showAxes() {
+        return showAxes(true);
+    }
+
+    public BgSparklineBuilder setWidth(float width) {
+        this.width = convertDpToPixel(width);
+        return this;
+    }
+
+    public BgSparklineBuilder setHeight(float height) {
+        this.height = convertDpToPixel(height);
+        return this;
+    }
+
+    public BgSparklineBuilder setWidthPx(int width) {
+        this.width = width;
+        return this;
+    }
+
+    public BgSparklineBuilder setHeightPx(int height) {
+        this.height = height;
+        return this;
+    }
+
+    public BgSparklineBuilder setSmallDots(boolean useSmallDots) {
+        this.useSmallDots = useSmallDots;
+        return this;
+    }
+
+    public BgSparklineBuilder setSmallDots() {
+        return this.setSmallDots(true);
+    }
+
+    public BgSparklineBuilder setBgGraphBuilder(BgGraphBuilder bgGraphBuilder) {
+        this.bgGraphBuilder = bgGraphBuilder;
+        return this;
+    }
+
+    BgSparklineBuilder(Context context) {
+        mContext = context;
+        chart = new LineChartView(mContext);
+        width = convertDpToPixel(NOTIFICATION_WIDTH_DP);
+        height = convertDpToPixel(NOTIFICATION_HEIGHT_DP);
+    }
+
+    /**
+     * Draw the view into a bitmap.
+     */
+    private Bitmap getViewBitmap(View v) {
+        v.clearFocus();
+        v.setPressed(false);
+
+        boolean willNotCache = v.willNotCacheDrawing();
+        v.setWillNotCacheDrawing(false);
+
+        // Reset the drawing cache background color to fully transparent
+        // for the duration of this operation
+        int color = v.getDrawingCacheBackgroundColor();
+        v.setDrawingCacheBackgroundColor(0);
+
+        if (color != 0) {
+            v.destroyDrawingCache();
+        }
+        v.buildDrawingCache();
+        Bitmap cacheBitmap = v.getDrawingCache();
+        if (cacheBitmap == null) {
+            Log.e(TAG, "failed getViewBitmap(" + v + ")", new RuntimeException());
+            return null;
+        }
+
+        Bitmap bitmap = Bitmap.createBitmap(cacheBitmap);
+
+        // Restore the view
+        v.destroyDrawingCache();
+        v.setWillNotCacheDrawing(willNotCache);
+        v.setDrawingCacheBackgroundColor(color);
+
+        return bitmap;
+    }
+
+    private int convertDpToPixel(float dp){
+        Resources resources = mContext.getResources();
+        DisplayMetrics metrics = resources.getDisplayMetrics();
+        int px = (int) (dp * (metrics.densityDpi / 160f));
+        return px;
+    }
+
+    Bitmap build() {
+        List<Line> lines = new ArrayList<>();
+        bgGraphBuilder.defaultLines();
+        lines.add(bgGraphBuilder.inRangeValuesLine());
+        lines.add(bgGraphBuilder.lowValuesLine());
+        lines.add(bgGraphBuilder.highValuesLine());
+        if (showLowLine)
+            lines.add(bgGraphBuilder.lowLine());
+        if (showHighLine)
+            lines.add(bgGraphBuilder.highLine());
+        if (useSmallDots) {
+            for(Line line: lines)
+                line.setPointRadius(1);
+        }
+        LineChartData lineData = new LineChartData(lines);
+        if (showAxes) {
+            lineData.setAxisYLeft(bgGraphBuilder.yAxis());
+            lineData.setAxisXBottom(bgGraphBuilder.xAxis());
+        }
+        //lines.add(bgGraphBuilder.rawInterpretedLine());
+        chart.setLineChartData(lineData);
+        Viewport viewport = chart.getMaximumViewport();
+        viewport.left = start;
+        viewport.right = end;
+        chart.setViewportCalculationEnabled(false);
+        chart.setInteractive(false);
+        chart.setCurrentViewport(viewport, false);
+        chart.setPadding(0, 0, 0, 0);
+        chart.setLeft(0);
+        chart.setTop(0);
+        chart.setRight(width);
+        chart.setBottom(height);
+        return getViewBitmap(chart);
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
index 2602142..e5de9fe 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
@@ -1,20 +1,13 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
-import android.app.Notification;
-import android.app.PendingIntent;
 import android.app.Service;
-import android.app.TaskStackBuilder;
 import android.content.Context;
-import android.content.Intent;
 import android.content.SharedPreferences;
+import android.os.Handler;
+import android.os.Looper;
 import android.preference.PreferenceManager;
-import android.support.v4.app.NotificationCompat;
 import android.util.Log;
 
-import com.eveningoutpost.dexdrip.Home;
-import com.eveningoutpost.dexdrip.R;
-import com.eveningoutpost.dexdrip.Services.DexShareCollectionService;
-
 /**
  * Created by stephenblack on 12/25/14.
  */
@@ -22,44 +15,27 @@
     private Service mService;
     private Context mContext;
     private boolean run_service_in_foreground = false;
-    private int FOREGROUND_ID = 8811;
+    private Handler mHandler;
+
 
     public ForegroundServiceStarter(Context context, Service service) {
         mContext = context;
         mService = service;
+        mHandler = new Handler(Looper.getMainLooper());
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
         run_service_in_foreground = prefs.getBoolean("run_service_in_foreground", false);
     }
 
-    private Notification notification() {
-        Intent intent = new Intent(mContext, Home.class);
-        TaskStackBuilder stackBuilder = TaskStackBuilder.create(mContext);
-        stackBuilder.addParentStack(Home.class);
-        stackBuilder.addNextIntent(intent);
-        PendingIntent resultPendingIntent =
-                stackBuilder.getPendingIntent(
-                        0,
-                        PendingIntent.FLAG_UPDATE_CURRENT
-                );
-
-        NotificationCompat.Builder b=new NotificationCompat.Builder(mService);
-        b.setOngoing(true);
-        b.setCategory(Notification.CATEGORY_SERVICE);
-        // Hide this notification "below the fold" on L+
-        b.setPriority(Notification.PRIORITY_MIN);
-        // Don't show this notification on the lock screen on L+
-        b.setVisibility(Notification.VISIBILITY_SECRET);
-        b.setContentTitle("xDrip is Running")
-                .setContentText("xDrip Data collection service is running.")
-                .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on);
-        b.setContentIntent(resultPendingIntent);
-        return(b.build());
-    }
-
     public void start() {
         if (run_service_in_foreground) {
             Log.e("FOREGROUND", "should be moving to foreground");
-            mService.startForeground(FOREGROUND_ID, notification());
+            mHandler.post(new Runnable() {
+                @Override
+                public void run() {
+                    Notifications.setNotificationSettings(mContext);
+                    mService.startForeground(Notifications.ongoingNotificationId, Notifications.createOngoingNotification(new BgGraphBuilder(mContext)));
+                }
+            });
         }
     }
 
@@ -69,4 +45,5 @@ public void stop() {
             mService.stopForeground(true);
         }
     }
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index 0309126..30063bb 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -1,29 +1,31 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import android.annotation.TargetApi;
+import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
+import android.app.TaskStackBuilder;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.graphics.Bitmap;
 import android.media.AudioAttributes;
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.net.Uri;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
-
-import com.eveningoutpost.dexdrip.AddCalibration;
-import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
-import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.*;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.CalibrationRequest;
 import com.eveningoutpost.dexdrip.Models.UserNotification;
-import com.eveningoutpost.dexdrip.R;
-import com.eveningoutpost.dexdrip.Sensor;
 
-import java.text.DecimalFormat;
 import java.util.Date;
 import java.util.List;
 
@@ -33,6 +35,7 @@
 public class Notifications {
     public static final long[] vibratePattern = {0,1000,300,1000,300,1000};
     public static boolean bg_notifications;
+    public static boolean bg_ongoing;
     public static boolean bg_vibrate;
     public static boolean bg_lights;
     public static boolean bg_sound;
@@ -48,6 +51,8 @@
     public static String calibration_notification_sound;
 
     public static Context mContext;
+    private static Handler mHandler = new Handler(Looper.getMainLooper());
+
     public static int currentVolume;
     public static AudioManager manager;
 
@@ -56,6 +61,7 @@
     public static final int doubleCalibrationNotificationId = 003;
     public static final int extraCalibrationNotificationId = 004;
     public static final int exportCompleteNotificationId = 005;
+    public static final int ongoingNotificationId = 8811;
 
     public static void setNotificationSettings(Context context) {
         mContext = context;
@@ -74,6 +80,7 @@ public static void setNotificationSettings(Context context) {
         calibration_sound = prefs.getBoolean("calibration_play_sound", true);
         calibration_snooze = Integer.parseInt(prefs.getString("calibration_snooze", "20"));
         calibration_notification_sound = prefs.getString("calibration_notification_sound", "content://settings/system/notification_sound");
+        bg_ongoing = prefs.getBoolean("run_service_in_foreground", false);
     }
 
     public static void notificationSetter(Context context) {
@@ -85,17 +92,19 @@ public static void notificationSetter(Context context) {
 
         List<BgReading> bgReadings = BgReading.latest(3);
         List<Calibration> calibrations = Calibration.allForSensorInLastFourDays();
-        if(bgReadings.size() < 3) { return; }
-        if(calibrations.size() < 2) { return; }
+        if(bgReadings == null || bgReadings.size() < 3) { return; }
+        if(calibrations == null || calibrations.size() < 2) { return; }
         BgReading bgReading = bgReadings.get(0);
-
+        if (bg_ongoing && (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN)) {
+            bgOngoingNotification(bgGraphBuilder);
+        }
         if (bg_notifications && sensor != null) {
             if (bgGraphBuilder.unitized(bgReading.calculated_value) >= high || bgGraphBuilder.unitized(bgReading.calculated_value) <= low) {
                 if(bgReading.calculated_value > 14) {
                     if (bgReading.hide_slope) {
                         bgAlert(bgReading.displayValue(mContext), "");
                     } else {
-                        bgAlert(bgReading.displayValue(mContext), bgReading.slopeArrow());
+                        bgAlert(bgReading.displayValue(mContext), BgReading.slopeArrow(bgReading.calculated_value_slope));
                     }
                 }
             } else {
@@ -129,6 +138,96 @@ public static void notificationSetter(Context context) {
         }
     }
 
+    private static Bitmap createWearBitmap(long start, long end) {
+        return new BgSparklineBuilder(mContext)
+                .setBgGraphBuilder(new BgGraphBuilder(mContext))
+                .setStart(start)
+                .setEnd(end)
+                .showHighLine()
+                .showLowLine()
+                .showAxes()
+                .setWidthPx(400)
+                .setHeightPx(400)
+                .setSmallDots()
+                .build();
+    }
+
+    private static Bitmap createWearBitmap(long hours) {
+        return createWearBitmap(System.currentTimeMillis() - 60000 * 60 * hours, System.currentTimeMillis());
+    }
+
+    private static Notification createExtensionPage(long hours) {
+        return new NotificationCompat.Builder(mContext)
+                .extend(new NotificationCompat.WearableExtender()
+                                .setBackground(createWearBitmap(hours))
+                                .setHintShowBackgroundOnly(true)
+                                .setHintAvoidBackgroundClipping(true)
+                )
+                .build();
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    public static Notification createOngoingNotification(BgGraphBuilder bgGraphBuilder) {
+        Intent intent = new Intent(mContext, Home.class);
+        List<BgReading> lastReadings = BgReading.latest(2);
+        BgReading lastReading = null;
+        if (lastReadings != null && lastReadings.size() >= 2) {
+            lastReading = lastReadings.get(0);
+        }
+
+        TaskStackBuilder stackBuilder = TaskStackBuilder.create(mContext);
+        stackBuilder.addParentStack(Home.class);
+        stackBuilder.addNextIntent(intent);
+        PendingIntent resultPendingIntent =
+                stackBuilder.getPendingIntent(
+                        0,
+                        PendingIntent.FLAG_UPDATE_CURRENT
+                );
+
+        NotificationCompat.Builder b = new NotificationCompat.Builder(mContext);
+        //b.setOngoing(true);
+        b.setCategory(NotificationCompat.CATEGORY_STATUS);
+        String titleString = lastReading == null ? "BG Reading Unavailable" : (lastReading.displayValue(mContext) + " " + lastReading.slopeArrow());
+        b.setContentTitle(titleString)
+                .setContentText("xDrip Data collection service is running.")
+                .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
+                .setUsesChronometer(false);
+        if (lastReading != null) {
+            b.setWhen(lastReading.timestamp);
+            String deltaString = "Delta: " + bgGraphBuilder.unitizedDeltaString(lastReading.calculated_value - lastReadings.get(1).calculated_value);
+            b.setContentText(deltaString);
+            b.setLargeIcon(new BgSparklineBuilder(mContext)
+                    .setHeight(64)
+                    .setWidth(64)
+                    .setStart(System.currentTimeMillis() - 60000 * 60 * 3)
+                    .setBgGraphBuilder(new BgGraphBuilder(mContext))
+                    .build());
+
+            NotificationCompat.BigPictureStyle bigPictureStyle = new NotificationCompat.BigPictureStyle();
+            bigPictureStyle.bigPicture(new BgSparklineBuilder(mContext)
+                    .setBgGraphBuilder(new BgGraphBuilder(mContext))
+                    .showHighLine()
+                    .showLowLine()
+                    .build())
+                    .setSummaryText(deltaString)
+                    .setBigContentTitle(titleString);
+            b.setStyle(bigPictureStyle);
+        }
+        b.setContentIntent(resultPendingIntent);
+        return b.build();
+    }
+
+    public static void bgOngoingNotification(final BgGraphBuilder bgGraphBuilder) {
+        mHandler.post(new Runnable() {
+            @Override
+            public void run() {
+                NotificationManagerCompat
+                        .from(mContext)
+                        .notify(ongoingNotificationId, createOngoingNotification(bgGraphBuilder));
+            }
+        });
+    }
+
     public static void soundAlert(String soundUri) {
         manager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
         int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
@@ -162,7 +261,7 @@ public static void bgNotificationCreate(String title, String content, Intent int
         if (bg_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
         if (bg_sound && !bg_sound_in_silent) { mBuilder.setSound(Uri.parse(bg_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
         if (bg_sound && bg_sound_in_silent) { soundAlert(bg_notification_sound);}
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
@@ -172,14 +271,14 @@ public static void calibrationNotificationCreate(String title, String content, I
         if (calibration_vibrate) { mBuilder.setVibrate(vibratePattern);}
         if (calibration_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
         if (calibration_sound) { mBuilder.setSound(Uri.parse(calibration_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
     public static void notificationUpdate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
@@ -196,7 +295,7 @@ public static PendingIntent notificationIntent(Intent intent){
     }
 
     public static void notificationDismiss(int notificationId) {
-        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(mContext.NOTIFICATION_SERVICE);
+        NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
     }
 

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 04b6acc..4db6be9 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -12,10 +12,9 @@
     <uses-permission android:name="com.google.android.permission.PROVIDE_BACKGROUND" />
     <uses-permission android:name="android.permission.BLUETOOTH" />
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
-    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
+    <uses-permission-sdk-23 android:name="android.permission.ACCESS_FINE_LOCATION" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
     <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission-sdk-23 android:name="android.permission.ACCESS_COARSE_LOCATION" />
     <uses-permission-sdk-23 android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
     <uses-permission android:name="android.permission.WAKE_LOCK" />
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java
index da9f240..2931b11 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/G5Model/BluetoothServices.java
@@ -8,24 +8,24 @@
 public class BluetoothServices {
 
     //Transmitter Service UUIDs
-    public static final String DeviceInfo = "180A";
+    public static final UUID DeviceInfo = UUID.fromString("0000180A-0000-1000-8000-00805F9B34FB");
     //iOS uses FEBC?
-    public static final String Advertisement = "0000FEBC-0000-1000-8000-00805F9B34FB";
-    public static final String CGMService = "F8083532-849E-531C-C594-30F1F86A4EA5";
-    public static final String ServiceB = "F8084532-849E-531C-C594-30F1F86A4EA5";
+    public static final UUID Advertisement = UUID.fromString("0000FEBC-0000-1000-8000-00805F9B34FB");
+    public static final UUID CGMService = UUID.fromString("F8083532-849E-531C-C594-30F1F86A4EA5");
+    public static final UUID ServiceB = UUID.fromString("F8084532-849E-531C-C594-30F1F86A4EA5");
 
     //DeviceInfoCharacteristicUUID, Read, DexcomUN
-    public static final String ManufacturerNameString = "2A29";
+    public static final UUID ManufacturerNameString = UUID.fromString("00002A29-0000-1000-8000-00805F9B34FB");
 
     //CGMServiceCharacteristicUUID
-    public static final String Communication = "F8083533-849E-531C-C594-30F1F86A4EA5";
-    public static final String Control = "F8083534-849E-531C-C594-30F1F86A4EA5";
-    public static final String Authentication = "F8083535-849E-531C-C594-30F1F86A4EA5";
-    public static final String ProbablyBackfill = "F8083536-849E-531C-C594-30F1F86A4EA5";
+    public static final UUID Communication = UUID.fromString("F8083533-849E-531C-C594-30F1F86A4EA5");
+    public static final UUID Control = UUID.fromString("F8083534-849E-531C-C594-30F1F86A4EA5");
+    public static final UUID Authentication = UUID.fromString("F8083535-849E-531C-C594-30F1F86A4EA5");
+    public static final UUID ProbablyBackfill = UUID.fromString("F8083536-849E-531C-C594-30F1F86A4EA5");
 
     //ServiceBCharacteristicUUID
-    public static final String CharacteristicE = "F8084533-849E-531C-C594-30F1F86A4EA5";
-    public static final String CharacteristicF = "F8084534-849E-531C-C594-30F1F86A4EA5";
+    public static final UUID CharacteristicE = UUID.fromString("F8084533-849E-531C-C594-30F1F86A4EA5");
+    public static final UUID CharacteristicF = UUID.fromString("F8084534-849E-531C-C594-30F1F86A4EA5");
 
     //CharacteristicDescriptorUUID
     public static final UUID CharacteristicUpdateNotification = UUID.fromString("00002902-0000-1000-8000-00805F9B34FB");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
index a571d82..56136e5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
@@ -82,16 +82,12 @@
 @TargetApi(Build.VERSION_CODES.LOLLIPOP)
 public class G5CollectionService extends Service {
 
-    protected static final UUID CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID = UUID.fromString("00002902-0000-1000-8000-00805f9b34fb");
-
-
     private final static String TAG = G5CollectionService.class.getSimpleName();
     private ForegroundServiceStarter foregroundServiceStarter;
 
     public Service service;
     private BgToSpeech bgToSpeech;
     private PendingIntent pendingIntent;
-    private final static int REQUEST_ENABLE_BT = 1;
 
     private android.bluetooth.BluetoothManager mBluetoothManager;
     private BluetoothAdapter mBluetoothAdapter;
@@ -118,6 +114,8 @@
     private List<ScanFilter> filters;
     private SharedPreferences prefs;
 
+    private boolean isScanning = false;
+
     private Handler handler;
 
     StringBuilder log = new StringBuilder();
@@ -170,6 +168,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                 }
             }
         }
+
+        if (mGatt != null) {
+            mGatt.close();
+            mGatt = null;
+        }
+
         Log.d(TAG, "Bonded? " + isBondedOrBonding.toString());
         if (Sensor.isActive()){
             setupBluetooth();
@@ -179,6 +183,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopScan();
             Log.d(TAG, "No Active Sensor");
         }
+
         return START_STICKY;
     }
 
@@ -231,7 +236,7 @@ public void setupBluetooth() {
                         .build();
                 filters = new ArrayList<>();
                 //Only look for CGM.
-                filters.add(new ScanFilter.Builder().setServiceUuid(new ParcelUuid(UUID.fromString(BluetoothServices.Advertisement))).build());
+                filters.add(new ScanFilter.Builder().setServiceUuid(new ParcelUuid(BluetoothServices.Advertisement)).build());
             }
             startScan();
         }
@@ -251,9 +256,15 @@ public void stopScan() {
                 }
             }
         }
+
+        isScanning = false;
     }
 
     public void startScan() {
+        if (isScanning) {
+            return;
+        }
+
         if (Build.VERSION.SDK_INT < 21) {
             mBluetoothAdapter.startLeScan(mLeScanCallback);
         } else {
@@ -261,6 +272,8 @@ public void startScan() {
 
             mLEScanner.startScan(filters, settings, mScanCallback);
         }
+
+        isScanning = true;
     }
     
     void scanAfterDelay(int delay) {
@@ -303,57 +316,30 @@ public void onScanResult(int callbackType, ScanResult result) {
             }
 
             @Override
-            public void onBatchScanResults(List<ScanResult> results) {
-                for (ScanResult sr : results) {
-                    android.util.Log.i(TAG, "ScanResult - Results: " +  sr.toString());
-                }
-            }
-
-            @Override
             public void onScanFailed(int errorCode) {
                 android.util.Log.e(TAG, "Scan Failed Error Code: " + errorCode);
                 if (errorCode == 1) {
                     android.util.Log.e(TAG, "Already Scanning");
-                } else {
-                    stopScan();
-                    startScan();
+                    isScanning = true;
                 }
             }
         };
     }
 
-    private void runOnUiThread(Runnable r) {
+    /*private void runOnUiThread(Runnable r) {
         handler.post(r);
-    }
+    }*/
 
-    private BluetoothAdapter.LeScanCallback mLeScanCallback =
-            new BluetoothAdapter.LeScanCallback() {
-                @Override
-                public void onLeScan(final BluetoothDevice device, int rssi, byte[] scanRecord) {
-                    runOnUiThread(new Runnable() {
-                        public void run() {
-                            // Check if the device has a name, the Dexcom transmitter always should. Match it with the transmitter id that was entered.
-                            // We get the last 2 characters to connect to the correct transmitter if there is more than 1 active or in the room.
-                            // If they match, connect to the device.
-                            if (device.getName() != null) {
-                                String transmitterIdLastTwo = Extensions.lastTwoCharactersOfString(defaultTransmitter.transmitterId);
-                                String deviceNameLastTwo = Extensions.lastTwoCharactersOfString(device.getName());
-
-                                if (transmitterIdLastTwo.equals(deviceNameLastTwo)) {
-                                    connectToDevice(device);
-                                }
-                            }
-                        }
-                    });
-                }
-            };
+    private BluetoothAdapter.LeScanCallback mLeScanCallback = null;
 
     private void connectToDevice(BluetoothDevice device) {
         android.util.Log.i(TAG, "Request Connect");
-//        if (mGatt == null) {
-            mGatt = device.connectGatt(getApplicationContext(), false, gattCallback);
+        if (mGatt == null) {
+            android.util.Log.i(TAG, "mGatt Null, connecting...");
+
             stopScan();
-//        }
+            mGatt = device.connectGatt(getApplicationContext(), false, gattCallback);
+        }
     }
 
     private final BluetoothGattCallback gattCallback = new BluetoothGattCallback() {
@@ -362,17 +348,13 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
             switch (newState) {
                 case BluetoothProfile.STATE_CONNECTED:
                     android.util.Log.i("gattCallback", "STATE_CONNECTED");
-                    gatt.discoverServices();
+                    mGatt.discoverServices();
                     break;
                 case BluetoothProfile.STATE_DISCONNECTED:
                     android.util.Log.e("gattCallback", "STATE_DISCONNECTED");
-                    if (mGatt == null) {
-                        scanAfterDelay(0);
-                        break;
-                    }
                     mGatt.close();
                     mGatt = null;
-                    scanAfterDelay(0);
+                    startScan();
                     break;
                 default:
                     android.util.Log.e("gattCallback", "STATE_OTHER");
@@ -382,17 +364,18 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
         @Override
         public void onServicesDiscovered(BluetoothGatt gatt, int status) {
             if (status == BluetoothGatt.GATT_SUCCESS) {
-                cgmService = gatt.getService(UUID.fromString(BluetoothServices.CGMService));
-                authCharacteristic = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Authentication));
-                controlCharacteristic = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Control));
-                commCharacteristic = cgmService.getCharacteristic(UUID.fromString(BluetoothServices.Communication));
+                cgmService = mGatt.getService(BluetoothServices.CGMService);
+                authCharacteristic = cgmService.getCharacteristic(BluetoothServices.Authentication);
+                controlCharacteristic = cgmService.getCharacteristic(BluetoothServices.Control);
+                commCharacteristic = cgmService.getCharacteristic(BluetoothServices.Communication);
+
+                mGatt.setCharacteristicNotification(authCharacteristic, true);
 
                 if (!mGatt.readCharacteristic(authCharacteristic)) {
                     android.util.Log.e(TAG, "onCharacteristicRead : ReadCharacteristicError");
                 }
-
-
-            } else {
+            }
+            else {
                 Log.w(TAG, "onServicesDiscovered received: " + status);
             }
         }
@@ -400,7 +383,7 @@ public void onServicesDiscovered(BluetoothGatt gatt, int status) {
         @Override
         public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descriptor, int status) {
             if (status == BluetoothGatt.GATT_SUCCESS) {
-                gatt.writeCharacteristic(descriptor.getCharacteristic());
+                mGatt.writeCharacteristic(descriptor.getCharacteristic());
             } else {
                 Log.e(TAG, "Unknown error writing descriptor");
             }
@@ -416,18 +399,18 @@ public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristi
                 if (String.valueOf(characteristic.getUuid()).equalsIgnoreCase(String.valueOf(authCharacteristic.getUuid()))) {
                     android.util.Log.i(TAG, "auth? " + String.valueOf(characteristic.getUuid()));
                     if (characteristic.getValue() != null && characteristic.getValue()[0] != 0x7 && characteristic.getValue()[0] != 0x6) {
-                        gatt.readCharacteristic(characteristic);
+                        mGatt.readCharacteristic(characteristic);
                     }
                 } else {
                     android.util.Log.i(TAG, "control?" + String.valueOf(characteristic.getUuid()));
 
                 }
             }
-//            mGatt.setCharacteristicNotification(characteristic, false);
         }
 
         @Override
         public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic, int status) {
+            Log.d("ReadStatus", String.valueOf(status));
             if (status == BluetoothGatt.GATT_SUCCESS) {
                 android.util.Log.i(TAG, "CharBytes-or " + Arrays.toString(characteristic.getValue()));
                 android.util.Log.i(TAG, "CharHex-or " + Extensions.bytesToHex(characteristic.getValue()));
@@ -441,8 +424,9 @@ public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic
                     authStatus = new AuthStatusRxMessage(characteristic.getValue());
                     if (authStatus.authenticated == 1 && authStatus.bonded == 1) {
                         isBondedOrBonding = true;
+                        mGatt.setCharacteristicNotification(authCharacteristic, false);
                         mGatt.setCharacteristicNotification(controlCharacteristic, true);
-                        BluetoothGattDescriptor descriptor = controlCharacteristic.getDescriptor(CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID);
+                        BluetoothGattDescriptor descriptor = controlCharacteristic.getDescriptor(BluetoothServices.CharacteristicUpdateNotification);
                         descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
 //                        TransmitterTimeTxMessage timeMessage = new TransmitterTimeTxMessage();
 //                        android.util.Log.i("timeMessage", Arrays.toString(timeMessage.byteSequence));
@@ -452,7 +436,7 @@ public void onCharacteristicRead(BluetoothGatt gatt, BluetoothGattCharacteristic
                         mGatt.writeDescriptor(descriptor);
                     } else if (authStatus.authenticated == 1) {
                         android.util.Log.i(TAG, "Let's Bond!");
-                        KeepAliveTxMessage keepAlive = new KeepAliveTxMessage(30);
+                        KeepAliveTxMessage keepAlive = new KeepAliveTxMessage(25);
                         characteristic.setValue(keepAlive.byteSequence);
                         mGatt.writeCharacteristic(characteristic);
                         mGatt.readCharacteristic(characteristic);
@@ -510,7 +494,7 @@ public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteris
             byte[] buffer = characteristic.getValue();
             byte firstByte = buffer[0];
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP && gatt != null) {
-                gatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH);
+                mGatt.requestConnectionPriority(BluetoothGatt.CONNECTION_PRIORITY_HIGH);
             }
             if (firstByte == 0x2f) {
                 SensorRxMessage sensorRx = new SensorRxMessage(characteristic.getValue());
@@ -533,9 +517,8 @@ public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteris
                     alarm.cancel(pendingIntent);
                 }
                 keepAlive();
-                
+
                 doDisconnectMessage(gatt, characteristic);
-                gatt.setCharacteristicNotification(characteristic, false);
             }
             // Transmitter Time
             else if (firstByte == 0x25) {
@@ -543,7 +526,7 @@ else if (firstByte == 0x25) {
                 startTimeInterval = new Date().getTime() - transmitterTime.currentTime;
 
                 mGatt.setCharacteristicNotification(controlCharacteristic, true);
-                BluetoothGattDescriptor descriptor = controlCharacteristic.getDescriptor(CHARACTERISTIC_UPDATE_NOTIFICATION_DESCRIPTOR_UUID);
+                BluetoothGattDescriptor descriptor = controlCharacteristic.getDescriptor(BluetoothServices.CharacteristicUpdateNotification);
                 descriptor.setValue(BluetoothGattDescriptor.ENABLE_INDICATION_VALUE);
 
                 SensorTxMessage sensorTx = new SensorTxMessage();
@@ -579,11 +562,11 @@ private void processNewTransmitterData(int raw_data , int filtered_data,int sens
 
     // Sends the disconnect tx message to our bt device.
     private void doDisconnectMessage(BluetoothGatt gatt, BluetoothGattCharacteristic characteristic) {
-        gatt.setCharacteristicNotification(controlCharacteristic, false);
+        mGatt.setCharacteristicNotification(controlCharacteristic, false);
 
         DisconnectTxMessage disconnectTx = new DisconnectTxMessage();
         characteristic.setValue(disconnectTx.byteSequence);
-        gatt.writeCharacteristic(characteristic);
+        mGatt.writeCharacteristic(characteristic);
     }
 
     @SuppressLint("GetInstance")
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
index e4bf640..4286008 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
@@ -1,9 +1,14 @@
 package com.eveningoutpost.dexdrip;
 
+import android.*;
+import android.Manifest;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.content.pm.PackageManager;
+import android.os.Build;
 import android.os.Bundle;
 import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
 import android.text.format.DateFormat;
 import android.view.View;
 import android.widget.Button;
@@ -16,6 +21,7 @@
 import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
+import com.eveningoutpost.dexdrip.utils.LocationHelper;
 
 import java.util.Calendar;
 
@@ -32,7 +38,7 @@
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        if(Sensor.isActive() == false) {
+        if(!Sensor.isActive()) {
             setContentView(R.layout.activity_start_new_sensor);
             button = (Button)findViewById(R.id.startNewSensor);
             dp = (DatePicker)findViewById(R.id.datePicker);
@@ -83,42 +89,24 @@ public String getMenuName() {
     }
 
     public void addListenerOnButton() {
-
         button = (Button)findViewById(R.id.startNewSensor);
         linkPickers = (CheckBox)findViewById(R.id.startSensorLinkPickers);
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         linkPickers.setChecked(prefs.getBoolean("start_sensor_link_pickers", false));
 
         button.setOnClickListener(new View.OnClickListener() {
-          public void onClick(View v) {
-
-              Calendar calendar = Calendar.getInstance();
-              calendar.set(dp.getYear(), dp.getMonth(), dp.getDayOfMonth(),
-              tp.getCurrentHour(), tp.getCurrentMinute(), 0);
-              long startTime = calendar.getTime().getTime();
-
-              Sensor.create(startTime);
-              Log.d("NEW SENSOR", "Sensor started at " + startTime);
-
-              Toast.makeText(getApplicationContext(), "NEW SENSOR STARTED", Toast.LENGTH_LONG).show();
-              
-              SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
-              prefs.edit().putBoolean("start_sensor_link_pickers", linkPickers.isChecked()).apply();
-              
-              CollectionServiceStarter.newStart(getApplicationContext());
-              Intent intent;
-              if(prefs.getBoolean("store_sensor_location",true)) {
-                  intent = new Intent(getApplicationContext(), NewSensorLocation.class);
-              } else {
-                  intent = new Intent(getApplicationContext(), Home.class);
-              }
-
-              startActivity(intent);
-              finish();
-          }
-
+            public void onClick(View v) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                    if (!LocationHelper.locationPermission(StartNewSensor.this)) {
+                        requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 0);
+                    } else {
+                        sensorButtonClick();
+                    }
+                } else {
+                    sensorButtonClick();
+                }
+            }
         });
-
     }
     
     void addDays(int numberOfDays) {
@@ -135,4 +123,44 @@ void addDays(int numberOfDays) {
         dp.updateDate(calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));
     }
 
+    private void sensorButtonClick() {
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(dp.getYear(), dp.getMonth(), dp.getDayOfMonth(), tp.getCurrentHour(), tp.getCurrentMinute(), 0);
+        long startTime = calendar.getTime().getTime();
+
+        Sensor.create(startTime);
+        Log.d("NEW SENSOR", "Sensor started at " + startTime);
+
+        Toast.makeText(getApplicationContext(), "NEW SENSOR STARTED", Toast.LENGTH_LONG).show();
+
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        prefs.edit().putBoolean("start_sensor_link_pickers", linkPickers.isChecked()).apply();
+
+        CollectionServiceStarter.newStart(getApplicationContext());
+        Intent intent;
+        if(prefs.getBoolean("store_sensor_location",true)) {
+            intent = new Intent(getApplicationContext(), NewSensorLocation.class);
+        } else {
+            intent = new Intent(getApplicationContext(), Home.class);
+        }
+
+        startActivity(intent);
+        finish();
+    }
+
+    @Override
+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
+        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
+
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            for (int i = 0; i < permissions.length; i++) {
+                if (permissions[i].equals(android.Manifest.permission.ACCESS_FINE_LOCATION)) {
+                    if (grantResults[i] == PackageManager.PERMISSION_GRANTED) {
+                        sensorButtonClick();
+                    }
+                }
+            }
+        }
+    }
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/LocationHelper.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/LocationHelper.java
index 160b894..c52b468 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/LocationHelper.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/LocationHelper.java
@@ -1,12 +1,15 @@
 package com.eveningoutpost.dexdrip.utils;
 
+import android.Manifest;
 import android.app.Activity;
 import android.app.AlertDialog;
 import android.content.Context;
 import android.content.DialogInterface;
 import android.content.Intent;
+import android.content.pm.PackageManager;
 import android.location.LocationManager;
 import android.os.Build;
+import android.support.v4.app.ActivityCompat;
 
 import com.eveningoutpost.dexdrip.R;
 
@@ -64,4 +67,9 @@ public static void requestLocationForBluetooth(Activity activity) {
             LocationHelper.requestLocation(activity);
         }
     }
+
+    public static Boolean locationPermission(ActivityWithMenu act) {
+        return ActivityCompat.checkSelfPermission(act, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED;
+    }
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 8e84c59..621ef84 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -1,6 +1,7 @@
 package com.eveningoutpost.dexdrip.utils;
 
 import android.app.AlertDialog;
+import android.app.Dialog;
 import android.appwidget.AppWidgetManager;
 import android.content.ComponentName;
 import android.content.Context;
@@ -23,6 +24,9 @@
 import android.preference.RingtonePreference;
 import android.text.InputFilter;
 import android.text.TextUtils;
+import android.view.KeyEvent;
+import android.view.inputmethod.EditorInfo;
+import android.widget.TextView;
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
@@ -382,11 +386,32 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             bindPreferenceSummaryToValue(wifiRecievers);
             bindPreferenceSummaryToValue(xDripViewerNsAdresses);
             bindPreferenceSummaryToValue(transmitterId);
-            transmitterId.getEditText().setFilters(new InputFilter[]{new InputFilter.AllCaps()});
+
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomG5") == 0) {
+                // Transmitter Id max length is 6.
+                transmitterId.getEditText().setFilters(new InputFilter[]{new InputFilter.LengthFilter(6), new InputFilter.AllCaps()});
+            }
+            else {
+                transmitterId.getEditText().setFilters(new InputFilter[]{new InputFilter.LengthFilter(10), new InputFilter.AllCaps()});
+            }
+
+            // Allows enter to confirm for transmitterId.
+            transmitterId.getEditText().setOnEditorActionListener(new TextView.OnEditorActionListener() {
+                @Override
+                public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
+                    if (actionId == EditorInfo.IME_ACTION_DONE) {
+                        transmitterId.onClick(transmitterId.getDialog(), Dialog.BUTTON_POSITIVE);
+                        transmitterId.getDialog().dismiss();
+                        return true;
+                    }
+                    return false;
+                }
+            });
+
             collectionMethod.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override
                 public boolean onPreferenceChange(Preference preference, Object newValue) {
-                    if(((String) newValue).compareTo("DexcomShare") != 0) { // NOT USING SHARE
+                    if (((String) newValue).compareTo("DexcomShare") != 0) { // NOT USING SHARE
                         collectionCategory.removePreference(shareKey);
                         collectionCategory.removePreference(scanShare);
                         otherCategory.removePreference(interpretRaw);
@@ -411,11 +436,11 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     }
 
                     // jamorham always show wifi receivers option if populated as we may switch modes dynamically
-                    if((((String) newValue).compareTo("WifiWixel") != 0)
+                    if ((((String) newValue).compareTo("WifiWixel") != 0)
                             && (((String) newValue).compareTo("WifiBlueToothWixel") != 0)) {
                         String receiversIpAddresses;
                         receiversIpAddresses = prefs.getString("wifi_recievers_addresses", "");
-                        if(receiversIpAddresses == null || receiversIpAddresses.equals("") ) {
+                        if (receiversIpAddresses == null || receiversIpAddresses.equals("")) {
                             collectionCategory.removePreference(wifiRecievers);
                         } else {
                             collectionCategory.addPreference(wifiRecievers);
@@ -424,7 +449,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                         collectionCategory.addPreference(wifiRecievers);
                     }
 
-                    if(((String) newValue).compareTo("DexbridgeWixel") != 0) {
+                    if (((String) newValue).compareTo("DexbridgeWixel") != 0) {
                         collectionCategory.removePreference(transmitterId);
                         collectionCategory.removePreference(displayBridgeBatt);
                     } else {
@@ -432,7 +457,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                         collectionCategory.addPreference(displayBridgeBatt);
                     }
 
-                    if(((String) newValue).compareTo("DexcomG5") == 0) {
+                    if (((String) newValue).compareTo("DexcomG5") == 0) {
                         collectionCategory.addPreference(transmitterId);
                     }
 
@@ -462,7 +487,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     } else {
                         preference.setSummary(stringValue);
                     }
-                    if(preference.getKey().equals("dex_collection_method")) {
+                    if (preference.getKey().equals("dex_collection_method")) {
                         CollectionServiceStarter.restartCollectionService(preference.getContext(), (String) newValue);
                     } else {
                         CollectionServiceStarter.restartCollectionService(preference.getContext());
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index 7850942..453a173 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -25,8 +25,11 @@
         <EditTextPreference
             android:key="dex_txid"
             android:title="Dexcom Transmitter ID"
-            android:summary="ID of your Dexcom Transmitter, eg 12AB3"
-            android:defaultValue="ABCDEF" />
+            android:imeOptions="actionDone"
+            android:singleLine="true"
+            android:maxLines="1"
+            android:inputType="textNoSuggestions|textVisiblePassword|textCapCharacters"
+            android:summary="ID of your Dexcom Transmitter, eg ABCDEF" />
         <CheckBoxPreference
             android:key="display_bridge_battery"
             android:title="Display Bridge Battery"

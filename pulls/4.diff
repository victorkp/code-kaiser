diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
index a3c4698..605ab72 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
@@ -1,19 +1,30 @@
 package com.eveningoutpost.dexdrip.Tables;
 
 import android.app.ListActivity;
+import android.content.Context;
 import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.widget.DrawerLayout;
-import android.widget.SimpleCursorAdapter;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.ListAdapter;
+import android.widget.TextView;
 
-import com.activeandroid.Cache;
+import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.NavigationDrawerFragment;
 import com.eveningoutpost.dexdrip.R;
 
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
 
 public class BgReadingTable extends ListActivity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
     private String menu_name = "BG Data Table";
     private NavigationDrawerFragment mNavigationDrawerFragment;
+
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -21,28 +32,91 @@ public void onCreate(Bundle savedInstanceState) {
     }
 
     @Override
-    protected void onResume(){
+    protected void onResume() {
         super.onResume();
         mNavigationDrawerFragment = (NavigationDrawerFragment) getFragmentManager().findFragmentById(R.id.navigation_drawer);
         mNavigationDrawerFragment.setUp(R.id.navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), menu_name, this);
 
         getData();
     }
+
     @Override
     public void onNavigationDrawerItemSelected(int position) {
         mNavigationDrawerFragment.swapContext(position);
     }
 
     private void getData() {
-        Cursor cursor = Cache.openDatabase().rawQuery("Select * from BgReadings order by _ID desc limit 50", null);
-
-        SimpleCursorAdapter adapter = new SimpleCursorAdapter(this,
-                R.layout.raw_data_list_item,
-                cursor,
-                new String[] { "calculated_value", "age_adjusted_raw_value", "raw_data", "time_since_sensor_started" },
-                new int[] { R.id.raw_data_id, R.id.raw_data_value , R.id.raw_data_slope, R.id.raw_data_timestamp });
+        final List<BgReading> latest = BgReading.latest(50);
+        ListAdapter adapter = new BgReadingAdapter(this, latest);
 
         this.setListAdapter(adapter);
     }
 
+    public static class BgReadingCursorAdapterViewHolder {
+        TextView raw_data_id;
+        TextView raw_data_value;
+        TextView raw_data_slope;
+        TextView raw_data_timestamp;
+
+        public BgReadingCursorAdapterViewHolder(View root) {
+            raw_data_id = (TextView) root.findViewById(R.id.raw_data_id);
+            raw_data_value = (TextView) root.findViewById(R.id.raw_data_value);
+            raw_data_slope = (TextView) root.findViewById(R.id.raw_data_slope);
+            raw_data_timestamp = (TextView) root.findViewById(R.id.raw_data_timestamp);
+        }
+    }
+
+    public static class BgReadingAdapter extends BaseAdapter {
+        private final Context         context;
+        private final List<BgReading> readings;
+
+        public BgReadingAdapter(Context context, List<BgReading> readings) {
+            this.context = context;
+            if(readings == null)
+                readings = new ArrayList<>();
+
+            this.readings = readings;
+        }
+
+        public View newView(Context context, ViewGroup parent) {
+            final View view = LayoutInflater.from(context).inflate(R.layout.raw_data_list_item, parent, false);
+
+            final BgReadingCursorAdapterViewHolder holder = new BgReadingCursorAdapterViewHolder(view);
+            view.setTag(holder);
+
+            return view;
+        }
+
+        public void bindView(View view, Context context, BgReading bgReading) {
+            final BgReadingCursorAdapterViewHolder tag = (BgReadingCursorAdapterViewHolder) view.getTag();
+            tag.raw_data_id.setText(Double.toString(bgReading.calculated_value));
+            tag.raw_data_value.setText(Double.toString(bgReading.age_adjusted_raw_value));
+            tag.raw_data_slope.setText(Double.toString(bgReading.raw_data));
+            tag.raw_data_timestamp.setText(new Date(bgReading.timestamp).toString());
+        }
+
+        @Override
+        public int getCount() {
+            return readings.size();
+        }
+
+        @Override
+        public BgReading getItem(int position) {
+            return readings.get(position);
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return getItem(position).getId();
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            if (convertView == null)
+                convertView = newView(context, parent);
+
+            bindView(convertView, context, getItem(position));
+            return convertView;
+        }
+    }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/CalibrationDataTable.java b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/CalibrationDataTable.java
index 6ca194b..0d09129 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/CalibrationDataTable.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/CalibrationDataTable.java
@@ -1,26 +1,29 @@
 package com.eveningoutpost.dexdrip.Tables;
 
 import android.app.ListActivity;
+import android.content.Context;
 import android.database.Cursor;
 import android.os.Bundle;
 import android.support.v4.widget.DrawerLayout;
+import android.view.LayoutInflater;
 import android.view.View;
-import android.widget.SimpleCursorAdapter;
+import android.view.ViewGroup;
+import android.widget.BaseAdapter;
+import android.widget.TextView;
 
 import com.activeandroid.Cache;
+import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.NavigationDrawerFragment;
 import com.eveningoutpost.dexdrip.R;
 
 import java.util.ArrayList;
+import java.util.List;
 
 
 public class CalibrationDataTable extends ListActivity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
     private String menu_name = "Calibration Data Table";
     private NavigationDrawerFragment mNavigationDrawerFragment;
 
-    private ArrayList<String> results = new ArrayList<String>();
-    private View mRootView;
-
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -41,18 +44,79 @@ public void onNavigationDrawerItemSelected(int position) {
     }
 
     private void getData() {
-        Cursor cursor = Cache.openDatabase().rawQuery("Select * from Calibration order by timestamp desc", null);
+        final List<Calibration> latest = Calibration.latest(50);
 
-        SimpleCursorAdapter adapter = new SimpleCursorAdapter(this,
-                R.layout.raw_data_list_item,
-                cursor,
-                new String[] { "bg", "estimate_raw_at_time_of_calibration", "slope", "intercept" },
-                new int[] { R.id.raw_data_id, R.id.raw_data_value , R.id.raw_data_slope, R.id.raw_data_timestamp });
+        CalibrationDataCursorAdapter adapter = new CalibrationDataCursorAdapter(this, latest);
 
         this.setListAdapter(adapter);
-//        ListView listView = (ListView) findViewById(R.id.list);
-//        listView.setAdapter(adapter);
     }
 
 
+    public static class CalibrationDataCursorAdapterViewHolder {
+        TextView raw_data_id;
+        TextView raw_data_value;
+        TextView raw_data_slope;
+        TextView raw_data_timestamp;
+
+        public CalibrationDataCursorAdapterViewHolder(View root) {
+            raw_data_id = (TextView) root.findViewById(R.id.raw_data_id);
+            raw_data_value = (TextView) root.findViewById(R.id.raw_data_value);
+            raw_data_slope = (TextView) root.findViewById(R.id.raw_data_slope);
+            raw_data_timestamp = (TextView) root.findViewById(R.id.raw_data_timestamp);
+        }
+    }
+
+    public static class CalibrationDataCursorAdapter extends BaseAdapter {
+        private final Context           context;
+        private final List<Calibration> calibrations;
+
+        public CalibrationDataCursorAdapter(Context context, List<Calibration> calibrations) {
+            this.context = context;
+            if(calibrations == null)
+                calibrations = new ArrayList<>();
+            
+            this.calibrations = calibrations;
+        }
+
+        public View newView(Context context, ViewGroup parent) {
+            final View view = LayoutInflater.from(context).inflate(R.layout.raw_data_list_item, parent, false);
+
+            final CalibrationDataCursorAdapterViewHolder holder = new CalibrationDataCursorAdapterViewHolder(view);
+            view.setTag(holder);
+
+            return view;
+        }
+
+        public void bindView(View view, Context context, Calibration calibration) {
+            final CalibrationDataCursorAdapterViewHolder tag = (CalibrationDataCursorAdapterViewHolder) view.getTag();
+            tag.raw_data_id.setText(Double.toString(calibration.bg));
+            tag.raw_data_value.setText(Double.toString(calibration.estimate_raw_at_time_of_calibration));
+            tag.raw_data_slope.setText(Double.toString(calibration.slope));
+            tag.raw_data_timestamp.setText(Double.toString(calibration.intercept));
+        }
+
+        @Override
+        public int getCount() {
+            return calibrations.size();
+        }
+
+        @Override
+        public Calibration getItem(int position) {
+            return calibrations.get(position);
+        }
+
+        @Override
+        public long getItemId(int position) {
+            return getItem(position).getId();
+        }
+
+        @Override
+        public View getView(int position, View convertView, ViewGroup parent) {
+            if (convertView == null)
+                convertView = newView(context, parent);
+
+            bindView(convertView, context, getItem(position));
+            return convertView;
+        }
+    }
 }
diff --git a/app/src/main/res/layout/raw_data_list_item.xml b/app/src/main/res/layout/raw_data_list_item.xml
index fc539b6..8394291 100644
--- a/app/src/main/res/layout/raw_data_list_item.xml
+++ b/app/src/main/res/layout/raw_data_list_item.xml
@@ -7,24 +7,24 @@
     android:id="@+id/raw_data_list_item">
 
     <TextView android:id="@+id/raw_data_id"
-    android:layout_width="132dp"
+    android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:textSize="24dp" />
+    android:textSize="24sp" />
 
     <TextView android:id="@+id/raw_data_value"
-    android:layout_width="87dp"
+    android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:textSize="12dp"/>
+    android:textSize="12sp"/>
 
     <TextView android:id="@+id/raw_data_slope"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:textSize="12dp"/>
+    android:textSize="12sp"/>
 
     <TextView android:id="@+id/raw_data_timestamp"
     android:layout_width="match_parent"
     android:layout_height="wrap_content"
-    android:textSize="12dp"/>
+    android:textSize="12sp"/>
 
 
 </LinearLayout>
\ No newline at end of file

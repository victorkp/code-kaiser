diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
index 4a3bf14..6938974 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
@@ -22,42 +22,41 @@
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.TransmitterData;
 
-public class WixelReader  extends Thread {
+public class WixelReader extends Thread {
 
     private final static String TAG = WixelReader.class.getName();
     private static WixelReader singleton;
-
-    public synchronized static WixelReader getInstance(Context ctx) {
-        if(singleton == null) {
-           singleton = new WixelReader(ctx);
-        }
-        return singleton;
-    }
-
+    private static boolean sStarted = false;
     private final Context mContext;
 
     private volatile boolean mStop = false;
-    private static boolean sStarted = false;
 
-    public WixelReader(Context ctx) {
+    private WixelReader(Context ctx) {
         mContext = ctx.getApplicationContext();
     }
 
+    public synchronized static WixelReader getInstance(Context ctx) {
+        if (singleton == null) {
+            singleton = new WixelReader(ctx);
+        }
+        return singleton;
+    }
+
     public static void sStart(Context ctx) {
-        if(sStarted) {
+        if (sStarted) {
             return;
         }
-        WixelReader theWixelReader =  getInstance(ctx);
+        WixelReader theWixelReader = getInstance(ctx);
         theWixelReader.start();
         sStarted = true;
 
     }
 
     public static void sStop() {
-        if(!sStarted) {
+        if (!sStarted) {
             return;
         }
-        WixelReader theWixelReader =  getInstance(null);
+        WixelReader theWixelReader = getInstance(null);
         theWixelReader.Stop();
         try {
             theWixelReader.join();
@@ -70,34 +69,32 @@ public static void sStop() {
         singleton = null;
     }
 
-    public static boolean IsConfigured(Context ctx) {
+    public static boolean isConfigured(Context ctx) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
         String recieversIpAddresses = prefs.getString("wifi_recievers_addresses", "");
-        if(recieversIpAddresses == null || recieversIpAddresses.equals("") ) {
+        if (recieversIpAddresses == null || recieversIpAddresses.equals("")) {
             return false;
         }
         return true;
     }
 
-    public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2)
-    {
-        if (e1 == null || e2==null) {
+    public static boolean almostEquals(TransmitterRawData e1, TransmitterRawData e2) {
+        if (e1 == null || e2 == null) {
             return false;
         }
         // relative time is in ms
-        if ((Math.abs(e1.CaptureDateTime - e2.CaptureDateTime) < 120 * 1000 ) &&
+        if ((Math.abs(e1.CaptureDateTime - e2.CaptureDateTime) < 120 * 1000) &&
                 (e1.TransmissionId == e2.TransmissionId)) {
             return true;
         }
         return false;
     }
 
- // last in the array, is first in time
-    public static List<TransmitterRawData> Merge2Lists(List<TransmitterRawData> list1 , List<TransmitterRawData> list2)
-    {
-        List<TransmitterRawData> merged = new LinkedList <TransmitterRawData>();
+    // last in the array, is first in time
+    public static List<TransmitterRawData> merge2Lists(List<TransmitterRawData> list1, List<TransmitterRawData> list2) {
+        List<TransmitterRawData> merged = new LinkedList<TransmitterRawData>();
         while (true) {
-            if(list1.size() == 0 && list2.size() == 0) {
+            if (list1.size() == 0 && list2.size() == 0) {
                 break;
             }
             if (list1.size() == 0) {
@@ -113,7 +110,7 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
                 merged.add(list1.remove(0));
                 continue;
             }
-            if(list1.get(0).RelativeTime > list2.get(0).RelativeTime) {
+            if (list1.get(0).RelativeTime > list2.get(0).RelativeTime) {
                 merged.add(list1.remove(0));
             } else {
                 merged.add(list2.remove(0));
@@ -123,24 +120,22 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
         return merged;
     }
 
-    public static List<TransmitterRawData> MergeLists(List <List<TransmitterRawData>> allTransmitterRawData)
-    {
-        List<TransmitterRawData> MergedList;
-        MergedList = allTransmitterRawData.remove(0);
+    public static List<TransmitterRawData> mergeLists(List<List<TransmitterRawData>> allTransmitterRawData) {
+        List<TransmitterRawData> mergedList;
+        mergedList = allTransmitterRawData.remove(0);
         for (List<TransmitterRawData> it : allTransmitterRawData) {
-            MergedList = Merge2Lists(MergedList, it);
+            mergedList = merge2Lists(mergedList, it);
         }
 
-        return MergedList;
+        return mergedList;
     }
 
-    public static List<TransmitterRawData> ReadHost(String hostAndIp, int numberOfRecords)
-    {
+    public static List<TransmitterRawData> readHost(String hostAndIp, int numberOfRecords) {
         int port;
         System.out.println("Reading From " + hostAndIp);
-        Log.i(TAG,"Reading From " + hostAndIp);
-        String []hosts = hostAndIp.split(":");
-        if(hosts.length != 2) {
+        Log.i(TAG, "Reading From " + hostAndIp);
+        String[] hosts = hostAndIp.split(":");
+        if (hosts.length != 2) {
             System.out.println("Invalid hostAndIp " + hostAndIp);
             Log.e(TAG, "Invalid hostAndIp " + hostAndIp);
 
@@ -149,13 +144,13 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
         try {
             port = Integer.parseInt(hosts[1]);
         } catch (NumberFormatException nfe) {
-            System.out.println("Invalid port " +hosts[1]);
+            System.out.println("Invalid port " + hosts[1]);
             Log.e(TAG, "Invalid hostAndIp " + hostAndIp, nfe);
             return null;
 
         }
         if (port < 10 || port > 65536) {
-            System.out.println("Invalid port " +hosts[1]);
+            System.out.println("Invalid port " + hosts[1]);
             Log.e(TAG, "Invalid hostAndIp " + hostAndIp);
             return null;
 
@@ -163,8 +158,8 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
         System.out.println("Reading from " + hosts[0] + " " + port);
         List<TransmitterRawData> ret;
         try {
-            ret = Read(hosts[0], port, numberOfRecords);
-        } catch(Exception e) {
+            ret = read(hosts[0], port, numberOfRecords);
+        } catch (Exception e) {
             // We had some error, need to move on...
             System.out.println("read from host failed cought expation" + hostAndIp);
             Log.e(TAG, "read from host failed " + hostAndIp, e);
@@ -175,55 +170,53 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
         return ret;
     }
 
-    public static List<TransmitterRawData> ReadFromMongo(String dbury, int numberOfRecords)
-    {
-        Log.i(TAG,"Reading From " + dbury);
-    	List<TransmitterRawData> tmpList;
-    	// format is dburi/db/collection. We need to find the collection and strip it from the dburi.
-    	int indexOfSlash = dbury.lastIndexOf('/');
-    	if(indexOfSlash == -1) {
-    		// We can not find a collection name
-    		Log.e(TAG, "Error bad dburi. Did not find a collection name starting with / " + dbury);
-    		// in order for the user to understand that there is a problem, we return null
-    		return null;
-
-    	}
-    	String collection = dbury.substring(indexOfSlash + 1);
-    	dbury = dbury.substring(0, indexOfSlash);
-
-    	// Make sure that we have another /, since this is used in the constructor.
-    	indexOfSlash = dbury.lastIndexOf('/');
-    	if(indexOfSlash == -1) {
-    		// We can not find a collection name
-    		Log.e(TAG, "Error bad dburi. Did not find a collection name starting with / " + dbury);
-    		// in order for the user to understand that there is a problem, we return null
-    		return null;
-    	}
-
-    	MongoWrapper mt = new MongoWrapper(dbury, collection, "CaptureDateTime", "MachineNameNotUsed");
-    	return mt.ReadFromMongo(numberOfRecords);
+    public static List<TransmitterRawData> readFromMongo(String dbury, int numberOfRecords) {
+        Log.i(TAG, "Reading From " + dbury);
+        List<TransmitterRawData> tmpList;
+        // format is dburi/db/collection. We need to find the collection and strip it from the dburi.
+        int indexOfSlash = dbury.lastIndexOf('/');
+        if (indexOfSlash == -1) {
+            // We can not find a collection name
+            Log.e(TAG, "Error bad dburi. Did not find a collection name starting with / " + dbury);
+            // in order for the user to understand that there is a problem, we return null
+            return null;
+
+        }
+        String collection = dbury.substring(indexOfSlash + 1);
+        dbury = dbury.substring(0, indexOfSlash);
+
+        // Make sure that we have another /, since this is used in the constructor.
+        indexOfSlash = dbury.lastIndexOf('/');
+        if (indexOfSlash == -1) {
+            // We can not find a collection name
+            Log.e(TAG, "Error bad dburi. Did not find a collection name starting with / " + dbury);
+            // in order for the user to understand that there is a problem, we return null
+            return null;
+        }
+
+        MongoWrapper mt = new MongoWrapper(dbury, collection, "CaptureDateTime", "MachineNameNotUsed");
+        return mt.ReadFromMongo(numberOfRecords);
     }
 
     // format of string is ip1:port1,ip2:port2;
-    public static TransmitterRawData[] Read(String hostsNames, int numberOfRecords)
-    {
-        String []hosts = hostsNames.split(",");
-        if(hosts.length == 0) {
+    public static TransmitterRawData[] read(String hostsNames, int numberOfRecords) {
+        String[] hosts = hostsNames.split(",");
+        if (hosts.length == 0) {
             Log.e(TAG, "Error no hosts were found " + hostsNames);
             return null;
         }
-        List <List<TransmitterRawData>> allTransmitterRawData =  new LinkedList <List<TransmitterRawData>>();
+        List<List<TransmitterRawData>> allTransmitterRawData = new LinkedList<List<TransmitterRawData>>();
 
         // go over all hosts and read data from them
-        for(String host : hosts) {
+        for (String host : hosts) {
 
             List<TransmitterRawData> tmpList;
             if (host.startsWith("mongodb://")) {
-            	tmpList = ReadFromMongo(host ,numberOfRecords);
+                tmpList = readFromMongo(host, numberOfRecords);
             } else {
-            	tmpList = ReadHost(host, numberOfRecords);
+                tmpList = readHost(host, numberOfRecords);
             }
-            if(tmpList != null && tmpList.size() > 0) {
+            if (tmpList != null && tmpList.size() > 0) {
                 allTransmitterRawData.add(tmpList);
             }
         }
@@ -234,25 +227,23 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
             return null;
 
         }
-        List<TransmitterRawData> mergedData= MergeLists(allTransmitterRawData);
+        List<TransmitterRawData> mergedData = mergeLists(allTransmitterRawData);
 
         int retSize = Math.min(numberOfRecords, mergedData.size());
-        TransmitterRawData []trd_array = new TransmitterRawData[retSize];
+        TransmitterRawData[] trd_array = new TransmitterRawData[retSize];
         mergedData.subList(mergedData.size() - retSize, mergedData.size()).toArray(trd_array);
 
         System.out.println("Final Results========================================================================");
-        for (int i= 0; i < trd_array.length; i++) {
- //           System.out.println( trd_array[i].toTableString());
+        for (int i = 0; i < trd_array.length; i++) {
+            //           System.out.println( trd_array[i].toTableString());
         }
         return trd_array;
 
     }
 
-    public static List<TransmitterRawData> Read(String hostName,int port, int numberOfRecords)
-    {
+    public static List<TransmitterRawData> read(String hostName, int port, int numberOfRecords) {
         List<TransmitterRawData> trd_list = new LinkedList<TransmitterRawData>();
-        try
-        {
+        try {
             Log.i(TAG, "Read called");
             Gson gson = new GsonBuilder().create();
 
@@ -266,26 +257,26 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
 
             // Real client code
             InetSocketAddress ServerAdress = new InetSocketAddress(hostName, port);
-            Socket MySocket = new Socket();
-            MySocket.connect(ServerAdress, 10000);
+            Socket mySocket = new Socket();
+            mySocket.connect(ServerAdress, 10000);
 
             System.out.println("After the new socket \n");
-            MySocket.setSoTimeout(2000);
+            mySocket.setSoTimeout(2000);
 
-            System.out.println("client connected... " );
+            System.out.println("client connected... ");
 
-            PrintWriter out = new PrintWriter(MySocket.getOutputStream(), true);
-            BufferedReader in = new BufferedReader(new InputStreamReader(MySocket.getInputStream()));
+            PrintWriter out = new PrintWriter(mySocket.getOutputStream(), true);
+            BufferedReader in = new BufferedReader(new InputStreamReader(mySocket.getInputStream()));
 
             out.println(flat);
 
-            while(true) {
+            while (true) {
                 String data = in.readLine();
-                if(data == null) {
+                if (data == null) {
                     System.out.println("recieved null exiting");
                     break;
                 }
-                if(data.equals("")) {
+                if (data.equals("")) {
                     System.out.println("recieved \"\" exiting");
                     break;
                 }
@@ -294,117 +285,114 @@ public static boolean almostEquals( TransmitterRawData e1, TransmitterRawData e2
                 TransmitterRawData trd = gson.fromJson(data, TransmitterRawData.class);
                 trd.CaptureDateTime = System.currentTimeMillis() - trd.RelativeTime;
 
-                trd_list.add(0,trd);
+                trd_list.add(0, trd);
                 //  System.out.println( trd.toTableString());
-                if(trd_list.size() == numberOfRecords) {
-                	// We have the data we want, let's get out
-                	break;
+                if (trd_list.size() == numberOfRecords) {
+                    // We have the data we want, let's get out
+                    break;
                 }
             }
 
 
-            MySocket.close();
+            mySocket.close();
             return trd_list;
-        }catch(SocketTimeoutException s) {
+        } catch (SocketTimeoutException s) {
             Log.e(TAG, "Socket timed out! ", s);
-        }
-        catch(IOException e) {
+        } catch (IOException e) {
             Log.e(TAG, "cought IOException! ", e);
         }
         return trd_list;
     }
 
 
-    public void run()
-    {
-    	Long LastReportedTime = new Date().getTime();
-    	TransmitterRawData LastReportedReading = null;
-    	Log.e(TAG, "Starting... LastReportedReading " + LastReportedReading);
-    	try {
-	        while (!mStop && !interrupted()) {
-	        	// try to read one object...
-                TransmitterRawData[] LastReadingArr = null;
-                if(WixelReader.IsConfigured(mContext)) {
+    public void run() {
+        Long lastReportedTime = new Date().getTime();
+        TransmitterRawData lastReportedReading = null;
+        Log.e(TAG, "Starting... lastReportedReading " + lastReportedReading);
+        try {
+            while (!mStop && !interrupted()) {
+                // try to read one object...
+                TransmitterRawData[] lastReadingArr = null;
+                if (WixelReader.isConfigured(mContext)) {
                     SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
                     String recieversIpAddresses = prefs.getString("wifi_recievers_addresses", "");
-	        		LastReadingArr = Read(recieversIpAddresses ,1);
+                    lastReadingArr = read(recieversIpAddresses, 1);
                 }
-	        	if (LastReadingArr != null  && LastReadingArr.length  > 0) {
-	        		// Last in the array is the most updated reading we have.
-	        		TransmitterRawData LastReading = LastReadingArr[LastReadingArr.length -1];
-
-	        		//if (LastReading.CaptureDateTime > LastReportedReading + 5000) {
-	        		// Make sure we do not report packets from the far future...
-	        		if ((LastReading.CaptureDateTime > LastReportedTime ) &&
-	        		        (!almostEquals(LastReading, LastReportedReading)) &&
-	        		        LastReading.CaptureDateTime < new Date().getTime() + 12000) {
-	        			// We have a real new reading...
-	        			Log.e(TAG, "calling setSerialDataToTransmitterRawData " + LastReading.RawValue +
-	        			        " LastReading.CaptureDateTime " + LastReading.CaptureDateTime + " " + LastReading.TransmissionId);
-	        			setSerialDataToTransmitterRawData(LastReading.RawValue,  LastReading.FilteredValue, LastReading.BatteryLife, LastReading.CaptureDateTime);
-	        			LastReportedReading = LastReading;
-	        			LastReportedTime = LastReading.CaptureDateTime;
-	        		}
-	        	}
-	        	// let's sleep (right now for 30 seconds)
-	        	Thread.sleep(30000);
-	        }
-    	} catch (InterruptedException e) {
-    	    Log.e(TAG, "cought InterruptedException! ", e);
+                if (lastReadingArr != null && lastReadingArr.length > 0) {
+                    // Last in the array is the most updated reading we have.
+                    TransmitterRawData lastReading = lastReadingArr[lastReadingArr.length - 1];
+
+                    //if (lastReading.CaptureDateTime > lastReportedReading + 5000) {
+                    // Make sure we do not report packets from the far future...
+                    if ((lastReading.CaptureDateTime > lastReportedTime) &&
+                            (!almostEquals(lastReading, lastReportedReading)) &&
+                            lastReading.CaptureDateTime < new Date().getTime() + 12000) {
+                        // We have a real new reading...
+                        Log.e(TAG, "calling setSerialDataToTransmitterRawData " + lastReading.RawValue +
+                                " lastReading.CaptureDateTime " + lastReading.CaptureDateTime + " " + lastReading.TransmissionId);
+                        setSerialDataToTransmitterRawData(lastReading.RawValue, lastReading.FilteredValue, lastReading.BatteryLife, lastReading.CaptureDateTime);
+                        lastReportedReading = lastReading;
+                        lastReportedTime = lastReading.CaptureDateTime;
+                    }
+                }
+                // let's sleep (right now for 30 seconds)
+                Thread.sleep(30000);
+            }
+        } catch (InterruptedException e) {
+            Log.e(TAG, "cought InterruptedException! ", e);
             // time to get out...
         }
     }
 
     // this function is only a test function. It is used to set many points fast in order to allow
     // faster testing without real data.
-    public void runFake()
-    {
+    public void runFake() {
         // let's start by faking numbers....
         int i = 0;
         int added = 5;
         while (!mStop) {
             try {
 
-                i+=added;
-                if (i==50) {
+                i += added;
+                if (i == 50) {
                     added = -5;
                 }
-                if (i==0) {
+                if (i == 0) {
                     added = 5;
                 }
 
                 int fakedRaw = 100000 + i * 3000;
                 Log.e(TAG, "calling setSerialDataToTransmitterRawData " + fakedRaw);
-                setSerialDataToTransmitterRawData(fakedRaw, fakedRaw ,100, new Date().getTime());
+                setSerialDataToTransmitterRawData(fakedRaw, fakedRaw, 100, new Date().getTime());
                 Log.e(TAG, "returned from setSerialDataToTransmitterRawData " + fakedRaw);
 
                 Long StartLoop = new Date().getTime();
-                for (int j = 0 ; j < 300; j++) {
+                for (int j = 0; j < 300; j++) {
                     Thread.sleep(1000);
-                    Log.e(TAG, "looping ...." + i + " " + j + " " + (new Date().getTime() - StartLoop)/1000);
-                    if(mStop ) {
-                    // we were asked to leave, so do it....
-						Log.e(TAG, "EXITING mstop=true" );
+                    Log.e(TAG, "looping ...." + i + " " + j + " " + (new Date().getTime() - StartLoop) / 1000);
+                    if (mStop) {
+                        // we were asked to leave, so do it....
+                        Log.e(TAG, "EXITING mstop=true");
                         return;
                     }
                 }
 
 
-               } catch (InterruptedException e) {
-                   // time to get out...
-                   Log.e(TAG, "cought InterruptedException! ", e);
-                   break;
-               }
+            } catch (InterruptedException e) {
+                // time to get out...
+                Log.e(TAG, "cought InterruptedException! ", e);
+                break;
+            }
         }
-		Log.e(TAG, "EXITING mstop=true" );
+        Log.e(TAG, "EXITING mstop=true");
     }
 
-    public void Stop()
-    {
+    public void Stop() {
         mStop = true;
         interrupt();
     }
-    public void setSerialDataToTransmitterRawData(int raw_data, int filtered_data ,int sensor_battery_leve, Long CaptureTime) {
+
+    public void setSerialDataToTransmitterRawData(int raw_data, int filtered_data, int sensor_battery_leve, Long CaptureTime) {
 
         TransmitterData transmitterData = TransmitterData.create(raw_data, sensor_battery_leve, CaptureTime);
         if (transmitterData != null) {

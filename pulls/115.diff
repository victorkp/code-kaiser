diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 6287231..054fd5e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -16,7 +16,6 @@
 import android.view.MenuItem;
 import android.view.View;
 import android.view.ViewGroup;
-import android.view.ViewGroup.LayoutParams;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -354,7 +353,7 @@ private void displayCurrentInfoFromReading(BgReading lastBgReading, boolean pred
             if (!predictive) {
                 estimate = lastBgReading.calculated_value;
                 String stringEstimate = bgGraphBuilder.unitized_string(estimate);
-                String slope_arrow = BgReading.slopeArrow((lastBgReading.calculated_value_slope * 60000));
+                String slope_arrow = lastBgReading.slopeArrow();
                 if (lastBgReading.hide_slope) {
                     slope_arrow = "";
                 }
@@ -362,7 +361,7 @@ private void displayCurrentInfoFromReading(BgReading lastBgReading, boolean pred
             } else {
                 estimate = BgReading.activePrediction();
                 String stringEstimate = bgGraphBuilder.unitized_string(estimate);
-                currentBgValueText.setText(stringEstimate + " " + BgReading.slopeArrow());
+                currentBgValueText.setText(stringEstimate + " " + BgReading.activeSlopeArrow());
             }
         }
         int minutes = (int)(System.currentTimeMillis() - lastBgReading.timestamp) / (60 * 1000);
@@ -376,7 +375,7 @@ private void displayCurrentInfoFromReading(BgReading lastBgReading, boolean pred
                 notificationText.append("\n");
             }
             notificationText.append(
-                    bgGraphBuilder.unitizedDeltaString(lastBgReading.calculated_value - bgReadingList.get(1).calculated_value));
+                    bgGraphBuilder.unitizedDeltaString(true, true));
         }
         if(bgGraphBuilder.unitized(estimate) <= bgGraphBuilder.lowMark) {
             currentBgValueText.setTextColor(Color.parseColor("#C30909"));
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index cb68715..7ba04fd 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -11,12 +11,9 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.query.Select;
-import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalSubrecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.EGVRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.SensorRecord;
 import com.eveningoutpost.dexdrip.Sensor;
-import com.eveningoutpost.dexdrip.Services.DexShareCollectionService;
-import com.eveningoutpost.dexdrip.Services.MissedReadingService;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
@@ -174,6 +171,26 @@ public static double activePrediction() {
         return 0;
     }
 
+
+    public static double calculateSlope(BgReading current, BgReading last) {
+        if (current.timestamp == last.timestamp || current.calculated_value == last.calculated_value) {
+            return 0;
+        } else {
+            return (last.calculated_value - current.calculated_value) / (last.timestamp - current.timestamp);
+        }
+    }
+
+    public static double currentSlope(){
+        List<BgReading> last_2 = BgReading.latest(2);
+        if (last_2.size() == 2) {
+            return calculateSlope(last_2.get(0), last_2.get(1));
+        } else{
+            return 0d;
+        }
+
+    }
+
+
     //*******CLASS METHODS***********//
     public static void create(EGVRecord[] egvRecords, long addativeOffset, Context context) {
         for(EGVRecord egvRecord : egvRecords) { BgReading.create(egvRecord, addativeOffset, context); }
@@ -347,29 +364,31 @@ public static BgReading create(double raw_data, double filtered_data, Context co
         return bgReading;
     }
 
-    public static String slopeArrow() {
+    public static String activeSlopeArrow() {
         double slope = (float) (BgReading.activeSlope() * 60000);
-        return slopeArrow(slope);
+        return slopeToArrowSymbol(slope);
     }
 
-    public static String slopeArrow(double slope) {
-        String arrow;
+    public static String slopeToArrowSymbol(double slope) {
         if (slope <= (-3.5)) {
-            arrow = "\u21ca";
+            return "\u21ca";
         } else if (slope <= (-2)) {
-            arrow = "\u2193";
+            return "\u2193";
         } else if (slope <= (-1)) {
-            arrow = "\u2198";
+            return "\u2198";
         } else if (slope <= (1)) {
-            arrow = "\u2192";
+            return "\u2192";
         } else if (slope <= (2)) {
-            arrow = "\u2197";
+            return "\u2197";
         } else if (slope <= (3.5)) {
-            arrow = "\u2191";
+            return "\u2191";
         } else {
-            arrow = "\u21c8";
+            return "\u21c8";
         }
-        return arrow;
+    }
+
+    public String slopeArrow(){
+        return slopeToArrowSymbol(this.calculated_value_slope*60000);
     }
 
     public String slopeName() {
@@ -539,17 +558,11 @@ public void perform_calculations() {
 
     public void find_slope() {
         List<BgReading> last_2 = BgReading.latest(2);
+
+        assert last_2.get(0)==this : "Invariant condition not fulfilled: calculating slope and current reading wasn't saved before";
+
         if (last_2.size() == 2) {
-            BgReading second_latest = last_2.get(1);
-            double y1 = calculated_value;
-            double x1 = timestamp;
-            double y2 = second_latest.calculated_value;
-            double x2 = second_latest.timestamp;
-            if(y1 == y2) {
-                calculated_value_slope = 0;
-            } else {
-                calculated_value_slope = (y2 - y1)/(x2 - x1);
-            }
+            calculated_value_slope = calculateSlope(this, last_2.get(1));
             save();
         } else if (last_2.size() == 1) {
             calculated_value_slope = 0;
@@ -559,6 +572,7 @@ public void find_slope() {
         }
     }
 
+
     public void find_new_curve() {
         List<BgReading> last_3 = BgReading.latest(3);
         if (last_3.size() == 3) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 6ba5291..e7833de 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -10,12 +10,14 @@
 import com.eveningoutpost.dexdrip.Models.BgReading;
 
 import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.GregorianCalendar;
 import java.util.List;
+import java.util.Locale;
 import java.util.TimeZone;
 
 import lecho.lib.hellocharts.model.Axis;
@@ -61,7 +63,7 @@ public BgGraphBuilder(Context context){
         this.prefs = PreferenceManager.getDefaultSharedPreferences(context);
         this.highMark = Double.parseDouble(prefs.getString("highValue", "170"));
         this.lowMark = Double.parseDouble(prefs.getString("lowValue", "70"));
-        this.doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
+        this.doMgdl = (prefs.getString("units", "mgdl").equals("mgdl"));
         defaultMinY = unitized(40);
         defaultMaxY = unitized(250);
         pointSize = isXLargeTablet(context) ? 5 : 3;
@@ -156,8 +158,8 @@ private void addBgReadingValues() {
 
     public Line highLine() {
         List<PointValue> highLineValues = new ArrayList<PointValue>();
-        highLineValues.add(new PointValue((float)start_time, (float)highMark));
-        highLineValues.add(new PointValue((float)end_time, (float)highMark));
+        highLineValues.add(new PointValue((float) start_time, (float) highMark));
+        highLineValues.add(new PointValue((float) end_time, (float) highMark));
         Line highLine = new Line(highLineValues);
         highLine.setHasPoints(false);
         highLine.setStrokeWidth(1);
@@ -180,8 +182,8 @@ public Line lowLine() {
 
     public Line maxShowLine() {
         List<PointValue> maxShowValues = new ArrayList<PointValue>();
-        maxShowValues.add(new PointValue((float)start_time, (float)defaultMaxY));
-        maxShowValues.add(new PointValue((float)end_time, (float)defaultMaxY));
+        maxShowValues.add(new PointValue((float) start_time, (float) defaultMaxY));
+        maxShowValues.add(new PointValue((float) end_time, (float) defaultMaxY));
         Line maxShowLine = new Line(maxShowValues);
         maxShowLine.setHasLines(false);
         maxShowLine.setHasPoints(false);
@@ -190,8 +192,8 @@ public Line maxShowLine() {
 
     public Line minShowLine() {
         List<PointValue> minShowValues = new ArrayList<PointValue>();
-        minShowValues.add(new PointValue((float)start_time, (float)defaultMinY));
-        minShowValues.add(new PointValue((float)end_time, (float)defaultMinY));
+        minShowValues.add(new PointValue((float) start_time, (float) defaultMinY));
+        minShowValues.add(new PointValue((float) end_time, (float) defaultMinY));
         Line minShowLine = new Line(minShowValues);
         minShowLine.setHasPoints(false);
         minShowLine.setHasLines(false);
@@ -327,21 +329,49 @@ public String unitized_string(double value) {
         }
     }
 
-    public String unitizedDeltaString(double value) {
-        DecimalFormat df = new DecimalFormat("#");
-        df.setMaximumFractionDigits(1);
+    public String unitizedDeltaString(boolean showUnit, boolean highGranularity) {
+
+        List<BgReading> last2 = BgReading.latest(2);
+        if(last2.size() < 2 || last2.get(0).timestamp - last2.get(1).timestamp > 20 * 60 * 1000){
+            // don't show delta if there are not enough values or the values are more than 20 mintes apart
+            return "???";
+        }
+
+        double value = BgReading.currentSlope() * 5*60*1000;
+
+        if(Math.abs(value) > 100){
+            // a delta > 100 will not happen with real BG values -> problematic sensor data
+            return "ERR";
+        }
+
+        // TODO: allow localization from os settings once pebble doesn't require english locale
+        DecimalFormat df = new DecimalFormat("#", new DecimalFormatSymbols(Locale.ENGLISH));
         String delta_sign = "";
-        if (value > 0.1) { delta_sign = "+"; }
+        if (value > 0) { delta_sign = "+"; }
         if(doMgdl) {
-            return delta_sign + df.format(unitized(value)) + " mg/dl";
+
+            if(highGranularity){
+                df.setMaximumFractionDigits(1);
+            } else {
+                df.setMaximumFractionDigits(0);
+            }
+
+            return delta_sign + df.format(unitized(value)) +  (showUnit?" mg/dl":"");
         } else {
+
+            if(highGranularity){
+                df.setMaximumFractionDigits(2);
+            } else {
+                df.setMaximumFractionDigits(1);
+            }
+
             df.setMinimumFractionDigits(1);
             df.setMinimumIntegerDigits(1);
-            return delta_sign + df.format(unitized(value)) + " mmol";
+            return delta_sign + df.format(unitized(value)) + (showUnit?" mmol/l":"");
         }
     }
 
-    public double mmolConvert(double mgdl) {
+    public static double mmolConvert(double mgdl) {
         return mgdl * Constants.MGDL_TO_MMOLL;
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index 40be699..78c8db8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -97,7 +97,10 @@ public static void addToQueue(BgReading bgReading, String operation_type, Contex
                 Log.i("SENSOR QUEUE:", "Broadcast data");
                 final Bundle bundle = new Bundle();
                 bundle.putDouble(Intents.EXTRA_BG_ESTIMATE, bgReading.calculated_value);
-                bundle.putDouble(Intents.EXTRA_BG_SLOPE, bgReading.calculated_value_slope);
+
+                //TODO: change back to bgReading.calculated_value_slope if it will also get calculated for Share data
+                // bundle.putDouble(Intents.EXTRA_BG_SLOPE, bgReading.calculated_value_slope);
+                bundle.putDouble(Intents.EXTRA_BG_SLOPE, BgReading.currentSlope());
                 if (bgReading.hide_slope) {
                     bundle.putString(Intents.EXTRA_BG_SLOPE_NAME, "9");
                 } else {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index 3604745..454e6a8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -339,14 +339,14 @@ public Notification createOngoingNotification(BgGraphBuilder bgGraphBuilder, Con
         NotificationCompat.Builder b = new NotificationCompat.Builder(mContext);
         //b.setOngoing(true);
         b.setCategory(NotificationCompat.CATEGORY_STATUS);
-        String titleString = lastReading == null ? "BG Reading Unavailable" : (lastReading.displayValue(mContext) + " " + BgReading.slopeArrow(lastReading.calculated_value_slope * 60000));
+        String titleString = lastReading == null ? "BG Reading Unavailable" : (lastReading.displayValue(mContext) + " " + lastReading.slopeArrow());
         b.setContentTitle(titleString)
                 .setContentText("xDrip Data collection service is running.")
                 .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
                 .setUsesChronometer(false);
         if (lastReading != null) {
             b.setWhen(lastReading.timestamp);
-            String deltaString = "Delta: " + bgGraphBuilder.unitizedDeltaString(lastReading.calculated_value - lastReadings.get(1).calculated_value);
+            String deltaString = "Delta: " + bgGraphBuilder.unitizedDeltaString(true, true);
             b.setContentText(deltaString);
             iconBitmap = new BgSparklineBuilder(mContext)
                     .setHeight(64)
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
index 58ef742..017e667 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
@@ -134,18 +134,7 @@ public String bgReading() {
     }
 
     public String bgDelta() {
-        String deltaString;
-        if((PreferenceManager.getDefaultSharedPreferences(mContext).getString("units","mgdl").compareTo("mgdl") == 0)) {
-            deltaString = String.format("%.0f", mBgReading.calculated_value_slope * 360000);
-        } else {
-            deltaString = String.format("%.1f", (mBgReading.calculated_value_slope * 360000)*Constants.MGDL_TO_MMOLL);
-        }
-        Log.v(TAG,"bgDelta: "+ deltaString);
-        if(Float.valueOf(deltaString) > 0) {
-            return ("+"+deltaString);
-        } else {
-            return deltaString;
-        }
+        return new BgGraphBuilder(mContext).unitizedDeltaString(false, false);
     }
 
     public String phoneBattery() {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
index d815787..b7483d3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/xDripWidget.java
@@ -82,7 +82,7 @@ private static void displayCurrentInfo(AppWidgetManager appWidgetManager, int ap
             } else {
                 estimate = lastBgreading.calculated_value;
                 String stringEstimate = bgGraphBuilder.unitized_string(estimate);
-                String slope_arrow = BgReading.slopeArrow((lastBgreading.calculated_value_slope * 60000));
+                String slope_arrow = lastBgreading.slopeArrow();
                 if (lastBgreading.hide_slope) {
                     slope_arrow = "--";
                 }
@@ -94,7 +94,7 @@ private static void displayCurrentInfo(AppWidgetManager appWidgetManager, int ap
             List<BgReading> bgReadingList =  BgReading.latest(2);
             if(bgReadingList != null && bgReadingList.size() == 2) {
 
-                views.setTextViewText(R.id.widgetDelta, bgGraphBuilder.unitizedDeltaString(lastBgreading.calculated_value - bgReadingList.get(1).calculated_value));
+                views.setTextViewText(R.id.widgetDelta, bgGraphBuilder.unitizedDeltaString(true, true));
             } else {
                 views.setTextViewText(R.id.widgetDelta, "--");
             }

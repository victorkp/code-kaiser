diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
index d6b2f7c..b82dcd0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
@@ -9,6 +9,7 @@
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.SensorSendQueue;
 
+import java.util.Date;
 import java.util.UUID;
 
 /**
@@ -49,6 +50,18 @@ public static Sensor create(long started_at) {
         Log.d("SENSOR MODEL:", sensor.toString());
         return sensor;
     }
+    
+    public static void stopSensor() {
+        Sensor sensor = currentSensor();
+        if(sensor == null) {
+            return;
+        }
+        sensor.stopped_at = new Date().getTime();
+        Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
+        sensor.save();
+        SensorSendQueue.addToQueue(sensor);
+        
+    }
 
     public static Sensor currentSensor() {
         Sensor sensor = new Select()
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index 966133e..ef02904 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -41,6 +41,7 @@ public void addListenerOnButton() {
 
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
+/*                
                 Sensor sensor = Sensor.currentSensor();
                 sensor.stopped_at = new Date().getTime();
                 Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
@@ -50,6 +51,8 @@ public void onClick(View v) {
                     Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
                     sensor.save();
                 }
+*/
+                Sensor.stopSensor();
                 AlertPlayer.getPlayer().stopAlert(getApplicationContext(),true, false);
 
                 Toast.makeText(getApplicationContext(), "Sensor stopped", Toast.LENGTH_LONG).show();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
index 0685335..a1bff31 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
@@ -6,6 +6,7 @@
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 
+import com.eveningoutpost.dexdrip.Sensor;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
@@ -51,21 +52,26 @@ private boolean sendData() {
         	boolean xDripViewerMode = prefs.getBoolean("xDripViewer_upload_mode", false);
             List<CalibrationSendQueue>calibrationsQueue = CalibrationSendQueue.mongoQueue(xDripViewerMode);
             List<BgSendQueue> bgsQueue = BgSendQueue.mongoQueue( xDripViewerMode);
+            List<SensorSendQueue> sensorsQueue = SensorSendQueue.mongoQueue( xDripViewerMode);
 
             try {
                 List<BgReading> bgReadings = new ArrayList<BgReading>();
                 List<Calibration> calibrations = new ArrayList<Calibration>();
+                List<Sensor> sensors = new ArrayList<Sensor>();
                 for (CalibrationSendQueue job : calibrationsQueue) {
                     calibrations.add(job.calibration);
                 }
                 for (BgSendQueue job : bgsQueue) {
                     bgReadings.add(job.bgReading);
                 }
+                for (SensorSendQueue job : sensorsQueue) {
+                    sensors.add(job.sensor);
+                }
 
-                if(bgReadings.size() + calibrations.size() > 0) {
+                if(bgReadings.size() + calibrations.size() + sensors.size()> 0) {
                 	Log.i(TAG, "uoader.upload called " + bgReadings.size());
                     NightscoutUploader uploader = new NightscoutUploader(context);
-                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations, xDripViewerMode);
+                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations, sensors, xDripViewerMode);
                     if (uploadStatus) {
                     	Log.i(TAG, "Starting to delete objects from queue " + bgsQueue.size() + calibrationsQueue.size());
                         for (CalibrationSendQueue calibration : calibrationsQueue) {
@@ -74,6 +80,9 @@ private boolean sendData() {
                         for (BgSendQueue bgReading : bgsQueue) {
                             bgReading.deleteThis();
                         }
+                        for (SensorSendQueue sensor : sensorsQueue) {
+                            sensor.deleteThis();
+                        }
                         Log.i(TAG, "finished deleting objects from queue " + bgReadings.size());
                     } else {
                     	Log.e(TAG, "uploader.upload returned false - exiting");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index c4814e6..c30b139 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -7,6 +7,8 @@
 import android.os.BatteryManager;
 import android.preference.PreferenceManager;
 
+import com.activeandroid.annotation.Column;
+import com.eveningoutpost.dexdrip.Sensor;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
@@ -96,27 +98,27 @@ public NightscoutUploader(Context context) {
             enableMongoUpload = prefs.getBoolean("cloud_storage_mongodb_enable", false);
         }
 
-        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
+        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) {
             boolean mongoStatus = false;
             boolean apiStatus = false;
 
             if (enableRESTUpload) {
                 long start = System.currentTimeMillis();
                 Log.i(TAG, String.format("Starting upload of %s record using a REST API", glucoseDataSets.size()));
-                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a REST API in %s ms", glucoseDataSets.size(), System.currentTimeMillis() - start));
             }
 
             if (enableMongoUpload) {
                 double start = new Date().getTime();
-                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a Mongo in %s ms", glucoseDataSets.size() + meterRecords.size(), System.currentTimeMillis() - start));
             }
 
             return apiStatus || mongoStatus;
         }
 
-        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
+        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords,List<Sensor> sensors, boolean xDripViewerMode) {
             String baseURLSettings = prefs.getString("cloud_storage_api_base", "");
             ArrayList<String> baseURIs = new ArrayList<String>();
 
@@ -153,7 +155,7 @@ private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDat
 
                     if (apiVersion == 1) {
                         String hashedSecret = Hashing.sha1().hashBytes(secret.getBytes(Charsets.UTF_8)).toString();
-                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                     } else {
                         doLegacyRESTUploadTo(nightscoutService, glucoseDataSets);
                     }
@@ -175,7 +177,7 @@ private void doLegacyRESTUploadTo(NightscoutService nightscoutService, List<BgRe
             postDeviceStatus(nightscoutService, null);
         }
 
-        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) throws Exception {
+        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) throws Exception {
             JSONArray array = new JSONArray();
             for (BgReading record : glucoseDataSets) {
                 populateV1APIBGEntry(array, record, xDripViewerMode);
@@ -186,6 +188,9 @@ private void doRESTUploadTo(NightscoutService nightscoutService, String secret,
             for (Calibration record : calRecords) {
                 populateV1APICalibrationEntry(array, record);
             }
+            for (Sensor record : sensors) {
+                populateV1APISensorEntry(array, record);
+            }
 
             RequestBody body = RequestBody.create(MediaType.parse("application/json"), array.toString());
             Response<ResponseBody> r = nightscoutService.upload(secret, body).execute();
@@ -250,6 +255,9 @@ private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record,
 	            json.put("xDrip_slope_confidence", record.slope_confidence);
 	            json.put("xDrip_sensor_confidence", record.sensor_confidence);
 	            json.put("xDrip_raw_timestamp", record.raw_timestamp);
+	            if(record.sensor != null) {
+	                json.put("xDrip_sensor_uuid", record.sensor.uuid);
+	            }
             }
             json.put("sysTime", format.format(record.timestamp));
             array.put(json);
@@ -279,6 +287,19 @@ private void populateV1APICalibrationEntry(JSONArray array, Calibration record)
             json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
+        
+        private void populateV1APISensorEntry(JSONArray array, Sensor record) throws Exception {
+            JSONObject json = new JSONObject();
+            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
+            format.setTimeZone(TimeZone.getDefault());
+            json.put("type", "sensor");
+            json.put("xDrip_started_at", record.started_at);
+            json.put("xDrip_stopped_at", record.stopped_at);
+            json.put("xDrip_latest_battery_level", record.latest_battery_level);
+            json.put("xDrip_uuid", record.uuid);
+            json.put("sysTime", format.format(record.started_at));
+            array.put(json);
+        }
 
         private void postDeviceStatus(NightscoutService nightscoutService, String apiSecret) throws Exception {
             JSONObject json = new JSONObject();
@@ -293,7 +314,7 @@ private void postDeviceStatus(NightscoutService nightscoutService, String apiSec
         }
 
         private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets,
-                                      List<Calibration> meterRecords,  List<Calibration> calRecords, boolean xDripViewerMode) {
+                                      List<Calibration> meterRecords,  List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) {
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
 
@@ -358,6 +379,9 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
 	                            testData.put("xDrip_slope_confidence", meterRecord.slope_confidence);
 	                            testData.put("xDrip_sensor_confidence", meterRecord.sensor_confidence);
 	                            testData.put("xDrip_raw_timestamp", meterRecord.raw_timestamp);
+	                            if(meterRecord.sensor != null) {
+	                                testData.put("xDrip_sensor_uuid", meterRecord.sensor.uuid);
+	                            }
                             }               
                             testData.put("sysTime", format.format(meterRecord.timestamp));
                             BasicDBObject query = new BasicDBObject("type", "mbg").append("sysTime", format.format(meterRecord.timestamp));
@@ -366,7 +390,9 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
 
                         for (Calibration calRecord : calRecords) {
                             //do not upload undefined slopes
-                            if(calRecord.slope == 0d) break;
+                            if(calRecord.slope == 0d) {
+                                continue;
+                            }
                             // make db object
                             BasicDBObject testData = new BasicDBObject();
                             testData.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
@@ -388,6 +414,20 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             BasicDBObject query = new BasicDBObject("type", "cal").append("sysTime", format.format(calRecord.timestamp));
                             dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
+                        
+                        Log.i(TAG, "The number of sensor records being sent to MongoDB is " + meterRecords.size());
+                        for (Sensor sensor : sensors) {
+                            // make db object
+                            BasicDBObject testData = new BasicDBObject();
+                            testData.put("type", "sensor");
+                            testData.put("xDrip_started_at", sensor.started_at);
+                            testData.put("xDrip_stopped_at", sensor.stopped_at);
+                            testData.put("xDrip_latest_battery_level", sensor.latest_battery_level);
+                            testData.put("xDrip_uuid", sensor.uuid);
+                            testData.put("sysTime", format.format(sensor.started_at));
+                            BasicDBObject query = new BasicDBObject("type", "sensor").append("sysTime", format.format(sensor.started_at));
+                            dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
+                        }
 
                         // TODO: quick port from original code, revisit before release
                         DBCollection dsCollection = db.getCollection(dsCollectionName);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
index 61f8c6f..1bc5f76 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
@@ -7,6 +7,7 @@
 import com.activeandroid.annotation.Table;
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.util.List;
 
@@ -22,23 +23,18 @@
     @Column(name = "success", index = true)
     public boolean success;
 
-
-    public static SensorSendQueue nextSensorJob() {
-        SensorSendQueue job = new Select()
-                .from(SensorSendQueue.class)
-                .where("success =", false)
-                .orderBy("_ID desc")
-                .limit(1)
-                .executeSingle();
-        return job;
-    }
-
-    public static List<SensorSendQueue> queue() {
-        return new Select()
+    
+    public static List<SensorSendQueue> mongoQueue(boolean xDripViewerMode) {
+        List<SensorSendQueue> values = new Select()
                 .from(SensorSendQueue.class)
-                .where("success = ?", false)
                 .orderBy("_ID desc")
+                .limit(xDripViewerMode ? 100 : 0)
                 .execute();
+        if (xDripViewerMode) {
+             java.util.Collections.reverse(values);
+        }
+        return values;
+        
     }
 
     public static void addToQueue(Sensor sensor) {
@@ -46,5 +42,10 @@ public static void addToQueue(Sensor sensor) {
         sensorSendQueue.sensor = sensor;
         sensorSendQueue.success = false;
         sensorSendQueue.save();
+        Log.d("SensorQueue", "New value added to queue!");
+    }
+    
+    public void deleteThis() {
+        this.delete();
     }
 }

diff --git a/app/app.iml b/app/app.iml
index a975fe7..f266c9d 100644
--- a/app/app.iml
+++ b/app/app.iml
@@ -84,23 +84,25 @@
       <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
       <excludeFolder url="file://$MODULE_DIR$/build/tmp" />
     </content>
-    <orderEntry type="jdk" jdkName="Android API 21 Platform" jdkType="Android SDK" />
+    <orderEntry type="jdk" jdkName="Android API 22 Platform" jdkType="Android SDK" />
     <orderEntry type="sourceFolder" forTests="false" />
-    <orderEntry type="library" exported="" name="android-support-v4" level="project" />
     <orderEntry type="library" exported="" name="ActiveAndroid" level="project" />
     <orderEntry type="library" exported="" name="okio-1.2.0" level="project" />
     <orderEntry type="library" exported="" name="okhttp-2.2.0" level="project" />
     <orderEntry type="library" exported="" name="crashlytics-2.2.3" level="project" />
     <orderEntry type="library" exported="" name="answers-1.1.2" level="project" />
-    <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
     <orderEntry type="library" exported="" name="retrofit-1.9.0" level="project" />
     <orderEntry type="library" exported="" name="acra-4.5.0" level="project" />
+    <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.1.1" level="project" />
     <orderEntry type="library" exported="" name="beta-1.1.2" level="project" />
     <orderEntry type="library" exported="" name="gson-2.3.1" level="project" />
+    <orderEntry type="library" exported="" name="appcompat-v7-22.1.1" level="project" />
     <orderEntry type="library" exported="" name="mongo-java-driver-2.10.1" level="project" />
     <orderEntry type="library" exported="" name="usb-serial-for-android-v010" level="project" />
     <orderEntry type="library" exported="" name="pebblekit-2.6.0" level="project" />
     <orderEntry type="library" exported="" name="fabric-1.3.0" level="project" />
     <orderEntry type="library" exported="" name="hellocharts-library-1.1" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.1.1" level="project" />
   </component>
 </module>
\ No newline at end of file
diff --git a/app/build.gradle b/app/build.gradle
index e8ac8e8..9cf85fd 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -21,8 +21,8 @@ android {
 
     defaultConfig {
         applicationId "com.eveningoutpost.dexdrip"
-        minSdkVersion 19
-        targetSdkVersion 22
+        minSdkVersion 17
+        targetSdkVersion 21
         versionCode 1
         versionName "1.0"
     }
diff --git a/app/fabric.properties b/app/fabric.properties
new file mode 100644
index 0000000..0090b74
--- /dev/null
+++ b/app/fabric.properties
@@ -0,0 +1,3 @@
+#Contains API Secret used to validate your application. Commit to internal source control; avoid making secret public.
+#Sat May 02 13:43:05 EDT 2015
+apiSecret=ad0b41fb47539a405707eb76df7fb7d93bff705efd07513b7761ff2df14b978e
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 3b0e4e9..deb0066 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -18,7 +18,6 @@
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.BATTERY_STATS" />
     <uses-permission android:name="android.permission.WRITE_SETTINGS" />
-    <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission." />
 
     <application
@@ -33,7 +32,7 @@
             android:value="DexDrip.db" />
         <meta-data
             android:name="AA_DB_VERSION"
-            android:value="27" />
+            android:value="29" />
 
         <provider
             android:name="com.activeandroid.content.ContentProvider"
@@ -46,6 +45,7 @@
             android:launchMode="singleInstance" >
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
+
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
@@ -104,10 +104,18 @@
         </service>
 
         <activity
+            android:name=".SnoozeActivity"
+            android:label="@string/title_snooze" >
+        </activity>
+        <activity
             android:name=".FakeNumbers"
             android:label="@string/title_activity_fake_numbers" >
         </activity>
         <activity
+            android:name=".EditAlertActivity"
+            android:label="@string/title_activity_edit_alert" >
+        </activity>
+        <activity
             android:name=".DoubleCalibrationActivity"
             android:label="@string/title_activity_double_calibration" >
         </activity>
@@ -120,10 +128,6 @@
             android:label="@string/title_activity_calibration_graph" >
         </activity>
         <activity
-            android:name=".SettingsActivity"
-            android:label="Settings" >
-        </activity>
-        <activity
             android:name=".LicenseAgreementActivity"
             android:label="@string/title_activity_license_agreement" >
         </activity>
@@ -177,9 +181,35 @@
             android:enabled="true"
             android:exported="true" >
         </service>
+
         <meta-data
             android:name="io.fabric.ApiKey"
             android:value="193dbc121e25e5f3e71bb98164ec074378e339df" />
+
+        <receiver android:name=".UtilityModels.NotificationsReceiver" >
+            <intent-filter>
+                <action android:name="com.eveningoutpost.dexdrip.UtilityModels.Notifications" />
+            </intent-filter>
+        </receiver>
+
+        <activity
+            android:name=".AlertList"
+            android:label="@string/title_activity_alert_list" >
+        </activity>
+
+        <service
+            android:name=".Services.SnoozeOnNotificationDismissService"
+            android:exported="false" >
+        </service>
+        <service
+            android:name=".Services.MissedReadingService"
+            android:enabled="true"
+            android:exported="true" >
+        </service>
+        <service
+            android:name=".Services.MissedReadingIntentService"
+            android:exported="false" >
+        </service>
     </application>
 
 </manifest>
diff --git a/app/src/main/assets/migrations/29.sql b/app/src/main/assets/migrations/29.sql
new file mode 100644
index 0000000..b4633db
--- /dev/null
+++ b/app/src/main/assets/migrations/29.sql
@@ -0,0 +1,2 @@
+ALTER TABLE Notifications ADD COLUMN bg_unclear_readings_alert BOOLEAN;
+ALTER TABLE Notifications ADD COLUMN bg_missed_alerts BOOLEAN;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
new file mode 100644
index 0000000..2cb1025
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
@@ -0,0 +1,205 @@
+package com.eveningoutpost.dexdrip;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.util.Log;
+import android.view.Menu;
+import android.view.MenuItem;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.NumberPicker;
+import android.widget.SimpleAdapter;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+
+
+public class AlertList extends Activity {
+    ListView listViewLow;
+    ListView listViewHigh;
+    Button createLowAlert;
+    Button createHighAlert;
+    boolean doMgdl;
+    Context mContext;
+    final int ADD_ALERT = 1;
+    final int EDIT_ALERT = 2;
+    SharedPreferences prefs;
+
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+
+    String stringTimeFromAlert(AlertType alert) {
+        if(alert.all_day) { return "all day"; }
+        String start = timeFormatString(AlertType.time2Hours(alert.start_time_minutes), AlertType.time2Minutes(alert.start_time_minutes));
+        String end = timeFormatString(AlertType.time2Hours(alert.end_time_minutes), AlertType.time2Minutes(alert.end_time_minutes));
+        return start + " - " + end;
+    }
+
+    HashMap<String, String> createAlertMap(AlertType alert) {
+        HashMap<String, String> map = new HashMap<String, String>();
+        String overrideSilentMode = "Override Silent Mode";
+        if(alert.override_silent_mode == false) {
+            overrideSilentMode = "No Alert in Silent Mode";
+        }
+
+        map.put("alertName", alert.name);
+        map.put("alertThreshold", EditAlertActivity.UnitsConvert2Disp(doMgdl, alert.threshold));
+        map.put("alertTime", stringTimeFromAlert(alert));
+        map.put("alertMp3File", shortPath(alert.mp3_file));
+        map.put("alertOverrideSilenceMode", overrideSilentMode);
+        map.put("uuid", alert.uuid);
+
+        return map;
+    }
+
+    ArrayList<HashMap<String, String>> createAlertsMap(boolean above) {
+        ArrayList<HashMap<String, String>> feedList= new ArrayList<HashMap<String, String>>();
+
+        List<AlertType> alerts = AlertType.getAll(above);
+        for (AlertType alert : alerts) {
+            Log.e(TAG, alert.toString());
+            feedList.add(createAlertMap(alert));
+        }
+        return feedList;
+    }
+
+
+    class AlertsOnItemLongClickListener implements AdapterView.OnItemLongClickListener {
+        //      @Override
+        public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
+            ListView lv = (ListView)parent;
+            @SuppressWarnings("unchecked")
+            HashMap<String, String> item = (HashMap<String, String>)lv.getItemAtPosition(position);
+            Log.e(TAG, "Item clicked " + lv.getItemAtPosition(position) + item.get("uuid"));
+
+            //The XML for each item in the list (should you use a custom XML) must have android:longClickable="true"
+            // as well (or you can use the convenience method lv.setLongClickable(true);). This way you can have a list
+            // with only some items responding to longclick. (might be used for non removable alerts)
+
+            Intent myIntent = new Intent(AlertList.this, EditAlertActivity.class);
+            myIntent.putExtra("uuid", item.get("uuid")); //Optional parameters
+            AlertList.this.startActivityForResult(myIntent, EDIT_ALERT);
+            return true;
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_alert_list);
+        mContext = getApplicationContext();
+        listViewLow = (ListView) findViewById(R.id.listView_low);
+        listViewHigh = (ListView) findViewById(R.id.listView_high);
+        prefs =  PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
+
+        addListenerOnButton();
+        FillLists();
+
+        listViewLow.setOnItemLongClickListener(new AlertsOnItemLongClickListener());
+        listViewHigh.setOnItemLongClickListener(new AlertsOnItemLongClickListener());
+    }
+
+
+    public void addListenerOnButton() {
+        createLowAlert = (Button)findViewById(R.id.button_create_low);
+        createHighAlert = (Button)findViewById(R.id.button_create_high);
+
+        createLowAlert.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                Intent myIntent = new Intent(AlertList.this, EditAlertActivity.class);
+                myIntent.putExtra("above", "false");
+                AlertList.this.startActivityForResult(myIntent, ADD_ALERT);
+            }
+
+        });
+
+        createHighAlert.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                Intent myIntent = new Intent(AlertList.this, EditAlertActivity.class);
+                myIntent.putExtra("above", "true");
+                AlertList.this.startActivityForResult(myIntent, ADD_ALERT);
+            }
+        });
+    }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        Log.e(TAG, "onActivityResult called ");
+        if (requestCode == ADD_ALERT || requestCode == EDIT_ALERT) {
+            if(resultCode == RESULT_OK) {
+                Log.e(TAG, "onActivityResult called invalidating...");
+                FillLists();
+            }
+            if (resultCode == RESULT_CANCELED) {
+                //Write your code if there's no result
+            }
+        }
+    }
+
+    void FillLists() {
+        ArrayList<HashMap<String, String>> feedList;
+        feedList = createAlertsMap(false);
+        SimpleAdapter simpleAdapter = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        listViewLow.setAdapter(simpleAdapter);
+
+        feedList = createAlertsMap(true);
+        SimpleAdapter simpleAdapterHigh = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        listViewHigh.setAdapter(simpleAdapterHigh);
+    }
+
+    public String shortPath(String path) {
+
+        if(path != null) {
+            if(path.length() == 0) {
+                return "xDrip Default";
+            }
+            Ringtone ringtone = RingtoneManager.getRingtone(mContext, Uri.parse(path));
+            if (ringtone != null) {
+                return ringtone.getTitle(mContext);
+            } else {
+                String[] segments = path.split("/");
+                if (segments.length > 1) {
+                    return segments[segments.length - 1];
+                }
+            }
+        }
+        return "";
+    }
+
+    public String timeFormatString(int Hour, int Minute) {
+        SimpleDateFormat timeFormat24 = new SimpleDateFormat("HH:mm");
+        String selected = Hour+":"+Minute;
+        if (!android.text.format.DateFormat.is24HourFormat(mContext)) {
+            try {
+                Date date = timeFormat24.parse(selected);
+                SimpleDateFormat timeFormat12 = new SimpleDateFormat("hh:mm aa");
+                return timeFormat12.format(date);
+            } catch (final ParseException e) {
+                e.printStackTrace();
+            }
+        }
+        return selected;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
index b1ad56d..451034f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationGraph.java
@@ -5,10 +5,16 @@
 import android.support.v4.widget.DrawerLayout;
 import android.view.Menu;
 import android.view.MenuItem;
+import android.widget.EditText;
+import android.widget.TextView;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 
+import java.text.DateFormat;
+import java.text.DecimalFormat;
 import java.util.ArrayList;
+import java.util.Date;
 import java.util.List;
 
 import lecho.lib.hellocharts.model.Axis;
@@ -26,11 +32,15 @@
     private LineChartData data;
     public double  start_x = 50;
     public double  end_x = 300;
+    
+    TextView GraphHeader;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_calibration_graph);
+        
+        GraphHeader = (TextView) findViewById(R.id.CalibrationGraphHeader);
     }
     @Override
     protected void onResume(){
@@ -53,20 +63,30 @@ public void setupCharts() {
         List<Calibration> calibrations = Calibration.allForSensor();
         List<PointValue> values = new ArrayList<PointValue>();
         for (Calibration calibration : calibrations) {
-            values.add(new PointValue((float)calibration.estimate_raw_at_time_of_calibration, (float)calibration.bg));
+            PointValue point = new PointValue((float)calibration.estimate_raw_at_time_of_calibration, (float)calibration.bg);
+            String time = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT).format(new Date((long)calibration.raw_timestamp));
+            point.setLabel(time.toCharArray());
+            values.add(point);
         }
 
         Line line = new Line(values);
         line.setColor(Utils.COLOR_BLUE);
         line.setHasLines(false);
-        line.setPointRadius(2);
+        line.setPointRadius(4);
         line.setHasPoints(true);
+        line.setHasLabels(true);
 
         Calibration calibration = Calibration.last();
         List<PointValue> lineValues = new ArrayList<PointValue>();
         if(calibration != null) {
             lineValues.add(new PointValue((float) start_x, (float) (start_x * calibration.slope + calibration.intercept)));
             lineValues.add(new PointValue((float) end_x, (float) (end_x * calibration.slope + calibration.intercept)));
+            
+            DecimalFormat df = new DecimalFormat("#");
+            df.setMaximumFractionDigits(2);
+            df.setMinimumFractionDigits(2);
+            String Header = "slope = " + df.format(calibration.slope) + " intercept = " + df.format(calibration.intercept);
+            GraphHeader.setText(Header);
         }
         Line calibrationLine = new Line(lineValues);
         calibrationLine.setColor(Utils.COLOR_RED);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
new file mode 100644
index 0000000..7a05d7c
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -0,0 +1,693 @@
+package com.eveningoutpost.dexdrip;
+
+import java.text.DecimalFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.app.TimePickerDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.database.Cursor;
+import android.app.Activity;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.database.Cursor;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.provider.MediaStore;
+import android.text.InputType;
+import android.text.Layout;
+import android.text.format.DateFormat;
+import android.text.method.DigitsKeyListener;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.EditText;
+import android.widget.LinearLayout;
+import android.widget.NumberPicker;
+import android.widget.TextView;
+import android.widget.TimePicker;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+import com.eveningoutpost.dexdrip.R;
+
+public class EditAlertActivity extends Activity {
+
+    TextView viewHeader;
+
+    EditText alertText;
+    EditText alertThreshold;
+    EditText alertMp3File;
+    EditText editSnooze;
+
+    Button buttonalertMp3;
+
+    Button buttonSave;
+    Button buttonRemove;
+    Button buttonTest;
+    Button buttonPreSnooze;
+    CheckBox checkboxAllDay;
+
+    LinearLayout layoutTimeBetween;
+    LinearLayout timeInstructions;
+    TextView viewTimeStart;
+    TextView viewTimeEnd;
+
+    int startHour = 0;
+    int startMinute = 0;
+    int endHour = 23;
+    int endMinute = 59;
+
+    int defaultSnooze;
+
+    String audioPath;
+
+    TextView viewAlertOverrideText;
+    CheckBox checkboxAlertOverride;
+    Boolean doMgdl;
+
+    String uuid;
+    Context mContext;
+    boolean above;
+    final int CHOOSE_FILE = 1;
+    final int MIN_ALERT = 40;
+    final int MAX_ALERT = 400;
+
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+
+    String getExtra(Bundle savedInstanceState, String paramName) {
+        String newString;
+        if (savedInstanceState == null) {
+            Bundle extras = getIntent().getExtras();
+            if(extras == null) {
+                newString= null;
+            } else {
+                newString= extras.getString(paramName);
+            }
+        } else {
+            newString= (String) savedInstanceState.getSerializable(paramName);
+        }
+        return newString;
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        mContext = this;
+        setContentView(R.layout.activity_edit_alert);
+
+        viewHeader = (TextView) findViewById(R.id.view_alert_header);
+
+        buttonSave = (Button)findViewById(R.id.edit_alert_save);
+        buttonRemove = (Button)findViewById(R.id.edit_alert_remove);
+        buttonTest = (Button)findViewById(R.id.edit_alert_test);
+        buttonalertMp3 = (Button)findViewById(R.id.Button_alert_mp3_file);
+        buttonPreSnooze = (Button)findViewById(R.id.edit_alert_pre_snooze);
+
+
+        alertText = (EditText) findViewById(R.id.edit_alert_text);
+        alertThreshold = (EditText) findViewById(R.id.edit_alert_threshold);
+        alertMp3File = (EditText) findViewById(R.id.edit_alert_mp3_file);
+
+        checkboxAllDay = (CheckBox) findViewById(R.id.check_alert_time);
+
+        layoutTimeBetween = (LinearLayout) findViewById(R.id.time_between);
+        timeInstructions = (LinearLayout) findViewById(R.id.time_instructions);
+        viewTimeStart = (TextView) findViewById(R.id.view_alert_time_start);
+        viewTimeEnd = (TextView) findViewById(R.id.view_alert_time_end);
+        editSnooze = (EditText) findViewById(R.id.edit_snooze);
+
+        viewAlertOverrideText = (TextView) findViewById(R.id.view_alert_override_silent);
+        checkboxAlertOverride = (CheckBox) findViewById(R.id.check_override_silent);
+        this.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
+        addListenerOnButtons();
+
+        if(BgGraphBuilder.isXLargeTablet(getApplicationContext())) {
+            viewHeader.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonSave.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonRemove.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonTest.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonalertMp3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonSave.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonPreSnooze.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            alertText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            alertThreshold.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            alertMp3File.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+
+            checkboxAllDay.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+
+            viewTimeStart.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            viewTimeEnd.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            editSnooze.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            viewAlertOverrideText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+
+            ((TextView) findViewById(R.id.view_alert_text)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            ((TextView) findViewById(R.id.view_alert_threshold)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            ((TextView) findViewById(R.id.view_alert_default_snooze)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            ((TextView) findViewById(R.id.view_alert_mp3_file)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            ((TextView) findViewById(R.id.view_alert_time)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+
+        }
+        SharedPreferences prefs =  PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
+
+        if(!doMgdl) {
+            alertThreshold.setInputType(InputType.TYPE_CLASS_NUMBER);
+            alertThreshold.setInputType(InputType.TYPE_NUMBER_FLAG_DECIMAL);
+            alertThreshold.setKeyListener(DigitsKeyListener.getInstance(false,true));
+        }
+
+        uuid = getExtra(savedInstanceState, "uuid");
+        String status;
+        if (uuid == null) {
+            // This is a new alert
+            above = Boolean.parseBoolean(getExtra(savedInstanceState, "above"));
+            checkboxAllDay.setChecked(true);
+            checkboxAlertOverride.setChecked(true);
+
+            audioPath = "";
+            alertMp3File.setText(shortPath(audioPath));
+            alertMp3File.setKeyListener(null);
+            defaultSnooze = SnoozeActivity.getDefaultSnooze(above);
+            buttonRemove.setVisibility(View.GONE);
+            // One can not snooze an alert that is still not in the database...
+            buttonPreSnooze.setVisibility(View.GONE);
+            status = "Adding " + (above ? "high" : "low") + " alert";
+            startHour = 0;
+            startMinute = 0;
+            endHour = 23;
+            endMinute = 59;
+
+        } else {
+            // We are editing an alert
+            AlertType at = AlertType.get_alert(uuid);
+            if(at==null) {
+                Log.wtf(TAG, "Error editing alert, when that alert does not exist...");
+                Intent returnIntent = new Intent();
+                setResult(RESULT_CANCELED, returnIntent);
+                finish();
+                return;
+            }
+
+            above =at.above;
+            alertText.setText(at.name);
+            alertThreshold.setText(UnitsConvert2Disp(doMgdl, at.threshold));
+            checkboxAllDay.setChecked(at.all_day);
+            checkboxAlertOverride.setChecked(at.override_silent_mode);
+            defaultSnooze = at.default_snooze;
+            if(defaultSnooze == 0) {
+                SnoozeActivity.getDefaultSnooze(above);
+            }
+
+            audioPath = at.mp3_file;
+            alertMp3File.setText(shortPath(audioPath));
+
+            status = "editing " + (above ? "high" : "low") + " alert";
+            startHour = AlertType.time2Hours(at.start_time_minutes);
+            startMinute = AlertType.time2Minutes(at.start_time_minutes);
+            endHour = AlertType.time2Hours(at.end_time_minutes);
+            endMinute = AlertType.time2Minutes(at.end_time_minutes);
+
+            if(uuid.equals(AlertType.LOW_ALERT_55)) {
+                // This is the 55 alert, can not be edited
+                alertText.setKeyListener(null);
+                alertThreshold.setKeyListener(null);
+                buttonalertMp3.setEnabled(false);
+                checkboxAllDay.setEnabled(false);
+                checkboxAlertOverride.setEnabled(false);
+            }
+        }
+        alertMp3File.setKeyListener(null);
+        viewHeader.setText(status);
+        setDefaultSnoozeSpinner();
+        setPreSnoozeSpinner();
+        enableAllDayControls();
+        enableVibrateControls();
+
+
+    }
+
+    public static String UnitsConvert2Disp(boolean doMgdl, double threshold) {
+        DecimalFormat df = new DecimalFormat("#");
+        if(doMgdl ) {
+            df.setMaximumFractionDigits(0);
+            df.setMinimumFractionDigits(0);
+            return df.format(threshold);
+        } else {
+            df.setMaximumFractionDigits(1);
+            df.setMinimumFractionDigits(1);
+            return df.format(threshold / Constants.MMOLL_TO_MGDL);
+        }
+    }
+
+    double UnitsConvertFromDisp(double threshold ) {
+        if(doMgdl ) {
+            return threshold;
+        } else {
+            return threshold * Constants.MMOLL_TO_MGDL;
+        }
+    }
+
+    void enableAllDayControls() {
+        boolean allDay = checkboxAllDay.isChecked();
+        if(allDay) {
+            layoutTimeBetween.setVisibility(View.GONE);
+            timeInstructions.setVisibility(View.GONE);
+        } else {
+            setTimeRanges();
+        }
+    }
+
+    void enableVibrateControls() {
+        boolean overrideSilence = checkboxAlertOverride.isChecked();
+        if(overrideSilence) {
+            checkboxAlertOverride.setText("");
+        } else {
+            checkboxAlertOverride.setText("Warning, no alert will be played at silent/vibrate mode!!!");
+        }
+    }
+
+    private boolean verifyThreshold(double threshold) {
+        List<AlertType> lowAlerts = AlertType.getAll(false);
+        List<AlertType> highAlerts = AlertType.getAll(true);
+
+        if(threshold < MIN_ALERT || threshold > MAX_ALERT) {
+            Toast.makeText(getApplicationContext(), "threshold has to be between " + MIN_ALERT + " and " + MAX_ALERT,Toast.LENGTH_LONG).show();
+            return false;
+        }
+        if (uuid == null) {
+            // We want to make sure that for each threashold there is only one alert. Otherwise, which file should we play.
+            for (AlertType lowAlert : lowAlerts) {
+                if(lowAlert.threshold == threshold) {
+                    Toast.makeText(getApplicationContext(),
+                            "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+            for (AlertType highAlert : highAlerts) {
+                if(highAlert.threshold == threshold) {
+                    Toast.makeText(getApplicationContext(),
+                            "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        }
+        // high alerts have to be higher than all low alerts...
+        if(above) {
+            for (AlertType lowAlert : lowAlerts) {
+                if(threshold < lowAlert.threshold  ) {
+                    Toast.makeText(getApplicationContext(),
+                            "High alert threshold has to be higher than all low alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        } else {
+            // low alert has to be lower than all high alerts
+            for (AlertType highAlert : highAlerts) {
+                if(threshold > highAlert.threshold  ) {
+                    Toast.makeText(getApplicationContext(),
+                            "Low alert threshold has to be lower than all high alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
+                    return false;
+                }
+            }
+        }
+
+        return true;
+    }
+
+    public void addListenerOnButtons() {
+
+        buttonSave.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+
+                // Check that values are ok.
+                double threshold = 0;
+                try {
+                    threshold = Double.parseDouble((alertThreshold.getText().toString()));
+                }
+                catch (NumberFormatException nfe) {
+                    Log.e(TAG, "Invalid number", nfe);
+                }
+                threshold = UnitsConvertFromDisp(threshold);
+                if(!verifyThreshold(threshold)) {
+                    return;
+                }
+
+                int timeStart = AlertType.toTime(startHour, startMinute);
+                int timeEnd = AlertType.toTime(endHour, endMinute);
+
+                boolean allDay = checkboxAllDay.isChecked();
+                // if 23:59 was set, we increase it to 24:00
+                if(timeStart == AlertType.toTime(23, 59)) {
+                    timeStart++;
+                }
+                if(timeEnd == AlertType.toTime(23, 59)) {
+                    timeEnd++;
+                }
+                if(timeStart == AlertType.toTime(0, 0) &&
+                   timeEnd == AlertType.toTime(24, 0)) {
+                    allDay = true;
+                }
+                if (timeStart == timeEnd && (allDay==false)) {
+                    Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
+                    return;
+                }
+                boolean overrideSilentMode = checkboxAlertOverride.isChecked();
+;
+                String mp3_file = audioPath;
+                if (uuid != null) {
+                    AlertType.update_alert(uuid, alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze);
+                }  else {
+                    AlertType.add_alert(null, alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze);
+                }
+                Intent returnIntent = new Intent();
+                setResult(RESULT_OK,returnIntent);
+                finish();
+            }
+
+        });
+
+        buttonRemove.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+
+
+                if (uuid == null) {
+                    Log.wtf(TAG, "Error remove pressed, while we were removing an alert");
+                }  else {
+                    AlertType.remove_alert(uuid);
+                }
+                Intent returnIntent = new Intent();
+                setResult(RESULT_OK,returnIntent);
+                finish();
+            }
+
+        });
+
+        buttonTest.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                testAlert();
+            }
+
+        });
+
+        buttonalertMp3.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                AlertDialog.Builder builder = new AlertDialog.Builder(mContext);
+                builder.setTitle("What type of Alert?")
+                        .setItems(R.array.alertType, new DialogInterface.OnClickListener() {
+                            public void onClick(DialogInterface dialog, int which) {
+                                if (which == 0) {
+                                    Intent intent = new Intent(RingtoneManager.ACTION_RINGTONE_PICKER);
+                                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TITLE, "Select tone for Alerts:");
+                                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_SILENT, true);
+                                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_SHOW_DEFAULT, true);
+                                    intent.putExtra(RingtoneManager.EXTRA_RINGTONE_TYPE, RingtoneManager.TYPE_ALL);
+                                    startActivityForResult(intent, 999);
+                                } else if (which == 1) {
+                                    Intent fileIntent = new Intent();
+                                    fileIntent.setType("audio/mpeg3");
+                                    fileIntent.setAction(Intent.ACTION_GET_CONTENT);
+                                    startActivityForResult(Intent.createChooser(fileIntent, "Select File for Alert"), CHOOSE_FILE);
+                                } else {
+                                    // Xdrip default was chossen, we live the file name as empty.
+                                    audioPath = "";
+                                    alertMp3File.setText(shortPath(audioPath));
+                                }
+                            }
+                        });
+                AlertDialog dialog = builder.create();
+                dialog.show();
+            }
+       }); //- See more at: http://blog.kerul.net/2011/12/pick-file-using-intentactiongetcontent.html#sthash.c8xtIr1Y.dpuf
+
+        checkboxAllDay.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            //          @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                enableAllDayControls();
+            }
+        });
+
+        checkboxAlertOverride.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            //          @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                enableVibrateControls();
+            }
+        });
+
+        viewTimeStart.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                TimePickerDialog mTimePicker = new TimePickerDialog(mContext, AlertDialog.THEME_HOLO_DARK, new TimePickerDialog.OnTimeSetListener() {
+                    @Override
+                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
+                        startHour = selectedHour;
+                        startMinute = selectedMinute;
+                        setTimeRanges();
+                    }
+                }, 0, 0, DateFormat.is24HourFormat(mContext));
+                mTimePicker.setTitle("Select Time");
+                mTimePicker.show();
+
+            }
+        });
+
+        viewTimeEnd.setOnClickListener(new View.OnClickListener() {
+
+            @Override
+            public void onClick(View v) {
+                TimePickerDialog mTimePicker = new TimePickerDialog(mContext, AlertDialog.THEME_HOLO_DARK, new TimePickerDialog.OnTimeSetListener() {
+                    @Override
+                    public void onTimeSet(TimePicker timePicker, int selectedHour, int selectedMinute) {
+                        endHour = selectedHour;
+                        endMinute = selectedMinute;
+                        setTimeRanges();
+                    }
+                }, 23, 59, DateFormat.is24HourFormat(mContext));
+                mTimePicker.setTitle("Select Time");
+                mTimePicker.show();
+
+            }
+        });
+    }
+
+
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (resultCode == RESULT_OK) {
+            Uri uri = data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
+            if (uri != null) {
+                audioPath = uri.toString();
+                alertMp3File.setText(shortPath(audioPath));
+            } else {
+                if (requestCode == CHOOSE_FILE) {
+                    Uri selectedImageUri = data.getData();
+
+                    // Todo this code is very flacky. Probably need a much better understanding of how the different programs
+                    // select the file names. We might also have to
+                    // - See more at: http://blog.kerul.net/2011/12/pick-file-using-intentactiongetcontent.html#sthash.c8xtIr1Y.cx7s9nxH.dpuf
+
+                    //MEDIA GALLERY
+                    String selectedAudioPath = getPath(selectedImageUri);
+                    if (selectedAudioPath == null) {
+                        //OI FILE Manager
+                        selectedAudioPath = selectedImageUri.getPath();
+                    }
+                    audioPath = selectedAudioPath;
+                    alertMp3File.setText(shortPath(audioPath));
+                }
+            }
+        }
+    }
+
+    public String getPath(Uri uri) {
+        String[] projection = { MediaStore.Images.Media.DATA };
+        Cursor cursor = managedQuery(uri, projection, null, null, null);
+        if(cursor!=null)
+        {
+            //HERE YOU WILL GET A NULLPOINTER IF CURSOR IS NULL
+            //THIS CAN BE, IF YOU USED OI FILE MANAGER FOR PICKING THE MEDIA
+            int column_index;
+            try {
+                column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
+            } catch ( IllegalArgumentException e) {
+                Log.e(TAG, "cursor.getColumnIndexOrThrow failed", e);
+                return null;
+            }
+            cursor.moveToFirst();
+            return cursor.getString(column_index);
+        }   else {
+            return null;
+        }
+    }
+
+    public String timeFormatString(int Hour, int Minute) {
+        SimpleDateFormat timeFormat24 = new SimpleDateFormat("HH:mm");
+        String selected = Hour+":"+Minute;
+        if (!DateFormat.is24HourFormat(mContext)) {
+            try {
+                Date date = timeFormat24.parse(selected);
+                SimpleDateFormat timeFormat12 = new SimpleDateFormat("hh:mm aa");
+                return timeFormat12.format(date);
+            } catch (final ParseException e) {
+                e.printStackTrace();
+            }
+        }
+        return selected;
+    }
+
+    public void setTimeRanges() {
+        timeInstructions.setVisibility(View.VISIBLE);
+        layoutTimeBetween.setVisibility(View.VISIBLE);
+        viewTimeStart.setText(timeFormatString(startHour, startMinute));
+        viewTimeEnd.setText(timeFormatString(endHour, endMinute));
+    }
+
+    public String shortPath(String path) {
+        if(path != null) {
+            if(path.length() == 0) {
+                return "xDrip Default";
+            }
+            Ringtone ringtone = RingtoneManager.getRingtone(mContext, Uri.parse(path));
+            if (ringtone != null) {
+                return ringtone.getTitle(mContext);
+            } else {
+                String[] segments = path.split("/");
+                if (segments.length > 1) {
+                    return segments[segments.length - 1];
+                }
+            }
+        }
+        return "";
+    }
+    public void setDefaultSnoozeSpinner() {
+        editSnooze.setText(String.valueOf(defaultSnooze));
+        editSnooze.setOnTouchListener(new View.OnTouchListener() {
+            @Override
+            public boolean onTouch(View mView, MotionEvent mMotionEvent) {
+                if (mMotionEvent.getAction() == MotionEvent.ACTION_DOWN) {
+                    final Dialog d = new Dialog(mContext);
+                    d.setTitle("Default Snooze");
+                    d.setContentView(R.layout.snooze_picker);
+                    Button b1 = (Button) d.findViewById(R.id.button1);
+                    Button b2 = (Button) d.findViewById(R.id.button2);
+
+                    final NumberPicker snoozeValue = (NumberPicker) d.findViewById(R.id.numberPicker1);
+
+
+                    SnoozeActivity.SetSnoozePickerValues(snoozeValue, above, defaultSnooze);
+                    b1.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            defaultSnooze = SnoozeActivity.getTimeFromSnoozeValue(snoozeValue.getValue());
+                            editSnooze.setText(String.valueOf(defaultSnooze));
+
+                            d.dismiss();
+                        }
+                    });
+                    b2.setOnClickListener(new View.OnClickListener() {
+                        @Override
+                        public void onClick(View v) {
+                            d.dismiss();
+                        }
+                    });
+                    d.show();
+                }
+                    return false;
+
+            }});
+
+    }
+
+    public void setPreSnoozeSpinner() {
+
+
+        buttonPreSnooze.setOnClickListener(new View.OnClickListener() {
+            @Override
+            //public boolean onTouch(View mView, MotionEvent mMotionEvent) {
+            public void onClick(View v) {
+                final Dialog d = new Dialog(mContext);
+                d.setTitle("Snooze this alert...");
+                d.setContentView(R.layout.snooze_picker);
+                Button b1 = (Button) d.findViewById(R.id.button1);
+                Button b2 = (Button) d.findViewById(R.id.button2);
+                b1.setText("pre-Snooze");
+
+                final NumberPicker snoozeValue = (NumberPicker) d.findViewById(R.id.numberPicker1);
+
+                SnoozeActivity.SetSnoozePickerValues(snoozeValue, above, defaultSnooze);
+                b1.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        int intValue = SnoozeActivity.getTimeFromSnoozeValue(snoozeValue.getValue());
+                        AlertPlayer.getPlayer().PreSnooze(getApplicationContext(), uuid, intValue);
+                        d.dismiss();
+                    }
+                });
+                b2.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        d.dismiss();
+                    }
+                });
+                d.show();
+            }});
+
+    }
+
+    public void testAlert() {
+        // Check that values are ok.
+        double threshold = 0;
+        try {
+            threshold = Double.parseDouble((alertThreshold.getText().toString()));
+        }
+        catch (NumberFormatException nfe) {
+            Log.e(TAG, "Invalid number", nfe);
+        }
+        threshold = UnitsConvertFromDisp(threshold);
+        if(!verifyThreshold(threshold)) {
+            return;
+        }
+
+        int timeStart = AlertType.toTime(startHour, startMinute);
+        int timeEnd = AlertType.toTime(endHour, endMinute);
+
+        boolean allDay = checkboxAllDay.isChecked();
+        // if 23:59 was set, we increase it to 24:00
+        if(timeStart == AlertType.toTime(23, 59)) {
+            timeStart++;
+        }
+        if(timeEnd == AlertType.toTime(23, 59)) {
+            timeEnd++;
+        }
+        if(timeStart == AlertType.toTime(0, 0) &&
+                timeEnd == AlertType.toTime(24, 0)) {
+            allDay = true;
+        }
+        if (timeStart == timeEnd && (allDay==false)) {
+            Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
+            return;
+        }
+        boolean overrideSilentMode = checkboxAlertOverride.isChecked();
+        String mp3_file = audioPath;
+        AlertType.testAlert(alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, mContext);
+
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java b/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
index b007039..6e106af 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/FakeNumbers.java
@@ -13,8 +13,11 @@
 import android.widget.EditText;
 import android.widget.TimePicker;
 
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 
+import java.util.Date;
 
 public class FakeNumbers extends Activity {
     public Button button;
@@ -38,13 +41,37 @@ public void addListenerOnButton() {
             public void onClick(View v) {
                 EditText value = (EditText) findViewById(R.id.bg_value);
                 int intValue = Integer.parseInt(value.getText().toString());
+                int filterdValue = intValue;
+                if (intValue > 200) {
+                    filterdValue = (int)(filterdValue * 1.2);
+                }
 
-                BgReading bgReading = BgReading.create(intValue * 1000, getApplicationContext(), new Date().getTime());
+                BgReading bgReading = BgReading.create(intValue * 1000, filterdValue* 1000,  getApplicationContext(), new Date().getTime());
                 Intent intent = new Intent(getApplicationContext(), Home.class);
                 startActivity(intent);
                 finish();
             }
 
         });
+        
+        button = (Button)findViewById(R.id.StartTest);
+        button.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                ActiveBgAlert aba = ActiveBgAlert.getOnly();
+                ActiveBgAlert.ClearData();
+                ActiveBgAlert.Create("some string", true, new Date().getTime());
+                
+                
+            }
+        });
+        
+        button = (Button)findViewById(R.id.StartTestAlerts);
+        button.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                AlertType.testAll(getApplicationContext());
+                BgReading.TestgetUnclearTimes();
+                
+            }
+        });
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 044174d..e7bc18b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -21,12 +21,15 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Services.WixelReader;
 import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
+import com.eveningoutpost.dexdrip.UtilityModels.IdempotentMigrations;
 import com.eveningoutpost.dexdrip.UtilityModels.Intents;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
 import com.eveningoutpost.dexdrip.utils.DatabaseUtil;
@@ -77,6 +80,7 @@ protected void onCreate(Bundle savedInstanceState) {
         PreferenceManager.setDefaultValues(this, R.xml.pref_data_source, false);
         prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         checkEula();
+        new IdempotentMigrations(getApplicationContext()).performAll();
         setContentView(R.layout.activity_home);
     }
 
@@ -192,7 +196,6 @@ public void onPause() {
     }
 
     public void updateCurrentBgInfo() {
-        final TextView currentBgValueText = (TextView) findViewById(R.id.currentBgValueRealTime);
         final TextView notificationText = (TextView)findViewById(R.id.notices);
         notificationText.setText("");
         isBTWixel = CollectionServiceStarter.isBTWixel(getApplicationContext());
@@ -285,6 +288,9 @@ public void updateCurrentBgInfo() {
                 }
             }
         }
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
+            notificationText.append("\n ALERTS CURRENTLY DISABLED");
+        }
         mNavigationDrawerFragment = (NavigationDrawerFragment) getFragmentManager().findFragmentById(R.id.navigation_drawer);
         mNavigationDrawerFragment.setUp(R.id.navigation_drawer, (DrawerLayout) findViewById(R.id.drawer_layout), menu_name, this);
     }
@@ -335,7 +341,7 @@ public void displayCurrentInfo() {
                 currentBgValueText.setTextColor(Color.WHITE);
             }
         }
-    setupCharts();
+        setupCharts();
     }
 
     @Override
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
new file mode 100644
index 0000000..b929db1
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
@@ -0,0 +1,137 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.util.Log;
+import android.provider.BaseColumns;
+
+import com.activeandroid.annotation.Column;
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
+
+import java.text.DateFormat;
+import java.util.Date;
+
+/**
+ * Created by stephenblack on 1/14/15.
+ */
+@Table(name = "ActiveBgAlert", id = BaseColumns._ID)
+public class ActiveBgAlert extends Model {
+    
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    
+    @Column(name = "alert_uuid")
+    public String alert_uuid;
+
+    @Column(name = "is_snoozed") //??? Do we need this
+    public boolean is_snoozed;
+
+    @Column(name = "last_alerted_at") // Do we need this
+    public Long last_alerted_at;
+
+    @Column(name = "next_alert_at")
+    public Long next_alert_at;
+
+    public boolean ready_to_alarm() {
+        if(new Date().getTime() > next_alert_at) {
+            return true;
+        }
+        return false;
+    }
+
+    public void snooze(int minutes) {
+        next_alert_at = new Date().getTime() + minutes * 60000;
+        save();
+    }
+    
+    public String toString() {
+        
+        String alert_uuid = "alert_uuid: " + this.alert_uuid;
+        String is_snoozed = "is_snoozed: " + this.is_snoozed;
+        String last_alerted_at = "last_alerted_at: " + DateFormat.getDateTimeInstance(
+                DateFormat.LONG, DateFormat.LONG).format(new Date(this.last_alerted_at));
+        String next_alert_at = "next_alert_at: " + DateFormat.getDateTimeInstance(
+                DateFormat.LONG, DateFormat.LONG).format(new Date(this.next_alert_at)); 
+
+        return alert_uuid + " " + is_snoozed + " " + last_alerted_at + " "+ next_alert_at;
+        
+        
+    }
+    
+    // We should only have at most one active alert at any given time.
+    // This means that we will only have one of this objects at the database at any given time.
+    // so we have the following static functions: getOnly, saveData, ClearData
+
+    public static ActiveBgAlert getOnly() {
+        ActiveBgAlert aba = new Select()
+                .from(ActiveBgAlert.class)
+                .orderBy("_ID asc")
+                .executeSingle();
+        
+        if (aba != null) {
+            Log.v(TAG, "ActiveBgAlert getOnly aba = " + aba.toString());
+        } else {
+            Log.v(TAG, "ActiveBgAlert getOnly returning null");
+        }
+        
+        return aba;
+    }
+    
+    public static AlertType alertTypegetOnly() {
+        ActiveBgAlert aba = getOnly();
+        
+        if (aba == null) {
+            Log.v(TAG, "ActiveBgAlert: alertTypegetOnly returning null");
+            return null;
+        }
+        
+        AlertType alert = AlertType.get_alert(aba.alert_uuid);
+        if(alert == null) {
+            Log.e(TAG, "alertTypegetOnly did not find the active alert as part of existing alerts. returning null");
+            // removing the alert to be in a better state.
+            ClearData();
+            return null;
+        }
+        if(!alert.uuid.equals(aba.alert_uuid)) {
+            Log.wtf(TAG, "AlertType.get_alert did not return the correct alert");
+        }
+        return alert;
+    }
+    
+    public static void Create(String alert_uuid, boolean is_snoozed, Long next_alert_at) {
+        Log.e(TAG, "ActiveBgAlert Create called");
+        ActiveBgAlert aba = getOnly();
+        if (aba == null) {
+            aba = new ActiveBgAlert();
+        }
+        aba.alert_uuid = alert_uuid;
+        aba.is_snoozed = is_snoozed;
+        aba.last_alerted_at = 0L;
+        aba.next_alert_at = next_alert_at;
+        aba.save();
+    }
+    
+    public static void ClearData() {
+        Log.e(TAG, "ActiveBgAlert ClearData called");
+        ActiveBgAlert aba = getOnly();
+        if (aba != null) {
+            aba.delete();
+        }
+    }
+    
+    public static void ClearIfSnoozeFinished() {
+        Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished called");
+        ActiveBgAlert aba = getOnly();
+        if (aba != null) {
+            if(new Date().getTime() > aba.next_alert_at) {
+                Log.e(TAG, "ActiveBgAlert ClearIfSnoozeFinished deleting allert");
+                aba.delete();
+            }
+        }
+    }
+    
+    
+        
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
new file mode 100644
index 0000000..3dfe5fa
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
@@ -0,0 +1,487 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.R.bool;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.provider.BaseColumns;
+import android.util.Log;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Services.MissedReadingService;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.annotations.Expose;
+import com.google.gson.internal.bind.DateTypeAdapter;
+
+import java.text.DateFormat;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.List;
+import java.util.UUID;
+
+/**
+ * Created by stephenblack on 1/14/15.
+ */
+@Table(name = "AlertType", id = BaseColumns._ID)
+public class AlertType extends Model {
+
+    @Column(name = "name")
+    public String name;
+
+    @Column(name = "active")
+    public boolean active;
+
+    @Column(name = "volume")
+    public int volume;
+
+    @Column(name = "vibrate")
+    public boolean vibrate;
+
+    @Column(name = "light")
+    public boolean light;
+
+    @Column(name = "override_silent_mode")
+    public boolean override_silent_mode;
+
+    @Column(name = "predictive")
+    public boolean predictive;
+
+    @Column(name = "time_until_threshold_crossed")
+    public double time_until_threshold_crossed;
+
+    // If it is not above, then it must be below.
+    @Column(name = "above")
+    public boolean above;
+
+    @Column(name = "threshold")
+    public double threshold;
+
+    @Column(name = "all_day")
+    public boolean all_day;
+
+    @Column(name = "start_time_minutes")
+    public int start_time_minutes;  // This have probable be in minutes from start of day. this is not time...
+
+    @Column(name = "end_time_minutes")
+    public int end_time_minutes;
+
+    @Column(name = "minutes_between") //??? what is the difference between minutes_between and default_snooze ???
+    public int minutes_between; // The idea here was if ignored it will go off again each x minutes, snooze would be if it was aknowledged and dismissed it will go off again in y minutes
+    // that said, Im okay with doing away with the minutes between and just doing it at a set 5 mins like dex
+
+    @Column(name = "default_snooze")
+    public int default_snooze;
+
+    @Column(name = "text") // ??? what's that? is it different from name?
+    public String text; // I figured if we wanted some special text, Its
+
+    @Column(name = "mp3_file")
+    public String mp3_file;
+
+    @Column(name = "uuid", index = true)
+    public String uuid;
+
+    public final static String LOW_ALERT_55 = "c5f1999c-4ec5-449e-adad-3980b172b920";
+    private final static String TAG = Notifications.class.getSimpleName();
+    private final static String TAG_ALERT = "AlertBg";
+
+    public static AlertType get_alert(String uuid) {
+
+        return new Select()
+        .from(AlertType.class)
+        .where("uuid = ? ", uuid)
+        .executeSingle();
+    }
+
+    /*
+     * This function has 3 needs. In the case of "unclear state" return null
+     * In the case of "unclear state" for more than predefined time, return the "55" alert
+     * In case that alerts are turned off, only return the 55.
+     */
+    public static AlertType get_highest_active_alert(Context context, double bg) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
+            Log.w("NOTIFICATIONS", "Notifications are currently disabled!!");
+            return null;
+        }
+
+        checkIfMissedReadingAlert(context);
+
+        Boolean bg_unclear_readings_alerts = prefs.getBoolean("bg_unclear_readings_alerts", false);
+        Long UnclearTimeSetting = Long.parseLong(prefs.getString("bg_unclear_readings_minutes", "90")) * 60000;
+
+        Long UnclearTime = BgReading.getUnclearTime(UnclearTimeSetting);
+        AlertType at;
+        if (UnclearTime >= UnclearTimeSetting && bg_unclear_readings_alerts ) {
+            Log.w("NOTIFICATIONS", "Readings have been unclear for too long!!");
+            Notifications.getInstance(context).bgUnclearAlert(context);
+        }
+        if (UnclearTime > 0) {
+            Log.e(TAG_ALERT, "We are in an clear state, but not for too long.");
+        }
+        at = get_highest_active_alert_helper(bg);
+        if (at != null) {
+            Log.e(TAG_ALERT, "get_highest_active_alert_helper returned alert uuid = " + at.uuid + " alert name = " + at.name);
+        } else {
+            Log.e(TAG_ALERT, "get_highest_active_alert_helper returned NULL");
+        }
+        return at;
+    }
+
+    public static void checkIfMissedReadingAlert(Context context){
+        context.startService(new Intent(context, MissedReadingService.class));
+    }
+
+
+
+    // bg_minute is the estimatin of the bg change rate
+    private static AlertType get_highest_active_alert_helper(double bg) {
+        // Chcek the low alerts
+
+        List<AlertType> lowAlerts  = new Select()
+            .from(AlertType.class)
+            .where("threshold >= ?", bg)
+            .where("above = ?", false)
+            .orderBy("threshold asc")
+            .execute();
+
+        for (AlertType lowAlert : lowAlerts) {
+            if(lowAlert.should_alarm(bg)) {
+                return lowAlert;
+            }
+        }
+
+        // If no low alert found, check higher alert.
+        List<AlertType> HighAlerts  = new Select()
+            .from(AlertType.class)
+            .where("threshold <= ?", bg)
+            .where("above = ?", true)
+            .orderBy("threshold desc")
+            .execute();
+
+        for (AlertType HighAlert : HighAlerts) {
+            //Log.e(TAG, "Testing high alert " + HighAlert.toString());
+            if(HighAlert.should_alarm(bg)) {
+                return HighAlert;
+            }
+        }
+        // no alert found
+        return null;
+    }
+
+    // returns true, if one allert is up and the second is down
+    public static boolean OpositeDirection(AlertType a1, AlertType a2) {
+        if (a1.above != a2.above) {
+            return true;
+        }
+        return false;
+    }
+
+    // Checks if a1 is more important than a2. returns the higher one
+    public static AlertType HigherAlert(AlertType a1, AlertType a2) {
+        if (a1.above && !a2.above) {
+            return a2;
+        }
+        if (!a1.above && a2.above) {
+            return a1;
+        }
+        if (a1.above && a2.above) {
+            // both are high, the higher the better
+            if (a1.threshold > a2.threshold) {
+                return a1;
+            } else {
+                return a2;
+            }
+        }
+        if (a1.above || a2.above) {
+            Log.wtf(TAG, "a1.above and a2.above must be false");
+        }
+        // both are low, the lower the better
+        if (a1.threshold < a2.threshold) {
+            return a1;
+        } else {
+            return a2;
+        }
+    }
+
+    public static void remove_all() {
+        List<AlertType> Alerts  = new Select()
+        .from(AlertType.class)
+        .execute();
+
+        for (AlertType alert : Alerts) {
+            alert.delete();
+        }
+        ActiveBgAlert.ClearData();
+    }
+
+    public static void add_alert(
+            String uuid,
+            String name,
+            boolean above,
+            double threshold,
+            boolean all_day,
+            int minutes_between,
+            String mp3_file,
+            int start_time_minutes,
+            int end_time_minutes,
+            boolean override_silent_mode,
+            int snooze) {
+        AlertType at = new AlertType();
+        at.name = name;
+        at.above = above;
+        at.threshold = threshold;
+        at.all_day = all_day;
+        at.minutes_between = minutes_between;
+        at.uuid = uuid != null? uuid : UUID.randomUUID().toString();
+        at.active = true;
+        at.mp3_file = mp3_file;
+        at.start_time_minutes = start_time_minutes;
+        at.end_time_minutes = end_time_minutes;
+        at.override_silent_mode = override_silent_mode;
+        at.default_snooze = snooze;
+        at.save();
+    }
+
+    public static void update_alert(
+            String uuid,
+            String name,
+            boolean above,
+            double threshold,
+            boolean all_day,
+            int minutes_between,
+            String mp3_file,
+            int start_time_minutes,
+            int end_time_minutes,
+            boolean override_silent_mode,
+            int snooze) {
+
+        if(uuid.equals(LOW_ALERT_55)) {
+            // This alert can not be removed/updated
+            return;
+        }
+
+        AlertType at = get_alert(uuid);
+        at.name = name;
+        at.above = above;
+        at.threshold = threshold;
+        at.all_day = all_day;
+        at.minutes_between = minutes_between;
+        at.uuid = uuid;
+        at.active = true;
+        at.mp3_file = mp3_file;
+        at.start_time_minutes = start_time_minutes;
+        at.end_time_minutes = end_time_minutes;
+        at.override_silent_mode = override_silent_mode;
+        at.default_snooze = snooze;
+        at.save();
+    }
+    public static void remove_alert(String uuid) {
+        if(uuid.equals(LOW_ALERT_55)) {
+            // This alert can not be removed/updated
+            return;
+        }
+        AlertType alert = get_alert(uuid);
+		if(alert != null) {
+	        alert.delete();
+        }
+    }
+
+    public String toString() {
+
+        String name = "name: " + this.name;
+        String above = "above: " + this.above;
+        String threshold = "threshold: " + this.threshold;
+        String all_day = "all_day: " + this.all_day;
+        String time = "Start time: " + this.start_time_minutes + " end time: "+ this.end_time_minutes;
+        String minutes_between = "minutes_between: " + this.minutes_between;
+        String uuid = "uuid: " + this.uuid;
+
+        return name + " " + above + " " + threshold + " "+ all_day + " " +time +" " + minutes_between + " uuid" + uuid;
+    }
+
+    public static void print_all() {
+        List<AlertType> Alerts  = new Select()
+            .from(AlertType.class)
+            .execute();
+
+        Log.e(TAG,"List of all alerts");
+        for (AlertType alert : Alerts) {
+            Log.e(TAG, alert.toString());
+        }
+    }
+
+    public static List<AlertType> getAll(boolean above) {
+        String order;
+        if (above) {
+            order = "threshold asc";
+        } else {
+            order = "threshold desc";
+        }
+        List<AlertType> alerts  = new Select()
+            .from(AlertType.class)
+            .where("above = ?", above)
+            .orderBy(order)
+            .execute();
+
+        return alerts;
+    }
+
+
+
+    // This function is used to make sure that we always have a static alert on 55 low.
+    // This alert will not be editable/removable.
+    public static void CreateStaticAlerts() {
+        if(get_alert(LOW_ALERT_55) == null) {
+            add_alert(LOW_ALERT_55, "low alert (unchangable)", false, 55, true, 1, null, 0, 0, true, 20);
+        }
+    }
+
+
+    public static void testAll(Context context) {
+
+        remove_all();
+        add_alert(null, "high alert 1", true, 180, true, 10, null, 0, 0, true, 20);
+        add_alert(null, "high alert 2", true, 200, true, 10, null, 0, 0, true, 20);
+        add_alert(null, "high alert 3", true, 220, true, 10, null, 0, 0, true, 20);
+        print_all();
+        AlertType a1 = get_highest_active_alert(context, 190);
+        Log.e(TAG, "a1 = " + a1.toString());
+        AlertType a2 = get_highest_active_alert(context, 210);
+        Log.e(TAG, "a2 = " + a2.toString());
+
+
+        AlertType a3 = get_alert(a1.uuid);
+        Log.e(TAG, "a1 == a3 ? need to see true " + (a1==a3) + a1 + " " + a3);
+
+        add_alert(null, "low alert 1", false, 80, true, 10, null, 0, 0, true, 20);
+        add_alert(null, "low alert 2", false, 60, true, 10, null, 0, 0, true, 20);
+
+        AlertType al1 = get_highest_active_alert(context, 90);
+        Log.e(TAG, "al1 should be null  " + al1);
+        al1 = get_highest_active_alert(context, 80);
+        Log.e(TAG, "al1 = " + al1.toString());
+        AlertType al2 = get_highest_active_alert(context, 50);
+        Log.e(TAG, "al2 = " + al2.toString());
+
+        Log.e(TAG, "HigherAlert(a1, a2) = a1?" +  (HigherAlert(a1,a2) == a2));
+        Log.e(TAG, "HigherAlert(al1, al2) = al1?" +  (HigherAlert(al1,al2) == al2));
+        Log.e(TAG, "HigherAlert(a1, al1) = al1?" +  (HigherAlert(a1,al1) == al1));
+        Log.e(TAG, "HigherAlert(al1, a2) = al1?" +  (HigherAlert(al1,a2) == al1));
+
+        // Make sure we do not influance on real data...
+        remove_all();
+
+    }
+
+
+    private boolean in_time_frame() {
+        if (all_day) {
+            //Log.e(TAG, "in_time_frame returning true " );
+            return true;
+        }
+        // time_now is the number of minutes that have passed from the start of the day.
+        Calendar rightNow = Calendar.getInstance();
+        int time_now = toTime(rightNow.get(Calendar.HOUR_OF_DAY), rightNow.get(Calendar.MINUTE));
+        Log.e(TAG, "time_now is " + time_now + " minutes" + " start_time " + start_time_minutes + " end_time " + end_time_minutes);
+        if(start_time_minutes < end_time_minutes) {
+            if (time_now >= start_time_minutes && time_now <= end_time_minutes) {
+                return true;
+            }
+        } else {
+            if (time_now >= start_time_minutes || time_now <= end_time_minutes) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private boolean beyond_threshold(double bg) {
+        if (above && bg >= threshold) {
+//            Log.e(TAG, "beyond_threshold returning true " );
+            return true;
+        } else if (!above && bg <= threshold) {
+            return true;
+        }
+        return false;
+    }
+
+    private boolean trending_to_threshold(double bg) {
+        if (!predictive) { return false; }
+        if (above && bg >= threshold) {
+            return true;
+        } else if (!above && bg <= threshold) {
+            return true;
+        }
+        return false;
+    }
+
+    public boolean should_alarm(double bg) {
+//        Log.e(TAG, "should_alarm called active =  " + active );
+        if(in_time_frame() && active && (beyond_threshold(bg) || trending_to_threshold(bg))) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public static void testAlert(
+        String name,
+        boolean above,
+        double threshold,
+        boolean all_day,
+        int minutes_between,
+        String mp3_file,
+        int start_time_minutes,
+        int end_time_minutes,
+        boolean override_silent_mode,
+        int snooze,
+        Context context) {
+            AlertType at = new AlertType();
+            at.name = name;
+            at.above = above;
+            at.threshold = threshold;
+            at.all_day = all_day;
+            at.minutes_between = minutes_between;
+            at.uuid = UUID.randomUUID().toString();
+            at.active = true;
+            at.mp3_file = mp3_file;
+            at.start_time_minutes = start_time_minutes;
+            at.end_time_minutes = end_time_minutes;
+            at.override_silent_mode = override_silent_mode;
+            at.default_snooze = snooze;
+            new AlertPlayer().getPlayer().startAlert(context, at, "TEST");
+    }
+
+    // Time is calculated in minutes. that is 01:20 means 80 minutes.
+
+    // This functions are a bit tricky. We can only set time from 00:00 to 23:59 which leaves one minute out. this is because we ignore the
+    // seconds. so if the user has set 23:59 we will consider this as 24:00
+    // This will be done at the code that reads the time from the ui.
+
+
+
+    // return the minutes part of the time
+    public static int time2Minutes(int minutes) {
+        return (minutes - 60*time2Hours(minutes)) ;
+    }
+
+ // return the hours part of the time
+    public static int time2Hours(int minutes) {
+        return minutes / 60;
+    }
+
+    // create the time from hours and minutes.
+    public static int toTime(int hours, int minutes) {
+        return hours * 60 + minutes;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index 3bedf0b..9a17307 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -26,12 +26,14 @@
 
 import java.text.DecimalFormat;
 import java.util.Date;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.UUID;
 
 @Table(name = "BgReadings", id = BaseColumns._ID)
 public class BgReading extends Model {
     private final static String TAG = BgReading.class.getSimpleName();
+    private final static String TAG_ALERT = "AlertBg";
     //TODO: Have these as adjustable settings!!
     public final static double BESTOFFSET = (60000 * 0); // Assume readings are about x minutes off from actual!
 
@@ -218,10 +220,11 @@ public static void create(EGVRecord egvRecord, long addativeOffset, Context cont
             if(egvRecord.getTrend().friendlyTrendName().compareTo("NOT_COMPUTABLE") == 0 || egvRecord.getTrend().friendlyTrendName().compareTo("OUT_OF_RANGE") == 0) {
                 bgReading.hide_slope = true;
             }
+
             bgReading.save();
             bgReading.find_new_curve();
             bgReading.find_new_raw_curve();
-            Notifications.notificationSetter(context);
+            Notifications.getInstance(context).notificationSetter(context);
             BgSendQueue.addToQueue(bgReading, "create", context);
         }
     }
@@ -232,7 +235,7 @@ public static BgReading getForTimestamp(double timestamp) {
             BgReading bgReading = new Select()
                     .from(BgReading.class)
                     .where("Sensor = ? ", sensor.getId())
-                    .where("timestamp <= ?",  (timestamp + (60*1000))) // 1 minute padding (should never be that far off, but why not)
+                    .where("timestamp <= ?", (timestamp + (60 * 1000))) // 1 minute padding (should never be that far off, but why not)
                     .where("calculated_value = 0")
                     .where("raw_calculated = 0")
                     .orderBy("timestamp desc")
@@ -265,7 +268,7 @@ public static boolean is_new(SensorRecord sensorRecord, long addativeOffset) {
         return true;
     }
 
-    public static BgReading create(double raw_data, Context context, Long timestamp) {
+    public static BgReading create(double raw_data, double filtered_data, Context context, Long timestamp) {
         BgReading bgReading = new BgReading();
         Sensor sensor = Sensor.currentSensor();
         if (sensor != null) {
@@ -274,7 +277,7 @@ public static BgReading create(double raw_data, Context context, Long timestamp)
                 bgReading.sensor = sensor;
                 bgReading.sensor_uuid = sensor.uuid;
                 bgReading.raw_data = (raw_data / 1000);
-                bgReading.filtered_data = (raw_data / 1000);
+                bgReading.filtered_data = (filtered_data / 1000);
                 bgReading.timestamp = timestamp;
                 bgReading.uuid = UUID.randomUUID().toString();
                 bgReading.time_since_sensor_started = bgReading.timestamp - sensor.started_at;
@@ -292,7 +295,7 @@ public static BgReading create(double raw_data, Context context, Long timestamp)
                 bgReading.calibration = calibration;
                 bgReading.calibration_uuid = calibration.uuid;
                 bgReading.raw_data = (raw_data/1000);
-                bgReading.filtered_data = (raw_data/1000);
+                bgReading.filtered_data = (filtered_data/1000);
                 bgReading.timestamp = timestamp;
                 bgReading.uuid = UUID.randomUUID().toString();
                 bgReading.time_since_sensor_started = bgReading.timestamp - sensor.started_at;
@@ -321,7 +324,7 @@ public static BgReading create(double raw_data, Context context, Long timestamp)
 
                 bgReading.save();
                 bgReading.perform_calculations();
-                Notifications.notificationSetter(context);
+                Notifications.getInstance(context).notificationSetter(context);
                 BgSendQueue.addToQueue(bgReading, "create", context);
             }
         }
@@ -669,4 +672,158 @@ public String noiseValue() {
             return String.valueOf(noise);
         }
     }
+
+    // Should that be combined with noiseValue?
+    private Boolean Unclear() {
+        Log.e(TAG_ALERT, "Unclear filtered_data=" + filtered_data + " raw_data=" + raw_data);
+        if (raw_data > filtered_data * 1.3 || raw_data < filtered_data * 0.7) {
+            return true;
+        }
+        return false;
+    }
+
+    /*
+     * returns the time (in ms) that the state is not clear and no alerts should work
+     * The base of the algorithm is that any period can be bad or not. bgReading.Unclear() tells that.
+     * a non clear bgReading means MAX_INFLUANCE time after it we are in a bad position
+     * Since this code is based on hurstics, and since times are not acurate, boundery issues can be ignored.
+     *
+     * interstingTime is the period to check. That is if the last period is bad, we want to know how long does it go bad...
+     * */
+
+    static final int MAX_INFLUANCE = 30 * 60000; // A bad point means data is untrusted for 30 minutes.
+    private static Long getUnclearTimeHelper(List<BgReading> latest, Long interstingTime, final Long now) {
+
+        // The code ignores missing points (that is they some times are treated as good and some times as bad.
+        // If this bothers someone, I believe that the list should be filled with the missing points as good and continue to run.
+
+        Long LastGoodTime = 0l; // 0 represents that we are not in a good part
+
+        Long UnclearTime = 0l;
+        for(BgReading bgReading : latest) {
+            // going over the readings from latest to first
+            if(bgReading.timestamp < now - (interstingTime + MAX_INFLUANCE)) {
+                // Some readings are missing, we can stop checking
+                break;
+            }
+            if(bgReading.timestamp <= now - MAX_INFLUANCE && UnclearTime == 0) {
+                Log.e(TAG_ALERT, "We did not have a problematic reading for MAX_INFLUANCE time, so now all is well");
+                return 0l;
+
+            }
+            if (bgReading.Unclear()) {
+                // here we assume that there are no missing points. Missing points might join the good and bad values as well...
+                // we should have checked if we have a period, but it is hard to say how to react to them.
+                Log.e(TAG_ALERT, "We have a bad reading, so setting UnclearTime to " + bgReading.timestamp);
+                UnclearTime = bgReading.timestamp;
+                LastGoodTime = 0l;
+            } else {
+                if (LastGoodTime == 0l) {
+                    Log.e(TAG_ALERT, "We are starting a good period at "+ bgReading.timestamp);
+                    LastGoodTime = bgReading.timestamp;
+                } else {
+                    // we have some good period, is it good enough?
+                    if(LastGoodTime - bgReading.timestamp >= MAX_INFLUANCE) {
+                        Log.e(TAG_ALERT, "We have a good period from " + bgReading.timestamp + " to " + LastGoodTime + "returning " + (now - UnclearTime +60000));
+                        return now - UnclearTime + 5 *60000;
+                    }
+                }
+            }
+        }
+        // if we are here, we have a problem... or not.
+        if(UnclearTime == 0l) {
+            Log.e(TAG_ALERT, "Since we did not find a good period, but we also did not find a single bad value, we assume things are good");
+            return 0l;
+        }
+        Log.e(TAG_ALERT, "We scanned all over, but could not find a good period. we have a bad value, so assuming that the whole period is bad" +
+                " returning " + interstingTime);
+        // Note that we might now have all the points, and in this case, since we don't have a good period I return a bad period.
+        return interstingTime;
+
+    }
+
+    // This is to enable testing of the function, by passing different values
+    public static Long getUnclearTime(Long interstingTime) {
+        List<BgReading> latest = BgReading.latest((interstingTime.intValue() + MAX_INFLUANCE)/ 60000 /5 );
+        if (latest == null) {
+            return 0L;
+        }
+        final Long now = new Date().getTime();
+        return getUnclearTimeHelper(latest, interstingTime, now);
+
+    }
+
+    public static Long getTimeSinceLastReading() {
+        BgReading bgReading = BgReading.last();
+        if (bgReading != null) {
+            return (new Date().getTime() - bgReading.timestamp);
+        }
+        return (long) 0;
+    }
+
+    // the input of this function is a string. each char can be g(=good) or b(=bad) or s(=skip, point unmissed).
+    static List<BgReading> createlatestTest(String input, Long now) {
+        List<BgReading> out = new LinkedList<BgReading> ();
+        char[] chars=  input.toCharArray();
+        for(int i=0; i < chars.length; i++) {
+            BgReading bg = new BgReading();
+            bg.timestamp = now - i * 5 * 60000;
+            bg.raw_data = 150;
+            if(chars[i] == 'g') {
+                bg.filtered_data = 151;
+            } else if (chars[i] == 'b') {
+                bg.filtered_data = 130;
+            } else {
+                continue;
+            }
+            out.add(bg);
+        }
+        return out;
+
+
+    }
+    static void TestgetUnclearTime(String input, Long interstingTime, Long expectedResult) {
+        final Long now = new Date().getTime();
+        List<BgReading> readings = createlatestTest(input, now);
+        Long result = getUnclearTimeHelper(readings, interstingTime * 60000, now);
+        if (result == expectedResult * 60000) {
+            Log.e(TAG_ALERT, "Test passed");
+        } else {
+            Log.e(TAG_ALERT, "Test failed expectedResult = " + expectedResult + " result = "+ result /5 / 60000);
+        }
+
+    }
+
+    public static void TestgetUnclearTimes() {
+        TestgetUnclearTime("gggggggggggggggggggggggg", 90l, 0l * 5);
+        TestgetUnclearTime("bggggggggggggggggggggggg", 90l, 1l * 5);
+        TestgetUnclearTime("bbgggggggggggggggggggggg", 90l, 2l *5 );
+        TestgetUnclearTime("gbgggggggggggggggggggggg", 90l, 2l * 5);
+        TestgetUnclearTime("gbgggbggbggbggbggbggbgbg", 90l, 18l * 5);
+        TestgetUnclearTime("bbbgggggggbbgggggggggggg", 90l, 3l * 5);
+        TestgetUnclearTime("ggggggbbbbbbgggggggggggg", 90l, 0l * 5);
+        TestgetUnclearTime("ggssgggggggggggggggggggg", 90l, 0l * 5);
+        TestgetUnclearTime("ggssbggssggggggggggggggg", 90l, 5l * 5);
+        TestgetUnclearTime("bb",                       90l, 18l * 5);
+
+        // intersting time is 2 minutes, we should always get 0 (in 5 minutes units
+        TestgetUnclearTime("gggggggggggggggggggggggg", 2l, 0l  * 5);
+        TestgetUnclearTime("bggggggggggggggggggggggg", 2l, 2l);
+        TestgetUnclearTime("bbgggggggggggggggggggggg", 2l, 2l);
+        TestgetUnclearTime("gbgggggggggggggggggggggg", 2l, 2l);
+        TestgetUnclearTime("gbgggbggbggbggbggbggbgbg", 2l, 2l);
+
+        // intersting time is 10 minutes, we should always get 0 (in 5 minutes units
+        TestgetUnclearTime("gggggggggggggggggggggggg", 10l, 0l  * 5);
+        TestgetUnclearTime("bggggggggggggggggggggggg", 10l, 1l * 5);
+        TestgetUnclearTime("bbgggggggggggggggggggggg", 10l, 2l * 5);
+        TestgetUnclearTime("gbgggggggggggggggggggggg", 10l, 2l * 5);
+        TestgetUnclearTime("gbgggbggbggbggbggbggbgbg", 10l, 2l * 5);
+        TestgetUnclearTime("bbbgggggggbbgggggggggggg", 10l, 2l * 5);
+        TestgetUnclearTime("ggggggbbbbbbgggggggggggg", 10l, 0l * 5);
+        TestgetUnclearTime("ggssgggggggggggggggggggg", 10l, 0l * 5);
+        TestgetUnclearTime("ggssbggssggggggggggggggg", 10l, 2l * 5);
+        TestgetUnclearTime("bb",                       10l, 2l * 5);
+    }
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index f59f2c4..926d4b5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -228,7 +228,7 @@ public static void initialCalibration(double bg1, double bg2, Context context) {
         }
         adjustRecentBgReadings(5);
         CalibrationRequest.createOffset(lowerCalibration.bg, 35);
-        Notifications.notificationSetter(context);
+        Notifications.getInstance(context).notificationSetter(context);
     }
 
     //Create Calibration Checkin
@@ -292,7 +292,7 @@ public static void create(CalRecord[] calRecords, Context context, boolean overr
                     Calibration.create(calRecords, context, true, 0);
                 }
             }
-            Notifications.notificationSetter(context);
+            Notifications.getInstance(context).notificationSetter(context);
         }
     }
 
@@ -369,7 +369,7 @@ public static Calibration create(double bg, Context context) {
                 calculate_w_l_s();
                 adjustRecentBgReadings();
                 CalibrationSendQueue.addToQueue(calibration, context);
-                Notifications.notificationSetter(context);
+                Notifications.getInstance(context).notificationSetter(context);
                 Calibration.requestCalibrationIfRangeTooNarrow();
             }
         } else {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
index c8f443f..1f71095 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
@@ -34,6 +34,12 @@
     @Column(name = "extra_calibration_alert")
     public boolean extra_calibration_alert;
 
+    @Column(name = "bg_unclear_readings_alert")
+    public boolean bg_unclear_readings_alert;
+
+    @Column(name = "bg_missed_alerts")
+    public boolean bg_missed_alerts;
+
     public static UserNotification lastBgAlert() {
         return new Select()
                 .from(UserNotification.class)
@@ -62,7 +68,20 @@ public static UserNotification lastExtraCalibrationAlert() {
                 .orderBy("_ID desc")
                 .executeSingle();
     }
-
+    public static UserNotification lastUnclearReadingsAlert() {
+        return new Select()
+                .from(UserNotification.class)
+                .where("bg_unclear_readings_alert = ?", true)
+                .orderBy("_ID desc")
+                .executeSingle();
+    }
+    public static UserNotification LastMissedAlert() {
+        return new Select()
+                .from(UserNotification.class)
+                .where("bg_missed_alerts = ?", true)
+                .orderBy("_ID desc")
+                .executeSingle();
+    }
     public static UserNotification create(String message, String type) {
         UserNotification userNotification = new UserNotification();
         userNotification.timestamp = new Date().getTime();
@@ -75,6 +94,10 @@ public static UserNotification create(String message, String type) {
             userNotification.double_calibration_alert = true;
         } else if (type == "extra_calibration_alert") {
             userNotification.extra_calibration_alert = true;
+        } else if (type == "bg_unclear_readings_alert") {
+        userNotification.bg_unclear_readings_alert = true;
+        } else if (type == "bg_missed_alerts") {
+        userNotification.bg_missed_alerts = true;
         }
         userNotification.save();
         return userNotification;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index e6a4ad3..01cbf7f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -6,6 +6,7 @@
 import android.preference.Preference;
 import android.preference.PreferenceManager;
 
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
@@ -83,6 +84,7 @@ public NavDrawerBuilder(Context aContext) {
             }
         }
         options.add("System Status");
+        options.add("Snooze Alerts");
         options.add("Settings");
 //        options.add("Fake Numbers");
 //        options.add("Add Double Calibration");
@@ -95,7 +97,7 @@ public NavDrawerBuilder(Context aContext) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         boolean IUnderstand = prefs.getBoolean("I_understand", false);
         if(IUnderstand == false) {
-            options.add(new Intent(context, SettingsActivity.class));
+            options.add(new Intent(context, Preferences.class));
             return options;
         }
 
@@ -137,7 +139,7 @@ public NavDrawerBuilder(Context aContext) {
             }
         }
         options.add(new Intent(context, SystemStatus.class));
-//        options.add(new Intent(context, SettingsActivity.class));
+        options.add(new Intent(context, SnoozeActivity.class));
         options.add(new Intent(context, Preferences.class));
 //        options.add(new Intent(context, FakeNumbers.class));
 //        options.add(new Intent(context, DoubleCalibrationActivity.class));
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index 5760e08..8eb635c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -298,7 +298,7 @@ public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
                 sensor.latest_battery_level = transmitterData.sensor_battery_level;
                 sensor.save();
 
-                BgReading.create(transmitterData.raw_data, this, timestamp);
+                BgReading.create(transmitterData.raw_data, transmitterData.raw_data, this, timestamp);
             } else {
                 Log.w(TAG, "No Active Sensor, Data only stored in Transmitter Data");
             }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingIntentService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingIntentService.java
new file mode 100644
index 0000000..bf1b276
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingIntentService.java
@@ -0,0 +1,91 @@
+package com.eveningoutpost.dexdrip.Services;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.content.Context;
+
+/**
+ * An {@link IntentService} subclass for handling asynchronous task requests in
+ * a service on a separate handler thread.
+ * <p/>
+ * TODO: Customize class - update intent actions, extra parameters and static
+ * helper methods.
+ */
+public class MissedReadingIntentService extends IntentService {
+    // TODO: Rename actions, choose action names that describe tasks that this
+    // IntentService can perform, e.g. ACTION_FETCH_NEW_ITEMS
+    private static final String ACTION_FOO = "com.eveningoutpost.dexdrip.Services.action.FOO";
+    private static final String ACTION_BAZ = "com.eveningoutpost.dexdrip.Services.action.BAZ";
+
+    // TODO: Rename parameters
+    private static final String EXTRA_PARAM1 = "com.eveningoutpost.dexdrip.Services.extra.PARAM1";
+    private static final String EXTRA_PARAM2 = "com.eveningoutpost.dexdrip.Services.extra.PARAM2";
+
+    /**
+     * Starts this service to perform action Foo with the given parameters. If
+     * the service is already performing a task this action will be queued.
+     *
+     * @see IntentService
+     */
+    // TODO: Customize helper method
+    public static void startActionFoo(Context context, String param1, String param2) {
+        Intent intent = new Intent(context, MissedReadingIntentService.class);
+        intent.setAction(ACTION_FOO);
+        intent.putExtra(EXTRA_PARAM1, param1);
+        intent.putExtra(EXTRA_PARAM2, param2);
+        context.startService(intent);
+    }
+
+    /**
+     * Starts this service to perform action Baz with the given parameters. If
+     * the service is already performing a task this action will be queued.
+     *
+     * @see IntentService
+     */
+    // TODO: Customize helper method
+    public static void startActionBaz(Context context, String param1, String param2) {
+        Intent intent = new Intent(context, MissedReadingIntentService.class);
+        intent.setAction(ACTION_BAZ);
+        intent.putExtra(EXTRA_PARAM1, param1);
+        intent.putExtra(EXTRA_PARAM2, param2);
+        context.startService(intent);
+    }
+
+    public MissedReadingIntentService() {
+        super("MissedReadingIntentService");
+    }
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        if (intent != null) {
+            final String action = intent.getAction();
+            if (ACTION_FOO.equals(action)) {
+                final String param1 = intent.getStringExtra(EXTRA_PARAM1);
+                final String param2 = intent.getStringExtra(EXTRA_PARAM2);
+                handleActionFoo(param1, param2);
+            } else if (ACTION_BAZ.equals(action)) {
+                final String param1 = intent.getStringExtra(EXTRA_PARAM1);
+                final String param2 = intent.getStringExtra(EXTRA_PARAM2);
+                handleActionBaz(param1, param2);
+            }
+        }
+    }
+
+    /**
+     * Handle action Foo in the provided background thread with the provided
+     * parameters.
+     */
+    private void handleActionFoo(String param1, String param2) {
+        // TODO: Handle action Foo
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+
+    /**
+     * Handle action Baz in the provided background thread with the provided
+     * parameters.
+     */
+    private void handleActionBaz(String param1, String param2) {
+        // TODO: Handle action Baz
+        throw new UnsupportedOperationException("Not yet implemented");
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
new file mode 100644
index 0000000..0876eb7
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
@@ -0,0 +1,70 @@
+package com.eveningoutpost.dexdrip.Services;
+
+import android.app.AlarmManager;
+import android.app.IntentService;
+import android.app.PendingIntent;
+import android.app.Service;
+import android.bluetooth.BluetoothDevice;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.os.IBinder;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.ReadDataShare;
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
+import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
+import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
+
+import java.util.Calendar;
+
+public class MissedReadingService extends IntentService {
+    SharedPreferences prefs;
+    boolean bg_missed_alerts;
+    int bg_missed_minutes;
+    int otherAlertSnooze;
+    Context mContext;
+
+    public MissedReadingService() {
+        super("MissedReadingService");
+    }
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        mContext = getApplicationContext();
+        prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
+        bg_missed_alerts =  prefs.getBoolean("bg_missed_alerts", false);
+        bg_missed_minutes =  Integer.parseInt(prefs.getString("bg_missed_minutes", "30"));
+        otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
+
+        if (bg_missed_alerts && BgReading.getTimeSinceLastReading() > (bg_missed_minutes * 1000 * 60)) {
+            Notifications.bgMissedAlert(mContext);
+            checkBackAfterSnoozeTime();
+        } else {
+            checkBackAfterMissedTime();
+        }
+    }
+
+   public void checkBackAfterSnoozeTime() {
+       setAlarm(otherAlertSnooze * 1000 * 60);
+   }
+
+    public void checkBackAfterMissedTime() {
+        setAlarm(bg_missed_minutes * 1000 * 60);
+    }
+
+    public void setAlarm(long alarmIn) {
+        Calendar calendar = Calendar.getInstance();
+        AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
+        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.KITKAT) {
+            alarm.setExact(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + alarmIn, PendingIntent.getService(this, 0, new Intent(this, MissedReadingService.class), 0));
+        } else {
+            alarm.set(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + alarmIn, PendingIntent.getService(this, 0, new Intent(this, MissedReadingService.class), 0));
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java
new file mode 100644
index 0000000..c4b054d
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SnoozeOnNotificationDismissService.java
@@ -0,0 +1,45 @@
+package com.eveningoutpost.dexdrip.Services;
+
+import android.app.IntentService;
+import android.content.Intent;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.SnoozeActivity;
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+
+/**
+ * An {@link IntentService} subclass for handling asynchronous task requests in
+ * a service on a separate handler thread.
+ * <p/>
+ * TODO: Customize class - update intent actions, extra parameters and static
+ * helper methods.
+ */
+public class SnoozeOnNotificationDismissService extends IntentService {
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+
+    public SnoozeOnNotificationDismissService() {
+        super("SnoozeOnNotificationDismissService");
+    }
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+        AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
+        
+        int snooze = 30;
+        if(activeBgAlert != null) {
+            if(activeBgAlert.default_snooze != 0) {
+                snooze = activeBgAlert.default_snooze;
+            } else {
+                snooze = SnoozeActivity.getDefaultSnooze(activeBgAlert.above);
+            }
+        }
+        
+        AlertPlayer.getPlayer().Snooze(getApplicationContext(), snooze);
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
index 3984ccb..2674fb1 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
@@ -339,7 +339,7 @@ public void run()
 	        			// We have a real new reading...
 	        			Log.e(TAG, "calling setSerialDataToTransmitterRawData " + LastReading.RawValue +
 	        			        " LastReading.CaptureDateTime " + LastReading.CaptureDateTime + " " + LastReading.TransmissionId);
-	        			setSerialDataToTransmitterRawData(LastReading.RawValue , LastReading.BatteryLife, LastReading.CaptureDateTime);
+	        			setSerialDataToTransmitterRawData(LastReading.RawValue,  LastReading.FilteredValue, LastReading.BatteryLife, LastReading.CaptureDateTime);
 	        			LastReportedReading = LastReading;
 	        			LastReportedTime = LastReading.CaptureDateTime;
 	        		}
@@ -379,7 +379,7 @@ public void runFake()
 
                 int fakedRaw = 150000 + i * 1000;
                 Log.e(TAG, "calling setSerialDataToTransmitterRawData " + fakedRaw);
-                setSerialDataToTransmitterRawData(fakedRaw, 100, new Date().getTime());
+                setSerialDataToTransmitterRawData(fakedRaw, fakedRaw,100, new Date().getTime());
 
                } catch (InterruptedException e) {
                    // time to get out...
@@ -394,13 +394,13 @@ public void Stop()
         mStop = true;
         interrupt();
     }
-    public void setSerialDataToTransmitterRawData(int raw_data ,int sensor_battery_leve, Long CaptureTime) {
+    public void setSerialDataToTransmitterRawData(int raw_data, int filtered_data ,int sensor_battery_leve, Long CaptureTime) {
 
         TransmitterData transmitterData = TransmitterData.create(raw_data, sensor_battery_leve, CaptureTime);
         if (transmitterData != null) {
             Sensor sensor = Sensor.currentSensor();
             if (sensor != null) {
-                BgReading bgReading = BgReading.create(transmitterData.raw_data, mContext, CaptureTime);
+                BgReading bgReading = BgReading.create(transmitterData.raw_data, filtered_data, mContext, CaptureTime);
                 sensor.latest_battery_level = transmitterData.sensor_battery_level;
                 sensor.save();
             } else {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java
deleted file mode 100644
index e584d5a..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.eveningoutpost.dexdrip;
-
-import android.media.Ringtone;
-import android.media.RingtoneManager;
-import android.net.Uri;
-import android.os.Bundle;
-import android.preference.ListPreference;
-import android.preference.Preference;
-import android.preference.PreferenceActivity;
-import android.preference.PreferenceCategory;
-import android.preference.PreferenceManager;
-import android.preference.RingtonePreference;
-import android.text.TextUtils;
-
-public class SettingsActivity extends PreferenceActivity {
-
-    @Override
-    protected void onPostCreate(Bundle savedInstanceState) {
-        super.onPostCreate(savedInstanceState);
-        setupSimplePreferencesScreen();
-    }
-
-    private void setupSimplePreferencesScreen() {
-        addPreferencesFromResource(R.xml.pref_license);
-
-        PreferenceCategory fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_general);
-
-
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_notifications);
-
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_data_source);
-
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_data_sync);
-
-        bindPreferenceSummaryToValue(findPreference("dex_collection_method"));
-        bindPreferenceSummaryToValue(findPreference("units"));
-        bindPreferenceSummaryToValue(findPreference("share_key"));
-    }
-
-    private static Preference.OnPreferenceChangeListener sBindPreferenceSummaryToValueListener = new Preference.OnPreferenceChangeListener() {
-        @Override
-        public boolean onPreferenceChange(Preference preference, Object value) {
-            String stringValue = value.toString();
-
-            if (preference instanceof ListPreference) {
-                ListPreference listPreference = (ListPreference) preference;
-                int index = listPreference.findIndexOfValue(stringValue);
-                preference.setSummary(
-                                index >= 0
-                                        ? listPreference.getEntries()[index]
-                                        : null);
-
-            } else if (preference instanceof RingtonePreference) {
-                if (TextUtils.isEmpty(stringValue)) {
-                    preference.setSummary(R.string.pref_ringtone_silent);
-                } else {
-                    Ringtone ringtone = RingtoneManager.getRingtone(
-                            preference.getContext(), Uri.parse(stringValue));
-
-                    if (ringtone == null) {
-                        preference.setSummary(null);
-                    } else {
-                        String name = ringtone.getTitle(preference.getContext());
-                        preference.setSummary(name);
-                    }
-                }
-            } else {
-                preference.setSummary(stringValue);
-            }
-            return true;
-        }
-    };
-
-    private static void bindPreferenceSummaryToValue(Preference preference) {
-        preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);
-        sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,
-                PreferenceManager
-                        .getDefaultSharedPreferences(preference.getContext())
-                        .getString(preference.getKey(), ""));
-    }
-}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
new file mode 100644
index 0000000..0ccf8eb
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SnoozeActivity.java
@@ -0,0 +1,220 @@
+package com.eveningoutpost.dexdrip;
+
+import java.text.DateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+
+import android.app.Activity;
+import android.app.Dialog;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.AdapterView.OnItemLongClickListener;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ListView;
+import android.widget.NumberPicker;
+import android.widget.SimpleAdapter;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
+import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
+
+
+public class SnoozeActivity extends Activity {
+    TextView alertStatus;
+    Button buttonSnooze;
+    Button disableAlerts;
+    Button clearDisabled;
+    SharedPreferences prefs;
+    boolean doMgdl;
+
+    NumberPicker snoozeValue;
+
+    static final int snoozeValues[] = new int []{5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 75, 90, 105, 120, 150, 180, 240, 300, 360, 420, 480, 540, 600};
+
+    static int getSnoozeLocatoin(int time) {
+        for (int i=0; i < snoozeValues.length; i++) {
+            if(time == snoozeValues[i]) {
+                return i;
+            } else if (time < snoozeValues[i]) {
+                // we are in the middle of two, return the smaller
+                if (i == 0) {
+                    return 0;
+                }
+                return i-1;
+            }
+        }
+        return snoozeValues.length-1;
+    }
+
+    static String getNameFromTime(int time) {
+        if (time < 120) {
+            return time + " minutes";
+        }
+        return (time / 60.0) + " hours";
+    }
+
+    static int getTimeFromSnoozeValue(int pickedNumber) {
+        return snoozeValues[pickedNumber];
+    }
+
+    static public int getDefaultSnooze(boolean above) {
+        if (above) {
+            return 120;
+        }
+        return 30;
+    }
+
+    static void SetSnoozePickerValues(NumberPicker picker, boolean above, int default_snooze) {
+        String[] values=new String[snoozeValues.length];
+        for(int i=0;i<values.length;i++){
+            values[i]=getNameFromTime(snoozeValues[i]);
+        }
+
+        picker.setMaxValue(values.length -1);
+        picker.setMinValue(0);
+        picker.setDisplayedValues(values);
+        picker.setWrapSelectorWheel(false);
+        if(default_snooze != 0) {
+            picker.setValue(getSnoozeLocatoin(default_snooze));
+        } else {
+            picker.setValue(getSnoozeLocatoin(getDefaultSnooze(above)));
+        }
+    }
+
+
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_snooze);
+        alertStatus = (TextView) findViewById(R.id.alert_status);
+        snoozeValue = (NumberPicker) findViewById(R.id.snooze);
+
+        prefs =  PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
+
+        addListenerOnButton();
+        if(BgGraphBuilder.isXLargeTablet(getApplicationContext())) {
+            alertStatus.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            buttonSnooze.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+        }
+
+        displayStatus();
+    }
+
+    public void addListenerOnButton() {
+        buttonSnooze = (Button)findViewById(R.id.button_snooze);
+        disableAlerts = (Button)findViewById(R.id.button_disable_alerts);
+        clearDisabled = (Button)findViewById(R.id.enable_alerts);
+        buttonSnooze.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                int intValue = getTimeFromSnoozeValue(snoozeValue.getValue());
+                AlertPlayer.getPlayer().Snooze(getApplicationContext(), intValue);
+                Intent intent = new Intent(getApplicationContext(), Home.class);
+                if (ActiveBgAlert.getOnly() != null) {
+                    startActivity(intent);
+                }
+                finish();
+            }
+
+        });
+        showDisableEnableButtons();
+
+        disableAlerts.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                final Dialog d = new Dialog(SnoozeActivity.this);
+                d.setTitle("Default Snooze");
+                d.setContentView(R.layout.snooze_picker);
+                Button b1 = (Button) d.findViewById(R.id.button1);
+                Button b2 = (Button) d.findViewById(R.id.button2);
+                final NumberPicker snoozeValue = (NumberPicker) d.findViewById(R.id.numberPicker1);
+
+                SnoozeActivity.SetSnoozePickerValues(snoozeValue, false, 60);
+                b1.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        Long disableUntil = new Date().getTime() + (SnoozeActivity.getTimeFromSnoozeValue(snoozeValue.getValue()) * 1000 * 60);
+                        prefs.edit().putLong("alerts_disabled_until", disableUntil).apply();
+                        d.dismiss();
+                        showDisableEnableButtons();
+                    }
+                });
+                b2.setOnClickListener(new View.OnClickListener() {
+                    @Override
+                    public void onClick(View v) {
+                        d.dismiss();
+                        showDisableEnableButtons();
+                    }
+                });
+                d.show();
+
+            }
+        });
+
+        clearDisabled.setOnClickListener(new View.OnClickListener() {
+            public void onClick(View v) {
+                prefs.edit().putLong("alerts_disabled_until", 0).apply();
+                showDisableEnableButtons();
+            }
+        });
+    }
+
+    public void showDisableEnableButtons() {
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
+            disableAlerts.setVisibility(View.GONE);
+            clearDisabled.setVisibility(View.VISIBLE);
+        } else {
+            clearDisabled.setVisibility(View.GONE);
+            disableAlerts.setVisibility(View.VISIBLE);
+        }
+    }
+
+
+    void displayStatus() {
+        ActiveBgAlert aba = ActiveBgAlert.getOnly();
+        AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
+
+        // aba and activeBgAlert should both either exist ot not exist. all other cases are a bug in another place
+        if(aba == null && activeBgAlert!= null) {
+            Log.wtf(TAG, "ERRRO displayStatus: aba == null, but activeBgAlert != null exiting...");
+            return;
+        }
+        if(aba != null && activeBgAlert== null) {
+            Log.wtf(TAG, "ERRRO displayStatus: aba != null, but activeBgAlert == null exiting...");
+            return;
+        }
+        String status;
+        if(activeBgAlert == null ) {
+            status = "No active alert exists";
+            alertStatus.setText(status);
+            buttonSnooze.setVisibility(View.GONE);
+            snoozeValue.setVisibility(View.GONE);
+        } else {
+            if(!aba.ready_to_alarm()) {
+                status = "Active alert exists named \"" + activeBgAlert.name + "\" Alert snoozed until " +
+                    DateFormat.getTimeInstance(DateFormat.MEDIUM).format(new Date(aba.next_alert_at)) +
+                    " (" + (aba.next_alert_at - new Date().getTime()) / 60000 + " minutes left)";
+            } else {
+                status = "Active alert exists named \"" + activeBgAlert.name + "\" (not snoozed)";
+            }
+            SetSnoozePickerValues(snoozeValue, activeBgAlert.above, activeBgAlert.default_snooze);
+            alertStatus.setText(status);
+        }
+
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index cbeda84..4d239e5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -10,9 +10,8 @@
 import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
-
 import java.util.Date;
-
+import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 
 public class StopSensor extends Activity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
     private String menu_name = "Stop Sensor";
@@ -54,6 +53,7 @@ public void onClick(View v) {
                 sensor.stopped_at = new Date().getTime();
                 Log.w("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
                 sensor.save();
+                AlertPlayer.getPlayer().stopAlert(getApplicationContext(),true, false);
 
                 Toast.makeText(getApplicationContext(), "Sensor stopped", Toast.LENGTH_LONG).show();
                 Intent intent = new Intent(getApplicationContext(), Home.class);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
index 605ab72..0613ccd 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Tables/BgReadingTable.java
@@ -46,7 +46,7 @@ public void onNavigationDrawerItemSelected(int position) {
     }
 
     private void getData() {
-        final List<BgReading> latest = BgReading.latest(50);
+        final List<BgReading> latest = BgReading.latest(5000);
         ListAdapter adapter = new BgReadingAdapter(this, latest);
 
         this.setListAdapter(adapter);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
new file mode 100644
index 0000000..3a4402f
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
@@ -0,0 +1,211 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import java.util.Date;
+
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.media.AudioAttributes;
+import android.media.AudioManager;
+import android.media.MediaPlayer;
+import android.net.Uri;
+import android.support.v4.app.NotificationCompat;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.Services.SnoozeOnNotificationDismissService;
+import com.eveningoutpost.dexdrip.SnoozeActivity;
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.R;
+
+public class AlertPlayer {
+
+    static AlertPlayer singletone;
+
+    private final static String TAG = AlertPlayer.class.getSimpleName();
+    private MediaPlayer mediaPlayer;
+    int volumeBeforeAlert;
+    Context context;
+
+
+    public static AlertPlayer getPlayer() {
+        if(singletone == null) {
+            Log.e(TAG,"getPlayer: Creating a new AlertPlayer");
+            singletone = new AlertPlayer();
+        } else {
+            Log.i(TAG,"getPlayer: Using existing AlertPlayer");
+        }
+        return singletone;
+    }
+
+    public synchronized  void startAlert(Context ctx, AlertType newAlert, String bgValue )  {
+      Log.e(TAG, "start called, Threadid " + Thread.currentThread().getId());
+      stopAlert(ctx, true, false);
+      ActiveBgAlert.Create(newAlert.uuid, false, new Date().getTime() + newAlert.minutes_between * 60000 );
+      Vibrate(ctx, newAlert, bgValue, newAlert.override_silent_mode, newAlert.mp3_file);
+    }
+
+    public synchronized void stopAlert(Context ctx, boolean ClearData, boolean clearIfSnoozeFinished) {
+
+        Log.e(TAG, "stopAlert: stop called ClearData " + ClearData + "  ThreadID " + Thread.currentThread().getId());
+        if (ClearData) {
+            ActiveBgAlert.ClearData();
+        }
+        if(clearIfSnoozeFinished) {
+            ActiveBgAlert.ClearIfSnoozeFinished();
+        }
+        notificationDismiss(ctx);
+        if (mediaPlayer != null) {
+            mediaPlayer.stop();
+            mediaPlayer.release();
+            mediaPlayer = null;
+        }
+    }
+
+    // True means play the file false means only vibrate.
+    private boolean ShouldPlayFile(Context ctx, AlertType alert) {
+        if(alert.override_silent_mode) {
+            // no meter what mode it is we override it
+            return true;
+        }
+        AudioManager am = (AudioManager)ctx.getSystemService(Context.AUDIO_SERVICE);
+
+        switch (am.getRingerMode()) {
+            case AudioManager.RINGER_MODE_SILENT:
+                // fall through
+            case AudioManager.RINGER_MODE_VIBRATE:
+                return false;
+            case AudioManager.RINGER_MODE_NORMAL:
+                return true;
+        }
+        // unknown mode, not sure let's play just in any case.
+        return true;
+    }
+
+    public synchronized  void Snooze(Context ctx, int repeatTime) {
+        Log.e(TAG, "Snooze called repeatTime = "+ repeatTime);
+        stopAlert(ctx, false, false);
+        ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
+        if (activeBgAlert  == null) {
+            Log.e(TAG, "Error, snooze was called but no alert is active. alert was probably removed in ui ");
+            return;
+        }
+        activeBgAlert.snooze(repeatTime);
+    }
+
+    public synchronized  void PreSnooze(Context ctx, String uuid, int repeatTime) {
+        Log.e(TAG, "PreSnooze called repeatTime = "+ repeatTime);
+        stopAlert(ctx, true, false);
+        ActiveBgAlert.Create(uuid, true, new Date().getTime() + repeatTime * 60000 );
+        ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
+        if (activeBgAlert  == null) {
+            Log.wtf(TAG, "Just created the allert, where did it go...");
+            return;
+        }
+        activeBgAlert.snooze(repeatTime);
+    }
+
+ // Check the state and alrarm if needed
+    public void ClockTick(Context ctx, String bgValue)
+    {
+        ActiveBgAlert activeBgAlert = ActiveBgAlert.getOnly();
+        if (activeBgAlert  == null) {
+            // Nothing to do ...
+            return;
+        }
+        if(activeBgAlert.ready_to_alarm()) {
+            stopAlert(ctx, false, false);
+            AlertType alert = AlertType.get_alert(activeBgAlert.alert_uuid);
+            if (alert == null) {
+                Log.w(TAG, "ClockTick: The alert was already deleted... will not play");
+                ActiveBgAlert.ClearData();
+                return;
+            }
+            Log.e(TAG,"ClockTick: Playing the alert again");
+            Vibrate(ctx, alert, bgValue, alert.override_silent_mode, alert.mp3_file);
+        }
+
+    }
+
+    private void PlayFile(Context ctx, String FileName) {
+        Log.e(TAG, "PlayFile: called FileName = " + FileName);
+        if(mediaPlayer != null) {
+            Log.e(TAG, "ERROR, PlayFile:going to leak a mediaplayer !!!");
+        }
+        if(FileName != null && FileName.length() > 0) {
+            mediaPlayer = MediaPlayer.create(ctx, Uri.parse(FileName), null);
+        }
+        if(mediaPlayer == null) {
+            Log.w(TAG, "PlayFile: Creating mediaplayer with file " + FileName + " failed. using default alarm");
+            mediaPlayer = MediaPlayer.create(ctx, R.raw.default_alert);
+        }
+        if(mediaPlayer != null) {
+
+            AudioManager manager = (AudioManager) ctx.getSystemService(Context.AUDIO_SERVICE);
+            int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+            volumeBeforeAlert = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
+            manager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
+            context = ctx;
+
+            mediaPlayer.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
+                @Override
+                public void onCompletion(MediaPlayer mp) {
+                    Log.e(TAG, "PlayFile: onCompletion called (finished playing) ");
+                    AudioManager manager = (AudioManager) context.getSystemService(Context.AUDIO_SERVICE);
+                    int currentVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
+                    int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
+                    if(maxVolume == currentVolume) {
+                        // If the user has changed the volume, don't change it again.
+                        manager.setStreamVolume(AudioManager.STREAM_MUSIC, volumeBeforeAlert, 0);
+                    }
+                }
+            });
+            Log.e(TAG, "PlayFile: calling mediaPlayer.start() ");
+            mediaPlayer.start();
+        } else {
+            // TODO, what should we do here???
+            Log.wtf(TAG,"PlayFile: Starting an alert failed, what should we do !!!");
+        }
+    }
+
+    private PendingIntent notificationIntent(Context ctx, Intent intent){
+        return PendingIntent.getActivity(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+    }
+    private PendingIntent snoozeIntent(Context ctx){
+        Intent intent = new Intent(ctx, SnoozeOnNotificationDismissService.class);
+        return PendingIntent.getService(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+
+    }
+    private void Vibrate(Context ctx, AlertType alert, String bgValue, Boolean overrideSilent, String audioPath) {
+        Log.e("ALARM", "setting vibrate alarm");
+        String title = bgValue + " " + alert.name;
+        String content = "BG LEVEL ALERT: " + bgValue;
+        Intent intent = new Intent(ctx, SnoozeActivity.class);
+
+        NotificationCompat.Builder  builder = new NotificationCompat.Builder(ctx)
+            .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
+            .setContentTitle(title)
+            .setContentText(content)
+            .setContentIntent(notificationIntent(ctx, intent))
+            .setDeleteIntent(snoozeIntent(ctx));
+        if(overrideSilent) {
+            PlayFile(ctx, alert.mp3_file);
+        } else {
+            builder.setSound(Uri.parse(audioPath), AudioAttributes.USAGE_ALARM);
+        }
+        //NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
+        builder.setVibrate(Notifications.vibratePattern);
+        NotificationManager mNotifyMgr = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);
+        mNotifyMgr.cancel(Notifications.exportAlertNotificationId);
+        mNotifyMgr.notify(Notifications.exportAlertNotificationId, builder.build());
+
+    }
+
+    private void notificationDismiss(Context ctx) {
+        NotificationManager mNotifyMgr = (NotificationManager) ctx.getSystemService(Context.NOTIFICATION_SERVICE);
+        mNotifyMgr.cancel(Notifications.exportAlertNotificationId);
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 69713c7..2c41323 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -64,10 +64,10 @@ public BgGraphBuilder(Context context){
         this.doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
         defaultMinY = unitized(40);
         defaultMaxY = unitized(250);
-        pointSize = isXLargeTablet() ? 5 : 3;
-        axisTextSize = isXLargeTablet() ? 20 : Axis.DEFAULT_TEXT_SIZE_SP;
-        previewAxisTextSize = isXLargeTablet() ? 12 : 5;
-        hoursPreviewStep = isXLargeTablet() ? 2 : 1;
+        pointSize = isXLargeTablet(context) ? 5 : 3;
+        axisTextSize = isXLargeTablet(context) ? 20 : Axis.DEFAULT_TEXT_SIZE_SP;
+        previewAxisTextSize = isXLargeTablet(context) ? 12 : 5;
+        hoursPreviewStep = isXLargeTablet(context) ? 2 : 1;
     }
 
     public LineChartData lineData() {
@@ -251,7 +251,7 @@ private SimpleDateFormat hourFormat() {
         return new SimpleDateFormat(DateFormat.is24HourFormat(context) ? "HH" : "h a");
     }
 
-    private boolean isXLargeTablet() {
+    static public boolean isXLargeTablet(Context context) {
         return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
index 66d5dc9..1e09358 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
@@ -1,11 +1,15 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import java.io.IOException;
+
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.os.Environment;
 import android.preference.PreferenceManager;
 import android.util.Log;
 
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Services.DexCollectionService;
 import com.eveningoutpost.dexdrip.Services.DexShareCollectionService;
 import com.eveningoutpost.dexdrip.Services.WixelReader;
@@ -15,6 +19,8 @@
  */
 public class CollectionServiceStarter {
     private Context mContext;
+    
+    private final static String TAG = CollectionServiceStarter.class.getSimpleName();
 
     public static boolean isBTWixel(Context context) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
@@ -67,7 +73,19 @@ public void start(Context context) {
             stopWifWixelThread();
             startBtShareService();
         }
-        Log.d("ColServiceStarter", collection_method);
+        Log.d(TAG, collection_method);
+        
+       // Start logging to logcat
+        String filePath = Environment.getExternalStorageDirectory() + "/xdriplogcat.txt";
+        try {
+            String[] cmd = { "/system/bin/sh", "-c", "ps | grep logcat  || logcat -f " + filePath + 
+                    " -v threadtime AlertPlayer:V com.eveningoutpost.dexdrip.Services.WixelReader:V *:E " };
+            Runtime.getRuntime().exec(cmd);
+        } catch (IOException e2) {
+            Log.e(TAG, "running logcat failed, is the device rooted?", e2);
+        }
+        // Make sure that we have the 55 low allert.
+        AlertType.CreateStaticAlerts();
     }
 
     public CollectionServiceStarter(Context context) {
@@ -83,23 +101,23 @@ public static void restartCollectionService(Context context) {
     }
 
     private void startBtWixelService() {
-        Log.d("ColServiceStarter", "starting bt wixel service");
+        Log.d(TAG, "starting bt wixel service");
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2) {
             mContext.startService(new Intent(mContext, DexCollectionService.class));
     	}
     }
     private void stopBtWixelService() {
-        Log.d("ColServiceStarter", "stopping bt wixel service");
+        Log.d(TAG, "stopping bt wixel service");
         mContext.stopService(new Intent(mContext, DexCollectionService.class));
     }
     private void startBtShareService() {
-        Log.d("ColServiceStarter", "starting bt share service");
+        Log.d(TAG, "starting bt share service");
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2) {
             mContext.startService(new Intent(mContext, DexShareCollectionService.class));
         }
     }
     private void stopBtShareService() {
-        Log.d("ColServiceStarter", "stopping bt share service");
+        Log.d(TAG, "stopping bt share service");
         mContext.stopService(new Intent(mContext, DexShareCollectionService.class));
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
index e5de9fe..7ffc1c7 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
@@ -32,8 +32,9 @@ public void start() {
             mHandler.post(new Runnable() {
                 @Override
                 public void run() {
-                    Notifications.setNotificationSettings(mContext);
-                    mService.startForeground(Notifications.ongoingNotificationId, Notifications.createOngoingNotification(new BgGraphBuilder(mContext)));
+                    Notifications notification = Notifications.getInstance(mContext);
+                    notification.ReadPerfs(mContext);
+                    mService.startForeground(notification.ongoingNotificationId, notification.createOngoingNotification(new BgGraphBuilder(mContext)));
                 }
             });
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java
new file mode 100644
index 0000000..2be0ddf
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java
@@ -0,0 +1,46 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+
+import com.eveningoutpost.dexdrip.Models.AlertType;
+
+/**
+ * Created by stephenblack on 4/15/15.
+ */
+public class IdempotentMigrations {
+    private Context mContext;
+    private SharedPreferences prefs;
+
+    public IdempotentMigrations(Context context) {
+        this.mContext = context;
+        this.prefs = PreferenceManager.getDefaultSharedPreferences(mContext);
+    }
+
+    public void performAll() {
+        migrateBGAlerts();
+    }
+
+    private void migrateBGAlerts() {
+        // Migrate away from old style notifications to Tzachis new Alert system
+        if(prefs.getBoolean("bg_notifications", true)){
+            double highMark = Double.parseDouble(prefs.getString("highValue", "170"));
+            double lowMark = Double.parseDouble(prefs.getString("lowValue", "70"));
+
+            boolean doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
+
+            if(!doMgdl) {
+                highMark = highMark * Constants.MMOLL_TO_MGDL;
+                lowMark = lowMark * Constants.MMOLL_TO_MGDL;
+            }
+            int bg_snooze = Integer.parseInt(prefs.getString("bg_snooze", "20"));
+            boolean bg_sound_in_silent = prefs.getBoolean("bg_sound_in_silent", false);
+            String bg_notification_sound = prefs.getString("bg_notification_sound", "content://settings/system/notification_sound");
+
+            AlertType.add_alert(null, "High Alert", true, highMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_snooze);
+            AlertType.add_alert(null, "Low Alert", false, lowMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_snooze);
+            prefs.edit().putBoolean("bg_notifications", false).apply();
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index 30063bb..ea07d2c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -1,5 +1,6 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import android.app.AlarmManager;
 import android.annotation.TargetApi;
 import android.app.Notification;
 import android.app.NotificationManager;
@@ -13,6 +14,7 @@
 import android.media.AudioManager;
 import android.media.MediaPlayer;
 import android.net.Uri;
+import android.os.SystemClock;
 import android.os.Build;
 import android.os.Handler;
 import android.os.Looper;
@@ -20,11 +22,19 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 import android.util.Log;
-import com.eveningoutpost.dexdrip.*;
+
+import com.eveningoutpost.dexdrip.AddCalibration;
+import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
+import com.eveningoutpost.dexdrip.EditAlertActivity;
+import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.Models.ActiveBgAlert;
+import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.CalibrationRequest;
 import com.eveningoutpost.dexdrip.Models.UserNotification;
+import com.eveningoutpost.dexdrip.R;
+import com.eveningoutpost.dexdrip.Sensor;
 
 import java.util.Date;
 import java.util.List;
@@ -44,28 +54,46 @@
     public static String bg_notification_sound;
 
     public static boolean calibration_notifications;
-    public static boolean calibration_vibrate;
-    public static boolean calibration_lights;
-    public static boolean calibration_sound;
     public static int calibration_snooze;
     public static String calibration_notification_sound;
+    public static boolean doMgdl;
+    private final static String TAG = AlertPlayer.class.getSimpleName();
 
-    public static Context mContext;
+    Context mContext;
     private static Handler mHandler = new Handler(Looper.getMainLooper());
 
-    public static int currentVolume;
-    public static AudioManager manager;
+    int currentVolume;
+    AudioManager manager;
 
-    public static final int BgNotificationId = 001;
-    public static final int calibrationNotificationId = 002;
-    public static final int doubleCalibrationNotificationId = 003;
-    public static final int extraCalibrationNotificationId = 004;
+    final int BgNotificationId = 001;
+    final int calibrationNotificationId = 002;
+    final int doubleCalibrationNotificationId = 003;
+    final int extraCalibrationNotificationId = 004;
     public static final int exportCompleteNotificationId = 005;
-    public static final int ongoingNotificationId = 8811;
+    final int ongoingNotificationId = 8811;
+    public static final int exportAlertNotificationId = 006;
+    public static final int uncleanAlertNotificationId = 007;
+    public static final int missedAlertNotificationId = 010;
+    final static int callbackPeriod = 60000;
+
+    SharedPreferences prefs;
+
+    private static Notifications instance = null;
+    protected Notifications() {
+       // Exists only to defeat instantiation.
+    }
+    public static Notifications getInstance(Context context) {
+       if(instance == null) {
+          instance = new Notifications();
+          instance.ArmTimer(context, callbackPeriod);
+       }
+       return instance;
+    }
+
 
-    public static void setNotificationSettings(Context context) {
+    public void ReadPerfs(Context context) {
         mContext = context;
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        prefs = PreferenceManager.getDefaultSharedPreferences(context);
         bg_notifications = prefs.getBoolean("bg_notifications", true);
         bg_vibrate = prefs.getBoolean("bg_vibrate", true);
         bg_lights = prefs.getBoolean("bg_lights", true);
@@ -75,16 +103,107 @@ public static void setNotificationSettings(Context context) {
         bg_sound_in_silent = prefs.getBoolean("bg_sound_in_silent", false);
 
         calibration_notifications = prefs.getBoolean("calibration_notifications", true);
-        calibration_vibrate = prefs.getBoolean("calibration_vibrate", true);
-        calibration_lights = prefs.getBoolean("calibration_lights", true);
-        calibration_sound = prefs.getBoolean("calibration_play_sound", true);
         calibration_snooze = Integer.parseInt(prefs.getString("calibration_snooze", "20"));
         calibration_notification_sound = prefs.getString("calibration_notification_sound", "content://settings/system/notification_sound");
+        doMgdl = (prefs.getString("units", "mgdl").compareTo("mgdl") == 0);
         bg_ongoing = prefs.getBoolean("run_service_in_foreground", false);
     }
 
-    public static void notificationSetter(Context context) {
-        setNotificationSettings(context);
+/*
+ * *************************************************************************************************************
+ * Function for new notifications
+ */
+
+
+    public void FileBasedNotifications(Context context) {
+        ReadPerfs(context);
+
+        BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(context);
+        Sensor sensor = Sensor.currentSensor();
+
+        BgReading bgReading = BgReading.last();
+        if(bgReading == null) {
+            // Sensor is stopped, or there is not enough data
+            AlertPlayer.getPlayer().stopAlert(context, true, false);
+            return;
+        }
+
+        Log.e(TAG, "FileBasedNotifications called bgReading.calculated_value = " + bgReading.calculated_value);
+
+        // TODO: tzachi what is the time of this last bgReading
+        // If the last reading does not have a sensor, or that sensor was stopped.
+        // or the sensor was started, but the 2 hours did not still pass? or there is no calibrations.
+        // In all this cases, bgReading.calculated_value should be 0.
+        if (sensor != null && bgReading != null && bgReading.calculated_value != 0) {
+            AlertType newAlert = AlertType.get_highest_active_alert(context, bgReading.calculated_value);
+
+            if (newAlert == null) {
+                Log.e(TAG, "FileBasedNotifications - No active notifcation exists, stopping all alerts");
+                // No alert should work, Stop all alerts, but keep the snoozing...
+                AlertPlayer.getPlayer().stopAlert(context, false, true);
+                return;
+            }
+
+            AlertType activeBgAlert = ActiveBgAlert.alertTypegetOnly();
+            if(activeBgAlert == null) {
+                Log.e(TAG, "FileBasedNotifications we have a new alert, starting to play it... " + newAlert.name);
+                // We need to create a new alert  and start playing
+                AlertPlayer.getPlayer().startAlert(context, newAlert, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
+                return;
+            }
+
+
+            if (activeBgAlert.uuid.equals(newAlert.uuid)) {
+                // This is the same alert. Might need to play again...
+                Log.e(TAG, "FileBasedNotifications we have found an active alert, checking if we need to play it " + newAlert.name);
+                AlertPlayer.getPlayer().ClockTick(context, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
+                return;
+            }
+           // Currently the ui blocks having two alerts with the same alert value.
+
+            // we have a new alert. If it is more important than the previous one. we need to stop
+            // the older one and start a new one (We need to play even if we were snoozed).
+            // If it is a lower level alert, we should keep being snoozed.
+
+
+            // Example, if we have two alerts one for 90 and the other for 80. and we were already alerting for the 80
+            // and we were snoozed. Now bg is 85, the alert for 80 is cleared, but we are alerting for 90.
+            // We should not do anything if we are snoozed for the 80...
+            // If one allert was high and the second one is low however, we alarm in any case (snoozing ignored).
+            boolean opositeDirection = AlertType.OpositeDirection(activeBgAlert, newAlert);
+            AlertType  newHigherAlert = AlertType.HigherAlert(activeBgAlert, newAlert);
+            if ((newHigherAlert == activeBgAlert) && (!opositeDirection)) {
+                // the existing alert is the higher, we should not do anything
+                Log.e(TAG, "FileBasedNotifications The existing alert has the same importance, doing nothing newHigherAlert = " + newHigherAlert.name +
+                        "activeBgAlert = " + activeBgAlert.name);
+                AlertPlayer.getPlayer().ClockTick(context, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
+                return;
+            }
+
+            // For now, we are stopping the old alert and starting a new one.
+            Log.e(TAG, "Found a new alert, that is higher than the previous one will play it. " + newAlert.name);
+            AlertPlayer.getPlayer().stopAlert(context, true, false);
+            AlertPlayer.getPlayer().startAlert(context, newAlert, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
+            return;
+
+        } else {
+            AlertPlayer.getPlayer().stopAlert(context, true, false);
+        }
+
+    }
+/*
+ * *****************************************************************************************************************
+ */
+
+    // only function that is really called from outside...
+    public void notificationSetter(Context context) {
+        ReadPerfs(context);
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
+            Log.w("NOTIFICATIONS", "Notifications are currently disabled!!");
+            return;
+        }
+        FileBasedNotifications(context);
+
         BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(context);
         double high = bgGraphBuilder.highMark;
         double low = bgGraphBuilder.lowMark;
@@ -138,7 +257,35 @@ public static void notificationSetter(Context context) {
         }
     }
 
-    private static Bitmap createWearBitmap(long start, long end) {
+    public void periodicTimer(Context context) {
+        // This is the timer function that will be called every minute. It is used in order to replay alerts,
+        // execute snoozes and alert if we are not recieving data for a long time.
+        Log.e(TAG, "PeriodicTimer called");
+        ArmTimer(context, callbackPeriod);
+    }
+
+    private void  ArmTimer(Context context, int time) {
+        Log.e(TAG, "ArmTimer called");
+        Intent intent = new Intent();
+        intent.setAction("com.eveningoutpost.dexdrip.UtilityModels.Notifications");
+
+        AlarmManager alarmMgr = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
+        PendingIntent alarmIntent = PendingIntent.getBroadcast(context, 0, intent, 0);
+
+        alarmMgr.set(AlarmManager.ELAPSED_REALTIME_WAKEUP,
+                SystemClock.elapsedRealtime() +
+                        time, alarmIntent);
+    }
+
+    // TODO: Need to understand when we are calling this...
+    private void ClearTimer(Context context) {
+        Intent intent = new Intent();
+        intent.setAction("com.eveningoutpost.dexdrip.UtilityModels.Notifications");
+        PendingIntent.getBroadcast(context, 0, intent,
+                PendingIntent.FLAG_UPDATE_CURRENT).cancel();
+    }
+
+    private Bitmap createWearBitmap(long start, long end) {
         return new BgSparklineBuilder(mContext)
                 .setBgGraphBuilder(new BgGraphBuilder(mContext))
                 .setStart(start)
@@ -152,11 +299,11 @@ private static Bitmap createWearBitmap(long start, long end) {
                 .build();
     }
 
-    private static Bitmap createWearBitmap(long hours) {
+    private Bitmap createWearBitmap(long hours) {
         return createWearBitmap(System.currentTimeMillis() - 60000 * 60 * hours, System.currentTimeMillis());
     }
 
-    private static Notification createExtensionPage(long hours) {
+    private Notification createExtensionPage(long hours) {
         return new NotificationCompat.Builder(mContext)
                 .extend(new NotificationCompat.WearableExtender()
                                 .setBackground(createWearBitmap(hours))
@@ -167,7 +314,7 @@ private static Notification createExtensionPage(long hours) {
     }
 
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    public static Notification createOngoingNotification(BgGraphBuilder bgGraphBuilder) {
+    public Notification createOngoingNotification(BgGraphBuilder bgGraphBuilder) {
         Intent intent = new Intent(mContext, Home.class);
         List<BgReading> lastReadings = BgReading.latest(2);
         BgReading lastReading = null;
@@ -217,7 +364,7 @@ public static Notification createOngoingNotification(BgGraphBuilder bgGraphBuild
         return b.build();
     }
 
-    public static void bgOngoingNotification(final BgGraphBuilder bgGraphBuilder) {
+    public void bgOngoingNotification(final BgGraphBuilder bgGraphBuilder) {
         mHandler.post(new Runnable() {
             @Override
             public void run() {
@@ -228,12 +375,12 @@ public void run() {
         });
     }
 
-    public static void soundAlert(String soundUri) {
+    public void soundAlert(String soundUri) {
         manager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
         int maxVolume = manager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
         currentVolume = manager.getStreamVolume(AudioManager.STREAM_MUSIC);
         manager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
-        Uri notification = Uri.parse(bg_notification_sound);
+        Uri notification = Uri.parse(soundUri);
         MediaPlayer player = MediaPlayer.create(mContext, notification);
 
         player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
@@ -245,61 +392,63 @@ public void onCompletion(MediaPlayer mp) {
         player.start();
     }
 
-    public static void clearAllBgNotifications() {
+    private void clearAllBgNotifications() {
         notificationDismiss(BgNotificationId);
     }
-    public static void clearAllCalibrationNotifications() {
+
+    private void clearAllCalibrationNotifications() {
         notificationDismiss(calibrationNotificationId);
         notificationDismiss(extraCalibrationNotificationId);
         notificationDismiss(doubleCalibrationNotificationId);
     }
 
-
-    public static void bgNotificationCreate(String title, String content, Intent intent, int notificationId) {
+    private void bgNotificationCreate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
         if (bg_vibrate) { mBuilder.setVibrate(vibratePattern);}
         if (bg_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
-        if (bg_sound && !bg_sound_in_silent) { mBuilder.setSound(Uri.parse(bg_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
+        if (bg_sound && !bg_sound_in_silent) { mBuilder.setSound(Uri.parse(bg_notification_sound), AudioAttributes.USAGE_ALARM);}
         if (bg_sound && bg_sound_in_silent) { soundAlert(bg_notification_sound);}
         NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static void calibrationNotificationCreate(String title, String content, Intent intent, int notificationId) {
+    private void calibrationNotificationCreate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
-        if (calibration_vibrate) { mBuilder.setVibrate(vibratePattern);}
-        if (calibration_lights) { mBuilder.setLights(0xff00ff00, 300, 1000);}
-        if (calibration_sound) { mBuilder.setSound(Uri.parse(calibration_notification_sound), AudioAttributes.FLAG_AUDIBILITY_ENFORCED);}
+        mBuilder.setVibrate(vibratePattern);
+        mBuilder.setLights(0xff00ff00, 300, 1000);
+        mBuilder.setSound(Uri.parse(calibration_notification_sound), AudioAttributes.USAGE_ALARM);
         NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static void notificationUpdate(String title, String content, Intent intent, int notificationId) {
+    private void notificationUpdate(String title, String content, Intent intent, int notificationId) {
         NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
         NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.notify(notificationId, mBuilder.build());
     }
 
-    public static NotificationCompat.Builder notificationBuilder(String title, String content, Intent intent) {
+    private NotificationCompat.Builder notificationBuilder(String title, String content, Intent intent) {
         return new NotificationCompat.Builder(mContext)
                 .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
                 .setContentTitle(title)
                 .setContentText(content)
                 .setContentIntent(notificationIntent(intent));
     }
-    public static PendingIntent notificationIntent(Intent intent){
+
+    private PendingIntent notificationIntent(Intent intent){
         return PendingIntent.getActivity(mContext, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
 
     }
 
-    public static void notificationDismiss(int notificationId) {
+    private void notificationDismiss(int notificationId) {
         NotificationManager mNotifyMgr = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
         mNotifyMgr.cancel(notificationId);
     }
 
-    public static void bgAlert(String value, String slopeArrow) {
+
+    private void bgAlert(String value, String slopeArrow) {
         UserNotification userNotification = UserNotification.lastBgAlert();
 
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * bg_snooze)))) {
@@ -318,7 +467,7 @@ public static void bgAlert(String value, String slopeArrow) {
         }
     }
 
-    public static void calibrationRequest() {
+    private void calibrationRequest() {
         UserNotification userNotification = UserNotification.lastCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -329,7 +478,8 @@ public static void calibrationRequest() {
             calibrationNotificationCreate(title, content, intent, calibrationNotificationId);
         }
     }
-    public static void doubleCalibrationRequest() {
+
+    private void doubleCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastDoubleCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -341,7 +491,7 @@ public static void doubleCalibrationRequest() {
         }
     }
 
-    public static void extraCalibrationRequest() {
+    private void extraCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastExtraCalibrationAlert();
         if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * calibration_snooze)))) {
             if (userNotification != null) { userNotification.delete(); }
@@ -353,7 +503,57 @@ public static void extraCalibrationRequest() {
         }
     }
 
-    public static void clearCalibrationRequest() {
+    public static void bgUnclearAlert(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String otherAlertsSound = prefs.getString("other_alerts_sound", "content://settings/system/notification_sound");
+        int otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
+
+        UserNotification userNotification = UserNotification.lastUnclearReadingsAlert();
+        if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * otherAlertSnooze)))) {
+            if (userNotification != null) { userNotification.delete(); }
+            UserNotification newUserNotification = UserNotification.create("Unclear Sensor Readings", "bg_unclear_readings_alert");
+            Intent intent = new Intent(context, Home.class);
+            NotificationCompat.Builder mBuilder =
+                    new NotificationCompat.Builder(context)
+                            .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
+                            .setContentTitle("Unclear Sensor Readings")
+                            .setContentIntent(PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT));
+            mBuilder.setVibrate(vibratePattern);
+            mBuilder.setLights(0xff00ff00, 300, 1000);
+            mBuilder.setSound(Uri.parse(otherAlertsSound), AudioAttributes.USAGE_ALARM);
+            NotificationManager mNotifyMgr = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+            mNotifyMgr.cancel(uncleanAlertNotificationId);
+            mNotifyMgr.notify(uncleanAlertNotificationId, mBuilder.build());
+        }
+    }
+
+    public static void bgMissedAlert(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String otherAlertsSound = prefs.getString("other_alerts_sound", "content://settings/system/notification_sound");
+        int otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
+
+        UserNotification userNotification = UserNotification.LastMissedAlert();
+        if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * otherAlertSnooze)))) {
+            if (userNotification != null) {
+                userNotification.delete();
+            }
+            UserNotification newUserNotification = UserNotification.create("BG Readings Missed", "missing_readings_alert");
+            Intent intent = new Intent(context, Home.class);
+            NotificationCompat.Builder mBuilder =
+                    new NotificationCompat.Builder(context)
+                            .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
+                            .setContentTitle("BG Readings Missed")
+                            .setContentIntent(PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT));
+            mBuilder.setVibrate(vibratePattern);
+            mBuilder.setLights(0xff00ff00, 300, 1000);
+            mBuilder.setSound(Uri.parse(otherAlertsSound), AudioAttributes.USAGE_ALARM);
+            NotificationManager mNotifyMgr = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
+            mNotifyMgr.cancel(missedAlertNotificationId);
+            mNotifyMgr.notify(missedAlertNotificationId, mBuilder.build());
+        }
+    }
+
+    private void clearCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -361,7 +561,7 @@ public static void clearCalibrationRequest() {
         }
     }
 
-    public static void clearDoubleCalibrationRequest() {
+    private void clearDoubleCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastDoubleCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -369,7 +569,7 @@ public static void clearDoubleCalibrationRequest() {
         }
     }
 
-    public static void clearExtraCalibrationRequest() {
+    private void clearExtraCalibrationRequest() {
         UserNotification userNotification = UserNotification.lastExtraCalibrationAlert();
         if (userNotification != null) {
             userNotification.delete();
@@ -377,7 +577,7 @@ public static void clearExtraCalibrationRequest() {
         }
     }
 
-    public static void clearBgAlert() {
+    private void clearBgAlert() {
         UserNotification userNotification = UserNotification.lastBgAlert();
         if (userNotification != null) {
             userNotification.delete();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java
new file mode 100644
index 0000000..a04f95c
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NotificationsReceiver.java
@@ -0,0 +1,25 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+
+
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.util.Log;
+
+public class NotificationsReceiver extends BroadcastReceiver {
+
+    private final static String TAG = Notifications.class.getSimpleName();
+    
+    @Override
+    public void onReceive(Context context, Intent intent) {
+
+        Log.e(TAG, "New onRecieve called Threadid " + Thread.currentThread().getId());
+
+        Notifications notifications = Notifications.getInstance(context);
+        notifications.periodicTimer(context);
+        Notifications.getInstance(context).FileBasedNotifications(context);
+
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index e335f8c..ca4ee22 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -136,7 +136,12 @@ public void onCreate(Bundle savedInstanceState) {
             bindPreferenceSummaryToValue(findPreference("units"));
 
             addPreferencesFromResource(R.xml.pref_notifications);
-            bindPreferenceSummaryToValue(findPreference("bg_snooze"));
+            bindPreferenceSummaryToValue(findPreference("calibration_notification_sound"));
+            bindPreferenceSummaryToValue(findPreference("calibration_snooze"));
+            bindPreferenceSummaryToValue(findPreference("bg_unclear_readings_minutes"));
+            bindPreferenceSummaryToValue(findPreference("bg_missed_minutes"));
+            bindPreferenceSummaryToValue(findPreference("other_alerts_sound"));
+            bindPreferenceSummaryToValue(findPreference("other_alerts_snooze"));
 
             addPreferencesFromResource(R.xml.pref_data_source);
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java b/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
index 7edf66a..8f91b80 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/xdrip.java
@@ -39,8 +39,8 @@
     @Override
     public void onCreate() {
         super.onCreate();
-        Fabric.with(this, new Crashlytics());
+        //Fabric.with(this, new Crashlytics());
         // The following line triggers the initialization of ACRA
-        //ACRA.init(this);
+        // ACRA.init(this);
     }
 }
diff --git a/app/src/main/res/layout/activity_alert_list.xml b/app/src/main/res/layout/activity_alert_list.xml
new file mode 100644
index 0000000..31124f3
--- /dev/null
+++ b/app/src/main/res/layout/activity_alert_list.xml
@@ -0,0 +1,61 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical"
+    android:gravity="center_horizontal"
+    android:showDividers="middle">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_weight=".46"
+        android:layout_height="0dp"
+        android:layout_gravity="center_horizontal"
+        android:gravity="center_horizontal"
+        android:weightSum="1">
+        <Button
+            android:id="@+id/button_create_low"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="Create low alert" />
+        <ListView
+            android:id="@+id/listView_low"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_gravity="bottom"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_weight=".46"
+        android:layout_height="0dp"
+        android:layout_gravity="center_horizontal"
+        android:gravity="center_horizontal">
+        <Button
+            android:id="@+id/button_create_high"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="Create high alert"/>
+        <ListView
+            android:id="@+id/listView_high"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_weight=".08"
+        android:layout_height="0dp"
+        android:gravity="center_horizontal"
+        android:showDividers="middle">
+        <TextView
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="(Long Press an existing alert to edit)"
+            android:textSize="12sp"
+            android:gravity="center_horizontal" />
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/app/src/main/res/layout/activity_calibration_graph.xml b/app/src/main/res/layout/activity_calibration_graph.xml
index 9c81129..1207214 100644
--- a/app/src/main/res/layout/activity_calibration_graph.xml
+++ b/app/src/main/res/layout/activity_calibration_graph.xml
@@ -30,7 +30,8 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:textAppearance="?android:attr/textAppearanceLarge"
-                    android:id="@+id/currentBgValueRealTime"
+                    android:id="@+id/CalibrationGraphHeader"
+                    android:text="calibration graph (no calibration)"
                     android:layout_centerVertical="true"
                     android:layout_centerHorizontal="true" />
             </RelativeLayout>
diff --git a/app/src/main/res/layout/activity_edit_alert.xml b/app/src/main/res/layout/activity_edit_alert.xml
new file mode 100644
index 0000000..2db49a0
--- /dev/null
+++ b/app/src/main/res/layout/activity_edit_alert.xml
@@ -0,0 +1,329 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" android:paddingLeft="@dimen/activity_horizontal_margin"
+    android:paddingRight="@dimen/activity_horizontal_margin"
+    android:paddingTop="@dimen/activity_vertical_margin"
+    android:paddingBottom="@dimen/activity_vertical_margin"
+    tools:context="com.eveningoutpost.dexdrip.FakeNumbers">
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:gravity="center_horizontal">
+        <TextView
+            android:id="@+id/view_alert_header"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="replace dyanmicly (edit_alert_header)"
+            android:textSize="24dp"
+            android:layout_gravity="center"
+            android:gravity="center_horizontal"
+            android:paddingBottom="20dp" />
+
+        <ScrollView
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:id="@+id/scrollView"
+            android:layout_gravity="center_horizontal">
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="fill_parent"
+                android:layout_height="match_parent"
+                android:gravity="center_horizontal">
+                <LinearLayout
+                    android:id="@+id/linear_layout_alert"
+                    android:orientation="vertical"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:layout_below="@+id/view_alert_header">
+
+                    <LinearLayout
+                    android:orientation="horizontal"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content">
+                        <TextView
+                            android:id="@+id/view_alert_text"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="Alert Name:"
+                            android:textSize="15sp"/>
+
+                        <EditText
+                            android:id="@+id/edit_alert_text"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:inputType="text"
+                            android:ems="10"
+                            android:autoText="false"
+                            android:text=""
+                            android:singleLine="true"
+                            android:textAlignment="center"
+                            android:textSize="15sp"
+                            android:layout_alignParentStart="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:paddingTop="20dp">
+                        <TextView
+                            android:id="@+id/view_alert_threshold"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="Threshold:"
+                            android:textSize="15sp"
+                            />
+
+                        <EditText
+                            android:layout_width="101dp"
+                            android:layout_height="wrap_content"
+                            android:inputType="number"
+                            android:ems="10"
+                            android:id="@+id/edit_alert_threshold"
+                            android:autoText="false"
+                            android:text=""
+                            android:singleLine="true"
+                            android:textAlignment="center"
+                            android:textSize="15sp"
+                            android:layout_alignParentStart="true" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="fill_parent"
+                        android:layout_height="fill_parent"
+                        android:paddingTop="20dp">
+
+                        <TextView
+                            android:id="@+id/view_alert_default_snooze"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="Default Snooze:"
+                            android:textSize="15sp"
+                            />
+
+                        <EditText
+                            android:layout_width="101dp"
+                            android:layout_height="wrap_content"
+                            android:inputType="number"
+                            android:ems="10"
+                            android:id="@+id/edit_snooze"
+                            android:autoText="false"
+                            android:text=""
+                            android:singleLine="true"
+                            android:textAlignment="center"
+                            android:textSize="15sp"
+                            android:layout_alignParentStart="true" />
+
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="vertical"
+                        android:layout_width="fill_parent"
+                        android:layout_height="fill_parent"
+                        android:paddingTop="20dp">
+
+                        <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content">
+
+                        <TextView
+                                android:id="@+id/view_alert_mp3_file"
+                                android:layout_width="wrap_content"
+                                android:layout_height="wrap_content"
+                                android:gravity="left"
+                                android:text="Alert Tone:"
+                                android:textSize="15sp"/>
+                        <EditText
+                            android:id="@+id/edit_alert_mp3_file"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:inputType="text"
+                            android:ems="10"
+                            android:autoText="false"
+                            android:text=""
+                            android:singleLine="true"
+                            android:textAlignment="center"
+                            android:textSize="15sp"
+                            android:layout_alignParentStart="true"
+                            android:editable="false" />
+
+                        </LinearLayout>
+
+                        <Button
+                            android:id="@+id/Button_alert_mp3_file"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="Choose file"
+                            android:layout_gravity="center" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="vertical"
+                        android:layout_width="fill_parent"
+                        android:layout_height="wrap_content"
+                        android:paddingTop="20dp">
+
+                        <TextView
+                            android:id="@+id/view_alert_time"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="Select time for alert:"
+                            android:textSize="15sp"
+                            android:layout_gravity="left"
+                            android:paddingRight="10dp" />
+
+                        <CheckBox
+                            android:id="@+id/check_alert_time"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="all day"
+                            android:textSize="15sp"
+                            android:layout_gravity="center"
+                            android:gravity="right" />
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center"
+                        android:id="@+id/time_between">
+
+                        <TextView
+                            android:id="@+id/view_alert_time_start"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="12:00 AM"
+                            android:textSize="15sp"
+                            android:paddingRight="20dp" />
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:textAppearance="?android:attr/textAppearanceMedium"
+                            android:text="--"/>
+
+                        <TextView
+                            android:id="@+id/view_alert_time_end"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="12:00 PM"
+                            android:textSize="15sp"
+                            android:paddingLeft="20dp" />
+
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center"
+                        android:id="@+id/time_instructions">
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="(tap to change)"
+                            android:textSize="15sp"
+                            android:paddingRight="25dp" />
+
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="(tap to change)"
+                            android:textSize="15sp"
+                            android:paddingLeft="25dp" />
+
+                    </LinearLayout>
+
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:paddingTop="20dp">
+
+                        <TextView
+                            android:id="@+id/view_alert_override_silent"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="Override Silent Mode:"
+                            android:textSize="15sp"
+                            />
+
+                        <CheckBox
+                            android:id="@+id/check_override_silent"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text=""
+                            android:textSize="15sp"/>
+
+                    </LinearLayout>
+
+
+                </LinearLayout>
+            <LinearLayout
+                android:id="@+id/linear_layout_test_buttons"
+                android:orientation="horizontal"
+                android:layout_width="fill_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@+id/linear_layout_alert"
+                android:gravity="center_horizontal"
+                android:paddingTop="20dp">
+                <Button
+                    android:id="@+id/edit_alert_test"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="test alert"
+                    android:layout_gravity="center_horizontal" />
+
+            </LinearLayout>
+
+                <LinearLayout
+                    android:id="@+id/linear_layout_buttons"
+                    android:orientation="horizontal"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_below="@+id/linear_layout_alert"
+                    android:gravity="center_horizontal"
+                    android:paddingTop="20dp">
+
+
+                    <Button
+                        android:id="@+id/edit_alert_save"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="save alert"
+                        android:layout_gravity="center_horizontal" />
+
+                    <Button
+                        android:id="@+id/edit_alert_remove"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="remove alert"
+                        android:layout_gravity="center_horizontal" />
+
+                    <Button
+                        android:id="@+id/edit_alert_pre_snooze"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="snooze alert before it fires"
+                        android:layout_gravity="center_horizontal" />
+                </LinearLayout>
+            </LinearLayout>
+
+        </ScrollView>
+    </LinearLayout>
+</RelativeLayout>
diff --git a/app/src/main/res/layout/activity_fake_numbers.xml b/app/src/main/res/layout/activity_fake_numbers.xml
index 5c1987f..521acd5 100644
--- a/app/src/main/res/layout/activity_fake_numbers.xml
+++ b/app/src/main/res/layout/activity_fake_numbers.xml
@@ -43,5 +43,19 @@
         android:id="@+id/timePicker"
         android:layout_centerVertical="true"
         android:layout_alignParentStart="true" />
+    
+        <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="StartTest"
+        android:id="@+id/StartTest"
+         android:layout_below="@+id/timePicker"/>
+        
+         <Button
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="StartTestAlerts"
+        android:id="@+id/StartTestAlerts"
+         android:layout_below="@+id/StartTest"/>
 
 </RelativeLayout>
diff --git a/app/src/main/res/layout/activity_snooze.xml b/app/src/main/res/layout/activity_snooze.xml
new file mode 100644
index 0000000..96145aa
--- /dev/null
+++ b/app/src/main/res/layout/activity_snooze.xml
@@ -0,0 +1,71 @@
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="fill_parent"
+    android:orientation="vertical"
+    android:gravity="center_horizontal"
+    android:showDividers="middle">
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:layout_weight=".3"
+        android:orientation="vertical"
+        android:gravity="center_horizontal">
+        <Button
+            android:id="@+id/button_snooze"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:text="@string/snooze"
+            android:layout_margin="20dp"
+            android:textSize="30sp" />
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:layout_weight=".3"
+        android:orientation="vertical"
+        android:gravity="center_horizontal">
+
+        <NumberPicker
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/snooze"
+            android:layout_gravity="center_horizontal"
+            android:descendantFocusability="blocksDescendants"/>
+    </LinearLayout>
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:layout_weight=".3"
+        android:orientation="vertical"
+        android:gravity="center_horizontal"
+        android:paddingTop="10dp">
+
+        <TextView
+            android:id="@+id/alert_status"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center_horizontal"
+            android:text="replace dyanmicly (alert status)"
+            android:textSize="20sp"/>
+        </LinearLayout>
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="0dp"
+        android:layout_weight=".1"
+        android:orientation="vertical"
+        android:gravity="center_horizontal">
+        <Button
+            android:id="@+id/button_disable_alerts"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="Disable All alerts"/>
+        <Button
+            android:id="@+id/enable_alerts"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:text="Re-Enable Alerts"/>
+    </LinearLayout>
+
+
+
+</LinearLayout>
diff --git a/app/src/main/res/layout/row_alerts.xml b/app/src/main/res/layout/row_alerts.xml
new file mode 100644
index 0000000..c0e8b6b
--- /dev/null
+++ b/app/src/main/res/layout/row_alerts.xml
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="fill_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical" >
+
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+            android:id="@+id/alertName"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="TextView"
+            android:layout_weight="1"
+              android:gravity="center"
+            android:textAppearance="@android:style/TextAppearance.DeviceDefault.Small"  />
+
+        <TextView
+            android:id="@+id/alertThreshold"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="TextView"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:textAppearance="@android:style/TextAppearance.DeviceDefault.Small" />
+
+        <TextView
+            android:id="@+id/alertTime"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="TextView"
+            android:layout_weight="1"
+            android:gravity="center"
+            android:textAppearance="@android:style/TextAppearance.DeviceDefault.Small"   />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="fill_parent"
+        android:layout_height="wrap_content">
+
+        <TextView
+          android:id="@+id/alertOverrideSilent"
+          android:layout_width="wrap_content"
+          android:layout_height="wrap_content"
+          android:text="TextView"
+          android:gravity="center"
+          android:layout_weight="1"
+          android:textAppearance="@android:style/TextAppearance.DeviceDefault.Small"  />
+
+        <TextView
+            android:id="@+id/alertMp3File"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="TextView"
+            android:gravity="center"
+            android:layout_weight="1"
+            android:textAppearance="@android:style/TextAppearance.DeviceDefault.Small"  />
+    </LinearLayout>
+
+
+</LinearLayout>
diff --git a/app/src/main/res/layout/snooze_picker.xml b/app/src/main/res/layout/snooze_picker.xml
new file mode 100644
index 0000000..3e9e1b5
--- /dev/null
+++ b/app/src/main/res/layout/snooze_picker.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="fill_parent"
+    android:layout_height="fill_parent">
+
+    <LinearLayout
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:layout_gravity="center"
+        android:orientation="vertical"
+        android:gravity="center_horizontal">
+
+        <NumberPicker
+                android:id="@+id/numberPicker1"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentTop="true"
+                android:layout_centerHorizontal="true"/>
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:layout_gravity="center_horizontal"
+            android:gravity="center_horizontal">
+
+            <Button
+                    android:id="@+id/button2"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="Cancel" />
+
+            <Button
+                    android:id="@+id/button1"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:text="Set" />
+        </LinearLayout>
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/app/src/main/res/menu/menu_alert_list.xml b/app/src/main/res/menu/menu_alert_list.xml
new file mode 100644
index 0000000..9caedbc
--- /dev/null
+++ b/app/src/main/res/menu/menu_alert_list.xml
@@ -0,0 +1,6 @@
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    tools:context="com.eveningoutpost.dexdrip.AlertList">
+    <item android:id="@+id/action_settings" android:title="@string/action_settings"
+        android:orderInCategory="100" android:showAsAction="never" />
+</menu>
diff --git a/app/src/main/res/raw/default_alert.mp3 b/app/src/main/res/raw/default_alert.mp3
new file mode 100644
index 0000000..0db04b3
Binary files /dev/null and b/app/src/main/res/raw/default_alert.mp3 differ
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index 46a65b7..664513a 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -24,4 +24,10 @@
         <item>mgdl</item>
         <item>mmol</item>
     </string-array>
+
+    <string-array name="alertType">
+        <item>System Sound/Alarm</item>
+        <item>Custom Sound/Alarm</item>
+        <item>Defautl xdrip sound</item>
+    </string-array>
 </resources>
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index fe5fd43..5a48bcc 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -35,6 +35,8 @@
     <string name="action_example">Example action</string>
     <string name="title_activity_calibration_check_in">CalibrationCheckInActivity</string>
     <string name="title_activity_usb_connected">UsbConnectedActivity</string>
+    <string name="snooze">Snooze</string>
+    <string name="snooze_hint">Snooze alert for x minutes</string>
 
     <string-array name="menu_options">
         <item>Dex Drip</item>
@@ -50,6 +52,8 @@
     <string name="title_activity_main">MainActivity</string>
     <string name="title_activity_calibration_data_table">CalibrationDataTable</string>
     <string name="title_activity_fake_numbers">FakeNumbers</string>
+    <string name="title_activity_edit_alert">EditAlert</string>
+    <string name="title_snooze">Snooze</string>
     <string name="title_activity_double_calibration">DoubleCalibrationActivity</string>
     <string name="title_activity_calibration_override">CalibrationOverride</string>
     <string name="title_activity_calibration_graph">CalibrationGraph</string>
@@ -93,5 +97,6 @@
     <string name="toast_crash">Something went wrong :( a report has been sent to help fix the issue.</string>
     <string name="appwidget_text">EXAMPLE</string>
     <string name="add_widget">Add widget</string>
+    <string name="title_activity_alert_list">AlertList</string>
 
 </resources>
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index f4dfa13..13ed671 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -18,7 +18,7 @@
         <CheckBoxPreference
             android:key="run_service_in_foreground"
             android:title="Run Collection Service in foreground"
-            android:summary="Running in foreground prevents android from killing the service to free up memory but it creates an annoying notification."
+            android:summary="Running in foreground prevents android from killing the service and creates a notification with a trend line."
             android:defaultValue="false" />
         <EditTextPreference
             android:title="List of recievers"
diff --git a/app/src/main/res/xml/pref_notifications.xml b/app/src/main/res/xml/pref_notifications.xml
index e05ad40..45d1f35 100644
--- a/app/src/main/res/xml/pref_notifications.xml
+++ b/app/src/main/res/xml/pref_notifications.xml
@@ -2,48 +2,15 @@
     <PreferenceCategory
         android:title="Alerts and Notifications"
         android:key="alerts_category">
-        <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
-            android:title="BG Level Alerts">
-            <CheckBoxPreference
-                android:key="bg_notifications"
-                android:title="BG Alerts"
-                android:summary="Alert when BG readings cross the threshold."
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="bg_notifications"
-                android:key="bg_vibrate"
-                android:title="Vibrate on BG alerts"
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="bg_notifications"
-                android:key="bg_lights"
-                android:title="Flash lights on BG alerts"
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="bg_notifications"
-                android:key="bg_play_sound"
-                android:title="Play sound on BG alerts"
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="bg_play_sound"
-                android:key="bg_sound_in_silent"
-                android:title="Play alert sounds even in silent mode"
-                android:defaultValue="false" />
-            <RingtonePreference
-                android:dependency="bg_play_sound"
-                android:key="bg_notification_sound"
-                android:title="Alert Sound"
-                android:ringtoneType="notification"
-                android:summary="Set sound used for BG Alerts."
-                android:defaultValue="content://settings/system/notification_sound" />
-            <EditTextPreference
-                android:dependency="bg_notifications"
-                android:key="bg_snooze"
-                android:title="Alert Snooze"
-                android:numeric="integer"
-                android:summary="Minimum number of minutes to pass before raising the same alert."
-                android:defaultValue="20" />
-        </PreferenceScreen>
+        <Preference android:title="Bg Level Alerts"
+            android:key="bg_level_alerts" >
+            <intent
+                android:action="android.intent.action.MAIN"
+                android:targetPackage="com.eveningoutpost.dexdrip"
+                android:targetClass="com.eveningoutpost.dexdrip.AlertList"
+                />
+        </Preference>
+
 
 
         <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
@@ -54,23 +21,8 @@
                 android:title="Calibration Alerts"
                 android:summary="Alert when a calibration is requested"
                 android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="calibration_notifications"
-                android:key="calibration_vibrate"
-                android:title="Vibrate on calibration requests"
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="calibration_notifications"
-                android:key="calibration_lights"
-                android:title="Flash lights on calibration requests"
-                android:defaultValue="true" />
-            <CheckBoxPreference
-                android:dependency="calibration_notifications"
-                android:key="calibration_play_sound"
-                android:title="Play sound on calibration requests"
-                android:defaultValue="true" />
             <RingtonePreference
-                android:dependency="calibration_play_sound"
+
                 android:key="calibration_notification_sound"
                 android:title="Calibration Request Sound"
                 android:ringtoneType="notification"
@@ -84,5 +36,58 @@
                 android:summary="Number of minutes to pass before raising the same calibration request."
                 android:defaultValue="20" />
         </PreferenceScreen>
+
+        <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+            android:title="Other Alerts"
+            android:key="other_alerts_screen">
+
+            <PreferenceCategory
+                android:title="Noisey Readings">
+                <CheckBoxPreference
+                    android:key="bg_unclear_readings_alerts"
+                    android:title="Bad (noisey) Value Alerts"
+                    android:defaultValue="false" />
+                <EditTextPreference
+                    android:dependency="bg_unclear_readings_alerts"
+                    android:key="bg_unclear_readings_minutes"
+                    android:title="Alert after x minutes of noisey values"
+                    android:inputType="number"
+                    android:summary=""
+                    android:defaultValue="90" />
+            </PreferenceCategory>
+
+            <PreferenceCategory
+                android:title="Missed Readings">
+                <CheckBoxPreference
+                    android:key="bg_missed_alerts"
+                    android:title="Missed Reading Alerts"
+                    android:defaultValue="false" />
+                <EditTextPreference
+                    android:dependency="bg_missed_alerts"
+                    android:key="bg_missed_minutes"
+                    android:title="Minutes until alerting for missed readings"
+                    android:inputType="number"
+                    android:summary="Alert if no data receieved in x minutes"
+                    android:defaultValue="30" />
+            </PreferenceCategory>
+
+            <PreferenceCategory
+                android:title="Alert Preferences (for these alerts)">
+                <RingtonePreference
+                    android:key="other_alerts_sound"
+                    android:title="Alert Sound"
+                    android:ringtoneType="alarm"
+                    android:showSilent="true"
+                    android:summary="Set sound used for BG Alerts."
+                    android:defaultValue="content://settings/system/alarm_alert" />
+                <EditTextPreference
+                    android:key="other_alerts_snooze"
+                    android:title="Alert Snooze"
+                    android:numeric="integer"
+                    android:summary="Minimum number of minutes to pass before raising the same alert."
+                    android:defaultValue="20" />
+            </PreferenceCategory>
+        </PreferenceScreen>
     </PreferenceCategory>
 </PreferenceScreen>
+

diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 517a009..0a457ea 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -60,6 +60,8 @@
     private List<PointValue> lowValues = new ArrayList<PointValue>();
     private List<PointValue> rawInterpretedValues = new ArrayList<PointValue>();
     private List<PointValue> calibrationValues = new ArrayList<PointValue>();
+    static final boolean LINE_VISIBLE = true;
+    static final boolean FILL_UNDER_LINE = false;
     public Viewport viewport;
 
 
@@ -183,27 +185,41 @@ private void addBgReadingValues() {
         }
     }
 
-    public Line highLine() {
+    public Line highLine(){ return highLine(LINE_VISIBLE);}
+
+    public Line highLine(boolean show) {
         List<PointValue> highLineValues = new ArrayList<PointValue>();
         highLineValues.add(new PointValue((float) start_time, (float) highMark));
         highLineValues.add(new PointValue((float) end_time, (float) highMark));
         Line highLine = new Line(highLineValues);
         highLine.setHasPoints(false);
         highLine.setStrokeWidth(1);
-        highLine.setColor(ChartUtils.COLOR_ORANGE);
+        if(show) {
+            highLine.setColor(ChartUtils.COLOR_ORANGE);
+        } else {
+            highLine.setColor(Color.TRANSPARENT);
+        }
         return highLine;
     }
 
-    public Line lowLine() {
+    public Line lowLine(){ return lowLine(LINE_VISIBLE, FILL_UNDER_LINE);}
+
+    public Line lowLine(boolean show, boolean line_only) {
         List<PointValue> lowLineValues = new ArrayList<PointValue>();
         lowLineValues.add(new PointValue((float)start_time, (float)lowMark));
-        lowLineValues.add(new PointValue((float)end_time, (float)lowMark));
+        lowLineValues.add(new PointValue((float) end_time, (float) lowMark));
         Line lowLine = new Line(lowLineValues);
         lowLine.setHasPoints(false);
-        lowLine.setAreaTransparency(50);
-        lowLine.setColor(Color.parseColor("#C30909"));
+        if(!line_only) {
+            lowLine.setAreaTransparency(50);
+            lowLine.setFilled(true);
+        }
         lowLine.setStrokeWidth(1);
-        lowLine.setFilled(true);
+        if(show){
+            lowLine.setColor(Color.parseColor("#C30909"));
+        } else {
+            lowLine.setColor(Color.TRANSPARENT);
+        }
         return lowLine;
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
index c94b37d..a7fe37c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
@@ -38,6 +38,7 @@
     private boolean showHighLine = false;
     private boolean showAxes = false;
     private boolean useSmallDots = true;
+    private boolean useTinyDots = false;
 
     public BgSparklineBuilder setStart(long start) {
         this.start = start / BgGraphBuilder.FUZZER;
@@ -100,11 +101,17 @@ public BgSparklineBuilder setSmallDots(boolean useSmallDots) {
         this.useSmallDots = useSmallDots;
         return this;
     }
+    public BgSparklineBuilder setTinyDots(boolean useTinyDots) {
+        this.useTinyDots = useTinyDots;
+        return this;
+    }
 
     public BgSparklineBuilder setSmallDots() {
         return this.setSmallDots(true);
     }
 
+    public BgSparklineBuilder setTinyDots() { return this.setTinyDots(true); }
+
     public BgSparklineBuilder setBgGraphBuilder(BgGraphBuilder bgGraphBuilder) {
         this.bgGraphBuilder = bgGraphBuilder;
         return this;
@@ -165,14 +172,16 @@ public Bitmap build() {
         lines.add(bgGraphBuilder.inRangeValuesLine());
         lines.add(bgGraphBuilder.lowValuesLine());
         lines.add(bgGraphBuilder.highValuesLine());
-        if (showLowLine)
-            lines.add(bgGraphBuilder.lowLine());
-        if (showHighLine)
-            lines.add(bgGraphBuilder.highLine());
+        lines.add(bgGraphBuilder.lowLine(showLowLine, true));
+        lines.add(bgGraphBuilder.highLine(showHighLine));
         if (useSmallDots) {
             for(Line line: lines)
                 line.setPointRadius(2);
         }
+        if (useTinyDots) {
+            for(Line line: lines)
+                line.setPointRadius(1);
+        }
         LineChartData lineData = new LineChartData(lines);
         if (showAxes) {
             lineData.setAxisYLeft(bgGraphBuilder.yAxis());

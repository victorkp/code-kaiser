diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
index db43274..8470c59 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/ImportedLibraries/dexcom/SyncingService.java
@@ -117,29 +117,33 @@ private void performCalibrationCheckin(){
         PowerManager pm = (PowerManager) getApplicationContext().getSystemService(Context.POWER_SERVICE);
         PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "NSDownload");
         wl.acquire();
-        Log.w("CALIBRATION-CHECK-IN: ", "Wake Lock Acquired");
-        if (acquireSerialDevice()) {
-            try {
-                ReadData readData = new ReadData(mSerialDevice, mConnection, dexcom);
+        try {
+            Log.w("CALIBRATION-CHECK-IN: ", "Wake Lock Acquired");
+            if (acquireSerialDevice()) {
+                try {
+                    ReadData readData = new ReadData(mSerialDevice, mConnection, dexcom);
 
 //                ReadData readData = new ReadData(mSerialDevice);
-                CalRecord[] calRecords = readData.getRecentCalRecords();
-                Log.w("CALIBRATION-CHECK-IN: ", "Found "+ calRecords.length + " Records!");
-                save_most_recent_cal_record(calRecords);
+                    CalRecord[] calRecords = readData.getRecentCalRecords();
+                    Log.w("CALIBRATION-CHECK-IN: ", "Found " + calRecords.length + " Records!");
+                    save_most_recent_cal_record(calRecords);
+
+                } catch (Exception e) {
+                    Log.wtf("Unhandled exception caught", e);
+                } finally {
+                    // Close serial
+                    try {
+                        mSerialDevice.getPorts().get(0).close();
+                    } catch (IOException e) {
+                        Log.e(TAG, "Unable to close", e);
+                    }
 
-            } catch (Exception e) {
-                Log.wtf("Unhandled exception caught", e);
-            } finally {
-                // Close serial
-                try {
-                    mSerialDevice.getPorts().get(0).close();
-                } catch (IOException e) {
-                    Log.e(TAG, "Unable to close", e);
                 }
-
+            } else {
+                Log.w("CALIBRATION-CHECK-IN: ", "Failed to acquire serial device");
             }
-        } else {
-            Log.w("CALIBRATION-CHECK-IN: ", "Failed to acquire serial device");
+        } finally {
+            wl.release();
         }
     }
 
@@ -150,6 +154,15 @@ private void handleActionSync(int numOfPages) {
         PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "NSDownload");
         wl.acquire();
 
+        try {
+            sync(numOfPages);
+        } finally {
+            wl.release();
+        }
+    }
+
+    private void sync(int numOfPages) {
+        boolean broadcastSent;
         if (acquireSerialDevice()) {
             try {
 
@@ -212,9 +225,7 @@ private void handleActionSync(int numOfPages) {
 
             }
         }
-//        if (!broadcastSent) broadcastSGVToUI();
-
-        wl.release();
+        //        if (!broadcastSent) broadcastSGVToUI();
     }
 
     private void save_most_recent_cal_record(CalRecord[] calRecords) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index 8eb635c..cfe1b4a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -47,10 +47,15 @@
 import com.eveningoutpost.dexdrip.UtilityModels.HM10Attributes;
 import com.eveningoutpost.dexdrip.Models.TransmitterData;
 
+import java.nio.charset.Charset;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.UUID;
 
+import static com.activeandroid.ActiveAndroid.beginTransaction;
+import static com.activeandroid.ActiveAndroid.endTransaction;
+import static com.activeandroid.ActiveAndroid.setTransactionSuccessful;
+
 @TargetApi(Build.VERSION_CODES.KITKAT)
 public class DexCollectionService extends Service {
     private final static String TAG = DexCollectionService.class.getSimpleName();
@@ -283,26 +288,39 @@ public void close() {
     }
 
     public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
-        Log.w(TAG, "received some data!");
+        try {
+            Log.w(TAG, "received some data: " + new String(buffer, 0, len, Charset.forName("ISO-8859-1")));
+        } catch (Exception ex) {
+            Log.w(TAG, "received some data!");
+        }
+
         PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
         PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                 "ReceivedReading");
         wakeLock.acquire();
+        try {
+            beginTransaction();
+            try {
+                long timestamp = new Date().getTime();
+                TransmitterData transmitterData = TransmitterData.create(buffer, len, timestamp);
+                if (transmitterData != null) {
+                    Sensor sensor = Sensor.currentSensor();
+                    if (sensor != null) {
+                        sensor.latest_battery_level = transmitterData.sensor_battery_level;
+                        sensor.save();
 
-
-        Long timestamp = new Date().getTime();
-        TransmitterData transmitterData = TransmitterData.create(buffer, len, timestamp);
-        if (transmitterData != null) {
-            Sensor sensor = Sensor.currentSensor();
-            if (sensor != null) {
-                sensor.latest_battery_level = transmitterData.sensor_battery_level;
-                sensor.save();
-
-                BgReading.create(transmitterData.raw_data, transmitterData.raw_data, this, timestamp);
-            } else {
-                Log.w(TAG, "No Active Sensor, Data only stored in Transmitter Data");
+                        BgReading.create(transmitterData.raw_data, this, timestamp);
+                    } else {
+                        Log.w(TAG, "No Active Sensor, Data only stored in Transmitter Data");
+                    }
+                }
+                setTransactionSuccessful();
+            } finally {
+                endTransaction();
             }
+        } finally {
+            wakeLock.release();
         }
-        wakeLock.release();
+
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index d3cd212..11824fd 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -72,58 +72,60 @@ public static void addToQueue(BgReading bgReading, String operation_type, Contex
                 "sendQueue");
         wakeLock.acquire();
 
-
-        BgSendQueue bgSendQueue = new BgSendQueue();
-        bgSendQueue.operation_type = operation_type;
-        bgSendQueue.bgReading = bgReading;
-        bgSendQueue.success = false;
-        bgSendQueue.mongo_success = false;
-        bgSendQueue.save();
-        Log.d("BGQueue", "New value added to queue!");
-
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-
-        Intent updateIntent = new Intent(Intents.ACTION_NEW_BG_ESTIMATE_NO_DATA);
-        context.sendBroadcast(updateIntent);
-        context.startService(new Intent(context, widgetUpdateService.class));
-
-        if (prefs.getBoolean("cloud_storage_mongodb_enable", false) || prefs.getBoolean("cloud_storage_api_enable", false)) {
-            Log.w("SENSOR QUEUE:", String.valueOf(bgSendQueue.mongo_success));
-            if (operation_type.compareTo("create") == 0) {
-                MongoSendTask task = new MongoSendTask(context, bgSendQueue);
-                task.execute();
+        try {
+            BgSendQueue bgSendQueue = new BgSendQueue();
+            bgSendQueue.operation_type = operation_type;
+            bgSendQueue.bgReading = bgReading;
+            bgSendQueue.success = false;
+            bgSendQueue.mongo_success = false;
+            bgSendQueue.save();
+            Log.d("BGQueue", "New value added to queue!");
+
+            SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+
+            Intent updateIntent = new Intent(Intents.ACTION_NEW_BG_ESTIMATE_NO_DATA);
+            context.sendBroadcast(updateIntent);
+            context.startService(new Intent(context, widgetUpdateService.class));
+
+            if (prefs.getBoolean("cloud_storage_mongodb_enable", false) || prefs.getBoolean("cloud_storage_api_enable", false)) {
+                Log.w("SENSOR QUEUE:", String.valueOf(bgSendQueue.mongo_success));
+                if (operation_type.compareTo("create") == 0) {
+                    MongoSendTask task = new MongoSendTask(context, bgSendQueue);
+                    task.execute();
+                }
             }
-        }
 
-        if(prefs.getBoolean("broadcast_data_through_intents", false)) {
-            Log.i("SENSOR QUEUE:", "Broadcast data");
-            final Bundle bundle = new Bundle();
-            bundle.putDouble(Intents.EXTRA_BG_ESTIMATE, bgReading.calculated_value);
-            bundle.putDouble(Intents.EXTRA_BG_SLOPE, bgReading.calculated_value_slope);
-            if(bgReading.hide_slope) {
-                bundle.putString(Intents.EXTRA_BG_SLOPE_NAME, "9");
-            } else {
-                bundle.putString(Intents.EXTRA_BG_SLOPE_NAME, bgReading.slopeName());
+            if (prefs.getBoolean("broadcast_data_through_intents", false)) {
+                Log.i("SENSOR QUEUE:", "Broadcast data");
+                final Bundle bundle = new Bundle();
+                bundle.putDouble(Intents.EXTRA_BG_ESTIMATE, bgReading.calculated_value);
+                bundle.putDouble(Intents.EXTRA_BG_SLOPE, bgReading.calculated_value_slope);
+                if (bgReading.hide_slope) {
+                    bundle.putString(Intents.EXTRA_BG_SLOPE_NAME, "9");
+                } else {
+                    bundle.putString(Intents.EXTRA_BG_SLOPE_NAME, bgReading.slopeName());
+                }
+                bundle.putInt(Intents.EXTRA_SENSOR_BATTERY, getBatteryLevel(context));
+                bundle.putLong(Intents.EXTRA_TIMESTAMP, bgReading.timestamp);
+
+                Intent intent = new Intent(Intents.ACTION_NEW_BG_ESTIMATE);
+                intent.putExtras(bundle);
+                context.sendBroadcast(intent, Intents.RECEIVER_PERMISSION);
             }
-            bundle.putInt(Intents.EXTRA_SENSOR_BATTERY, getBatteryLevel(context));
-            bundle.putLong(Intents.EXTRA_TIMESTAMP, bgReading.timestamp);
-
-            Intent intent = new Intent(Intents.ACTION_NEW_BG_ESTIMATE);
-            intent.putExtras(bundle);
-            context.sendBroadcast(intent, Intents.RECEIVER_PERMISSION);
-        }
 
-        if(prefs.getBoolean("broadcast_to_pebble", false)) {
-            PebbleSync pebbleSync = new PebbleSync();
-            pebbleSync.sendData(context, bgReading);
-        }
+            if (prefs.getBoolean("broadcast_to_pebble", false)) {
+                PebbleSync pebbleSync = new PebbleSync();
+                pebbleSync.sendData(context, bgReading);
+            }
 
-        if(prefs.getBoolean("share_upload", false)) {
-            ShareRest shareRest = new ShareRest(context);
-            Log.w("ShareRest", "About to call ShareRest!!");
-            shareRest.sendBgData(bgReading);
+            if (prefs.getBoolean("share_upload", false)) {
+                ShareRest shareRest = new ShareRest(context);
+                Log.w("ShareRest", "About to call ShareRest!!");
+                shareRest.sendBgData(bgReading);
+            }
+        } finally {
+            wakeLock.release();
         }
-        wakeLock.release();
     }
 
     public void markMongoSuccess() {

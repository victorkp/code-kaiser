diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index c83b446..6f417ca 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -120,12 +120,12 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
                         intercept= cal.first_intercept;
                         scale =  cal.first_scale;
                     } else {
-                        slope = cal.slope * 1000;
-                        intercept=  (cal.intercept * -1000) / (cal.slope * 1000);
+                        slope = 1000/cal.slope;
+                        intercept=  (cal.intercept * -1000) / (cal.slope);
                         scale = 1;
                     }
-                    unfiltered= bgReading.usedRaw();
-                    filtered = bgReading.ageAdjustedFiltered();
+                    unfiltered= bgReading.usedRaw()*1000;
+                    filtered = bgReading.ageAdjustedFiltered()*1000;
                 }
                 //raw logic from https://github.com/nightscout/cgm-remote-monitor/blob/master/lib/plugins/rawbg.js#L59
                 if (slope != 0 && intercept != 0 && scale != 0) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index 224668b..a1966b8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -237,6 +237,10 @@ private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record)
         }
 
         private void populateV1APICalibrationEntry(JSONArray array, Calibration record) throws Exception {
+
+            //do not upload undefined slopes
+            if(record.slope == 0d) return;
+
             JSONObject json = new JSONObject();
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
@@ -245,12 +249,12 @@ private void populateV1APICalibrationEntry(JSONArray array, Calibration record)
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
             if(record.check_in) {
-                json.put("slope", (long) (record.first_slope));
-                json.put("intercept", (long) ((record.first_intercept)));
+                json.put("slope", (record.first_slope));
+                json.put("intercept", ((record.first_intercept)));
                 json.put("scale", record.first_scale);
             } else {
-                json.put("slope", (long) (record.slope * 1000));
-                json.put("intercept", (long) ((record.intercept * -1000) / (record.slope * 1000)));
+                json.put("slope", (1000/record.slope));
+                json.put("intercept", ((record.intercept * -1000) / (record.slope)));
                 json.put("scale", 1);
             }
             array.put(json);
@@ -321,18 +325,20 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                         }
 
                         for (Calibration calRecord : calRecords) {
+                            //do not upload undefined slopes
+                            if(calRecord.slope == 0d) break;
                             // make db object
                             BasicDBObject testData = new BasicDBObject();
                             testData.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
                             testData.put("date", calRecord.timestamp);
                             testData.put("dateString", format.format(calRecord.timestamp));
                             if (calRecord.check_in) {
-                                testData.put("slope", (long) (calRecord.first_slope));
-                                testData.put("intercept", (long) ((calRecord.first_intercept)));
+                                testData.put("slope", (calRecord.first_slope));
+                                testData.put("intercept", ((calRecord.first_intercept)));
                                 testData.put("scale", calRecord.first_scale);
                             } else {
-                                testData.put("slope", (long) (calRecord.slope * 1000));
-                                testData.put("intercept", (long) ((calRecord.intercept * -1000) / (calRecord.slope * 1000)));
+                                testData.put("slope",  (1000/calRecord.slope));
+                                testData.put("intercept", ((calRecord.intercept * -1000) / (calRecord.slope)));
                                 testData.put("scale", 1);
                             }
                             testData.put("type", "cal");

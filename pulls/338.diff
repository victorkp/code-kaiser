diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
index cfebe77..992dada 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
@@ -309,10 +309,15 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
             if (!
                     (CollectionServiceStarter.isBTWixel(getApplicationContext())
                             || CollectionServiceStarter.isWifiandBTWixel(getApplicationContext())
-                    )) {
+                    ) || CollectionServiceStarter.isLimitter(getApplicationContext())) {
                 prefs.edit().putString("dex_collection_method", "BluetoothWixel").apply();
             }
             returnToHome();
+        } else if(device.getName().toLowerCase().contains("limitter")) {
+            if (!CollectionServiceStarter.isLimitter(getApplicationContext())) {
+                prefs.edit().putString("dex_collection_method", "LimiTTer").apply();
+            }
+            returnToHome();
         } else {
             returnToHome();
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index c1d8aee..de2396d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -15,6 +15,7 @@
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.SensorRecord;
 import com.eveningoutpost.dexdrip.ShareModels.ShareUploadableBg;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
+import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
 import com.google.gson.Gson;
@@ -225,7 +226,7 @@ public static void create(SensorRecord sensorRecord, long addativeOffset, Contex
                 bgReading.uuid = UUID.randomUUID().toString();
                 bgReading.time_since_sensor_started = bgReading.timestamp - sensor.started_at;
                 bgReading.synced = false;
-                bgReading.calculateAgeAdjustedRawValue();
+                bgReading.calculateAgeAdjustedRawValue(context);
                 bgReading.save();
             }
         }
@@ -323,7 +324,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
             bgReading.synced = false;
             bgReading.calibration_flag = false;
 
-            bgReading.calculateAgeAdjustedRawValue();
+            bgReading.calculateAgeAdjustedRawValue(context);
 
             bgReading.save();
             bgReading.perform_calculations();
@@ -340,7 +341,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
             bgReading.time_since_sensor_started = bgReading.timestamp - sensor.started_at;
             bgReading.synced = false;
 
-            bgReading.calculateAgeAdjustedRawValue();
+            bgReading.calculateAgeAdjustedRawValue(context);
 
             if(calibration.check_in) {
                 double firstAdjSlope = calibration.first_slope + (calibration.first_decay * (Math.ceil(new Date().getTime() - calibration.timestamp)/(1000 * 60 * 10)));
@@ -709,13 +710,13 @@ public void find_new_curve() {
         }
     }
 
-    public void calculateAgeAdjustedRawValue(){
+    public void calculateAgeAdjustedRawValue(Context context){
         double adjust_for = AGE_ADJUSTMENT_TIME - time_since_sensor_started;
-        if (adjust_for > 0) {
-            age_adjusted_raw_value = ((AGE_ADJUSTMENT_FACTOR * (adjust_for / AGE_ADJUSTMENT_TIME)) * raw_data) + raw_data;
-            Log.i(TAG, "calculateAgeAdjustedRawValue: RAW VALUE ADJUSTMENT FROM:" + raw_data + " TO: " + age_adjusted_raw_value);
-        } else {
-            age_adjusted_raw_value = raw_data;
+        if (adjust_for <= 0 || CollectionServiceStarter.isLimitter(context)) {
+                age_adjusted_raw_value = raw_data;
+            } else {
+                age_adjusted_raw_value = ((AGE_ADJUSTMENT_FACTOR * (adjust_for / AGE_ADJUSTMENT_TIME)) * raw_data) + raw_data;
+                Log.i(TAG, "calculateAgeAdjustedRawValue: RAW VALUE ADJUSTMENT FROM:" + raw_data + " TO: " + age_adjusted_raw_value);
         }
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index 327ed2c..5a868c0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -5,6 +5,8 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
+import android.support.annotation.NonNull;
+
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import com.activeandroid.Model;
@@ -15,6 +17,7 @@
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalSubrecord;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.CalibrationSendQueue;
+import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
 import com.eveningoutpost.dexdrip.UtilityModels.Notifications;
 import com.google.gson.Gson;
@@ -27,21 +30,45 @@
 import java.util.List;
 import java.util.UUID;
 
+
+
+
+class DexParameters extends SlopeParameters {
+    DexParameters(){
+        LOW_SLOPE_1 = 0.95;
+        LOW_SLOPE_2 = 0.85;
+        HIGH_SLOPE_1 = 1.3;
+        HIGH_SLOPE_2 = 1.4;
+        DEFAULT_LOW_SLOPE_LOW = 1.08;
+        DEFAULT_LOW_SLOPE_HIGH = 1.15;
+        DEFAULT_SLOPE = 1;
+        DEFAULT_HIGH_SLOPE_HIGH = 1.3;
+        DEFAUL_HIGH_SLOPE_LOW = 1.2;
+    }
+
+}
+
+class LiParameters extends SlopeParameters {
+    LiParameters(){
+        LOW_SLOPE_1 = 1;
+        LOW_SLOPE_2 = 1;
+        HIGH_SLOPE_1 = 1;
+        HIGH_SLOPE_2 = 1;
+        DEFAULT_LOW_SLOPE_LOW = 1;
+        DEFAULT_LOW_SLOPE_HIGH = 1;
+        DEFAULT_SLOPE = 1;
+        DEFAULT_HIGH_SLOPE_HIGH = 1;
+        DEFAUL_HIGH_SLOPE_LOW = 1;
+    }
+}
+
+
 /**
  * Created by stephenblack on 10/29/14.
  */
 @Table(name = "Calibration", id = BaseColumns._ID)
 public class Calibration extends Model {
     private final static String TAG = Calibration.class.getSimpleName();
-    public static final double LOW_SLOPE_1 = 0.95;
-    public static final double LOW_SLOPE_2 = 0.85;
-    public static final double HIGH_SLOPE_1 = 1.3;
-    public static final double HIGH_SLOPE_2 = 1.4;
-    public static final double DEFAULT_LOW_SLOPE_LOW = 1.08;
-    public static final double DEFAULT_LOW_SLOPE_HIGH = 1.15;
-    public static final int DEFAULT_SLOPE = 1;
-    public static final double DEFAULT_HIGH_SLOPE_HIGH = 1.3;
-    public static final double DEFAUL_HIGH_SLOPE_LOW = 1.2;
 
     @Expose
     @Column(name = "timestamp", index = true)
@@ -232,7 +259,7 @@ public static void initialCalibration(double bg1, double bg2, Context context) {
             calibration.uuid = UUID.randomUUID().toString();
             calibration.save();
 
-            calculate_w_l_s();
+            calculate_w_l_s(context);
             CalibrationSendQueue.addToQueue(calibration, context);
         }
         adjustRecentBgReadings(5);
@@ -388,7 +415,7 @@ public static Calibration create(double bg, Context context) {
                 bgReading.save();
                 BgSendQueue.handleNewBgReading(bgReading, "update", context);
 
-                calculate_w_l_s();
+                calculate_w_l_s(context);
                 adjustRecentBgReadings();
                 CalibrationSendQueue.addToQueue(calibration, context);
                 context.startService(new Intent(context, Notifications.class));
@@ -447,7 +474,10 @@ public static void createUpdate(String xDrip_sensor_uuid, double bg, long timeSt
                 .execute();
     }
 
-    private static void calculate_w_l_s() {
+    private static void calculate_w_l_s(Context context) {
+
+        SlopeParameters sParams = getSlopeParameters(context);
+
         if (Sensor.isActive()) {
             double l = 0;
             double m = 0;
@@ -484,14 +514,14 @@ private static void calculate_w_l_s() {
                 Calibration calibration = Calibration.last();
                 calibration.intercept = ((n * p) - (m * q)) / d;
                 calibration.slope = ((l * q) - (m * p)) / d;
-                if ((calibrations.size() == 2 && calibration.slope < LOW_SLOPE_1) || (calibration.slope < LOW_SLOPE_2)) { // I have not seen a case where a value below 7.5 proved to be accurate but we should keep an eye on this
-                    calibration.slope = calibration.slopeOOBHandler(0);
+                if ((calibrations.size() == 2 && calibration.slope < sParams.getLowSlope1()) || (calibration.slope < sParams.getLowSlope2())) { // I have not seen a case where a value below 7.5 proved to be accurate but we should keep an eye on this
+                    calibration.slope = calibration.slopeOOBHandler(0, context);
                     if(calibrations.size() > 2) { calibration.possible_bad = true; }
                     calibration.intercept = calibration.bg - (calibration.estimate_raw_at_time_of_calibration * calibration.slope);
                     CalibrationRequest.createOffset(calibration.bg, 25);
                 }
-                if ((calibrations.size() == 2 && calibration.slope > HIGH_SLOPE_1) || (calibration.slope > HIGH_SLOPE_2)) {
-                    calibration.slope = calibration.slopeOOBHandler(1);
+                if ((calibrations.size() == 2 && calibration.slope > sParams.getHighSlope1()) || (calibration.slope > sParams.getHighSlope2())) {
+                    calibration.slope = calibration.slopeOOBHandler(1, context);
                     if(calibrations.size() > 2) { calibration.possible_bad = true; }
                     calibration.intercept = calibration.bg - (calibration.estimate_raw_at_time_of_calibration * calibration.slope);
                     CalibrationRequest.createOffset(calibration.bg, 25);
@@ -505,8 +535,16 @@ private static void calculate_w_l_s() {
         }
     }
 
-    private double slopeOOBHandler(int status) {
-    // If the last slope was reasonable and reasonably close, use that, otherwise use a slope that may be a little steep, but its best to play it safe when uncertain
+    @NonNull
+    private static SlopeParameters getSlopeParameters(Context context) {
+        return CollectionServiceStarter.isLimitter(context)? new LiParameters(): new DexParameters();
+    }
+
+    private double slopeOOBHandler(int status, Context context) {
+
+        SlopeParameters sParams = getSlopeParameters(context);
+
+        // If the last slope was reasonable and reasonably close, use that, otherwise use a slope that may be a little steep, but its best to play it safe when uncertain
         List<Calibration> calibrations = Calibration.latest(3);
         Calibration thisCalibration = calibrations.get(0);
         if(status == 0) {
@@ -514,24 +552,24 @@ private double slopeOOBHandler(int status) {
                 if ((Math.abs(thisCalibration.bg - thisCalibration.estimate_bg_at_time_of_calibration) < 30) && (calibrations.get(1).possible_bad != null && calibrations.get(1).possible_bad == true)) {
                     return calibrations.get(1).slope;
                 } else {
-                    return Math.max(((-0.048) * (thisCalibration.sensor_age_at_time_of_estimation / (60000 * 60 * 24))) + 1.1, DEFAULT_LOW_SLOPE_LOW);
+                    return Math.max(((-0.048) * (thisCalibration.sensor_age_at_time_of_estimation / (60000 * 60 * 24))) + 1.1, sParams.getDefaultLowSlopeLow());
                 }
             } else if (calibrations.size() == 2) {
-                return Math.max(((-0.048) * (thisCalibration.sensor_age_at_time_of_estimation / (60000 * 60 * 24))) + 1.1, DEFAULT_LOW_SLOPE_HIGH);
+                return Math.max(((-0.048) * (thisCalibration.sensor_age_at_time_of_estimation / (60000 * 60 * 24))) + 1.1, sParams.getDefaultLowSlopeHigh());
             }
-            return DEFAULT_SLOPE;
+            return sParams.getDefaultSlope();
         } else {
             if (calibrations.size() == 3) {
                 if ((Math.abs(thisCalibration.bg - thisCalibration.estimate_bg_at_time_of_calibration) < 30) && (calibrations.get(1).possible_bad != null && calibrations.get(1).possible_bad == true)) {
                     return calibrations.get(1).slope;
                 } else {
-                    return DEFAULT_HIGH_SLOPE_HIGH;
+                    return sParams.getDefaultHighSlopeHigh();
                 }
             } else if (calibrations.size() == 2) {
-                return DEFAUL_HIGH_SLOPE_LOW;
+                return sParams.getDefaulHighSlopeLow();
             }
         }
-        return DEFAULT_SLOPE;
+        return sParams.getDefaultSlope();
     }
 
     private static List<Calibration> calibrations_for_sensor(Sensor sensor) {
@@ -588,7 +626,7 @@ public static void adjustRecentBgReadings(int adjustCount) {
     public void rawValueOverride(double rawValue, Context context) {
         estimate_raw_at_time_of_calibration = rawValue;
         save();
-        calculate_w_l_s();
+        calculate_w_l_s(context);
         CalibrationSendQueue.addToQueue(this, context);
     }
 
@@ -747,5 +785,52 @@ public static double min_recent() {
                 .orderBy("timestamp desc")
                 .execute();
      }
-
 }
+
+abstract class SlopeParameters {
+    protected  double LOW_SLOPE_1;
+    protected  double LOW_SLOPE_2;
+    protected  double HIGH_SLOPE_1;
+    protected  double HIGH_SLOPE_2;
+    protected  double DEFAULT_LOW_SLOPE_LOW;
+    protected  double DEFAULT_LOW_SLOPE_HIGH;
+    protected  int DEFAULT_SLOPE;
+    protected  double DEFAULT_HIGH_SLOPE_HIGH;
+    protected  double DEFAUL_HIGH_SLOPE_LOW;
+
+    public double getLowSlope1() {
+        return LOW_SLOPE_1;
+    }
+
+    public double getLowSlope2() {
+        return LOW_SLOPE_2;
+    }
+
+    public double getHighSlope1() {
+        return HIGH_SLOPE_1;
+    }
+
+    public double getHighSlope2() {
+        return HIGH_SLOPE_2;
+    }
+
+    public double getDefaultLowSlopeLow() {
+        return DEFAULT_LOW_SLOPE_LOW;
+    }
+
+    public  double getDefaultLowSlopeHigh() {
+        return DEFAULT_LOW_SLOPE_HIGH;
+    }
+
+    public int getDefaultSlope() {
+        return DEFAULT_SLOPE;
+    }
+
+    public double getDefaultHighSlopeHigh() {
+        return DEFAULT_HIGH_SLOPE_HIGH;
+    }
+
+    public double getDefaulHighSlopeLow() {
+        return DEFAUL_HIGH_SLOPE_LOW;
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
index baf6246..fc3f456 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CollectionServiceStarter.java
@@ -54,7 +54,25 @@ public static boolean isBTWixel(Context context) {
         }
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
-        if(collection_method.compareTo("BluetoothWixel") == 0) {
+        if(collection_method.compareTo("BluetoothWixel") == 0 || isLimitter(context)) {
+            return true;
+        }
+        return false;
+    }
+
+    /*
+    * LimiTTer emulates a BT-Wixel and works with the BT-Wixel service.
+    * It would work without any changes but in some cases knowing that the data does not
+    * come from a Dexcom sensor but from a Libre sensor might enhance the performance.
+    * */
+
+    public static boolean isLimitter(Context context) {
+        if(XDripViewer.isxDripViewerMode(context)) {
+            return false;
+        }
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
+        if(collection_method.compareTo("LimiTTer") == 0) {
             return true;
         }
         return false;
@@ -64,7 +82,8 @@ private static boolean isBTWixel(String collection_method, Context context) {
         if(XDripViewer.isxDripViewerMode(context)) {
             return false;
         }
-        return collection_method.equals("BluetoothWixel"); 
+        //LimiTTer hardware emulates BTWixel packages
+        return collection_method.equals("BluetoothWixel")||collection_method.equals("LimiTTer");
     }
 
     public static boolean isDexbridgeWixel(Context context) {
@@ -287,7 +306,6 @@ private void startWifWixelThread() {
         Log.d(TAG, "starting wifi wixel service");
         mContext.startService(new Intent(mContext, WifiCollectionService.class));
     }
-
     private void stopWifWixelThread() {
         Log.d(TAG, "stopping wifi wixel service");
         mContext.stopService(new Intent(mContext, WifiCollectionService.class));
@@ -298,4 +316,5 @@ private void stopG5ShareService() {
         mContext.stopService(new Intent(mContext, G5CollectionService.class));
     }
 
+
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 621ef84..f79b258 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -429,7 +429,8 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                     if (((String) newValue).compareTo("BluetoothWixel") != 0
                             && ((String) newValue).compareTo("DexcomShare") != 0
                             && ((String) newValue).compareTo("DexbridgeWixel") != 0
-                            && ((String) newValue).compareTo("WifiBlueToothWixel") != 0) {
+                            && ((String) newValue).compareTo("WifiBlueToothWixel") != 0
+                            && ((String) newValue).compareTo("LimiTTer") != 0) {
                         collectionCategory.removePreference(runInForeground);
                     } else {
                         collectionCategory.addPreference(runInForeground);
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index d19a613..c7ea960 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -7,6 +7,7 @@
         <item>Wifi Wixel + BT Wixel</item>
         <item>G4 Share Receiver</item>
         <item>G5 Transmitter</item>
+        <item>LimiTTer</item>
     </string-array>
 
     <string-array name="DexCollectionMethodValues">
@@ -16,6 +17,7 @@
         <item>WifiBlueToothWixel</item>
         <item>DexcomShare</item>
         <item>DexcomG5</item>
+        <item>LimiTTer</item>
     </string-array>
 
 

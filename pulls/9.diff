diff --git a/app/app.iml b/app/app.iml
index 8e48274..97fbbbc 100644
--- a/app/app.iml
+++ b/app/app.iml
@@ -93,8 +93,8 @@
     <orderEntry type="library" exported="" name="usb-serial-for-android-v010" level="project" />
     <orderEntry type="library" exported="" name="okhttp-2.2.0" level="project" />
     <orderEntry type="library" exported="" name="pebblekit-2.6.0" level="project" />
-    <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
     <orderEntry type="library" exported="" name="retrofit-1.9.0" level="project" />
+    <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
     <orderEntry type="library" exported="" name="acra-4.5.0" level="project" />
     <orderEntry type="library" exported="" name="hellocharts-library-1.1" level="project" />
   </component>
diff --git a/app/build.gradle b/app/build.gradle
index e53ddf4..1dde714 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -17,8 +17,8 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.squareup.okhttp:okhttp:2.2.0'
     testCompile 'com.squareup.okhttp:mockwebserver:2.2.0'
+    compile 'com.squareup.okhttp:okhttp:2.2.0'
     compile 'com.google.code.gson:gson:2.3'
     compile 'org.mongodb:mongo-java-driver:2.10.1'
     compile 'com.squareup.retrofit:retrofit:1.9.0'
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index d2f4953..3e8ec3a 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -18,6 +18,7 @@
     <uses-permission android:name="android.permission.VIBRATE" />
     <uses-permission android:name="android.permission.BATTERY_STATS" />
     <uses-permission android:name="android.permission.WRITE_SETTINGS" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
     <uses-permission android:name="android.permission." />
 
     <application
@@ -45,7 +46,6 @@
             android:launchMode="singleInstance" >
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
-
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
         </activity>
@@ -121,7 +121,7 @@
         </activity>
         <activity
             android:name=".SettingsActivity"
-            android:label="@string/title_activity_settings" >
+            android:label="Settings" >
         </activity>
         <activity
             android:name=".LicenseAgreementActivity"
@@ -157,6 +157,10 @@
             android:name=".SystemStatus"
             android:label="@string/title_activity_system_status" >
         </activity>
+        <activity
+            android:name=".utils.Preferences"
+            android:label="@string/title_activity_preferences" >
+        </activity>
 
         <receiver android:name=".xDripWidget" >
             <intent-filter>
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index f314ef0..044174d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -18,7 +18,6 @@
 import android.support.v4.widget.DrawerLayout;
 import android.view.Menu;
 import android.view.MenuItem;
-import android.util.Log;
 import android.widget.TextView;
 import android.widget.Toast;
 
@@ -74,10 +73,8 @@ protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         CollectionServiceStarter collectionServiceStarter = new CollectionServiceStarter(getApplicationContext());
         collectionServiceStarter.start(getApplicationContext());
-        PreferenceManager.setDefaultValues(this, R.xml.pref_general, false);
-        PreferenceManager.setDefaultValues(this, R.xml.pref_bg_notification, false);
-        PreferenceManager.setDefaultValues(this, R.xml.pref_data_sync, false);
-        PreferenceManager.setDefaultValues(this, R.xml.pref_wifi, false);
+        PreferenceManager.setDefaultValues(this, R.xml.pref_notifications, false);
+        PreferenceManager.setDefaultValues(this, R.xml.pref_data_source, false);
         prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
         checkEula();
         setContentView(R.layout.activity_home);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index 7f28388..3bedf0b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -218,11 +218,9 @@ public static void create(EGVRecord egvRecord, long addativeOffset, Context cont
             if(egvRecord.getTrend().friendlyTrendName().compareTo("NOT_COMPUTABLE") == 0 || egvRecord.getTrend().friendlyTrendName().compareTo("OUT_OF_RANGE") == 0) {
                 bgReading.hide_slope = true;
             }
-
             bgReading.save();
             bgReading.find_new_curve();
             bgReading.find_new_raw_curve();
-            bgReading.perform_calculations();
             Notifications.notificationSetter(context);
             BgSendQueue.addToQueue(bgReading, "create", context);
         }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index 0876c91..278e539 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -245,27 +245,18 @@ public static void create(CalRecord[] calRecords, Context context, boolean overr
         double calSlope = ((secondCalRecord.getScale() / secondCalRecord.getSlope()) + (3 * firstCalRecord.getScale() / firstCalRecord.getSlope())) * 250;
 
         double calIntercept = (((secondCalRecord.getScale() * secondCalRecord.getIntercept()) / secondCalRecord.getSlope()) + ((3 * firstCalRecord.getScale() * firstCalRecord.getIntercept()) / firstCalRecord.getSlope())) / -4;
-
-        Log.d("CAL CHECK IN ", "fDecay "+firstCalRecord.getDecay());
-        Log.d("CAL CHECK IN ", "sDecay "+secondCalRecord.getDecay());
-        Log.d("CAL CHECK IN ", "fSLope "+firstCalRecord.getSlope());
-        Log.d("CAL CHECK IN ", "sSlope "+secondCalRecord.getSlope());
-        Log.d("CAL CHECK IN ", "fScale "+firstCalRecord.getScale());
-        Log.d("CAL CHECK IN ", "sScale "+secondCalRecord.getScale());
-        Log.d("CAL CHECK IN ", "fIntercept "+firstCalRecord.getIntercept());
-        Log.d("CAL CHECK IN ", "sIntercept "+secondCalRecord.getIntercept());
-
-        Log.d("CAL CHECK IN ", "calSlope "+calSlope);
-        Log.d("CAL CHECK IN ", "calIntercept "+calIntercept);
-
         if (sensor != null) {
             for(int i = 0; i < firstCalRecord.getCalSubrecords().length - 1; i++) {
-                if (((firstCalRecord.getCalSubrecords()[i] != null && Calibration.is_new(firstCalRecord.getCalSubrecords()[i]))) || (i == 0 && override)) {
+                if (((firstCalRecord.getCalSubrecords()[i] != null && Calibration.is_new(firstCalRecord.getCalSubrecords()[i], addativeOffset))) || (i == 0 && override)) {
                     CalSubrecord calSubrecord = firstCalRecord.getCalSubrecords()[i];
 
                     Calibration calibration = new Calibration();
                     calibration.bg = calSubrecord.getCalBGL();
-                    calibration.timestamp = calSubrecord.getDateEntered().getTime();
+                    calibration.timestamp = calSubrecord.getDateEntered().getTime() + addativeOffset;
+                    if (calibration.timestamp > new Date().getTime()) {
+                        Log.e(TAG, "ERROR - Calibration timestamp is from the future, wont save!");
+                        return;
+                    }
                     calibration.raw_value = calSubrecord.getCalRaw() / 1000;
                     calibration.slope = calSlope;
                     calibration.intercept = calIntercept;
@@ -292,8 +283,6 @@ public static void create(CalRecord[] calRecords, Context context, boolean overr
                     calibration.second_intercept = secondCalRecord.getIntercept();
 
                     calibration.save();
-
-//                    adjustRecentBgReadings(5);
                     CalibrationSendQueue.addToQueue(calibration, context);
                     Calibration.requestCalibrationIfRangeTooNarrow();
                 }
@@ -307,21 +296,21 @@ public static void create(CalRecord[] calRecords, Context context, boolean overr
         }
     }
 
-    public static boolean is_new(CalSubrecord calSubrecord) {
+    public static boolean is_new(CalSubrecord calSubrecord, long addativeOffset) {
         Sensor sensor = Sensor.currentSensor();
         Calibration calibration = new Select()
                 .from(Calibration.class)
                 .where("Sensor = ? ", sensor.getId())
                 .where("slope_confidence != 0")
                 .where("sensor_confidence != 0")
-                .where("timestamp = ?", calSubrecord.getDateEntered().getTime())
+                .where("timestamp <= ?", calSubrecord.getDateEntered().getTime() + addativeOffset + (1000 * 60 * 3))
                 .executeSingle();
-        if(calibration == null) {
-            Log.d("CAL CHECK IN ", "Looks like a new calibration!");
-            return true;
-        } else {
+        if(calibration != null && Math.abs(calibration.timestamp - addativeOffset) < (3*60*1000)) {
             Log.d("CAL CHECK IN ", "Already have that calibration!");
             return false;
+        } else {
+            Log.d("CAL CHECK IN ", "Looks like a new calibration!");
+            return true;
         }
     }
     public static Calibration getForTimestamp(double timestamp) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index 589bb4a..e6a4ad3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.preference.Preference;
 import android.preference.PreferenceManager;
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
@@ -10,6 +11,7 @@
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
 import com.eveningoutpost.dexdrip.Tables.CalibrationDataTable;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
+import com.eveningoutpost.dexdrip.utils.Preferences;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -135,7 +137,8 @@ public NavDrawerBuilder(Context aContext) {
             }
         }
         options.add(new Intent(context, SystemStatus.class));
-        options.add(new Intent(context, SettingsActivity.class));
+//        options.add(new Intent(context, SettingsActivity.class));
+        options.add(new Intent(context, Preferences.class));
 //        options.add(new Intent(context, FakeNumbers.class));
 //        options.add(new Intent(context, DoubleCalibrationActivity.class));
 //        options.add(new Intent(context, ShareTest.class));
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index 4324043..bcac7d8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -32,7 +32,9 @@
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.os.Binder;
+import android.os.Build;
 import android.os.IBinder;
+import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.util.Log;
 
@@ -49,7 +51,7 @@
 import java.util.Date;
 import java.util.UUID;
 
-@TargetApi(android.os.Build.VERSION_CODES.JELLY_BEAN_MR2)
+@TargetApi(Build.VERSION_CODES.KITKAT)
 public class DexCollectionService extends Service {
     private final static String TAG = DexCollectionService.class.getSimpleName();
     private String mDeviceName;
@@ -119,7 +121,7 @@ public void setRetryTimer() {
             Log.d(TAG, "Restarting in: " + (retry_in / (60 * 1000)) + " minutes");
             Calendar calendar = Calendar.getInstance();
             AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
-            alarm.set(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + retry_in, PendingIntent.getService(this, 0, new Intent(this, DexCollectionService.class), 0));
+            alarm.setExact(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + retry_in, PendingIntent.getService(this, 0, new Intent(this, DexCollectionService.class), 0));
         }
     }
 
@@ -279,6 +281,12 @@ public void close() {
 
     public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
         Log.w(TAG, "received some data!");
+        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                "ReceivedReading");
+        wakeLock.acquire();
+
+
         Long timestamp = new Date().getTime();
         TransmitterData transmitterData = TransmitterData.create(buffer, len, timestamp);
         if (transmitterData != null) {
@@ -292,5 +300,6 @@ public void setSerialDataToTransmitterRawData(byte[] buffer, int len) {
                 Log.w(TAG, "No Active Sensor, Data only stored in Transmitter Data");
             }
         }
+        wakeLock.release();
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
index f491e9d..54c7183 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
@@ -1,5 +1,6 @@
 package com.eveningoutpost.dexdrip.Services;
 
+import android.annotation.TargetApi;
 import android.app.AlarmManager;
 import android.app.PendingIntent;
 import android.app.Service;
@@ -17,6 +18,7 @@
 import android.content.Intent;
 import android.content.IntentFilter;
 import android.content.SharedPreferences;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
@@ -50,8 +52,10 @@
 import rx.Observable;
 import rx.functions.Action1;
 
+@TargetApi(Build.VERSION_CODES.KITKAT)
 public class DexShareCollectionService extends Service {
     private final static String TAG = DexShareCollectionService.class.getSimpleName();
+    private ForegroundServiceStarter foregroundServiceStarter;
     private String mDeviceAddress;
     private String mDeviceName;
     private boolean is_connected = false;
@@ -99,11 +103,15 @@
 
     public boolean shouldDisconnect = true;
     public boolean share2 = false;
+    public Service service;
 
     @Override
     public void onCreate() {
         super.onCreate();
         readData = new ReadDataShare(this);
+        service = this;
+        foregroundServiceStarter = new ForegroundServiceStarter(getApplicationContext(), service);
+        foregroundServiceStarter.start();
         final IntentFilter bondintent = new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED);
         registerReceiver(mPairReceiver, bondintent);
         prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
@@ -114,9 +122,9 @@ public void onCreate() {
     public int onStartCommand(Intent intent, int flags, int startId) {
         share2 = prefs.getBoolean("share_auth_mode_two", false);
         int currentapiVersion = android.os.Build.VERSION.SDK_INT;
-        if (currentapiVersion < android.os.Build.VERSION_CODES.LOLLIPOP){
+//        if (currentapiVersion < android.os.Build.VERSION_CODES.LOLLIPOP){
             shouldDisconnect = false;
-        }
+//        }
         if (CollectionServiceStarter.isBTShare(getApplicationContext())) {
             setFailoverTimer();
         } else {
@@ -136,12 +144,27 @@ public void onDestroy() {
         super.onDestroy();
         close();
         setRetryTimer();
+        foregroundServiceStarter.stop();
         unregisterReceiver(mPairReceiver);
         Log.w(TAG, "SERVICE STOPPED");
     }
 
     public SharedPreferences.OnSharedPreferenceChangeListener prefListener = new SharedPreferences.OnSharedPreferenceChangeListener() {
         public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
+            if(key.compareTo("run_service_in_foreground") == 0) {
+
+                Log.e("FOREGROUND", "run_service_in_foreground changed!");
+                if (prefs.getBoolean("run_service_in_foreground", false)) {
+                    foregroundServiceStarter = new ForegroundServiceStarter(getApplicationContext(), service);
+                    foregroundServiceStarter.start();
+                    Log.w(TAG, "Moving to foreground");
+                    setRetryTimer();
+                } else {
+                    service.stopForeground(true);
+                    Log.w(TAG, "Removing from foreground");
+                    setRetryTimer();
+                }
+            }
             if (key.compareTo("dex_collection_method") == 0) {
                 CollectionServiceStarter collectionServiceStarter = new CollectionServiceStarter(getApplicationContext());
                 collectionServiceStarter.start(getApplicationContext());
@@ -158,14 +181,14 @@ public void setRetryTimer() {
             BgReading bgReading = BgReading.last();
             long retry_in;
             if (bgReading != null) {
-                retry_in = Math.min(Math.max((1000 * 30), (1000 * 60 * 5) - (new Date().getTime() - bgReading.timestamp) + 20), (1000 * 60 * 5));
+                retry_in = Math.min(Math.max((1000 * 30), (1000 * 60 * 5) - (new Date().getTime() - bgReading.timestamp) + 10000), (1000 * 60 * 5));
             } else {
                 retry_in = (1000 * 60);
             }
             Log.d(TAG, "Restarting in: " + (retry_in / (60 * 1000)) + " minutes");
             Calendar calendar = Calendar.getInstance();
             AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
-            alarm.set(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + retry_in, PendingIntent.getService(this, 0, new Intent(this, DexShareCollectionService.class), 0));
+            alarm.setExact(alarm.RTC_WAKEUP, calendar.getTimeInMillis() + retry_in, PendingIntent.getService(this, 0, new Intent(this, DexShareCollectionService.class), 0));
         }
     }
 
@@ -238,43 +261,56 @@ public void call(Long s) {
                     Log.d(TAG, "Made the full round trip, got " + s + " as the system time");
                     final long addativeSystemTimeOffset = new Date().getTime() - s;
 
-                    final Action1<EGVRecord[]> evgRecordListener = new Action1<EGVRecord[]>() {
+                    final Action1<Long> dislpayTimeListener = new Action1<Long>() {
                         @Override
-                        public void call(EGVRecord[] egvRecords) {
-                            if (egvRecords != null) {
-                                Log.d(TAG, "Made the full round trip, got " + egvRecords.length + " EVG Records");
-                                BgReading.create(egvRecords, addativeSystemTimeOffset, getApplicationContext());
-                                if(shouldDisconnect) {
-                                    stopSelf();
-                                } else {
-                                    setRetryTimer();
-                                }
+                        public void call(Long s) {
+                            if (s != null) {
+                                Log.d(TAG, "Made the full round trip, got " + s + " as the display time offset");
+                                final long addativeDisplayTimeOffset = addativeSystemTimeOffset - (s*1000);
+
+                                Log.d(TAG, "Making " + addativeDisplayTimeOffset + " the the total time offset");
+
+                                final Action1<EGVRecord[]> evgRecordListener = new Action1<EGVRecord[]>() {
+                                    @Override
+                                    public void call(EGVRecord[] egvRecords) {
+                                        if (egvRecords != null) {
+                                            Log.d(TAG, "Made the full round trip, got " + egvRecords.length + " EVG Records");
+                                            BgReading.create(egvRecords, addativeSystemTimeOffset, getApplicationContext());
+                                            if (shouldDisconnect) {
+                                                stopSelf();
+                                            } else {
+                                                setRetryTimer();
+                                            }
+                                        }
+                                    }
+                                };
+
+                                final Action1<SensorRecord[]> sensorRecordListener = new Action1<SensorRecord[]>() {
+                                    @Override
+                                    public void call(SensorRecord[] sensorRecords) {
+                                        if (sensorRecords != null) {
+                                            Log.d(TAG, "Made the full round trip, got " + sensorRecords.length + " Sensor Records");
+                                            BgReading.create(sensorRecords, addativeSystemTimeOffset, getApplicationContext());
+                                            readData.getRecentEGVs(evgRecordListener);
+                                        }
+                                    }
+                                };
+
+                                final Action1<CalRecord[]> calRecordListener = new Action1<CalRecord[]>() {
+                                    @Override
+                                    public void call(CalRecord[] calRecords) {
+                                        if (calRecords != null) {
+                                            Log.d(TAG, "Made the full round trip, got " + calRecords.length + " Cal Records");
+                                            Calibration.create(calRecords, addativeDisplayTimeOffset, getApplicationContext());
+                                            readData.getRecentSensorRecords(sensorRecordListener);
+                                        }
+                                    }
+                                };
+                                readData.getRecentCalRecords(calRecordListener);
                             }
                         }
                     };
-
-                    final Action1<SensorRecord[]> sensorRecordListener = new Action1<SensorRecord[]>() {
-                        @Override
-                        public void call(SensorRecord[] sensorRecords) {
-                            if (sensorRecords != null) {
-                                Log.d(TAG, "Made the full round trip, got " + sensorRecords.length + " Sensor Records");
-                                BgReading.create(sensorRecords, addativeSystemTimeOffset, getApplicationContext());
-                                readData.getRecentEGVs(evgRecordListener);
-                            }
-                        }
-                    };
-
-                    final Action1<CalRecord[]> calRecordListener = new Action1<CalRecord[]>() {
-                        @Override
-                        public void call(CalRecord[] calRecords) {
-                            if (calRecords != null) {
-                                Log.d(TAG, "Made the full round trip, got " + calRecords.length + " Cal Records");
-                                Calibration.create(calRecords, addativeSystemTimeOffset, getApplicationContext());
-                                readData.getRecentSensorRecords(sensorRecordListener);
-                            }
-                        }
-                    };
-                    readData.getRecentCalRecords(calRecordListener);
+                    readData.readDisplayTimeOffset(dislpayTimeListener);
                 }
             }
         };
@@ -580,9 +616,10 @@ public void onDescriptorWrite(BluetoothGatt gatt, BluetoothGattDescriptor descri
                 if(mResponseCharacteristic.getUuid().equals(characteristic.getUuid())) {
                     attemptRead();
                 }
-            } else if (status == BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION) {
+            } else if ((status & BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION) != 0 || (status & BluetoothGatt.GATT_INSUFFICIENT_ENCRYPTION) != 0) {
                 if (gatt.getDevice().getBondState() == BluetoothDevice.BOND_NONE) {
                     device = gatt.getDevice();
+                    state_authInProgress = true;
                     bondDevice();
                 } else {
                     Log.e(TAG, "The phone is trying to read from paired device without encryption. Android Bug?");
@@ -601,7 +638,7 @@ public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristi
                     state_authSucess = true;
                     mBluetoothGatt.readCharacteristic(mHeartBeatCharacteristic);
                 }
-            } else if (status == BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION) {
+            } else if ((status & BluetoothGatt.GATT_INSUFFICIENT_AUTHENTICATION) != 0 || (status & BluetoothGatt.GATT_INSUFFICIENT_ENCRYPTION) != 0) {
                 if (gatt.getDevice().getBondState() == BluetoothDevice.BOND_NONE) {
                     device = gatt.getDevice();
                     state_authInProgress = true;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java
index f8a1a80..e584d5a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SettingsActivity.java
@@ -1,25 +1,17 @@
 package com.eveningoutpost.dexdrip;
 
-import android.annotation.TargetApi;
-import android.content.Context;
-import android.content.res.Configuration;
 import android.media.Ringtone;
 import android.media.RingtoneManager;
 import android.net.Uri;
-import android.os.Build;
 import android.os.Bundle;
 import android.preference.ListPreference;
 import android.preference.Preference;
 import android.preference.PreferenceActivity;
 import android.preference.PreferenceCategory;
-import android.preference.PreferenceFragment;
 import android.preference.PreferenceManager;
 import android.preference.RingtonePreference;
 import android.text.TextUtils;
 
-
-import java.util.List;
-
 public class SettingsActivity extends PreferenceActivity {
 
     @Override
@@ -38,11 +30,7 @@ private void setupSimplePreferencesScreen() {
 
         fakeHeader = new PreferenceCategory(this);
         getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_bg_notification);
-
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_calibration_notfication);
+        addPreferencesFromResource(R.xml.pref_notifications);
 
         fakeHeader = new PreferenceCategory(this);
         getPreferenceScreen().addPreference(fakeHeader);
@@ -50,26 +38,9 @@ private void setupSimplePreferencesScreen() {
 
         fakeHeader = new PreferenceCategory(this);
         getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_share);
-
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
         addPreferencesFromResource(R.xml.pref_data_sync);
 
-        fakeHeader = new PreferenceCategory(this);
-        getPreferenceScreen().addPreference(fakeHeader);
-        addPreferencesFromResource(R.xml.pref_wifi);
-
-        bindPreferenceSummaryToValue(findPreference("highValue"));
-        bindPreferenceSummaryToValue(findPreference("lowValue"));
-        bindPreferenceSummaryToValue(findPreference("bg_snooze"));
-        bindPreferenceSummaryToValue(findPreference("calibration_snooze"));
-        bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_uri"));
-        bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_collection"));
-        bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_device_status_collection"));
-        bindPreferenceSummaryToValue(findPreference("cloud_storage_api_base"));
         bindPreferenceSummaryToValue(findPreference("dex_collection_method"));
-        bindPreferenceSummaryToValue(findPreference("wifi_recievers_addresses"));
         bindPreferenceSummaryToValue(findPreference("units"));
         bindPreferenceSummaryToValue(findPreference("share_key"));
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 45e833c..0259bdc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -31,7 +31,7 @@
  * Created by stephenblack on 11/15/14.
  */
 public class BgGraphBuilder {
-    public int fuzzer = (1000 * 60 * 5);
+    public int fuzzer = (1000 * 30 * 5);
     public double  end_time = (new Date().getTime() + (60000 * 10)) / fuzzer;
     public double  start_time = end_time - ((60000 * 60 * 24)) / fuzzer;
     public Context context;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index 065b86f..d3cd212 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -6,6 +6,7 @@
 import android.content.SharedPreferences;
 import android.os.BatteryManager;
 import android.os.Bundle;
+import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.provider.BaseColumns;
 import android.util.Log;
@@ -66,6 +67,12 @@ public static BgSendQueue nextBgJob() {
     }
 
     public static void addToQueue(BgReading bgReading, String operation_type, Context context) {
+        PowerManager powerManager = (PowerManager) context.getSystemService(context.POWER_SERVICE);
+        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                "sendQueue");
+        wakeLock.acquire();
+
+
         BgSendQueue bgSendQueue = new BgSendQueue();
         bgSendQueue.operation_type = operation_type;
         bgSendQueue.bgReading = bgReading;
@@ -116,8 +123,7 @@ public static void addToQueue(BgReading bgReading, String operation_type, Contex
             Log.w("ShareRest", "About to call ShareRest!!");
             shareRest.sendBgData(bgReading);
         }
-
-
+        wakeLock.release();
     }
 
     public void markMongoSuccess() {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
index 322ded6..88f1fd6 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/ForegroundServiceStarter.java
@@ -9,6 +9,7 @@
 import android.content.SharedPreferences;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
+import android.util.Log;
 
 import com.eveningoutpost.dexdrip.Home;
 import com.eveningoutpost.dexdrip.R;
@@ -56,10 +57,16 @@ private Notification notification() {
     }
 
     public void start() {
-        if (run_service_in_foreground) { mService.startForeground(FOREGROUND_ID, notification()); }
+        if (run_service_in_foreground) {
+            Log.e("FOREGROUND", "should be moving to foreground");
+            mService.startForeground(FOREGROUND_ID, notification());
+        }
     }
 
     public void stop() {
-        if (run_service_in_foreground) { mService.stopForeground(true); }
+        if (run_service_in_foreground) {
+            Log.e("FOREGROUND", "should be moving out of foreground");
+            mService.stopForeground(true);
+        }
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index 2e7a5f5..234a1ed 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -304,14 +304,19 @@ private void populateV1APIMeterReadingEntry(JSONObject json, Calibration record)
         private void populateV1APICalibrationEntry(JSONObject json, Calibration record) throws Exception {
             SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss a");
             format.setTimeZone(TimeZone.getDefault());
-
-            json.put("device", "xDrip-"+prefs.getString("dex_collection_method", "BluetoothWixel"));
+            json.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
             json.put("type", "cal");
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
-            json.put("slope", (long)(record.slope * 1000));
-            json.put("intercept", (long) ((record.intercept * -1000) / (record.slope * 1000)));
-            json.put("scale", 1);
+            if(record.check_in) {
+                json.put("slope", (long) (record.first_slope));
+                json.put("intercept", (long) ((record.first_intercept)));
+                json.put("scale", record.first_scale);
+            } else {
+                json.put("slope", (long) (record.slope * 1000));
+                json.put("intercept", (long) ((record.intercept * -1000) / (record.slope * 1000)));
+                json.put("scale", 1);
+            }
         }
 
         // TODO: this is a quick port from original code and needs to be refactored before release
@@ -394,9 +399,15 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                         testData.put("device", "xDrip-"+prefs.getString("dex_collection_method", "BluetoothWixel"));
                         testData.put("date", calRecord.timestamp);
                         testData.put("dateString", format.format(calRecord.timestamp));
-                        testData.put("slope", (long)(calRecord.slope * 1000));
-                        testData.put("intercept", (long) ((calRecord.intercept * -1000) / (calRecord.slope * 1000)));
-                        testData.put("scale", 1);
+                        if(calRecord.check_in) {
+                            testData.put("slope", (long) (calRecord.first_slope));
+                            testData.put("intercept", (long) ((calRecord.first_intercept)));
+                            testData.put("scale", calRecord.first_scale);
+                        } else {
+                            testData.put("slope", (long) (calRecord.slope * 1000));
+                            testData.put("intercept", (long) ((calRecord.intercept * -1000) / (calRecord.slope * 1000)));
+                            testData.put("scale", 1);
+                        }
                         testData.put("type", "cal");
                         dexcomData.update(testData, testData, true, false, WriteConcern.UNACKNOWLEDGED);
                     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index 6461cc8..0309126 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -11,6 +11,7 @@
 import android.net.Uri;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
+import android.util.Log;
 
 import com.eveningoutpost.dexdrip.AddCalibration;
 import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
@@ -117,7 +118,9 @@ public static void notificationSetter(Context context) {
                 extraCalibrationRequest();
             } else { clearExtraCalibrationRequest(); }
 
-            if (calibrations.size() >= 1 && (calibrations.get(0).timestamp + (60000 * 60 * 12) < new Date().getTime())) {
+            if (calibrations.size() >= 1 && Math.abs((new Date().getTime() - calibrations.get(0).timestamp))/(1000*60*60) > 12) {
+                Log.e("NOTIFICATIONS", "Calibration difference in hours: " + ((new Date().getTime() - calibrations.get(0).timestamp))/(1000*60*60));
+
                 calibrationRequest();
             } else { clearCalibrationRequest(); }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
new file mode 100644
index 0000000..265aa06
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -0,0 +1,239 @@
+package com.eveningoutpost.dexdrip.utils;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.res.Configuration;
+import android.media.Ringtone;
+import android.media.RingtoneManager;
+import android.net.Uri;
+import android.os.Bundle;
+import android.preference.ListPreference;
+import android.preference.Preference;
+import android.preference.PreferenceActivity;
+import android.preference.PreferenceCategory;
+import android.preference.PreferenceFragment;
+import android.preference.PreferenceGroup;
+import android.preference.PreferenceManager;
+import android.preference.PreferenceScreen;
+import android.preference.RingtonePreference;
+import android.text.TextUtils;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.R;
+
+import java.util.List;
+
+/**
+ * A {@link PreferenceActivity} that presents a set of application settings. On
+ * handset devices, settings are presented as a single list. On tablets,
+ * settings are split by category, with category headers shown to the left of
+ * the list of settings.
+ * <p/>
+ * See <a href="http://developer.android.com/design/patterns/settings.html">
+ * Android Design: Settings</a> for design guidelines and the <a
+ * href="http://developer.android.com/guide/topics/ui/settings.html">Settings
+ * API Guide</a> for more information on developing a Settings UI.
+ */
+public class Preferences extends PreferenceActivity {
+    public  static SharedPreferences prefs;
+
+    @Override
+    public void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        getFragmentManager().beginTransaction().replace(android.R.id.content,
+                new AllPrefsFragment()).commit();
+    }
+
+    @Override
+    protected void onPostCreate(Bundle savedInstanceState) {
+        super.onPostCreate(savedInstanceState);
+//        addPreferencesFromResource(R.xml.pref_general);
+
+    }
+
+    @Override
+    protected boolean isValidFragment(String fragmentName) {
+        if (AllPrefsFragment.class.getName().equals(fragmentName)){ return true; }
+        return false;
+    }
+
+    @Override
+    public boolean onIsMultiPane() {
+        return isXLargeTablet(this);
+    }
+    private static boolean isXLargeTablet(Context context) {
+        return (context.getResources().getConfiguration().screenLayout
+                & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;
+    }
+
+    @Override
+    public void onBuildHeaders(List<Header> target) {
+        loadHeadersFromResource(R.xml.pref_headers, target);
+    }
+
+    private static Preference.OnPreferenceChangeListener sBindPreferenceSummaryToValueListener = new Preference.OnPreferenceChangeListener() {
+        @Override
+        public boolean onPreferenceChange(Preference preference, Object value) {
+            String stringValue = value.toString();
+            if (preference instanceof ListPreference) {
+                ListPreference listPreference = (ListPreference) preference;
+                int index = listPreference.findIndexOfValue(stringValue);
+                preference.setSummary(
+                        index >= 0
+                                ? listPreference.getEntries()[index]
+                                : null);
+
+            } else if (preference instanceof RingtonePreference) {
+                // For ringtone preferences, look up the correct display value
+                // using RingtoneManager.
+                if (TextUtils.isEmpty(stringValue)) {
+                    // Empty values correspond to 'silent' (no ringtone).
+                    preference.setSummary(R.string.pref_ringtone_silent);
+
+                } else {
+                    Ringtone ringtone = RingtoneManager.getRingtone(
+                            preference.getContext(), Uri.parse(stringValue));
+
+                    if (ringtone == null) {
+                        // Clear the summary if there was a lookup error.
+                        preference.setSummary(null);
+                    } else {
+                        // Set the summary to reflect the new ringtone display
+                        // name.
+                        String name = ringtone.getTitle(preference.getContext());
+                        preference.setSummary(name);
+                    }
+                }
+
+            } else {
+                // For all other preferences, set the summary to the value's
+                // simple string representation.
+                preference.setSummary(stringValue);
+            }
+            return true;
+        }
+    };
+
+    private static void bindPreferenceSummaryToValue(Preference preference) {
+        preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);
+        sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,
+                PreferenceManager
+                        .getDefaultSharedPreferences(preference.getContext())
+                        .getString(preference.getKey(), ""));
+    }
+
+    public static class AllPrefsFragment extends PreferenceFragment {
+        @Override
+        public void onCreate(Bundle savedInstanceState) {
+            super.onCreate(savedInstanceState);
+            addPreferencesFromResource(R.xml.pref_license);
+            addPreferencesFromResource(R.xml.pref_general);
+            bindPreferenceSummaryToValue(findPreference("highValue"));
+            bindPreferenceSummaryToValue(findPreference("lowValue"));
+            bindPreferenceSummaryToValue(findPreference("units"));
+
+            addPreferencesFromResource(R.xml.pref_notifications);
+            bindPreferenceSummaryToValue(findPreference("bg_snooze"));
+
+            addPreferencesFromResource(R.xml.pref_data_source);
+
+
+            addPreferencesFromResource(R.xml.pref_data_sync);
+            bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_uri"));
+            bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_collection"));
+            bindPreferenceSummaryToValue(findPreference("cloud_storage_mongodb_device_status_collection"));
+            bindPreferenceSummaryToValue(findPreference("cloud_storage_api_base"));
+
+
+            addPreferencesFromResource(R.xml.pref_advanced_settings);
+
+
+            final Preference collectionMethod = findPreference("dex_collection_method");
+            final Preference runInForeground = findPreference("run_service_in_foreground");
+            final Preference wifiRecievers = findPreference("wifi_recievers_addresses");
+            final Preference predictiveBG = findPreference("predictive_bg");
+            final Preference interpretRaw = findPreference("interpret_raw");
+            final Preference shareKey = findPreference("share_key");
+            final PreferenceCategory collectionCategory = (PreferenceCategory) findPreference("collection_category");
+            final PreferenceCategory otherCategory = (PreferenceCategory) findPreference("other_category");
+            final PreferenceScreen calibrationAlertsScreen = (PreferenceScreen) findPreference("calibration_alerts_screen");
+            final PreferenceCategory alertsCategory = (PreferenceCategory) findPreference("alerts_category");
+            prefs =  getPreferenceManager().getDefaultSharedPreferences(getActivity());
+            Log.d("PREF", prefs.getString("dex_collection_method", "BluetoothWixel"));
+
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomShare") != 0) {
+                collectionCategory.removePreference(shareKey);
+                otherCategory.removePreference(interpretRaw);
+                alertsCategory.addPreference(calibrationAlertsScreen);
+            } else {
+                otherCategory.removePreference(predictiveBG);
+                alertsCategory.removePreference(calibrationAlertsScreen);
+                prefs.edit().putBoolean("calibration_notifications", false).apply();
+            }
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("BluetoothWixel") != 0 && prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomShare") != 0) {
+                collectionCategory.removePreference(runInForeground);
+            }
+            if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0) {
+                collectionCategory.removePreference(wifiRecievers);
+            }
+            bindPreferenceSummaryToValue(collectionMethod);
+            bindPreferenceSummaryToValue(shareKey);
+            bindPreferenceSummaryToValue(wifiRecievers);
+            collectionMethod.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue) {
+                    if(((String) newValue).compareTo("DexcomShare") != 0) { // NOT USING SHARE
+                        collectionCategory.removePreference(shareKey);
+                        otherCategory.removePreference(interpretRaw);
+                        otherCategory.addPreference(predictiveBG);
+                        alertsCategory.addPreference(calibrationAlertsScreen);
+                    } else {
+                        collectionCategory.addPreference(shareKey);
+                        otherCategory.addPreference(interpretRaw);
+                        otherCategory.removePreference(predictiveBG);
+                        alertsCategory.removePreference(calibrationAlertsScreen);
+                        prefs.edit().putBoolean("calibration_notifications", false).apply();
+                    }
+                    if(((String) newValue).compareTo("BluetoothWixel") != 0 && ((String) newValue).compareTo("DexcomShare") != 0) {
+                        collectionCategory.removePreference(runInForeground);
+                    } else {
+                        collectionCategory.addPreference(runInForeground);
+                    }
+                    if(((String) newValue).compareTo("WifiWixel") != 0) {
+                        collectionCategory.removePreference(wifiRecievers);
+                    } else {
+                        collectionCategory.addPreference(wifiRecievers);
+                    }
+                    String stringValue = newValue.toString();
+                    if (preference instanceof ListPreference) {
+                        ListPreference listPreference = (ListPreference) preference;
+                        int index = listPreference.findIndexOfValue(stringValue);
+                        preference.setSummary(
+                                index >= 0
+                                        ? listPreference.getEntries()[index]
+                                        : null);
+
+                    } else if (preference instanceof RingtonePreference) {
+                        if (TextUtils.isEmpty(stringValue)) {
+                            preference.setSummary(R.string.pref_ringtone_silent);
+
+                        } else {
+                            Ringtone ringtone = RingtoneManager.getRingtone(
+                                    preference.getContext(), Uri.parse(stringValue));
+                            if (ringtone == null) {
+                                preference.setSummary(null);
+                            } else {
+                                String name = ringtone.getTitle(preference.getContext());
+                                preference.setSummary(name);
+                            }
+                        }
+                    } else {
+                        preference.setSummary(stringValue);
+                    }
+                    return true;
+                }
+            });
+        }
+    }
+}
diff --git a/app/src/main/res/drawable-nodpi/example_appwidget_preview.png b/app/src/main/res/drawable-nodpi/example_appwidget_preview.png
index 894b069..204124f 100644
Binary files a/app/src/main/res/drawable-nodpi/example_appwidget_preview.png and b/app/src/main/res/drawable-nodpi/example_appwidget_preview.png differ
diff --git a/app/src/main/res/values/strings_activity_preferences.xml b/app/src/main/res/values/strings_activity_preferences.xml
new file mode 100644
index 0000000..fc37a1f
--- /dev/null
+++ b/app/src/main/res/values/strings_activity_preferences.xml
@@ -0,0 +1,61 @@
+<resources>
+    <string name="title_activity_preferences">Preferences</string>
+
+    <!-- Strings related to Settings -->
+
+    <!-- Example General settings -->
+    <string name="pref_header_general">General</string>
+
+    <string name="pref_title_social_recommendations">Enable social recommendations</string>
+    <string name="pref_description_social_recommendations">Recommendations for people to contact
+        based on your message history
+    </string>
+
+    <string name="pref_title_display_name">Display name</string>
+    <string name="pref_default_display_name">John Smith</string>
+
+    <string name="pref_title_add_friends_to_messages">Add friends to messages</string>
+    <string-array name="pref_example_list_titles">
+        <item>Always</item>
+        <item>When possible</item>
+        <item>Never</item>
+    </string-array>
+    <string-array name="pref_example_list_values">
+        <item>1</item>
+        <item>0</item>
+        <item>-1</item>
+    </string-array>
+
+    <!-- Example settings for Data & Sync -->
+    <string name="pref_header_data_sync">Data &amp; sync</string>
+
+    <string name="pref_title_sync_frequency">Sync frequency</string>
+    <string-array name="pref_sync_frequency_titles">
+        <item>15 minutes</item>
+        <item>30 minutes</item>
+        <item>1 hour</item>
+        <item>3 hours</item>
+        <item>6 hours</item>
+        <item>Never</item>
+    </string-array>
+    <string-array name="pref_sync_frequency_values">
+        <item>15</item>
+        <item>30</item>
+        <item>60</item>
+        <item>180</item>
+        <item>360</item>
+        <item>-1</item>
+    </string-array>
+
+    <string name="pref_title_system_sync_settings">System sync settings</string>
+
+    <!-- Example settings for Notifications -->
+    <string name="pref_header_notifications">Notifications</string>
+
+    <string name="pref_title_new_message_notifications">New message notifications</string>
+
+    <string name="pref_title_ringtone">Ringtone</string>
+    <string name="pref_ringtone_silent">Silent</string>
+
+    <string name="pref_title_vibrate">Vibrate</string>
+</resources>
diff --git a/app/src/main/res/values/strings_activity_settings.xml b/app/src/main/res/values/strings_activity_settings.xml
deleted file mode 100644
index 64d3691..0000000
--- a/app/src/main/res/values/strings_activity_settings.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<resources>
-    <string name="title_activity_settings">Settings</string>
-
-    <string name="pref_header_general">General</string>
-
-    <string name="pref_title_ringtone">Ringtone</string>
-    <string name="pref_ringtone_silent">Silent</string>
-</resources>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
new file mode 100644
index 0000000..48ab827
--- /dev/null
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+    <PreferenceCategory
+        android:key="other_category"
+        android:title="Other Settings">
+        <SwitchPreference
+            android:title="@string/pref_title_broadcast_enabled"
+            android:key="broadcast_data_through_intents"
+            android:summary="@string/pref_summary_broadcast_enabled"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <!--<SwitchPreference-->
+            <!--android:title="Send to Pebble"-->
+            <!--android:key="broadcast_to_pebble"-->
+            <!--android:summary="If you have a pebble watch you can send bg data straight to it"-->
+            <!--android:defaultValue="false" >-->
+        <!--</SwitchPreference>-->
+        <CheckBoxPreference
+            android:key="predictive_bg"
+            android:title="Display Predictive Values"
+            android:summary="Not Recommended. xDrip will attempt to predict readings each minute based on the past few values."
+            android:defaultValue="false" />
+        <CheckBoxPreference
+            android:key="interpret_raw"
+            android:title="Interpret Raw Values"
+            android:summary="If using Share, DexDrip will show values when they are normally hidden on the receiver."
+            android:defaultValue="false" />
+    </PreferenceCategory>
+</PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_bg_notification.xml b/app/src/main/res/xml/pref_bg_notification.xml
deleted file mode 100644
index 6736793..0000000
--- a/app/src/main/res/xml/pref_bg_notification.xml
+++ /dev/null
@@ -1,46 +0,0 @@
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory
-        android:dependency="I_understand"
-        android:title="BG Level Alerts"
-        android:key="bgLevelAlerts">
-        <CheckBoxPreference
-            android:key="bg_notifications"
-            android:title="BG Alerts"
-            android:summary="Alert when BG readings cross the threshold."
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="bg_notifications"
-            android:key="bg_vibrate"
-            android:title="Vibrate on BG alerts"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="bg_notifications"
-            android:key="bg_lights"
-            android:title="Flash lights on BG alerts"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="bg_notifications"
-            android:key="bg_play_sound"
-            android:title="Play sound on BG alerts"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="bg_play_sound"
-            android:key="bg_sound_in_silent"
-            android:title="Play alert sounds even in silent mode"
-            android:defaultValue="false" />
-        <RingtonePreference
-            android:dependency="bg_play_sound"
-            android:key="bg_notification_sound"
-            android:title="Alert Sound"
-            android:ringtoneType="notification"
-            android:summary="Set sound used for BG Alerts."
-            android:defaultValue="content://settings/system/notification_sound" />
-        <EditTextPreference
-            android:dependency="bg_notifications"
-            android:key="bg_snooze"
-            android:title="Alert Snooze"
-            android:numeric="integer"
-            android:summary="Minimum number of minutes to pass before raising the same alert."
-            android:defaultValue="20" />
-    </PreferenceCategory>
-</PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_calibration_notfication.xml b/app/src/main/res/xml/pref_calibration_notfication.xml
deleted file mode 100644
index d3e8548..0000000
--- a/app/src/main/res/xml/pref_calibration_notfication.xml
+++ /dev/null
@@ -1,41 +0,0 @@
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory
-        android:dependency="I_understand"
-        android:title="Calibration Request Alerts"
-        android:key="calibrationRequestAlerts">
-        <CheckBoxPreference
-            android:key="calibration_notifications"
-            android:title="Calibration Alerts"
-            android:summary="Alert when a calibration is requested"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="calibration_notifications"
-            android:key="calibration_vibrate"
-            android:title="Vibrate on calibration requests"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="calibration_notifications"
-            android:key="calibration_lights"
-            android:title="Flash lights on calibration requests"
-            android:defaultValue="true" />
-        <CheckBoxPreference
-            android:dependency="calibration_notifications"
-            android:key="calibration_play_sound"
-            android:title="Play sound on calibration requests"
-            android:defaultValue="true" />
-        <RingtonePreference
-            android:dependency="calibration_play_sound"
-            android:key="calibration_notification_sound"
-            android:title="Calibration Request Sound"
-            android:ringtoneType="notification"
-            android:summary="Set sound used for calibration requests."
-            android:defaultValue="content://settings/system/notification_sound" />
-        <EditTextPreference
-            android:dependency="calibration_notifications"
-            android:key="calibration_snooze"
-            android:title="Calibration request Snooze"
-            android:numeric="integer"
-            android:summary="Number of minutes to pass before raising the same calibration request."
-            android:defaultValue="20" />
-    </PreferenceCategory>
-</PreferenceScreen>
\ No newline at end of file
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index a7ef1ae..8b73dd5 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -1,10 +1,8 @@
 <?xml version="1.0" encoding="utf-8"?>
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-
     <PreferenceCategory
-        android:dependency="I_understand"
-        android:title="Data Source"
-        android:key="dataSource">
+        android:key="collection_category"
+        android:title="Data Source Settings">
         <ListPreference
             android:key="dex_collection_method"
             android:title="Dexcom Data Collection Method"
@@ -12,11 +10,22 @@
             android:entries="@array/DexCollectionMethods"
             android:entryValues="@array/DexCollectionMethodValues"
             android:defaultValue="BluetoothWixel"/>
+        <EditTextPreference
+            android:title="10 Character Dexcom Receiver Serial Number"
+            android:key="share_key"
+            android:shouldDisableView="true"
+            android:defaultValue="SM00000000"/>
         <CheckBoxPreference
             android:key="run_service_in_foreground"
             android:title="Run Collection Service in foreground"
             android:summary="Running in foreground prevents android from killing the service to free up memory but it creates an annoying notification, Not recommended."
             android:defaultValue="false" />
+        <EditTextPreference
+            android:title="List of recievers"
+            android:key="wifi_recievers_addresses"
+            android:dialogTitle="@string/wifi_recievers_dialog_title"
+            android:dialogMessage="@string/wifi_recievers_dialog_message"
+            android:defaultValue="">
+        </EditTextPreference>
     </PreferenceCategory>
-
 </PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_data_sync.xml b/app/src/main/res/xml/pref_data_sync.xml
index 501b4c1..3719f55 100644
--- a/app/src/main/res/xml/pref_data_sync.xml
+++ b/app/src/main/res/xml/pref_data_sync.xml
@@ -4,7 +4,6 @@
          dismiss it. -->
     <!-- NOTE: ListPreference's summary should be set to its value by the activity code. -->
     <PreferenceCategory
-        android:dependency="I_understand"
         android:title="Data Sync"
         android:key="dataSync">
 
@@ -66,18 +65,26 @@
 
         </PreferenceScreen>
 
-        <SwitchPreference
-            android:title="@string/pref_title_broadcast_enabled"
-            android:key="broadcast_data_through_intents"
-            android:summary="@string/pref_summary_broadcast_enabled"
-            android:defaultValue="false" >
-        </SwitchPreference>
-        <SwitchPreference
-            android:title="Send to Pebble"
-            android:key="broadcast_to_pebble"
-            android:summary="If you have a pebble watch you can send bg data straight to it"
-            android:defaultValue="false" >
-        </SwitchPreference>
+        <!--<CheckBoxPreference-->
+        <!--android:key="share_upload"-->
+        <!--android:title="Upload BG values as Dexcom Share"-->
+        <!--android:summary="If you are using Dexcom Share, choose this option."-->
+        <!--android:defaultValue="false" />-->
+        <!--<EditTextPreference-->
+        <!--android:dependency="share_upload"-->
+        <!--android:key="dexcom_account_name"-->
+        <!--android:title="Dexcom Account Login"-->
+        <!--android:summary="Your login for Dexcoms Website"-->
+        <!--android:defaultValue=""/>-->
+        <!--<EditTextPreference-->
+        <!--android:dependency="share_upload"-->
+        <!--android:key="dexcom_account_password"-->
+        <!--android:title="Dexcom Account Password"-->
+        <!--android:inputType="textPassword"-->
+        <!--android:summary="Your password for Dexcoms Website"-->
+        <!--android:defaultValue=""/>-->
+
+
     </PreferenceCategory>
 
 </PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_general.xml b/app/src/main/res/xml/pref_general.xml
index 86a2481..4d83ff5 100644
--- a/app/src/main/res/xml/pref_general.xml
+++ b/app/src/main/res/xml/pref_general.xml
@@ -1,35 +1,25 @@
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory
-        android:dependency="I_understand"
-        android:title="Acceptable BG range"
-        android:key="bgRange">
-        <ListPreference
-            android:key="units"
-            android:title="Bg Units"
-            android:entries="@array/bgUnitEntries"
-            android:entryValues="@array/bgUnitValues"
-            android:defaultValue="mgdl"/>
-        <EditTextPreference
-            android:key="highValue"
-            android:title="High Value"
-            android:numeric="decimal"
-            android:summary="The maximum value you consider to be in range."
-            android:defaultValue="170" />
-        <EditTextPreference
-            android:key="lowValue"
-            android:title="Low Value"
-            android:numeric="decimal"
-            android:summary="The minimum value you consider to be in range."
-            android:defaultValue="70" />
-        <SwitchPreference
-            android:key="predictive_bg"
-            android:title="Display Predictive Values"
-            android:summary="Not Recommended. xDrip will attempt to predict readings each minute based on the past few values."
-            android:defaultValue="false" />
-        <SwitchPreference
-            android:key="interpret_raw"
-            android:title="Interpret Raw Values"
-            android:summary="If using Share, DexDrip will show values when they are normally hidden on the reciever."
-            android:defaultValue="false" />
-    </PreferenceCategory>
-</PreferenceScreen>
+<?xml version="1.0" encoding="utf-8"?>
+    <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+        <PreferenceCategory
+            android:title="General Settings"
+            android:key="bgRange">
+            <ListPreference
+                android:key="units"
+                android:title="Bg Units"
+                android:entries="@array/bgUnitEntries"
+                android:entryValues="@array/bgUnitValues"
+                android:defaultValue="mgdl"/>
+            <EditTextPreference
+                android:key="highValue"
+                android:title="High Value"
+                android:numeric="decimal"
+                android:summary="The maximum value you consider to be in range."
+                android:defaultValue="170" />
+            <EditTextPreference
+                android:key="lowValue"
+                android:title="Low Value"
+                android:numeric="decimal"
+                android:summary="The minimum value you consider to be in range."
+                android:defaultValue="70" />
+        </PreferenceCategory>
+    </PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_headers.xml b/app/src/main/res/xml/pref_headers.xml
index e725b00..5ea3087 100644
--- a/app/src/main/res/xml/pref_headers.xml
+++ b/app/src/main/res/xml/pref_headers.xml
@@ -1,9 +1,3 @@
 <preference-headers xmlns:android="http://schemas.android.com/apk/res/android">
 
-    <!-- These settings headers are only used on tablets. -->
-
-    <header android:fragment="com.eveningoutpost.dexdrip.SettingsActivity$GeneralPreferenceFragment"
-        android:title="@string/pref_header_general" />
-
-
 </preference-headers>
diff --git a/app/src/main/res/xml/pref_notifications.xml b/app/src/main/res/xml/pref_notifications.xml
new file mode 100644
index 0000000..e05ad40
--- /dev/null
+++ b/app/src/main/res/xml/pref_notifications.xml
@@ -0,0 +1,88 @@
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+    <PreferenceCategory
+        android:title="Alerts and Notifications"
+        android:key="alerts_category">
+        <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+            android:title="BG Level Alerts">
+            <CheckBoxPreference
+                android:key="bg_notifications"
+                android:title="BG Alerts"
+                android:summary="Alert when BG readings cross the threshold."
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="bg_notifications"
+                android:key="bg_vibrate"
+                android:title="Vibrate on BG alerts"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="bg_notifications"
+                android:key="bg_lights"
+                android:title="Flash lights on BG alerts"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="bg_notifications"
+                android:key="bg_play_sound"
+                android:title="Play sound on BG alerts"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="bg_play_sound"
+                android:key="bg_sound_in_silent"
+                android:title="Play alert sounds even in silent mode"
+                android:defaultValue="false" />
+            <RingtonePreference
+                android:dependency="bg_play_sound"
+                android:key="bg_notification_sound"
+                android:title="Alert Sound"
+                android:ringtoneType="notification"
+                android:summary="Set sound used for BG Alerts."
+                android:defaultValue="content://settings/system/notification_sound" />
+            <EditTextPreference
+                android:dependency="bg_notifications"
+                android:key="bg_snooze"
+                android:title="Alert Snooze"
+                android:numeric="integer"
+                android:summary="Minimum number of minutes to pass before raising the same alert."
+                android:defaultValue="20" />
+        </PreferenceScreen>
+
+
+        <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
+            android:title="Calibration Alerts"
+            android:key="calibration_alerts_screen">
+            <CheckBoxPreference
+                android:key="calibration_notifications"
+                android:title="Calibration Alerts"
+                android:summary="Alert when a calibration is requested"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="calibration_notifications"
+                android:key="calibration_vibrate"
+                android:title="Vibrate on calibration requests"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="calibration_notifications"
+                android:key="calibration_lights"
+                android:title="Flash lights on calibration requests"
+                android:defaultValue="true" />
+            <CheckBoxPreference
+                android:dependency="calibration_notifications"
+                android:key="calibration_play_sound"
+                android:title="Play sound on calibration requests"
+                android:defaultValue="true" />
+            <RingtonePreference
+                android:dependency="calibration_play_sound"
+                android:key="calibration_notification_sound"
+                android:title="Calibration Request Sound"
+                android:ringtoneType="notification"
+                android:summary="Set sound used for calibration requests."
+                android:defaultValue="content://settings/system/notification_sound" />
+            <EditTextPreference
+                android:dependency="calibration_notifications"
+                android:key="calibration_snooze"
+                android:title="Calibration request Snooze"
+                android:numeric="integer"
+                android:summary="Number of minutes to pass before raising the same calibration request."
+                android:defaultValue="20" />
+        </PreferenceScreen>
+    </PreferenceCategory>
+</PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_share.xml b/app/src/main/res/xml/pref_share.xml
deleted file mode 100644
index e6f13f8..0000000
--- a/app/src/main/res/xml/pref_share.xml
+++ /dev/null
@@ -1,32 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-
-    <PreferenceCategory
-        android:title="Dexcom Share"
-        android:key="dexcomDataSource">
-        <EditTextPreference
-            android:title="10 Character Dexcom Receiver Serial Number"
-            android:key="share_key"
-            android:defaultValue="SM00000000">
-        </EditTextPreference>
-        <!--<CheckBoxPreference-->
-            <!--android:key="share_upload"-->
-            <!--android:title="Upload BG values as Dexcom Share"-->
-            <!--android:summary="If you are using Dexcom Share, choose this option."-->
-            <!--android:defaultValue="false" />-->
-        <!--<EditTextPreference-->
-            <!--android:dependency="share_upload"-->
-            <!--android:key="dexcom_account_name"-->
-            <!--android:title="Dexcom Account Login"-->
-            <!--android:summary="Your login for Dexcoms Website"-->
-            <!--android:defaultValue=""/>-->
-        <!--<EditTextPreference-->
-            <!--android:dependency="share_upload"-->
-            <!--android:key="dexcom_account_password"-->
-            <!--android:title="Dexcom Account Password"-->
-            <!--android:inputType="textPassword"-->
-            <!--android:summary="Your password for Dexcoms Website"-->
-            <!--android:defaultValue=""/>-->
-    </PreferenceCategory>
-
-</PreferenceScreen>
diff --git a/app/src/main/res/xml/pref_wifi.xml b/app/src/main/res/xml/pref_wifi.xml
deleted file mode 100644
index 51be276..0000000
--- a/app/src/main/res/xml/pref_wifi.xml
+++ /dev/null
@@ -1,15 +0,0 @@
-<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
-    <PreferenceCategory
-        android:dependency="I_understand"
-        android:title="Setting for wifi receivers and mongo db if needed"
-        android:key="bgRange">
-
-        <EditTextPreference
-	        android:title="List of recievers"
-	        android:key="wifi_recievers_addresses"
-	        android:dialogTitle="@string/wifi_recievers_dialog_title"
-	        android:dialogMessage="@string/wifi_recievers_dialog_message"
-	        android:defaultValue="">
-        </EditTextPreference>
-    </PreferenceCategory>
-</PreferenceScreen>

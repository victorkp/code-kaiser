diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 2a4f4c5..9c0e30a 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -102,7 +102,10 @@
             android:enabled="true"
             android:exported="true" >
         </service>
-
+        <activity
+            android:name=".stats.StatsActivity"
+            android:label="Statistics" >
+        </activity>
         <activity
             android:name=".SnoozeActivity"
             android:label="@string/title_snooze" >
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index 4ecc907..9d5e27d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -12,6 +12,7 @@
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
 import com.eveningoutpost.dexdrip.Tables.CalibrationDataTable;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
+import com.eveningoutpost.dexdrip.stats.StatsActivity;
 import com.eveningoutpost.dexdrip.utils.Preferences;
 
 import java.util.ArrayList;
@@ -100,6 +101,9 @@ public NavDrawerBuilder(Context aContext) {
         this.nav_drawer_options.add(SnoozeActivity.menu_name);
         this.nav_drawer_intents.add(new Intent(context, SnoozeActivity.class));
 
+        this.nav_drawer_options.add(StatsActivity.MENU_NAME);
+        this.nav_drawer_intents.add(new Intent(context, StatsActivity.class));
+
         this.nav_drawer_options.add("Settings");
         this.nav_drawer_intents.add(new Intent(context, Preferences.class));
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/BgReadingStats.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/BgReadingStats.java
new file mode 100644
index 0000000..419bc16
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/BgReadingStats.java
@@ -0,0 +1,9 @@
+package com.eveningoutpost.dexdrip.stats;
+
+/**
+ * Created by adrian on 03/07/15.
+ */
+public class BgReadingStats {
+    public long timestamp;
+    public double calculated_value;
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java
new file mode 100644
index 0000000..5c74d0b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartFragment.java
@@ -0,0 +1,35 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class ChartFragment extends Fragment {
+
+    private ChartView chartView;
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("DrawStats", "ChartFragment onCreateView");
+        return getView();
+    }
+
+    @Nullable
+    @Override
+    public View getView() {
+        Log.d("DrawStats", "getView - ChartFragment");
+
+        if (chartView == null) {
+            chartView = new ChartView(getActivity().getApplicationContext());
+        }
+        return chartView;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java
new file mode 100644
index 0000000..31c385e
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/ChartView.java
@@ -0,0 +1,120 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.RectF;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.View;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class ChartView extends View {
+
+    private RangeData rangeData = null;
+    private boolean ranteDataCalculating = false;
+    private Resources resources;
+
+    public ChartView(Context context) {
+        super(context);
+        resources = context.getResources();
+
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        Log.d("DrawStats", "onDraw - ChartView");
+        super.onDraw(canvas);
+
+        RangeData rd = getMaybeRangeData();
+
+        if (rd == null) {
+            Log.d("DrawStats", "ChartView - onDraw if");
+
+            Paint myPaint = new Paint();
+            myPaint.setColor(Color.WHITE);
+            myPaint.setAntiAlias(true);
+            myPaint.setStyle(Paint.Style.STROKE);
+            myPaint.setTextSize(dp2px(15));
+            canvas.drawText("Calculating...", dp2px(30), canvas.getHeight() / 2, myPaint);
+        } else {
+            Log.d("DrawStats", "onDraw else");
+
+            if ((rd.aboveRange + rd.belowRange + rd.inRange) == 0) {
+                Paint myPaint = new Paint();
+                myPaint.setColor(Color.WHITE);
+                myPaint.setAntiAlias(true);
+                myPaint.setStyle(Paint.Style.STROKE);
+                myPaint.setTextSize(dp2px(15));
+                canvas.drawText("Not enough data!", dp2px(30), canvas.getHeight() / 2, myPaint);
+                return;
+            }
+
+            int side = Math.min((canvas.getWidth() - 10), (canvas.getHeight() - 10));
+            RectF rect = new RectF((canvas.getWidth() - side) / 2, (canvas.getHeight() - side) / 2, (canvas.getWidth() - side) / 2 + side, (canvas.getHeight() - side) / 2 + side);
+            Paint myPaint = new Paint();
+            myPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+            myPaint.setAntiAlias(true);
+
+
+            float inDeg = rd.inRange * 360f / (rd.inRange + rd.belowRange + rd.aboveRange);
+            float lowDeg = rd.belowRange * 360f / (rd.inRange + rd.belowRange + rd.aboveRange);
+            float highDeg = rd.aboveRange * 360f / (rd.inRange + rd.belowRange + rd.aboveRange);
+
+            Log.d("DrawStats", "in,low, high degree: " + inDeg + " " + lowDeg + " " + highDeg);
+
+            myPaint.setColor(android.graphics.Color.RED);
+            canvas.drawArc(rect, -90, lowDeg, true, myPaint);
+            myPaint.setColor(Color.GREEN);
+            canvas.drawArc(rect, -90 + lowDeg, inDeg, true, myPaint);
+            myPaint.setColor(Color.YELLOW);
+            canvas.drawArc(rect, -90 + lowDeg + inDeg, highDeg, true, myPaint);
+        }
+
+
+    }
+
+
+    public synchronized void setRangeData(RangeData rd) {
+        rangeData = rd;
+        postInvalidate();
+    }
+
+    private int dp2px(float dp) {
+        DisplayMetrics metrics = resources.getDisplayMetrics();
+        int px = (int) (dp * (metrics.densityDpi / 160f));
+        return px;
+    }
+
+    //return either RangeData or start a calculation if not already started
+    public synchronized RangeData getMaybeRangeData() {
+        if (!ranteDataCalculating) {
+            ranteDataCalculating = true;
+            Thread thread = new Thread() {
+                @Override
+                public void run() {
+                    super.run();
+                    RangeData rd = new RangeData();
+                    rd.aboveRange = DBSearchUtil.noReadingsAboveRange(getContext());
+                    rd.belowRange = DBSearchUtil.noReadingsBelowRange(getContext());
+                    rd.inRange = DBSearchUtil.noReadingsInRange(getContext());
+                    setRangeData(rd);
+                }
+            };
+            thread.start();
+        }
+        //will return null if not precalculated
+        return rangeData;
+    }
+
+    protected class RangeData {
+        public int inRange;
+        public int aboveRange;
+        public int belowRange;
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java
new file mode 100644
index 0000000..ea20c91
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/DBSearchUtil.java
@@ -0,0 +1,184 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.database.Cursor;
+import android.database.sqlite.SQLiteDatabase;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.activeandroid.Cache;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.Vector;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class DBSearchUtil {
+
+    public static final String CUTOFF = "13";
+
+
+    public static int noReadingsAboveRange(Context context) {
+        Bounds bounds = new Bounds().invoke();
+
+        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);
+        boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+
+        double high = Double.parseDouble(settings.getString("highValue", "170"));
+        if (!mgdl) {
+            high *= Constants.MMOLL_TO_MGDL;
+        }
+
+        int count = new Select()
+                .from(BgReading.class)
+                .where("timestamp >= " + bounds.start)
+                .where("timestamp <= " + bounds.stop)
+                .where("calculated_value > " + CUTOFF)
+                .where("calculated_value > " + high).count();
+        Log.d("DrawStats", "High count: " + count);
+        return count;
+    }
+
+
+    public static List<BgReadingStats> getReadings(boolean ordered) {
+        Bounds bounds = new Bounds().invoke();
+
+        String orderBy = ordered ? "calculated_value desc" : null;
+
+        SQLiteDatabase db = Cache.openDatabase();
+        Cursor cur = db.query("bgreadings", new String[]{"timestamp", "calculated_value"}, "timestamp >= ? AND timestamp <=  ? AND calculated_value > ?", new String[]{"" + bounds.start, "" + bounds.stop, CUTOFF}, null, null, orderBy);
+        List<BgReadingStats> readings = new Vector<BgReadingStats>();
+        BgReadingStats reading;
+        if (cur.moveToFirst()) {
+            do {
+                reading = new BgReadingStats();
+                reading.timestamp = (Long.parseLong(cur.getString(0)));
+                reading.calculated_value = (Double.parseDouble(cur.getString(1)));
+                readings.add(reading);
+            } while (cur.moveToNext());
+        }
+        return readings;
+
+    }
+
+
+    public static int noReadingsInRange(Context context) {
+        Bounds bounds = new Bounds().invoke();
+
+        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);
+        boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+
+        double high = Double.parseDouble(settings.getString("highValue", "170"));
+        double low = Double.parseDouble(settings.getString("lowValue", "70"));
+        if (!mgdl) {
+            high *= Constants.MMOLL_TO_MGDL;
+            low *= Constants.MMOLL_TO_MGDL;
+
+        }
+        int count = new Select()
+                .from(BgReading.class)
+                .where("timestamp >= " + bounds.start)
+                .where("timestamp <= " + bounds.stop)
+                .where("calculated_value > " + CUTOFF)
+                .where("calculated_value <= " + high)
+                .where("calculated_value >= " + low)
+                .count();
+        Log.d("DrawStats", "In count: " + count);
+
+        return count;
+    }
+
+    public static int noReadingsBelowRange(Context context) {
+        Bounds bounds = new Bounds().invoke();
+
+        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);
+        boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+
+        double low = Double.parseDouble(settings.getString("lowValue", "70"));
+        if (!mgdl) {
+            low *= Constants.MMOLL_TO_MGDL;
+
+        }
+        int count = new Select()
+                .from(BgReading.class)
+                .where("timestamp >= " + bounds.start)
+                .where("timestamp <= " + bounds.stop)
+                .where("calculated_value > " + CUTOFF)
+                .where("calculated_value < " + low)
+                .count();
+        Log.d("DrawStats", "Low count: " + count);
+
+        return count;
+    }
+
+
+    public static long getTodayTimestamp() {
+        Calendar date = new GregorianCalendar();
+        date.set(Calendar.HOUR_OF_DAY, 0);
+        date.set(Calendar.MINUTE, 0);
+        date.set(Calendar.SECOND, 0);
+        date.set(Calendar.MILLISECOND, 0);
+        return date.getTimeInMillis();
+    }
+
+    public static long getYesterdayTimestamp() {
+        Calendar date = new GregorianCalendar();
+        date.set(Calendar.HOUR_OF_DAY, 0);
+        date.set(Calendar.MINUTE, 0);
+        date.set(Calendar.SECOND, 0);
+        date.set(Calendar.MILLISECOND, 0);
+        date.add(Calendar.DATE, -1);
+        return date.getTimeInMillis();
+    }
+
+    public static long getXDaysTimestamp(int x) {
+        Calendar date = new GregorianCalendar();
+        date.add(Calendar.DATE, -x);
+        return date.getTimeInMillis();
+    }
+
+    private static class Bounds {
+        private long stop;
+        private long start;
+
+        public long getStop() {
+            return stop;
+        }
+
+        public long getStart() {
+            return start;
+        }
+
+        public Bounds invoke() {
+            stop = System.currentTimeMillis();
+            start = System.currentTimeMillis();
+
+            switch (StatsActivity.state) {
+                case StatsActivity.TODAY:
+                    start = getTodayTimestamp();
+                    break;
+                case StatsActivity.YESTERDAY:
+                    start = getYesterdayTimestamp();
+                    stop = getTodayTimestamp();
+                    break;
+                case StatsActivity.D7:
+                    start = getXDaysTimestamp(7);
+                    break;
+                case StatsActivity.D30:
+                    start = getXDaysTimestamp(30);
+                    break;
+                case StatsActivity.D90:
+                    start = getXDaysTimestamp(90);
+                    break;
+            }
+            return this;
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java
new file mode 100644
index 0000000..1caefb8
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/FirstPageFragment.java
@@ -0,0 +1,174 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.TextView;
+
+import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.Constants;
+import com.eveningoutpost.dexdrip.R;
+
+import java.util.List;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class FirstPageFragment extends Fragment {
+
+    private View myView;
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("DrawStats", "FirstPageFragment onCreateView");
+
+        myView = inflater.inflate(
+                R.layout.stats_general, container, false);
+
+        (new CalculationThread(myView, getActivity().getApplicationContext())).start();
+
+        return getView();
+    }
+
+    @Nullable
+    @Override
+    public View getView() {
+        return myView;
+    }
+
+    private class CalculationThread extends Thread {
+
+        private final View localView;
+        private final Context context;
+
+        public CalculationThread(View myView, Context context) {
+            this.localView = myView;
+            this.context = context;
+        }
+
+        @Override
+        public void run() {
+            super.run();
+            Log.d("DrawStats", "FirstPageFragment CalculationThread started");
+
+            SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(context);
+            boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+
+            if (context == null) {
+                Log.d("DrawStats", "FirstPageFragment context == null, do not calculate if fragment is not attached");
+                return;
+            }
+
+            //Ranges
+            long aboveRange = DBSearchUtil.noReadingsAboveRange(context);
+            long belowRange = DBSearchUtil.noReadingsBelowRange(context);
+            long inRange = DBSearchUtil.noReadingsInRange(context);
+            long total = aboveRange + belowRange + inRange;
+
+            if (total == 0) {
+                total = Long.MAX_VALUE;
+            }
+
+            TextView rangespercent = (TextView) localView.findViewById(R.id.textView_ranges_percent);
+            TextView rangesabsolute = (TextView) localView.findViewById(R.id.textView_ranges_absolute);
+
+            updateText(localView, rangespercent, inRange * 100 / total + "%/" + aboveRange * 100 / total + "%/" + belowRange * 100 / total + "%");
+            updateText(localView, rangesabsolute, inRange + "/" + aboveRange + "/" + belowRange);
+
+            List<BgReadingStats> bgList = DBSearchUtil.getReadings(true);
+            if (bgList.size() > 0) {
+                double median = bgList.get(bgList.size() / 2).calculated_value;
+                TextView medianView = (TextView) localView.findViewById(R.id.textView_median);
+
+                if (mgdl) {
+                    updateText(localView, medianView, Math.round(median * 10) / 10d + " mg/dl");
+
+                } else {
+                    updateText(localView, medianView, Math.round(median * Constants.MG_DL_TO_MMOL_L * 100) / 100d + " mmol/l");
+
+                }
+
+                double mean = 0;
+                double len = bgList.size();
+                double stdev = 0;
+                for (BgReadingStats bgr : bgList) {
+                    mean += bgr.calculated_value / len;
+                }
+
+                TextView meanView = (TextView) localView.findViewById(R.id.textView_mean);
+                //update mean
+                if (mgdl) {
+                    updateText(localView, meanView, (Math.round(mean * 10) / 10d) + " mg/dl");
+                } else {
+                    updateText(localView, meanView, (Math.round(mean * Constants.MG_DL_TO_MMOL_L * 100) / 100d) + " mmol/l");
+
+                }
+                //update A1c
+                TextView a1cView = (TextView) localView.findViewById(R.id.textView_a1c);
+                int a1c_ifcc = (int) Math.round(((mean + 46.7) / 28.7 - 2.15) * 10.929);
+                double a1c_dcct = Math.round(10 * (mean + 46.7) / 28.7) / 10d;
+                updateText(localView, a1cView, a1c_ifcc + " mmol/mol\n" + a1c_dcct + "%");
+
+
+                for (BgReadingStats bgr : bgList) {
+                    stdev += (bgr.calculated_value - mean) * (bgr.calculated_value - mean) / len;
+                }
+                stdev = Math.sqrt(stdev);
+                TextView stdevView = (TextView) localView.findViewById(R.id.textView_stdev);
+                if (mgdl) {
+                    updateText(localView, stdevView, (Math.round(stdev * 10) / 10d) + " mg/dl");
+                } else {
+                    updateText(localView, stdevView, (Math.round(stdev * Constants.MG_DL_TO_MMOL_L * 100) / 100d) + " mmol/l");
+                }
+            }
+        }
+
+        private void updateText(final View localView, final TextView tv, final String s) {
+            Log.d("DrawStats", "updateText: " + s);
+            Thread thread = new Thread(new Runnable() {
+                @Override
+                public void run() {
+
+                    //Adrian: after screen rotation it might take some time to attach the view to the window
+                    //Wait up to 3 seconds for this to happen.
+                    int i = 0;
+                    while (localView.getHandler() == null && i < 10) {
+                        i++;
+                        try {
+                            Thread.sleep(300);
+                        } catch (InterruptedException e) {
+                        }
+
+                    }
+
+                    if (localView.getHandler() == null) {
+                        Log.d("DrawStats", "no Handler found - stopping to update view");
+                        return;
+                    }
+
+
+                    boolean success = localView.post(new Runnable() {
+                        @Override
+                        public void run() {
+                            tv.setText(s);
+                            Log.d("DrawStats", "setText actually called: " + s);
+
+                        }
+                    });
+                    Log.d("DrawStats", "updateText: " + s + " success: " + success);
+                }
+            });
+            thread.start();
+
+        }
+
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java
new file mode 100644
index 0000000..e101a2a
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileFragment.java
@@ -0,0 +1,35 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.Fragment;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class PercentileFragment extends Fragment {
+
+    private PercentileView percentileView;
+
+    @Nullable
+    @Override
+    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
+        Log.d("DrawStats", "PercentileFragment - onCreateView");
+        return getView();
+    }
+
+    @Nullable
+    @Override
+    public View getView() {
+        Log.d("DrawStats", "PercentileFragment - getView");
+
+        if (percentileView == null) {
+            percentileView = new PercentileView(getActivity().getApplicationContext());
+        }
+        return percentileView;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java
new file mode 100644
index 0000000..0da5a0b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/PercentileView.java
@@ -0,0 +1,316 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.res.Resources;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.CornerPathEffect;
+import android.graphics.DashPathEffect;
+import android.graphics.Paint;
+import android.graphics.Path;
+import android.preference.PreferenceManager;
+import android.util.DisplayMetrics;
+import android.util.Log;
+import android.view.View;
+
+import com.eveningoutpost.dexdrip.R;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+
+import java.util.Calendar;
+import java.util.Collections;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.Vector;
+
+/**
+ * Created by adrian on 30/06/15.
+ */
+public class PercentileView extends View {
+
+    private CalculatedData calculatedData = null;
+    private boolean ranteDataCalculating = false;
+
+    public static final int OFFSET = 30;
+    public static final int NO_TIMESLOTS = 48;
+    private Paint outerPaint, outerPaintLabel, innerPaint, innerPaintLabel, medianPaint, medianPaintLabel;
+    private Resources resources;
+    private int dpOffset;
+
+
+    public PercentileView(Context context) {
+        super(context);
+        resources = context.getResources();
+        dpOffset = dp2px(OFFSET);
+
+        float textSize = dp2px(14);
+        outerPaint = new Paint();
+        outerPaint.setColor(resources.getColor(R.color.percentile_outer));
+        outerPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+        outerPaint.setPathEffect(new CornerPathEffect(dp2px(10)));
+        outerPaint.setStrokeWidth(dp2px(1));
+
+
+        outerPaintLabel = new Paint();
+        outerPaintLabel.setColor(resources.getColor(R.color.percentile_outer));
+        outerPaintLabel.setStyle(Paint.Style.FILL_AND_STROKE);
+        outerPaintLabel.setPathEffect(new CornerPathEffect(dp2px(10)));
+        outerPaintLabel.setTextSize(textSize);
+
+        innerPaint = new Paint();
+        innerPaint.setColor(resources.getColor(R.color.percentile_inner));
+        innerPaint.setStyle(Paint.Style.FILL_AND_STROKE);
+        innerPaint.setPathEffect(new CornerPathEffect(dp2px(10)));
+        innerPaint.setStrokeWidth(dp2px(1));
+
+        innerPaintLabel = new Paint();
+        innerPaintLabel.setColor(resources.getColor(R.color.percentile_inner));
+        innerPaintLabel.setStyle(Paint.Style.FILL_AND_STROKE);
+        innerPaintLabel.setPathEffect(new CornerPathEffect(dp2px(10)));
+        innerPaintLabel.setTextSize(textSize);
+
+
+        medianPaint = new Paint();
+        medianPaint.setColor(resources.getColor(R.color.percentile_median));
+        medianPaint.setStyle(Paint.Style.STROKE);
+        medianPaint.setPathEffect(new CornerPathEffect(dp2px(10)));
+        medianPaint.setStrokeWidth(dp2px(1));
+
+
+        medianPaintLabel = new Paint();
+        medianPaintLabel.setColor(resources.getColor(R.color.percentile_median));
+        medianPaintLabel.setStyle(Paint.Style.STROKE);
+        medianPaintLabel.setPathEffect(new CornerPathEffect(dp2px(10)));
+        medianPaintLabel.setTextSize(textSize);
+
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        Log.d("DrawStats", "PercentileView - onDraw");
+        super.onDraw(canvas);
+
+        CalculatedData rd = getMaybeCalculatedData();
+
+        if (rd == null) {
+            Log.d("DrawStats", "PercentileView - onDraw if");
+
+            Paint myPaint = new Paint();
+            myPaint.setColor(Color.WHITE);
+            myPaint.setAntiAlias(true);
+            myPaint.setStyle(Paint.Style.STROKE);
+            myPaint.setTextSize(dp2px(15));
+            canvas.drawText("Calculating...", dp2px(30), canvas.getHeight() / 2, myPaint);
+        } else {
+            Log.d("DrawStats", "PercentileView - onDraw else");
+            drawPolygon(canvas, rd.q10, rd.q90, outerPaint);
+            drawPolygon(canvas, rd.q25, rd.q75, innerPaint);
+            drawPolygon(canvas, rd.q50, rd.q50, medianPaint);
+
+            drawHighLow(canvas);
+            drawGrid(canvas);
+            drawLegend(canvas);
+        }
+
+
+    }
+
+    private void drawLegend(Canvas canvas) {
+        canvas.drawText("10%/90%", dpOffset + dp2px(10), dp2px(14), outerPaintLabel);
+        canvas.drawText("25%/75%", dpOffset + dp2px(80), dp2px(14), innerPaintLabel);
+        canvas.drawText("50% (median)", dpOffset + dp2px(150), dp2px(14), medianPaintLabel);
+    }
+
+
+    private void drawGrid(Canvas canvas) {
+        Paint myPaint = new Paint();
+        myPaint.setStyle(Paint.Style.STROKE);
+        myPaint.setAntiAlias(false);
+        myPaint.setColor(Color.LTGRAY);
+        myPaint.setStrokeWidth(dp2px(1));
+
+        Paint myPaintText = new Paint();
+        myPaintText.setStyle(Paint.Style.STROKE);
+        myPaintText.setAntiAlias(false);
+        myPaintText.setColor(Color.LTGRAY);
+        myPaintText.setTextSize(dp2px(10));
+
+        canvas.drawLine(dpOffset, 0, dpOffset, canvas.getHeight() - dpOffset, myPaint);
+        canvas.drawLine(dpOffset, canvas.getHeight() - dpOffset, canvas.getWidth(), canvas.getHeight() - dpOffset, myPaint);
+
+        for (int i = 0; i < 24; i++) {
+            int x = (int) (dpOffset + ((canvas.getWidth() - dpOffset) / 24d) * i);
+            if (i % 2 == 0) {
+                canvas.drawLine(x, canvas.getHeight() - dpOffset - dp2px(2), x, canvas.getHeight() - dpOffset + dp2px(3), myPaint);
+                if (i >= 10) x = x - dp2px(3);
+                canvas.drawText(i + "", x - dp2px(4), canvas.getHeight() - dpOffset + dp2px(13), myPaintText);
+            } else {
+                canvas.drawLine(x, canvas.getHeight() - dpOffset - dp2px(2), x, canvas.getHeight() - dpOffset + dp2px(6), myPaint);
+                if (i >= 10) x = x - dp2px(3);
+                canvas.drawText(i + "", x - dp2px(4), canvas.getHeight() - dpOffset + dp2px(20), myPaintText);
+            }
+        }
+
+
+        // add level markings
+        myPaint.setPathEffect(new DashPathEffect(new float[]{dp2px(2), dp2px(3)}, 0));
+        Path path = new Path();
+        double[] levels;
+        String[] labels;
+        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(getContext());
+        boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+        if (mgdl) {
+            levels = new double[]{50, 100, 150, 200, 250, 300, 350};
+            labels = new String[]{"50", "100", "150", "200", "250", "300", "350"};
+        } else {
+            levels = new double[]{2.8, 5.5, 8.3, 11, 14, 17, 20};
+            labels = new String[]{"2.8", "5.5", "8.3", "11", "14", "17", "20"};
+            for (int i = 0; i < levels.length; i++) {
+                levels[i] *= Constants.MMOLL_TO_MGDL;
+            }
+        }
+        for (int i = 0; i < levels.length; i++) {
+            path.moveTo(dpOffset, getYfromBG(levels[i], canvas));
+            path.lineTo(canvas.getWidth(), getYfromBG(levels[i], canvas));
+            canvas.drawText(labels[i], dp2px(5), getYfromBG(levels[i], canvas) + dp2px(4), myPaintText);
+        }
+
+        canvas.drawPath(path, myPaint);
+
+    }
+
+    private void drawHighLow(Canvas canvas) {
+        SharedPreferences settings = PreferenceManager.getDefaultSharedPreferences(getContext());
+        boolean mgdl = "mgdl".equals(settings.getString("units", "mgdl"));
+        double high = Double.parseDouble(settings.getString("highValue", "170"));
+        double low = Double.parseDouble(settings.getString("lowValue", "70"));
+        if (!mgdl) {
+            high *= Constants.MMOLL_TO_MGDL;
+            low *= Constants.MMOLL_TO_MGDL;
+
+        }
+
+        int highPosition = getYfromBG(high, canvas);
+        int lowPosition = getYfromBG(low, canvas);
+        Paint myPaint = new Paint();
+        myPaint.setStyle(Paint.Style.STROKE);
+        myPaint.setAntiAlias(false);
+        myPaint.setColor(Color.RED);
+        myPaint.setStrokeWidth(dp2px(3));
+        canvas.drawLine(dpOffset, lowPosition, canvas.getWidth(), lowPosition, myPaint);
+        myPaint.setColor(Color.YELLOW);
+        canvas.drawLine(dpOffset, highPosition, canvas.getWidth(), highPosition, myPaint);
+    }
+
+    private void drawPolygon(Canvas canvas, double[] lowerValues, double[] higherValues, Paint paint) {
+
+        Path myPath = new Path();
+        myPath.reset();
+
+        double xStep = (canvas.getWidth() - dpOffset) * 1d / lowerValues.length;
+        //lowerValues
+        myPath.moveTo(dpOffset, getYfromBG(lowerValues[0], canvas));
+        for (int i = 1; i < lowerValues.length; i++) {
+            myPath.lineTo((int) (i * xStep + dpOffset), getYfromBG(lowerValues[i], canvas));
+        }
+        // 00:00 == 24:00
+        myPath.lineTo((int) (lowerValues.length * xStep + dpOffset), getYfromBG(lowerValues[0], canvas));
+        myPath.lineTo((int) (higherValues.length * xStep + dpOffset), getYfromBG(higherValues[0], canvas));
+        //higher Values
+        for (int i = higherValues.length - 1; i >= 0; i--) {
+            myPath.lineTo((int) (i * xStep + dpOffset), getYfromBG(higherValues[i], canvas));
+        }
+        myPath.close();
+        canvas.drawPath(myPath, paint);
+    }
+
+    private int getYfromBG(double bgValue, Canvas canvas) {
+        return (int) (canvas.getHeight() - dpOffset - bgValue * (canvas.getHeight() - dpOffset) / 400);
+    }
+
+    private int dp2px(float dp) {
+        DisplayMetrics metrics = resources.getDisplayMetrics();
+        int px = (int) (dp * (metrics.densityDpi / 160f));
+        return px;
+    }
+
+
+    public synchronized void setCalculatedData(CalculatedData rd) {
+        calculatedData = rd;
+        postInvalidate();
+    }
+
+
+    //return either RangeData or start a calculation if not already started
+    public synchronized CalculatedData getMaybeCalculatedData() {
+        if (!ranteDataCalculating) {
+            ranteDataCalculating = true;
+            Thread thread = new Thread() {
+                @Override
+                public void run() {
+                    super.run();
+                    List<BgReadingStats> readings = DBSearchUtil.getReadings(false);
+                    int day = 1000 * 60 * 60 * 24;
+
+                    int timeslot = day / NO_TIMESLOTS;
+
+                    Calendar date = new GregorianCalendar();
+                    date.set(Calendar.HOUR_OF_DAY, 0);
+                    date.set(Calendar.MINUTE, 0);
+                    date.set(Calendar.SECOND, 0);
+                    date.set(Calendar.MILLISECOND, 0);
+
+                    final long offset = date.getTimeInMillis() % day;
+
+                    double[] q10 = new double[NO_TIMESLOTS];
+                    double[] q25 = new double[NO_TIMESLOTS];
+                    double[] q50 = new double[NO_TIMESLOTS];
+                    double[] q75 = new double[NO_TIMESLOTS];
+                    double[] q90 = new double[NO_TIMESLOTS];
+
+
+                    for (int i = 0; i < NO_TIMESLOTS; i++) {
+                        int begin = i * timeslot;
+                        int end = begin + timeslot;
+                        List<Double> filtered = new Vector<Double>();
+
+                        for (BgReadingStats reading : readings) {
+                            long timeOfDay = (reading.timestamp - offset) % day;
+                            if (timeOfDay >= begin && timeOfDay < end) {
+                                filtered.add(reading.calculated_value);
+                            }
+                        }
+                        Collections.sort(filtered);
+                        if (filtered.size() > 0) {
+                            q10[i] = filtered.get((int) (filtered.size() * 0.1));
+                            q25[i] = filtered.get((int) (filtered.size() * 0.25));
+                            q50[i] = filtered.get((int) (filtered.size() * 0.50));
+                            q75[i] = filtered.get((int) (filtered.size() * 0.75));
+                            q90[i] = filtered.get((int) (filtered.size() * 0.9));
+                        }
+
+                    }
+                    CalculatedData cd = new CalculatedData();
+                    cd.q10 = q10;
+                    cd.q25 = q25;
+                    cd.q50 = q50;
+                    cd.q75 = q75;
+                    cd.q90 = q90;
+                    setCalculatedData(cd);
+                }
+            };
+            thread.start();
+        }
+        //will return null if not precalculated
+        return calculatedData;
+    }
+
+    protected class CalculatedData {
+        public double[] q10;
+        public double[] q25;
+        public double[] q50;
+        public double[] q75;
+        public double[] q90;
+    }
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java
new file mode 100644
index 0000000..a931159
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/stats/StatsActivity.java
@@ -0,0 +1,234 @@
+package com.eveningoutpost.dexdrip.stats;
+
+import android.graphics.Color;
+import android.graphics.LightingColorFilter;
+import android.os.Bundle;
+import android.support.v4.app.Fragment;
+import android.support.v4.app.FragmentManager;
+import android.support.v4.app.FragmentStatePagerAdapter;
+import android.support.v4.view.ViewPager;
+import android.util.Log;
+import android.view.Gravity;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.R;
+import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
+
+public class StatsActivity extends ActivityWithMenu {
+
+    public static final String MENU_NAME = "Statistics";
+    public static final int TODAY = 0;
+    public static final int YESTERDAY = 1;
+    public static final int D7 = 2;
+    public static final int D30 = 3;
+    public static final int D90 = 4;
+    public static int state = TODAY;
+    private static boolean swipeInfoNotNeeded = false; // don't show info if already swiped after startup.
+    StatisticsPageAdapter mStatisticsPageAdapter;
+    ViewPager mViewPager;
+    TextView[] indicationDots;
+    private Button buttonTD;
+    private Button buttonYTD;
+    private Button button7d;
+    private Button button30d;
+    private Button button90d;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_statistics);
+        assignButtonNames();
+        initPagerAndIndicator();
+        setButtonColors();
+        registerButtonListeners();
+        showStartupInfo();
+
+    }
+
+    private void showStartupInfo() {
+        if (swipeInfoNotNeeded) {
+            //show info only if user didn't swipe already.
+            return;
+        }
+
+        TextView tv = new TextView(this);
+        tv.setText("Swipe left/right to switch between reports!");
+        tv.setTextColor(Color.CYAN);
+        tv.setTextSize(28);
+
+        for (int i = 0; i < 2; i++) {
+            //Show toast twice the "long" period
+            Toast toast = new Toast(getApplicationContext());
+            toast.setView(tv);
+            toast.setGravity(Gravity.CENTER, 0, 0);
+            toast.show();
+        }
+    }
+
+    private void assignButtonNames() {
+        buttonTD = (Button) findViewById(R.id.button_stats_today);
+        buttonYTD = (Button) findViewById(R.id.button_stats_yesterday);
+        button7d = (Button) findViewById(R.id.button_stats_7d);
+        button30d = (Button) findViewById(R.id.button_stats_30d);
+        button90d = (Button) findViewById(R.id.button_stats_90d);
+    }
+
+    private void initPagerAndIndicator() {
+        mStatisticsPageAdapter =
+                new StatisticsPageAdapter(
+                        getSupportFragmentManager());
+        // set dots for indication
+        indicationDots = new TextView[mStatisticsPageAdapter.getCount()];
+        LinearLayout indicator = (LinearLayout) findViewById(R.id.indicator_layout);
+        for (int i = 0; i < indicationDots.length; i++) {
+            indicationDots[i] = new TextView(this);
+            indicationDots[i].setText("\u25EF");
+            indicationDots[i].setTextSize(12);
+            indicator.addView(indicationDots[i], new ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT));
+        }
+        indicationDots[0].setText("\u26AB");
+        mViewPager = (ViewPager) findViewById(R.id.pager);
+        mViewPager.setAdapter(mStatisticsPageAdapter);
+        mViewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {
+            @Override
+            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
+
+            }
+
+            @Override
+            public void onPageSelected(int position) {
+
+                if (position != 0) {
+                    swipeInfoNotNeeded = true;
+                }
+
+                for (int i = 0; i < indicationDots.length; i++) {
+                    indicationDots[i].setText("\u25EF"); //U+2B24
+                }
+                indicationDots[position].setText("\u26AB");
+            }
+
+            @Override
+            public void onPageScrollStateChanged(int state) {
+
+            }
+        });
+        mViewPager.setCurrentItem(0);
+    }
+
+    void setButtonColors() {
+        buttonTD.getBackground().setColorFilter(null);
+        buttonYTD.getBackground().setColorFilter(null);
+        button7d.getBackground().setColorFilter(null);
+        button30d.getBackground().setColorFilter(null);
+        button90d.getBackground().setColorFilter(null);
+        switch (state) {
+            case TODAY:
+                buttonTD.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFFAA0000));
+                break;
+            case YESTERDAY:
+                buttonYTD.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFFAA0000));
+                break;
+            case D7:
+                button7d.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFFAA0000));
+                break;
+            case D30:
+                button30d.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFFAA0000));
+                break;
+            case D90:
+                button90d.getBackground().setColorFilter(new LightingColorFilter(0xFFFFFFFF, 0xFFAA0000));
+                break;
+        }
+    }
+
+
+    private void registerButtonListeners() {
+
+        View.OnClickListener myListener = new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+
+                if (v == buttonTD) {
+                    state = TODAY;
+                } else if (v == buttonYTD) {
+                    state = YESTERDAY;
+                } else if (v == button7d) {
+                    state = D7;
+                } else if (v == button30d) {
+                    state = D30;
+                } else if (v == button90d) {
+                    state = D90;
+                }
+
+                Log.d("DrawStats", "button pressed, invalidating");
+                mStatisticsPageAdapter.notifyDataSetChanged();
+                mViewPager.invalidate();
+                setButtonColors();
+
+            }
+        };
+        buttonTD.setOnClickListener(myListener);
+        buttonYTD.setOnClickListener(myListener);
+        button7d.setOnClickListener(myListener);
+        button30d.setOnClickListener(myListener);
+        button90d.setOnClickListener(myListener);
+
+
+    }
+
+    @Override
+    public String getMenuName() {
+        return MENU_NAME;
+    }
+
+
+    public class StatisticsPageAdapter extends FragmentStatePagerAdapter {
+        public StatisticsPageAdapter(FragmentManager fm) {
+            super(fm);
+        }
+
+        @Override
+        public Fragment getItem(int i) {
+
+            switch (i) {
+                case 0:
+                    return new FirstPageFragment();
+                case 1:
+                    return new ChartFragment();
+                default:
+                    return new PercentileFragment();
+            }
+        }
+
+        @Override
+        public int getCount() {
+            return 3;
+        }
+
+        @Override
+        public CharSequence getPageTitle(int position) {
+            switch (position) {
+                case 0:
+                    return "General";
+                case 1:
+                    return "Range Pi Chart";
+                default:
+                    return "Percentile Chart";
+            }
+        }
+
+        @Override
+        public int getItemPosition(Object object) {
+            // return POSITION_NONE to update/repaint the views if notifyDataSetChanged()+invalidate() is called
+            return POSITION_NONE;
+        }
+
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
index 6a691f2..546a441 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/ActivityWithMenu.java
@@ -3,6 +3,7 @@
 import android.app.Activity;
 import android.content.Intent;
 import android.os.Bundle;
+import android.support.v4.app.FragmentActivity;
 import android.support.v4.widget.DrawerLayout;
 import android.util.Log;
 
@@ -18,7 +19,7 @@
 /**
  * Created by stephenblack on 6/8/15.
  */
-public abstract class ActivityWithMenu extends Activity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
+public abstract class ActivityWithMenu extends FragmentActivity implements NavigationDrawerFragment.NavigationDrawerCallbacks {
     private NavDrawerBuilder navDrawerBuilder;
     private List<Intent> intent_list;
     private List<String> menu_option_list;
diff --git a/app/src/main/res/layout/activity_statistics.xml b/app/src/main/res/layout/activity_statistics.xml
new file mode 100644
index 0000000..140930d
--- /dev/null
+++ b/app/src/main/res/layout/activity_statistics.xml
@@ -0,0 +1,107 @@
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:id="@+id/drawer_layout"
+    android:layout_width="match_parent" android:layout_height="match_parent">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:layout_alignParentTop="true"
+        android:id="@+id/stats_main_layout">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="1dp"
+            android:layout_marginBottom="1dp"
+            android:paddingTop="1dp"
+            android:paddingBottom="1dp"
+            android:minHeight="1dp"
+            android:minWidth="1dp">
+
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="TD"
+                android:id="@+id/button_stats_today"
+                android:layout_marginTop="1dp"
+                android:layout_marginBottom="1dp"
+                android:paddingTop="1dp"
+                android:paddingBottom="1dp"
+                android:minHeight="1dp"
+                android:minWidth="1dp"/>
+
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="YTD"
+                android:id="@+id/button_stats_yesterday"
+                android:layout_marginTop="1dp"
+                android:layout_marginBottom="1dp"
+                android:paddingTop="1dp"
+                android:paddingBottom="1dp"
+                android:minHeight="1dp"
+                android:minWidth="1dp"/>
+
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="7d"
+                android:id="@+id/button_stats_7d"
+                android:layout_marginTop="1dp"
+                android:layout_marginBottom="1dp"
+                android:paddingTop="1dp"
+                android:paddingBottom="1dp"
+                android:minHeight="1dp"
+                android:minWidth="1dp"/>
+
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="30d"
+                android:id="@+id/button_stats_30d"
+                android:layout_marginTop="1dp"
+                android:layout_marginBottom="1dp"
+                android:paddingTop="1dp"
+                android:paddingBottom="1dp"
+                android:minHeight="1dp"
+                android:minWidth="1dp"/>
+
+            <Button
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:text="90d"
+                android:id="@+id/button_stats_90d"
+                android:layout_marginTop="0dp"
+                android:layout_marginBottom="0dp"
+                android:paddingTop="1dp"
+                android:paddingBottom="1dp"
+                android:minHeight="1dp"
+                android:minWidth="1dp"/>
+        </LinearLayout>
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_gravity="center_horizontal"
+            android:id="@+id/indicator_layout">
+        </LinearLayout>
+        <android.support.v4.view.ViewPager
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        android:id="@+id/pager"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent" />
+
+
+
+
+    </LinearLayout>
+    <fragment android:id="@+id/navigation_drawer"
+        android:layout_width="@dimen/navigation_drawer_width" android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:name="com.eveningoutpost.dexdrip.NavigationDrawerFragment"
+        tools:layout="@layout/fragment_navigation_drawer" />
+
+</android.support.v4.widget.DrawerLayout>
diff --git a/app/src/main/res/layout/stats_general.xml b/app/src/main/res/layout/stats_general.xml
new file mode 100644
index 0000000..825630e
--- /dev/null
+++ b/app/src/main/res/layout/stats_general.xml
@@ -0,0 +1,162 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent">
+
+    <ScrollView
+        android:id="@+id/scrollView5"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent">
+
+        <LinearLayout
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:orientation="vertical"
+            android:layout_gravity="center_horizontal">
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/textView4"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="Range:\n(in/high/low)"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_ranges_percent"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="--%/--%/--%"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="Absolute #s:"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_ranges_absolute"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="--/--/--"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/textView11"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="Median BG: "
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_median"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="---"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/textView13"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="Mean BG: "
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_mean"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="---"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/textView14"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="HbA1c est.: "
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_a1c"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text= "-- mmol/mol\n --%"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="horizontal"
+                android:padding="5dp"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/textView17"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="StdDev: "
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+
+                <TextView
+                    android:id="@+id/textView_stdev"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:padding="5dp"
+                    android:text="---"
+                    android:textAppearance="?android:attr/textAppearanceLarge" />
+            </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+
+</RelativeLayout>
\ No newline at end of file
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
new file mode 100644
index 0000000..fc262f6
--- /dev/null
+++ b/app/src/main/res/values/colors.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <color name="percentile_outer">#005882</color>
+    <color name="percentile_inner">#2d95c2</color>
+    <color name="percentile_median">#bce6ff</color>
+</resources>

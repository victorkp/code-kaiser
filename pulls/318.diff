diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
index 5f5f481..24fdad3 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
@@ -110,6 +110,7 @@
     private long startTimeInterval = -1;
     private int lastBattery = 216;
     private Boolean isBondedOrBonding = false;
+    private Boolean isFirstTry = true;
 
     private static final ScheduledExecutorService worker =
             Executors.newSingleThreadScheduledExecutor();
@@ -173,7 +174,14 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             }
         }
         Log.d(TAG, "Bonded? " + isBondedOrBonding.toString());
-        setupBluetooth();
+        if (Sensor.isActive()){
+            setupBluetooth();
+            Log.d(TAG, "Active Sensor");
+
+        } else {
+            stopScan();
+            Log.d(TAG, "No Active Sensor");
+        }
         return START_STICKY;
     }
 
@@ -190,6 +198,9 @@ public void onDestroy() {
 
     public void keepAlive() {
         Log.d(TAG, "Wake Lock & Wake Time");
+
+        isFirstTry = true;
+
         PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(POWER_SERVICE);
         PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
         wakeLock.acquire(20 * 1000);
@@ -235,7 +246,12 @@ public void stopScan() {
                 mBluetoothAdapter.stopLeScan(mLeScanCallback);
             } else {
                 Log.d(TAG, "stopScan");
-                mLEScanner.stopScan(mScanCallback);
+                try {
+                    mLEScanner.stopScan(mScanCallback);
+                } catch (NullPointerException e) {
+                    //Known bug in Samsung API 21 stack
+                    System.out.print("Caught the NullPointerException");
+                }
             }
         }
     }
@@ -245,17 +261,19 @@ public void startScan() {
             mBluetoothAdapter.startLeScan(mLeScanCallback);
         } else {
             Log.d(TAG, "startScan");
+
             mLEScanner.startScan(filters, settings, mScanCallback);
         }
     }
     
     void scanAfterDelay() {
+        Log.d(TAG, "ScanDelay");
         Runnable task = new Runnable() {
             public void run() {
                 startScan();
             }
         };
-        worker.schedule(task, 10, TimeUnit.SECONDS);
+        worker.schedule(task, 1666, TimeUnit.MILLISECONDS);
     }
 
     private ScanCallback mScanCallback;
@@ -275,10 +293,15 @@ public void onScanResult(int callbackType, ScanResult result) {
                     String deviceNameLastTwo = Extensions.lastTwoCharactersOfString(btDevice.getName());
 
                     if (transmitterIdLastTwo.equals(deviceNameLastTwo)) {
-                        device = btDevice;
-                        connectToDevice(btDevice);
-                    } else {
-                        startScan();
+                        if (isFirstTry) {
+                            Log.d(TAG, "ReadDelay");
+                            isFirstTry = false;
+                            stopScan();
+                            scanAfterDelay();
+                        } else {
+                            device = btDevice;
+                            connectToDevice(btDevice);
+                        }
                     }
                 }
             }
@@ -297,7 +320,7 @@ public void onScanFailed(int errorCode) {
                     android.util.Log.e(TAG, "Already Scanning");
                 } else {
                     stopScan();
-                    scanAfterDelay();
+                    startScan();
                 }
             }
         };
@@ -330,6 +353,7 @@ public void run() {
             };
 
     private void connectToDevice(BluetoothDevice device) {
+        android.util.Log.i(TAG, "Request Connect");
         if (mGatt == null) {
             mGatt = device.connectGatt(getApplicationContext(), false, gattCallback);
             stopScan();
@@ -348,7 +372,7 @@ public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState
                     android.util.Log.e("gattCallback", "STATE_DISCONNECTED");
                     if (mGatt == null) {
                         scanAfterDelay();
-                        return;
+                        break;
                     }
                     mGatt.close();
                     mGatt = null;
@@ -370,6 +394,8 @@ public void onServicesDiscovered(BluetoothGatt gatt, int status) {
                 if (!mGatt.readCharacteristic(authCharacteristic)) {
                     android.util.Log.e(TAG, "onCharacteristicRead : ReadCharacteristicError");
                 }
+
+
             } else {
                 Log.w(TAG, "onServicesDiscovered received: " + status);
             }
@@ -553,8 +579,6 @@ private void processNewTransmitterData(int raw_data , int filtered_data,int sens
         android.util.Log.i("timestamp create", Long.toString(transmitterData.timestamp));
 
         BgReading.create(transmitterData.raw_data, filtered_data, this, transmitterData.timestamp);
-
-
     }
 
     // Sends the disconnect tx message to our bt device.
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index ca01f74..fb6c4bf 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -1,17 +1,27 @@
 package com.eveningoutpost.dexdrip;
 
+import android.bluetooth.BluetoothDevice;
 import android.content.Intent;
+import android.content.SharedPreferences;
 import android.os.Bundle;
+
+import com.eveningoutpost.dexdrip.G5Model.Extensions;
+import com.eveningoutpost.dexdrip.G5Model.Transmitter;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
+
+import android.preference.PreferenceManager;
 import android.view.View;
 import android.widget.Button;
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.Sensor;
+import com.eveningoutpost.dexdrip.Services.G5CollectionService;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
+import java.lang.reflect.Method;
 import java.util.Date;
+import java.util.Set;
 
 public class StopSensor extends ActivityWithMenu {
     public static String menu_name = "Stop Sensor";
@@ -43,9 +53,18 @@ public void addListenerOnButton() {
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 Sensor.stopSensor();
-                AlertPlayer.getPlayer().stopAlert(getApplicationContext(),true, false);
+                AlertPlayer.getPlayer().stopAlert(getApplicationContext(), true, false);
 
                 Toast.makeText(getApplicationContext(), "Sensor stopped", Toast.LENGTH_LONG).show();
+
+                //If Sensor is stopped for G5, we need to prevent further BLE scanning.
+                SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+                String collection_method = prefs.getString("dex_collection_method", "BluetoothWixel");
+                if(collection_method.compareTo("DexcomG5") == 0) {
+                    Intent serviceIntent = new Intent(getApplicationContext(), G5CollectionService.class);
+                    startService(serviceIntent);
+                }
+
                 Intent intent = new Intent(getApplicationContext(), Home.class);
                 startActivity(intent);
                 finish();

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index d5231e2..2a4f4c5 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -32,7 +32,7 @@
             android:value="DexDrip.db" />
         <meta-data
             android:name="AA_DB_VERSION"
-            android:value="33" />
+            android:value="34" />
 
         <provider
             android:name="com.activeandroid.content.ContentProvider"
diff --git a/app/src/main/assets/migrations/34.sql b/app/src/main/assets/migrations/34.sql
new file mode 100644
index 0000000..cd00b25
--- /dev/null
+++ b/app/src/main/assets/migrations/34.sql
@@ -0,0 +1,2 @@
+ALTER TABLE Notifications ADD COLUMN bg_rise_alert BOOLEAN;
+ALTER TABLE Notifications ADD COLUMN bg_fall_alert BOOLEAN;
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
index 7a05d7c..90478a9 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -281,7 +281,7 @@ void enableVibrateControls() {
         if(overrideSilence) {
             checkboxAlertOverride.setText("");
         } else {
-            checkboxAlertOverride.setText("Warning, no alert will be played at silent/vibrate mode!!!");
+            checkboxAlertOverride.setText("Warning, no alert will be played at phone silent/vibrate mode!!!");
         }
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
index 5832ddd..4fadbf5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/ActiveBgAlert.java
@@ -45,6 +45,16 @@ public boolean ready_to_alarm() {
         }
         return false;
     }
+    
+    public static boolean alertSnoozeOver() {
+        ActiveBgAlert activeBgAlert = getOnly();
+        if (activeBgAlert == null) {
+            // no alert exists, so snoozing is over... (this should not happen)
+		Log.wtf(TAG, "ActiveBgAlert getOnly returning null (we have just checked it)");
+            return true;
+        }
+        return activeBgAlert.ready_to_alarm();
+    }
 
     public void snooze(int minutes) {
         next_alert_at = new Date().getTime() + minutes * 60000;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index e6563de..28c066b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -683,6 +683,151 @@ public String noiseValue() {
         }
     }
     
+    // list(0) is the most recent reading.
+    public static List<BgReading> getXRecentPoints(int NumReadings) {
+        List<BgReading> latest = BgReading.latest(NumReadings);
+        if (latest == null || latest.size() != NumReadings) {
+            // for less than NumReadings readings, we can't tell what the situation
+            // 
+            Log.e(TAG_ALERT, "getXRecentPoints we don't have enough readings, returning null");
+            return null;
+        }
+        // So, we have at least three values...
+        for(BgReading bgReading : latest) {
+            Log.e(TAG_ALERT, "getXRecentPoints - reading: time = " + bgReading.timestamp + " calculated_value " + bgReading.calculated_value);
+        }
+        
+        // now let's check that they are relevant. the last reading should be from the last 5 minutes, 
+        // x-1 more readings should be from the last (x-1)*5 minutes. we will allow 5 minutes for the last
+        // x to allow one packet to be missed.
+        if (new Date().getTime() - latest.get(NumReadings - 1).timestamp > (NumReadings * 5 + 6) * 60 * 1000) {
+            Log.e(TAG_ALERT, "getXRecentPoints we don't have enough points from the last " + (NumReadings * 5 + 6) + " minutes, returning null");
+            return null;
+        }
+        return latest;
+
+    }
+    
+    public static void checkForRisingAllert(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        Boolean rising_alert = prefs.getBoolean("rising_alert", false);
+        if(!rising_alert) {
+            return;
+        }
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
+            Log.w("NOTIFICATIONS", "checkForRisingAllert: Notifications are currently disabled!!");
+            return;
+        }
+        
+        if(IsUnclearTime(context)) {
+            Log.e(TAG_ALERT, "checkForRisingAllert we are in an clear time, returning without doing anything");
+            return ;
+        }
+        
+        String riseRate = prefs.getString("rising_bg_val", "2");
+        float friseRate = 2;
+        
+        try
+        {
+            friseRate = Float.parseFloat(riseRate);
+        }
+        catch (NumberFormatException nfe)
+        {
+            Log.e(TAG_ALERT, "checkForRisingAllert reading falling_bg_val failed, continuing with 2", nfe);
+        }
+        Log.w(TAG_ALERT, "checkForRisingAllert will check for rate of " + friseRate);
+        
+        boolean riseAlert = checkForDropRiseAllert(friseRate, false);
+        Notifications.RisingAlert(context, riseAlert);
+    }
+    
+    
+    public static void checkForDropAllert(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        Boolean falling_alert = prefs.getBoolean("falling_alert", false);
+        if(!falling_alert) {
+            return;
+        }
+        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()){
+            Log.w("NOTIFICATIONS", "checkForDropAllert: Notifications are currently disabled!!");
+            return;
+        }
+        
+        if(IsUnclearTime(context)) {
+            Log.e(TAG_ALERT, "checkForDropAllert we are in an clear time, returning without doing anything");
+            return ;
+        }
+        
+        String dropRate = prefs.getString("falling_bg_val", "2");
+        float fdropRate = 2;
+        
+        try
+        {
+            fdropRate = Float.parseFloat(dropRate);
+        }
+        catch (NumberFormatException nfe)
+        {
+            Log.e(TAG_ALERT, "reading falling_bg_val failed, continuing with 2", nfe);
+        }
+        Log.w(TAG_ALERT, "checkForDropAllert will check for rate of " + fdropRate);
+        
+        boolean dropAlert = checkForDropRiseAllert(fdropRate, true);
+        Notifications.DropAlert(context, dropAlert);
+    }
+    
+    // true say, alert is on.
+    private static boolean checkForDropRiseAllert(float MaxSpeed, boolean drop) {
+        Log.e(TAG_ALERT, "checkForDropRiseAllert called drop=" + drop);
+        List<BgReading> latest = getXRecentPoints(4);
+        if(latest == null) {
+            Log.e(TAG_ALERT, "checkForDropRiseAllert we don't have enough points from the last 15 minutes, returning false");
+            return false;
+        }
+        float time3 = (latest.get(0).timestamp - latest.get(3).timestamp) / 60000;
+        double bg_diff3 = latest.get(3).calculated_value - latest.get(0).calculated_value;;
+        if (!drop) {
+            bg_diff3 *= (-1);
+        }
+        Log.w(TAG_ALERT, "bg_diff3=" + bg_diff3 + " time3 = " + time3);
+        if(bg_diff3 < time3 * MaxSpeed) {
+            Log.e(TAG_ALERT, "checkForDropRiseAllert for latest 4 points not fast enough, returning false");
+            return false;
+        }
+        // we should alert here, but if the last measurement was less than MaxSpeed / 2, I won't.
+        
+        
+        float time1 = (latest.get(0).timestamp - latest.get(1).timestamp) / 60000;
+        double bg_diff1 = latest.get(1).calculated_value - latest.get(0).calculated_value;
+        if (!drop) {
+            bg_diff1 *= (-1);
+        }
+        
+        if(time1 > 7.0) {
+            Log.e(TAG_ALERT, "checkForDropRiseAllert the two points are not close enough, returning true");
+            return true;
+        }
+        if(bg_diff1 < time1 * MaxSpeed /2) {
+            Log.e(TAG_ALERT, "checkForDropRiseAllert for latest 2 points not fast enough, returning false");
+            return false;
+        }
+        Log.e(TAG_ALERT, "checkForDropRiseAllert returning true speed is " + (bg_diff3 / time3));
+        return true;
+    }
+    
+    private static boolean IsUnclearTime(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+
+        Boolean bg_unclear_readings_alerts = prefs.getBoolean("bg_unclear_readings_alerts", false);
+        if(bg_unclear_readings_alerts) {
+            Long UnclearTimeSetting = Long.parseLong(prefs.getString("bg_unclear_readings_minutes", "90")) * 60000;
+            Long unclearTime = getUnclearTime(UnclearTimeSetting);
+            if (unclearTime > 0) {
+                Log.e(TAG_ALERT, "IsUnclearTime we are in an clear time, returning true");
+                return true;
+            }
+        }
+        return false;
+    }
     /*
      * This function comes to check weather we are in a case that we have an allert but since things are
      * getting better we should not do anything. (This is only in the case that the alert was snoozed before.)
@@ -695,38 +840,18 @@ public String noiseValue() {
     public static boolean trendingToAlertEnd(Context context, boolean above) {
         // TODO: check if we are not in an UnclerTime.
         Log.e(TAG_ALERT, "trendingToAlertEnd called");
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
 
-        Boolean bg_unclear_readings_alerts = prefs.getBoolean("bg_unclear_readings_alerts", false);
-        if(bg_unclear_readings_alerts) {
-            Long UnclearTimeSetting = Long.parseLong(prefs.getString("bg_unclear_readings_minutes", "90")) * 60000;
-            Long unclearTime = getUnclearTime(UnclearTimeSetting);
-            if (unclearTime > 0) {
-                Log.e(TAG_ALERT, "trendingToAlertEnd we are in an clear time, returning false");
-                return false;
-            }
-        }
-        
-        
-        List<BgReading> latest = BgReading.latest(3);
-        if (latest == null || latest.size() < 2) {
-            // for less than 3 readings, we can't tell what the situation
-            // 
-            Log.e(TAG_ALERT, "trendingToAlertEnd we don't have 3 readings, returning false");
+        if(IsUnclearTime(context)) {
+            Log.e(TAG_ALERT, "trendingToAlertEnd we are in an clear time, returning false");
             return false;
         }
-        // So, we have at least three values...
-        for(BgReading bgReading : latest) {
-            Log.e(TAG_ALERT, "trendingToAlertEnd - reading: time = " + bgReading.timestamp + " calculated_value " + bgReading.calculated_value);
-        }
         
-        // now let's talk that they are relevant. the last reading should be from the last 5 minutes, 
-        // two more readings should be from the last 15 minutes. we will allow 21 minutes for the last
-        // 3 to allow one packet to be missed.
-        if (new Date().getTime() - latest.get(2).timestamp > 21 * 60 * 1000) {
+        List<BgReading> latest = getXRecentPoints(3);
+        if(latest == null) {
             Log.e(TAG_ALERT, "trendingToAlertEnd we don't have enough points from the last 15 minutes, returning false");
             return false;
         }
+        
         if(above == false) {
             // This is a low alert, we should be going up
             if((latest.get(0).calculated_value - latest.get(1).calculated_value > 4) ||
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
index 1f71095..2ba6b2c 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/UserNotification.java
@@ -40,6 +40,12 @@
     @Column(name = "bg_missed_alerts")
     public boolean bg_missed_alerts;
 
+    @Column(name = "bg_rise_alert")
+    public boolean bg_rise_alert;
+
+    @Column(name = "bg_fall_alert")
+    public boolean bg_fall_alert;
+
     public static UserNotification lastBgAlert() {
         return new Select()
                 .from(UserNotification.class)
@@ -68,20 +74,24 @@ public static UserNotification lastExtraCalibrationAlert() {
                 .orderBy("_ID desc")
                 .executeSingle();
     }
-    public static UserNotification lastUnclearReadingsAlert() {
+
+    
+    public static UserNotification GetNotificationByType(String type) {
+        type = type + " = ?";
         return new Select()
-                .from(UserNotification.class)
-                .where("bg_unclear_readings_alert = ?", true)
-                .orderBy("_ID desc")
-                .executeSingle();
+        .from(UserNotification.class)
+        .where(type, true)
+        .orderBy("_ID desc")
+        .executeSingle();
     }
-    public static UserNotification LastMissedAlert() {
-        return new Select()
-                .from(UserNotification.class)
-                .where("bg_missed_alerts = ?", true)
-                .orderBy("_ID desc")
-                .executeSingle();
+    
+    public static void DeleteNotificationByType(String type) {
+        UserNotification userNotification = UserNotification.GetNotificationByType(type);
+        if (userNotification != null) {
+            userNotification.delete();
+        }
     }
+    
     public static UserNotification create(String message, String type) {
         UserNotification userNotification = new UserNotification();
         userNotification.timestamp = new Date().getTime();
@@ -95,9 +105,13 @@ public static UserNotification create(String message, String type) {
         } else if (type == "extra_calibration_alert") {
             userNotification.extra_calibration_alert = true;
         } else if (type == "bg_unclear_readings_alert") {
-        userNotification.bg_unclear_readings_alert = true;
+            userNotification.bg_unclear_readings_alert = true;
         } else if (type == "bg_missed_alerts") {
-        userNotification.bg_missed_alerts = true;
+            userNotification.bg_missed_alerts = true;
+        } else if (type == "bg_rise_alert") {
+            userNotification.bg_rise_alert = true;
+        } else if (type == "bg_fall_alert") {
+            userNotification.bg_fall_alert = true;
         }
         userNotification.save();
         return userNotification;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
index cf3d041..4a3bf14 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
@@ -364,13 +364,7 @@ public void runFake()
         int added = 5;
         while (!mStop) {
             try {
-                for (int j = 0 ; j < 3; j++) {
-                    Thread.sleep(1000);
-                    if(mStop ) {
-                    // we were asked to leave, so do it....
-                        return;
-                    }
-                }
+
                 i+=added;
                 if (i==50) {
                     added = -5;
@@ -379,9 +373,22 @@ public void runFake()
                     added = 5;
                 }
 
-                int fakedRaw = 150000 + i * 1000;
+                int fakedRaw = 100000 + i * 3000;
                 Log.e(TAG, "calling setSerialDataToTransmitterRawData " + fakedRaw);
-                setSerialDataToTransmitterRawData(fakedRaw, fakedRaw,100, new Date().getTime());
+                setSerialDataToTransmitterRawData(fakedRaw, fakedRaw ,100, new Date().getTime());
+                Log.e(TAG, "returned from setSerialDataToTransmitterRawData " + fakedRaw);
+
+                Long StartLoop = new Date().getTime();
+                for (int j = 0 ; j < 300; j++) {
+                    Thread.sleep(1000);
+                    Log.e(TAG, "looping ...." + i + " " + j + " " + (new Date().getTime() - StartLoop)/1000);
+                    if(mStop ) {
+                    // we were asked to leave, so do it....
+						Log.e(TAG, "EXITING mstop=true" );
+                        return;
+                    }
+                }
+
 
                } catch (InterruptedException e) {
                    // time to get out...
@@ -389,6 +396,7 @@ public void runFake()
                    break;
                }
         }
+		Log.e(TAG, "EXITING mstop=true" );
     }
 
     public void Stop()
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
index 8ffa0dd..3593415 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/AlertPlayer.java
@@ -30,6 +30,12 @@
     int volumeBeforeAlert;
     int volumeForThisAlert;
     Context context;
+    
+    final static int ALERT_PROFILE_HIGH = 1;
+    final static int ALERT_PROFILE_ASCENDING = 2;
+    final static int ALERT_PROFILE_MEDIUM = 3;
+    final static int ALERT_PROFILE_VIBRATE_ONLY = 4;
+    
     final static int  MAX_VIBRATING = 2;
     final static int  MAX_ASCENDING = 5; 
 
@@ -166,17 +172,48 @@ private PendingIntent notificationIntent(Context ctx, Intent intent){
     private PendingIntent snoozeIntent(Context ctx){
         Intent intent = new Intent(ctx, SnoozeOnNotificationDismissService.class);
         return PendingIntent.getService(ctx, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-
     }
+    
+    static private int getAlertProfile(Context ctx){
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
+        String profile = prefs.getString("bg_alert_profile", "ascending");
+        if(profile.equals("High")) {
+            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_HIGH");
+            return ALERT_PROFILE_HIGH;
+        }
+        if(profile.equals("ascending")) {
+            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_ASCENDING");
+            return ALERT_PROFILE_ASCENDING;
+        }
+        if(profile.equals("medium")) {
+            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_MEDIUM");
+            return ALERT_PROFILE_MEDIUM;
+        }
+        if(profile.equals("vibrate only")) {
+            Log.w(TAG, "getAlertProfile returning ALERT_PROFILE_VIBRATE_ONLY");
+            return ALERT_PROFILE_VIBRATE_ONLY;
+        }
+        Log.wtf(TAG, "getAlertProfile unknown value " + profile+ " ALERT_PROFILE_ASCENDING");
+        return ALERT_PROFILE_ASCENDING;
+        
+    }
+    
     private void Vibrate(Context ctx, AlertType alert, String bgValue, Boolean overrideSilent, String audioPath, int timeFromStartPlaying) {
         Log.e(TAG, "Vibrate called timeFromStartPlaying = " + timeFromStartPlaying);
         Log.e("ALARM", "setting vibrate alarm");
-        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(ctx);
-        boolean ascending_bg_alerts = prefs.getBoolean("ascending_bg_alerts", true);
-        if (!ascending_bg_alerts) {
+        int profile = getAlertProfile(ctx);
+        if(alert.uuid.equals(AlertType.LOW_ALERT_55)) {
+            // boost alerts...
+            if(profile == ALERT_PROFILE_VIBRATE_ONLY) {
+                profile = ALERT_PROFILE_ASCENDING;
+            }
+        }
+
+        // We use timeFromStartPlaying as a way to force vibrating/ non vibrating...
+        if (profile != ALERT_PROFILE_ASCENDING) {
             // We start from the non ascending part...
             timeFromStartPlaying = MAX_ASCENDING;
-        }
+        } 
 
         String title = bgValue + " " + alert.name;
         String content = "BG LEVEL ALERT: " + bgValue;
@@ -188,15 +225,20 @@ private void Vibrate(Context ctx, AlertType alert, String bgValue, Boolean overr
             .setContentText(content)
             .setContentIntent(notificationIntent(ctx, intent))
             .setDeleteIntent(snoozeIntent(ctx));
-        if (timeFromStartPlaying >= MAX_VIBRATING) {
-            // Before this, we only vibrate...
-            float volumeFrac = (float)(timeFromStartPlaying - MAX_VIBRATING) / (MAX_ASCENDING - MAX_VIBRATING);
-            volumeFrac = Math.max(volumeFrac, 1);
-            Log.e(TAG, "Vibrate volumeFrac = " + volumeFrac);
-            if(overrideSilent) {
-                PlayFile(ctx, alert.mp3_file, volumeFrac);
-            } else {
-                builder.setSound(Uri.parse(audioPath), AudioAttributes.USAGE_ALARM);
+        if (profile != ALERT_PROFILE_VIBRATE_ONLY) {
+            if (timeFromStartPlaying >= MAX_VIBRATING) {
+                // Before this, we only vibrate...
+                float volumeFrac = (float)(timeFromStartPlaying - MAX_VIBRATING) / (MAX_ASCENDING - MAX_VIBRATING);
+                volumeFrac = Math.min(volumeFrac, 1);
+                if(profile == ALERT_PROFILE_MEDIUM) {
+                    volumeFrac = (float)0.7;
+                }
+                Log.e(TAG, "Vibrate volumeFrac = " + volumeFrac);
+                if(overrideSilent) {
+                    PlayFile(ctx, alert.mp3_file, volumeFrac);
+                } else {
+                    builder.setSound(Uri.parse(audioPath), AudioAttributes.USAGE_ALARM);
+                }
             }
         }
         //NotificationCompat.Builder mBuilder = notificationBuilder(title, content, intent);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index b30a27c..ac40d14 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -81,6 +81,9 @@
     public static final int exportAlertNotificationId = 006;
     public static final int uncleanAlertNotificationId = 007;
     public static final int missedAlertNotificationId = 010;
+    public static final int riseAlertNotificationId = 011;
+    public static final int failAlertNotificationId = 012;
+
     final static int callbackPeriod = 60000 * 1;
 
     SharedPreferences prefs;
@@ -169,26 +172,33 @@ public void FileBasedNotifications(Context context) {
             }
            // Currently the ui blocks having two alerts with the same alert value.
 
-            // we have a new alert. If it is more important than the previous one. we need to stop
-            // the older one and start a new one (We need to play even if we were snoozed).
-            // If it is a lower level alert, we should keep being snoozed.
-
-
-            // Example, if we have two alerts one for 90 and the other for 80. and we were already alerting for the 80
-            // and we were snoozed. Now bg is 85, the alert for 80 is cleared, but we are alerting for 90.
-            // We should not do anything if we are snoozed for the 80...
-            // If one allert was high and the second one is low however, we alarm in any case (snoozing ignored).
-            boolean opositeDirection = AlertType.OpositeDirection(activeBgAlert, newAlert);
-            AlertType  newHigherAlert = AlertType.HigherAlert(activeBgAlert, newAlert);
-            if ((newHigherAlert == activeBgAlert) && (!opositeDirection)) {
-                // the existing alert is the higher, we should check if to play it
-                Log.e(TAG, "FileBasedNotifications The existing alert has the same importance, checking if to playit newHigherAlert = " + newHigherAlert.name +
-                        "activeBgAlert = " + activeBgAlert.name);
-                boolean trendingToAlertEnd = trendingToAlertEnd(context, newHigherAlert);
-                AlertPlayer.getPlayer().ClockTick(context, trendingToAlertEnd, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
-                return;
+            boolean alertSnoozeOver = ActiveBgAlert.alertSnoozeOver();
+            if (alertSnoozeOver) {
+                Log.e(TAG, "FileBasedNotifications we had two alerts, the snoozed one is over, we fall down to deleting the snoozed and staring the new");
+                // in such case it is not important which is higher.
+                
+            } else {
+                // we have a new alert. If it is more important than the previous one. we need to stop
+                // the older one and start a new one (We need to play even if we were snoozed).
+                // If it is a lower level alert, we should keep being snoozed.
+    
+    
+                // Example, if we have two alerts one for 90 and the other for 80. and we were already alerting for the 80
+                // and we were snoozed. Now bg is 85, the alert for 80 is cleared, but we are alerting for 90.
+                // We should not do anything if we are snoozed for the 80...
+                // If one allert was high and the second one is low however, we alarm in any case (snoozing ignored).
+                boolean opositeDirection = AlertType.OpositeDirection(activeBgAlert, newAlert);
+                AlertType  newHigherAlert = AlertType.HigherAlert(activeBgAlert, newAlert);
+                if ((newHigherAlert == activeBgAlert) && (!opositeDirection)) {
+                    // the existing alert is the higher, we should check if to play it
+                    Log.e(TAG, "FileBasedNotifications The existing alert has the same direcotion, checking if to playit newHigherAlert = " + newHigherAlert.name +
+                            "activeBgAlert = " + activeBgAlert.name);
+                    
+                    boolean trendingToAlertEnd = trendingToAlertEnd(context, newHigherAlert);
+                    AlertPlayer.getPlayer().ClockTick(context, trendingToAlertEnd, EditAlertActivity.UnitsConvert2Disp(doMgdl, bgReading.calculated_value));
+                    return;
+                }
             }
-
             // For now, we are stopping the old alert and starting a new one.
             Log.e(TAG, "Found a new alert, that is higher than the previous one will play it. " + newAlert.name);
             AlertPlayer.getPlayer().stopAlert(context, true, false);
@@ -219,6 +229,8 @@ public void notificationSetter(Context context) {
             return;
         }
         FileBasedNotifications(context);
+        BgReading.checkForDropAllert(context);
+        BgReading.checkForRisingAllert(context);
 
         BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(context);
         Sensor sensor = Sensor.currentSensor();
@@ -454,50 +466,50 @@ private void extraCalibrationRequest() {
 
     public static void bgUnclearAlert(Context context) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
-        String otherAlertsSound = prefs.getString("other_alerts_sound", "content://settings/system/notification_sound");
-        Boolean otherAlertsOverrideSilent = prefs.getBoolean("other_alerts_override_silent", false);
         int otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
-
-        UserNotification userNotification = UserNotification.lastUnclearReadingsAlert();
-        if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * otherAlertSnooze)))) {
-            if (userNotification != null) { userNotification.delete(); }
-            UserNotification.create("Unclear Sensor Readings", "bg_unclear_readings_alert");
-            Intent intent = new Intent(context, Home.class);
-            NotificationCompat.Builder mBuilder =
-                    new NotificationCompat.Builder(context)
-                            .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
-                            .setContentTitle("Unclear Sensor Readings")
-                            .setContentIntent(PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT));
-            mBuilder.setVibrate(vibratePattern);
-            mBuilder.setLights(0xff00ff00, 300, 1000);
-            if(otherAlertsOverrideSilent) {
-                mBuilder.setSound(Uri.parse(otherAlertsSound), AudioAttributes.USAGE_ALARM);
-            } else {
-                mBuilder.setSound(Uri.parse(otherAlertsSound));
-            }
+        OtherAlert(context, "bg_unclear_readings_alert", "Unclear Sensor Readings", uncleanAlertNotificationId,  otherAlertSnooze);
+    }
+    
+    public static void bgMissedAlert(Context context) {
+        SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        int otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
+        OtherAlert(context, "bg_missed_alerts", "BG Readings Missed", missedAlertNotificationId, otherAlertSnooze);
+    }
+    
+    public static void RisingAlert(Context context, boolean on) {
+        RiseDropAlert(context, on, "bg_rise_alert", "bg rising fast", riseAlertNotificationId);
+    }
+    public static void DropAlert(Context context, boolean on) {
+        RiseDropAlert(context, on, "bg_fall_alert", "bg failing fast", failAlertNotificationId);
+    }
+    
+    public static void RiseDropAlert(Context context, boolean on, String type, String message, int notificatioId) {
+        if(on) {
+         // This alerts will only happen once. Want to have maxint, but not create overflow.
+            OtherAlert(context, type, message, notificatioId, Integer.MAX_VALUE / 100000); 
+        } else {
             NotificationManager mNotifyMgr = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-            mNotifyMgr.cancel(uncleanAlertNotificationId);
-            mNotifyMgr.notify(uncleanAlertNotificationId, mBuilder.build());
+            mNotifyMgr.cancel(notificatioId);
+            UserNotification.DeleteNotificationByType(type);
         }
     }
-
-    public static void bgMissedAlert(Context context) {
+    
+    public static void OtherAlert(Context context, String type, String message, int notificatioId, int snooze) {
         SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
         String otherAlertsSound = prefs.getString("other_alerts_sound", "content://settings/system/notification_sound");
         Boolean otherAlertsOverrideSilent = prefs.getBoolean("other_alerts_override_silent", false);
-        int otherAlertSnooze =  Integer.parseInt(prefs.getString("other_alerts_snooze", "20"));
 
-        UserNotification userNotification = UserNotification.LastMissedAlert();
-        if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * otherAlertSnooze)))) {
-            if (userNotification != null) {
-                userNotification.delete();
+        UserNotification userNotification = UserNotification.GetNotificationByType(type); //"bg_unclear_readings_alert"
+        if ((userNotification == null) || (userNotification.timestamp <= ((new Date().getTime()) - (60000 * snooze)))) {
+            if (userNotification != null) { 
+                userNotification.delete(); 
             }
-            UserNotification.create("BG Readings Missed", "missing_readings_alert");
+            UserNotification.create(message, type);
             Intent intent = new Intent(context, Home.class);
             NotificationCompat.Builder mBuilder =
                     new NotificationCompat.Builder(context)
                             .setSmallIcon(R.drawable.ic_action_communication_invert_colors_on)
-                            .setContentTitle("BG Readings Missed")
+                            .setContentTitle(message)
                             .setContentIntent(PendingIntent.getActivity(context, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT));
             mBuilder.setVibrate(vibratePattern);
             mBuilder.setLights(0xff00ff00, 300, 1000);
@@ -507,8 +519,8 @@ public static void bgMissedAlert(Context context) {
                 mBuilder.setSound(Uri.parse(otherAlertsSound));
             }
             NotificationManager mNotifyMgr = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-            mNotifyMgr.cancel(missedAlertNotificationId);
-            mNotifyMgr.notify(missedAlertNotificationId, mBuilder.build());
+            mNotifyMgr.cancel(notificatioId);
+            mNotifyMgr.notify(notificatioId, mBuilder.build());
         }
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index ed7ba9d..3e6f81d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -138,10 +138,13 @@ public void onCreate(Bundle savedInstanceState) {
             bindPreferenceSummaryToValue(findPreference("units"));
 
             addPreferencesFromResource(R.xml.pref_notifications);
+            bindPreferenceSummaryToValue(findPreference("bg_alert_profile"));
             bindPreferenceSummaryToValue(findPreference("calibration_notification_sound"));
             bindPreferenceSummaryToValue(findPreference("calibration_snooze"));
             bindPreferenceSummaryToValue(findPreference("bg_unclear_readings_minutes"));
             bindPreferenceSummaryToValue(findPreference("bg_missed_minutes"));
+            bindPreferenceSummaryToValue(findPreference("falling_bg_val"));
+            bindPreferenceSummaryToValue(findPreference("rising_bg_val"));
             bindPreferenceSummaryToValue(findPreference("other_alerts_sound"));
             bindPreferenceSummaryToValue(findPreference("other_alerts_snooze"));
 
diff --git a/app/src/main/res/layout/activity_edit_alert.xml b/app/src/main/res/layout/activity_edit_alert.xml
index 2db49a0..bb29de7 100644
--- a/app/src/main/res/layout/activity_edit_alert.xml
+++ b/app/src/main/res/layout/activity_edit_alert.xml
@@ -259,7 +259,7 @@
                             android:layout_width="wrap_content"
                             android:layout_height="wrap_content"
                             android:gravity="left"
-                            android:text="Override Silent Mode:"
+                            android:text="Override phone Silent Mode:"
                             android:textSize="15sp"
                             />
 
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index ce7717a..399b828 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -26,7 +26,32 @@
         <item>mgdl</item>
         <item>mmol</item>
     </string-array>
+    
+<!--     make sure to keep this values in sync with AlertPlayer.getAlertProfile -->
+    <string-array name="BgAlertProfileEntries">
+        <item>High</item>
+        <item>ascending</item>
+        <item>medium</item>
+        <item>vibrate only</item>
+    </string-array>
 
+    <string-array name="BgAlertProfileValues">
+        <item>High</item>
+        <item>ascending</item>
+        <item>medium</item>
+        <item>vibrate only</item>
+    </string-array>
+    
+    <string-array name="risingEntries">
+        <item>2 mgdl (0.1 mmol)</item>
+        <item>3 mgdl (0.16 mmol)</item>
+    </string-array>
+
+    <string-array name="risingValues">
+        <item>2</item>
+        <item>3</item>
+    </string-array>
+    
     <string-array name="alertType">
         <item>System Sound/Alarm</item>
         <item>Custom Sound/Alarm</item>
diff --git a/app/src/main/res/xml/pref_notifications.xml b/app/src/main/res/xml/pref_notifications.xml
index fda7188..44bd8c0 100644
--- a/app/src/main/res/xml/pref_notifications.xml
+++ b/app/src/main/res/xml/pref_notifications.xml
@@ -14,6 +14,13 @@
         <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
             android:title="Bg Alerts Settings"
             android:key="bg_alerts_screen">
+            <ListPreference
+                    android:key="bg_alert_profile"
+                    android:title="BG alerts profile"
+                    android:entries="@array/BgAlertProfileEntries"
+                    android:entryValues="@array/BgAlertProfileValues"
+                    android:defaultValue="ascending"/>
+            
             <CheckBoxPreference
                 android:key="smart_snoozing"
                 android:title="Smart snoozing"
@@ -25,13 +32,6 @@
                 android:title="Shortcut to Bg Level Alerts"
                 android:summary="Create a shortcut from main navigation to bg level screen"
                 android:defaultValue="false" />
-
-            <CheckBoxPreference
-                android:key="ascending_bg_alerts"
-                android:title="Ascending Alerts"
-                android:summary="In case of bg alerts, the phone will vibrate twice and start with low volume alerts"
-                android:defaultValue="true" />
-
         </PreferenceScreen>
 
 
@@ -99,6 +99,32 @@
             </PreferenceCategory>
 
             <PreferenceCategory
+                android:title="Falling/Rising BG">
+                <CheckBoxPreference
+                    android:key="falling_alert"
+                    android:title="Bg falling fast"
+                    android:defaultValue="false" />
+                <ListPreference
+                    android:dependency="falling_alert"
+                    android:key="falling_bg_val"
+                    android:title="falling threshold"
+                    android:entries="@array/risingEntries"
+                    android:entryValues="@array/risingValues"
+                    android:defaultValue="3"/>
+                 <CheckBoxPreference
+                    android:key="rising_alert"
+                    android:title="Bg rising fast"
+                    android:defaultValue="false" />
+                <ListPreference
+                    android:dependency="rising_alert"
+                    android:key="rising_bg_val"
+                    android:title="rising threshold"
+                    android:entries="@array/risingEntries"
+                    android:entryValues="@array/risingValues"
+                    android:defaultValue="3"/>
+            </PreferenceCategory>
+            
+            <PreferenceCategory
                 android:title="Alert Preferences (for these alerts)">
                 <RingtonePreference
                     android:key="other_alerts_sound"

diff --git a/app/app.iml b/app/app.iml
index bcf8557..2569b8b 100644
--- a/app/app.iml
+++ b/app/app.iml
@@ -94,6 +94,7 @@
     <orderEntry type="library" exported="" name="crashlytics-2.2.3" level="project" />
     <orderEntry type="library" exported="" name="answers-1.1.2" level="project" />
     <orderEntry type="library" exported="" name="rxjava-1.0.0" level="project" />
+    <orderEntry type="library" exported="" name="acra-4.5.0" level="project" />
     <orderEntry type="library" exported="" name="retrofit-1.9.0" level="project" />
     <orderEntry type="library" exported="" name="acra-4.5.0" level="project" />
     <orderEntry type="library" exported="" name="support-annotations-22.1.1" level="project" />
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index b43fa05..82d67d5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -31,7 +31,6 @@
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
-import android.os.Binder;
 import android.os.Build;
 import android.os.IBinder;
 import android.os.PowerManager;
@@ -40,25 +39,18 @@
 
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.Models.TransmitterData;
 import com.eveningoutpost.dexdrip.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.HM10Attributes;
-import com.eveningoutpost.dexdrip.Models.TransmitterData;
 
-import java.nio.charset.Charset;
 import java.nio.ByteBuffer;
 import java.nio.ByteOrder;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.LinkedList;
-import java.util.Queue;
 import java.util.UUID;
-import static com.activeandroid.ActiveAndroid.beginTransaction;
-import static com.activeandroid.ActiveAndroid.endTransaction;
-import static com.activeandroid.ActiveAndroid.setTransactionSuccessful;
-import com.activeandroid.query.Select;
 
 @TargetApi(Build.VERSION_CODES.KITKAT)
 public class DexCollectionService extends Service {
@@ -220,23 +212,31 @@ public void attemptConnection() {
     private final BluetoothGattCallback mGattCallback = new BluetoothGattCallback() {
         @Override
         public void onConnectionStateChange(BluetoothGatt gatt, int status, int newState) {
-            if (newState == BluetoothProfile.STATE_CONNECTED) {
-                mConnectionState = STATE_CONNECTED;
-                ActiveBluetoothDevice.connected();
-                Log.w(TAG, "onConnectionStateChange: Connected to GATT server.");
-                mBluetoothGatt.discoverServices();
-            } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
-                mConnectionState = STATE_DISCONNECTED;
-                ActiveBluetoothDevice.disconnected();
-                if(mBluetoothGatt != null) {
-                    Log.w(TAG, "onConnectionStateChange: mBluetoothGatt is not null, closing.");
-                    mBluetoothGatt.close();
-                    mBluetoothGatt = null;
-                    mCharacteristic = null;
+            PowerManager powerManager = (PowerManager) mContext.getSystemService(mContext.POWER_SERVICE);
+            PowerManager.WakeLock wakeLock2 = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                    "DexCollectionService");
+            wakeLock2.acquire();
+            try {
+                if (newState == BluetoothProfile.STATE_CONNECTED) {
+                    mConnectionState = STATE_CONNECTED;
+                    ActiveBluetoothDevice.connected();
+                    Log.w(TAG, "onConnectionStateChange: Connected to GATT server.");
+                    mBluetoothGatt.discoverServices();
+                } else if (newState == BluetoothProfile.STATE_DISCONNECTED) {
+                    mConnectionState = STATE_DISCONNECTED;
+                    ActiveBluetoothDevice.disconnected();
+                    if (mBluetoothGatt != null) {
+                        Log.w(TAG, "onConnectionStateChange: mBluetoothGatt is not null, closing.");
+                        mBluetoothGatt.close();
+                        mBluetoothGatt = null;
+                        mCharacteristic = null;
+                    }
+                    lastdata = null;
+                    Log.w(TAG, "onConnectionStateChange: Disconnected from GATT server.");
+                    setRetryTimer();
                 }
-                lastdata = null;
-                Log.w(TAG, "onConnectionStateChange: Disconnected from GATT server.");
-                setRetryTimer();
+            } finally {
+                wakeLock2.release();
             }
         }
 

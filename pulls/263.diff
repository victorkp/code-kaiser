diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index b97bae9..30448bf 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -129,6 +129,10 @@
             android:label="Statistics" >
         </activity>
         <activity
+            android:name=".BGHistory"
+            android:label="BG History" >
+        </activity>
+        <activity
             android:name=".SnoozeActivity"
             android:label="@string/title_snooze" >
         </activity>
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/BGHistory.java b/app/src/main/java/com/eveningoutpost/dexdrip/BGHistory.java
new file mode 100644
index 0000000..b1b9749
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/BGHistory.java
@@ -0,0 +1,191 @@
+package com.eveningoutpost.dexdrip;
+
+import android.app.DatePickerDialog;
+import android.app.Dialog;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.Button;
+import android.widget.DatePicker;
+import android.widget.Spinner;
+import android.widget.Toast;
+
+import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
+import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
+
+import java.text.DateFormat;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.Locale;
+
+import lecho.lib.hellocharts.gesture.ZoomType;
+import lecho.lib.hellocharts.listener.ViewportChangeListener;
+import lecho.lib.hellocharts.model.Viewport;
+import lecho.lib.hellocharts.view.LineChartView;
+import lecho.lib.hellocharts.view.PreviewLineChartView;
+
+
+public class BGHistory extends ActivityWithMenu {
+    public static String menu_name = "BG History";
+    static String TAG = BGHistory.class.getName();
+    private boolean updatingPreviewViewport = false;
+    private boolean updatingChartViewport = false;
+    private LineChartView chart;
+    private PreviewLineChartView previewChart;
+    private GregorianCalendar date1;
+    private DateFormat dateFormatter = DateFormat.getDateInstance(DateFormat.DEFAULT, Locale.getDefault());
+    private Button dateButton1;
+    private Spinner daysSpinner;
+    private int noDays = 1;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_bghistory);
+
+        date1 = new GregorianCalendar();
+        date1.set(Calendar.HOUR_OF_DAY, 0);
+        date1.set(Calendar.MINUTE, 0);
+        date1.set(Calendar.SECOND, 0);
+        date1.set(Calendar.MILLISECOND, 0);
+
+        setupButtons();
+        setupCharts();
+
+        Toast.makeText(this, "Double tap or pinch to zoom.",
+                Toast.LENGTH_LONG).show();
+    }
+
+    private void setupButtons() {
+        Button prevButton = (Button) findViewById(R.id.button_prev);
+        Button nextButton = (Button) findViewById(R.id.button_next);
+        this.dateButton1 = (Button) findViewById(R.id.button_date1);
+        this.daysSpinner = (Spinner) findViewById(R.id.daysspinner);
+
+
+        prevButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                date1.add(Calendar.DATE, - noDays);
+                setupCharts();
+            }
+        });
+
+        nextButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                date1.add(Calendar.DATE, + noDays);
+                setupCharts();
+            }
+        });
+
+        dateButton1.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Dialog dialog = new DatePickerDialog(BGHistory.this, new DatePickerDialog.OnDateSetListener() {
+                    @Override
+                    public void onDateSet(DatePicker view, int year, int monthOfYear, int dayOfMonth) {
+                        date1.set(year, monthOfYear, dayOfMonth);
+                        setupCharts();
+                    }
+                }, date1.get(Calendar.YEAR), date1.get(Calendar.MONTH), date1.get(Calendar.DAY_OF_MONTH));
+                dialog.show();
+            }
+        });
+
+        String[] vals = new String[14];
+        vals[0] = 1 + " day";
+        for (int i = 1; i< vals.length; i++ ){
+            vals[i] = (i+1) + " days";
+        }
+
+        daysSpinner.setAdapter(new ArrayAdapter(this, android.R.layout.simple_dropdown_item_1line,  vals));
+        daysSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                noDays = position + 1;
+                setupCharts();
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+                noDays = 1;
+                setupCharts();
+            }
+        });
+    }
+
+
+    @Override
+    public String getMenuName() {
+        return menu_name;
+    }
+
+    private void setupCharts() {
+        dateButton1.setText(dateFormatter.format(date1.getTime()));
+
+        Calendar endDate = (GregorianCalendar) date1.clone();
+        endDate.add(Calendar.DATE, noDays);
+        int numValues = noDays * (60 / 5) * 24;
+        BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(this, date1.getTimeInMillis(), endDate.getTimeInMillis(), numValues);
+
+        chart = (LineChartView) findViewById(R.id.chart);
+        chart.setZoomType(ZoomType.HORIZONTAL);
+        previewChart = (PreviewLineChartView) findViewById(R.id.chart_preview);
+        previewChart.setZoomType(ZoomType.HORIZONTAL);
+
+        chart.setLineChartData(bgGraphBuilder.lineData());
+        chart.setOnValueTouchListener(bgGraphBuilder.getOnValueSelectTooltipListener());
+        previewChart.setLineChartData(bgGraphBuilder.previewLineData());
+
+        previewChart.setViewportCalculationEnabled(true);
+        chart.setViewportCalculationEnabled(true);
+        previewChart.setViewportChangeListener(new ViewportListener());
+        chart.setViewportChangeListener(new ChartViewPortListener());
+    }
+    
+
+    private class ChartViewPortListener implements ViewportChangeListener {
+        @Override
+        public void onViewportChanged(Viewport newViewport) {
+            if (!updatingPreviewViewport) {
+                updatingChartViewport = true;
+                previewChart.setZoomType(ZoomType.HORIZONTAL);
+                previewChart.setCurrentViewport(newViewport);
+                updatingChartViewport = false;
+            }
+        }
+    }
+
+    private class ViewportListener implements ViewportChangeListener {
+        @Override
+        public void onViewportChanged(Viewport newViewport) {
+            if (!updatingChartViewport) {
+                updatingPreviewViewport = true;
+                chart.setZoomType(ZoomType.HORIZONTAL);
+                chart.setCurrentViewport(newViewport);
+                updatingPreviewViewport = false;
+            }
+        }
+    }
+
+    private int daysBetween(Calendar calendar1, Calendar calendar2) {
+        Calendar first, second;
+        if (calendar1.compareTo(calendar2) > 0) {
+            first = calendar2;
+            second = calendar1;
+        } else {
+            first = calendar1;
+            second = calendar2;
+        }
+        int days = second.get(Calendar.DAY_OF_YEAR) - first.get(Calendar.DAY_OF_YEAR);
+        Calendar temp = (Calendar) first.clone();
+        while (temp.get(Calendar.YEAR) < second.get(Calendar.YEAR)) {
+            days = days + temp.getActualMaximum(Calendar.DAY_OF_YEAR);
+            temp.add(Calendar.YEAR, 1);
+        }
+        return days;
+    }
+
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index 03da19e..313ff0a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -507,9 +507,14 @@ public static BgReading lastNoSenssor() {
     }
 
     public static List<BgReading> latestForGraph(int number, long startTime) {
+        return latestForGraph(number, startTime, Long.MAX_VALUE);
+    }
+
+    public static List<BgReading> latestForGraph(int number, long startTime, long endTime) {
         return new Select()
                 .from(BgReading.class)
                 .where("timestamp >= " + Math.max(startTime, 0))
+                .where("timestamp <= " + endTime)
                 .where("calculated_value != 0")
                 .where("raw_data != 0")
                 .orderBy("timestamp desc")
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index 3756b48..c3631e0 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -649,10 +649,11 @@ public static double min_recent() {
                 .execute();
     }
 
-    public static List<Calibration> latestForGraph(int number, long startTime) {
+    public static List<Calibration> latestForGraph(int number, long startTime, long endTime) {
         return new Select()
                 .from(Calibration.class)
                 .where("timestamp >= " + Math.max(startTime, 0))
+                .where("timestamp <= " + endTime)
                 .orderBy("timestamp desc")
                 .limit(number)
                 .execute();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index acdbc60..0cdcb04 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -107,6 +107,9 @@ public NavDrawerBuilder(Context aContext) {
         this.nav_drawer_options.add(StatsActivity.MENU_NAME);
         this.nav_drawer_intents.add(new Intent(context, StatsActivity.class));
 
+        this.nav_drawer_options.add(BGHistory.menu_name);
+        this.nav_drawer_intents.add(new Intent(context, BGHistory.class));
+
         this.nav_drawer_options.add("Settings");
         this.nav_drawer_intents.add(new Intent(context, Preferences.class));
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 94d1da7..2af509a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -5,6 +5,7 @@
 import android.content.res.Configuration;
 import android.graphics.Color;
 import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
 import android.text.format.DateFormat;
 import android.widget.Toast;
 
@@ -37,8 +38,8 @@
  */
 public class BgGraphBuilder {
     public static final int FUZZER = (1000 * 30 * 5);
-    public long  end_time = (new Date().getTime() + (60000 * 10)) / FUZZER;
-    public long  start_time = end_time - ((60000 * 60 * 24)) / FUZZER;
+    public long  end_time;
+    public long  start_time;
     public Context context;
     public SharedPreferences prefs;
     public double highMark;
@@ -51,10 +52,9 @@
     final int previewAxisTextSize;
     final int hoursPreviewStep;
 
-    private double endHour;
-    private final int numValues =(60/5)*24;
-    private final List<BgReading> bgReadings = BgReading.latestForGraph( numValues, (start_time * FUZZER));
-    private final List<Calibration> calibrations = Calibration.latestForGraph( numValues, (start_time * FUZZER));
+    private static final int NUM_VALUES =(60/5)*24;
+    private final List<BgReading> bgReadings;
+    private final List<Calibration> calibrations;
     private List<PointValue> inRangeValues = new ArrayList<PointValue>();
     private List<PointValue> highValues = new ArrayList<PointValue>();
     private List<PointValue> lowValues = new ArrayList<PointValue>();
@@ -66,6 +66,22 @@
 
 
     public BgGraphBuilder(Context context){
+        this(context, new Date().getTime() + (60000 * 10));
+    }
+
+    public BgGraphBuilder(Context context, long end){
+        this(context, end - (60000 * 60 * 24), end);
+    }
+
+    public BgGraphBuilder(Context context, long start, long end){
+        this(context, start, end, NUM_VALUES);
+    }
+
+    public BgGraphBuilder(Context context, long start, long end, int numValues){
+        end_time = end;
+        start_time = start;
+        bgReadings = BgReading.latestForGraph( numValues, start, end);
+        calibrations = Calibration.latestForGraph( numValues, start, end);
         this.context = context;
         this.prefs = PreferenceManager.getDefaultSharedPreferences(context);
         this.highMark = Double.parseDouble(prefs.getString("highValue", "170"));
@@ -82,7 +98,7 @@ public BgGraphBuilder(Context context){
     public LineChartData lineData() {
         LineChartData lineData = new LineChartData(defaultLines());
         lineData.setAxisYLeft(yAxis());
-        lineData.setAxisXBottom(xAxis());
+        lineData.setAxisXBottom(chartXAxis());
         return lineData;
     }
 
@@ -189,8 +205,8 @@ private void addBgReadingValues() {
 
     public Line highLine(boolean show) {
         List<PointValue> highLineValues = new ArrayList<PointValue>();
-        highLineValues.add(new PointValue((float) start_time, (float) highMark));
-        highLineValues.add(new PointValue((float) end_time, (float) highMark));
+        highLineValues.add(new PointValue((float) start_time / FUZZER, (float) highMark));
+        highLineValues.add(new PointValue((float) end_time / FUZZER, (float) highMark));
         Line highLine = new Line(highLineValues);
         highLine.setHasPoints(false);
         highLine.setStrokeWidth(1);
@@ -206,8 +222,8 @@ public Line highLine(boolean show) {
 
     public Line lowLine(boolean show, boolean line_only) {
         List<PointValue> lowLineValues = new ArrayList<PointValue>();
-        lowLineValues.add(new PointValue((float)start_time, (float)lowMark));
-        lowLineValues.add(new PointValue((float) end_time, (float) lowMark));
+        lowLineValues.add(new PointValue((float)start_time / FUZZER, (float)lowMark));
+        lowLineValues.add(new PointValue((float) end_time / FUZZER, (float) lowMark));
         Line lowLine = new Line(lowLineValues);
         lowLine.setHasPoints(false);
         if(!line_only) {
@@ -225,8 +241,8 @@ public Line lowLine(boolean show, boolean line_only) {
 
     public Line maxShowLine() {
         List<PointValue> maxShowValues = new ArrayList<PointValue>();
-        maxShowValues.add(new PointValue((float) start_time, (float) defaultMaxY));
-        maxShowValues.add(new PointValue((float) end_time, (float) defaultMaxY));
+        maxShowValues.add(new PointValue((float) start_time / FUZZER, (float) defaultMaxY));
+        maxShowValues.add(new PointValue((float) end_time / FUZZER, (float) defaultMaxY));
         Line maxShowLine = new Line(maxShowValues);
         maxShowLine.setHasLines(false);
         maxShowLine.setHasPoints(false);
@@ -235,8 +251,8 @@ public Line maxShowLine() {
 
     public Line minShowLine() {
         List<PointValue> minShowValues = new ArrayList<PointValue>();
-        minShowValues.add(new PointValue((float) start_time, (float) defaultMinY));
-        minShowValues.add(new PointValue((float) end_time, (float) defaultMinY));
+        minShowValues.add(new PointValue((float) start_time / FUZZER, (float) defaultMinY));
+        minShowValues.add(new PointValue((float) end_time / FUZZER, (float) defaultMinY));
         Line minShowLine = new Line(minShowValues);
         minShowLine.setHasPoints(false);
         minShowLine.setHasLines(false);
@@ -264,30 +280,8 @@ public Axis yAxis() {
         return yAxis;
     }
 
-    public Axis xAxis() {
-        Axis xAxis = new Axis();
-        xAxis.setAutoGenerated(false);
-        List<AxisValue> xAxisValues = new ArrayList<AxisValue>();
-        GregorianCalendar now = new GregorianCalendar();
-        GregorianCalendar today = new GregorianCalendar(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH));
-        final java.text.DateFormat timeFormat = hourFormat();
-        timeFormat.setTimeZone(TimeZone.getDefault());
-        double start_hour_block = today.getTime().getTime();
-        double timeNow = new Date().getTime();
-        for(int l=0; l<=24; l++) {
-            if ((start_hour_block + (60000 * 60 * (l))) <  timeNow) {
-                if((start_hour_block + (60000 * 60 * (l + 1))) >=  timeNow) {
-                    endHour = start_hour_block + (60000 * 60 * (l));
-                    l=25;
-                }
-            }
-        }
-        for(int l=0; l<=24; l++) {
-            double timestamp = (endHour - (60000 * 60 * l));
-            xAxisValues.add(new AxisValue((long)(timestamp/ FUZZER), (timeFormat.format(timestamp)).toCharArray()));
-        }
-        xAxis.setValues(xAxisValues);
-        xAxis.setHasLines(true);
+    public Axis chartXAxis() {
+        Axis xAxis = xAxis();
         xAxis.setTextSize(axisTextSize);
         return xAxis;
     }
@@ -305,18 +299,32 @@ static public boolean isLargeTablet(Context context) {
     }
 
     public Axis previewXAxis(){
-        List<AxisValue> previewXaxisValues = new ArrayList<AxisValue>();
+        Axis previewXaxis = xAxis();
+        previewXaxis.setTextSize(previewAxisTextSize);
+        return previewXaxis;
+    }
+
+    @NonNull
+    private Axis xAxis() {
+        List<AxisValue> axisValues = new ArrayList<AxisValue>();
         final java.text.DateFormat timeFormat = hourFormat();
         timeFormat.setTimeZone(TimeZone.getDefault());
-        for(int l=0; l<=24; l+=hoursPreviewStep) {
-            double timestamp = (endHour - (60000 * 60 * l));
-            previewXaxisValues.add(new AxisValue((long)(timestamp/ FUZZER), (timeFormat.format(timestamp)).toCharArray()));
+        GregorianCalendar calendar = new GregorianCalendar();
+        calendar.setTimeInMillis(start_time);
+        calendar.set(Calendar.MINUTE, 0);
+        calendar.set(Calendar.SECOND, 0);
+        calendar.set(Calendar.MILLISECOND, 0);
+        if (calendar.getTimeInMillis()<start_time){
+            calendar.add(Calendar.HOUR, 1);
         }
-        Axis previewXaxis = new Axis();
-        previewXaxis.setValues(previewXaxisValues);
-        previewXaxis.setHasLines(true);
-        previewXaxis.setTextSize(previewAxisTextSize);
-        return previewXaxis;
+        while (calendar.getTimeInMillis()<end_time){
+            axisValues.add(new AxisValue((calendar.getTimeInMillis() / FUZZER), (timeFormat.format(calendar.getTimeInMillis())).toCharArray()));
+            calendar.add(Calendar.HOUR, 1);
+        }
+        Axis axis = new Axis();
+        axis.setValues(axisValues);
+        axis.setHasLines(true);
+        return axis;
     }
 
     /////////VIEWPORT RELATED//////////////
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
index a7fe37c..138213a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSparklineBuilder.java
@@ -185,7 +185,7 @@ public Bitmap build() {
         LineChartData lineData = new LineChartData(lines);
         if (showAxes) {
             lineData.setAxisYLeft(bgGraphBuilder.yAxis());
-            lineData.setAxisXBottom(bgGraphBuilder.xAxis());
+            lineData.setAxisXBottom(bgGraphBuilder.chartXAxis());
         }
         //lines.add(bgGraphBuilder.rawInterpretedLine());
         chart.setLineChartData(lineData);
diff --git a/app/src/main/res/layout/activity_bghistory.xml b/app/src/main/res/layout/activity_bghistory.xml
new file mode 100644
index 0000000..9e243de
--- /dev/null
+++ b/app/src/main/res/layout/activity_bghistory.xml
@@ -0,0 +1,93 @@
+<android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:id="@+id/drawer_layout"
+    android:layout_width="match_parent" android:layout_height="match_parent"
+    tools:context="com.eveningoutpost.dexdrip.Home">
+
+    <!-- As the main content view, the view below consumes the entire
+         space available using match_parent in both dimensions. -->
+    <FrameLayout android:id="@+id/container" android:layout_width="match_parent"
+        android:layout_height="match_parent" >
+
+    </FrameLayout>
+
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:background="#212121">
+
+            <RelativeLayout
+                android:layout_width="match_parent"
+                android:layout_height="0dp"
+                android:paddingLeft="0dp"
+                android:paddingRight="0dp"
+                android:layout_weight="0.80"
+                android:paddingTop="0dp"
+                android:layout_marginTop="0dp">
+
+                <lecho.lib.hellocharts.view.LineChartView
+                    android:id="@+id/chart"
+                    android:layout_width="match_parent"
+                    android:layout_alignParentStart="false"
+                    android:layout_alignParentEnd="true"
+                    android:layout_height="match_parent"
+                    android:layout_below="@+id/buttonlayout"/>
+
+                <LinearLayout
+                    android:id="@+id/buttonlayout"
+                    android:orientation="horizontal"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_alignParentTop="true"
+                    android:layout_centerHorizontal="true"
+                    android:gravity="center_horizontal">
+
+                    <Button
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/prev_arrow"
+                        android:id="@+id/button_prev"
+                        android:layout_gravity="center_horizontal" />
+
+                    <Button
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="xx.xx.xxxx"
+                        android:id="@+id/button_date1"
+                        android:layout_gravity="center_horizontal" />
+
+                    <Spinner
+                        android:layout_width="wrap_content"
+                        android:layout_height="match_parent"
+                        android:id="@+id/daysspinner"
+                        android:layout_weight="1"
+                        android:spinnerMode="dialog"/>
+
+                    <Button
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:text="@string/next_arrow"
+                        android:id="@+id/button_next"
+                        android:layout_gravity="center_horizontal" />
+                </LinearLayout>
+
+            </RelativeLayout>
+                
+            <lecho.lib.hellocharts.view.PreviewLineChartView
+                android:id="@+id/chart_preview"
+                android:layout_width="wrap_content"
+                android:layout_weight=".20"
+                android:layout_alignParentBottom="true"
+                android:layout_alignParentStart="true"
+                android:layout_height="0dp">
+            </lecho.lib.hellocharts.view.PreviewLineChartView>
+
+        </LinearLayout>
+
+    <fragment android:id="@+id/navigation_drawer"
+        android:layout_width="@dimen/navigation_drawer_width" android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:name="com.eveningoutpost.dexdrip.NavigationDrawerFragment"
+        tools:layout="@layout/fragment_navigation_drawer" />
+</android.support.v4.widget.DrawerLayout>
+
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index d594ec6..c90fd5c 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -134,4 +134,6 @@
     </string>
     <string name="action_resend_to_watch">Resend glucose to watch</string>
     <string name="action_open_watch_setting">Open Settings on Wear</string>
+    <string name="prev_arrow"><![CDATA[<<]]></string>
+    <string name="next_arrow"><![CDATA[>>]]></string>
 </resources>

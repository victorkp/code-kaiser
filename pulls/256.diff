diff --git a/app/build.gradle b/app/build.gradle
index 62b335e..3bc420a 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -113,6 +113,7 @@ dependencies {
     compile 'com.nispok:snackbar:2.10.8'
     compile 'com.android.support:appcompat-v7:23.1.0'
     compile 'com.squareup.okhttp:okhttp:2.6.0'
+    compile 'ar.com.hjg:pngj:2.1.0'
     compile 'com.google.code.gson:gson:2.3'
     compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
     compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 2caf46a..7d76350 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -4,6 +4,9 @@
 
     <permission android:name="com.eveningoutpost.dexdrip.permissions.RECEIVE_BG_ESTIMATE" />
 
+    <!-- To receive data from HAPP. -->
+    <uses-permission android:name="com.eveningoutpost.dexdrip.permissions.RECEIVE_EXTERNAL_STATUSLINE" />
+
     <uses-feature
         android:name="android.hardware.bluetooth_le"
         android:required="true" />
@@ -108,6 +111,9 @@
             </intent-filter>
         </receiver>
 
+        <receiver android:name=".wearintegration.ExternalStatusBroadcastReceier" android:exported="true" >
+            <intent-filter> <action android:name="com.eveningoutpost.dexdrip.ExternalStatusline" /> </intent-filter>
+        </receiver>
         <activity
             android:name=".Tables.CalibrationDataTable"
             android:label="@string/title_activity_calibration_data_table" >
@@ -124,6 +130,12 @@
             android:exported="true" >
         </service>
 
+        <service
+            android:name=".wearintegration.ExternalStatusService"
+            android:enabled="true"
+            android:exported="false" >
+        </service>
+
         <activity
             android:name=".stats.StatsActivity"
             android:label="Statistics" >
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
index 352cfdc..2831ef5 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AlertList.java
@@ -1,6 +1,8 @@
 package com.eveningoutpost.dexdrip;
 
+import android.app.AlertDialog;
 import android.content.Context;
+import android.content.DialogInterface;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.media.Ringtone;
@@ -15,6 +17,9 @@
 import android.widget.Button;
 import android.widget.ListView;
 import android.widget.SimpleAdapter;
+import android.widget.TextView;
+import android.widget.SimpleCursorAdapter.ViewBinder;
+import android.graphics.Paint;
 
 import com.eveningoutpost.dexdrip.Models.AlertType;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
@@ -56,12 +61,18 @@ String stringTimeFromAlert(AlertType alert) {
         if(alert.override_silent_mode == false) {
             overrideSilentMode = "No Alert in Silent Mode";
         }
+        // We use a - sign to tell that this text should be stiked through
+        String extra = "-";
+        if(alert.active) {
+          extra = "+";
+        }
+        
 
-        map.put("alertName", alert.name);
-        map.put("alertThreshold", EditAlertActivity.unitsConvert2Disp(doMgdl, alert.threshold));
-        map.put("alertTime", stringTimeFromAlert(alert));
-        map.put("alertMp3File", shortPath(alert.mp3_file));
-        map.put("alertOverrideSilenceMode", overrideSilentMode);
+        map.put("alertName", extra+alert.name);
+        map.put("alertThreshold", extra + EditAlertActivity.unitsConvert2Disp(doMgdl, alert.threshold));
+        map.put("alertTime", extra + stringTimeFromAlert(alert));
+        map.put("alertMp3File", extra + shortPath(alert.mp3_file));
+        map.put("alertOverrideSilenceMode", extra + overrideSilentMode);
         map.put("uuid", alert.uuid);
 
         return map;
@@ -159,9 +170,36 @@ public void onClick(View v) {
         });
     }
 
+    void displayWarning() {
+        runOnUiThread(new Runnable() {
+            @Override
+            public void run() {
+
+                if (!isFinishing()){
+                    new AlertDialog.Builder(AlertList.this)
+                      .setTitle("Warnining !")
+                      .setMessage("No active low alert exists, it is highly recomended that you will add a low an alert.")
+                      .setCancelable(false)
+                      .setPositiveButton(
+                              "Ok",
+                              new DialogInterface.OnClickListener() {
+                                  public void onClick(DialogInterface dialog, int id) {
+                                      dialog.cancel();
+                                  }
+                              })
+                    .create().show();
+                }
+            }
+        });
+ 
+    }
+
     @Override
     protected void onActivityResult(int requestCode, int resultCode, Intent data) {
-        Log.d(TAG, "onActivityResult called ");
+        Log.d(TAG, "onActivityResult called request code  = " + requestCode + " result code " + resultCode);
+        if(!AlertType.activeLowAlertExists()) {
+            displayWarning();
+        }
         if (requestCode == ADD_ALERT || requestCode == EDIT_ALERT) {
             if(resultCode == RESULT_OK) {
                 Log.d(TAG, "onActivityResult called invalidating...");
@@ -174,13 +212,28 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {
     }
 
     void FillLists() {
+        // We use a - sign to tell that this text should be stiked through
+        SimpleAdapter.ViewBinder vb = new SimpleAdapter.ViewBinder() {
+            public boolean setViewValue(View view, Object data, String textRepresentation) {
+                TextView tv = (TextView) view;
+                tv.setText(textRepresentation.substring(1));
+                if(textRepresentation.substring(0, 1).equals("-")) {
+                    tv.setPaintFlags(tv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+                }
+                return true;
+            }
+        };
+      
         ArrayList<HashMap<String, String>> feedList;
         feedList = createAlertsMap(false);
-        SimpleAdapter simpleAdapter = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
-        listViewLow.setAdapter(simpleAdapter);
+        SimpleAdapter simpleAdapterLow = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        simpleAdapterLow.setViewBinder(vb);
+
+        listViewLow.setAdapter(simpleAdapterLow);
 
         feedList = createAlertsMap(true);
         SimpleAdapter simpleAdapterHigh = new SimpleAdapter(this, feedList, R.layout.row_alerts, new String[]{"alertName", "alertThreshold", "alertTime", "alertMp3File", "alertOverrideSilenceMode"}, new int[]{R.id.alertName, R.id.alertThreshold, R.id.alertTime, R.id.alertMp3File, R.id.alertOverrideSilent});
+        simpleAdapterHigh.setViewBinder(vb);
         listViewHigh.setAdapter(simpleAdapterHigh);
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
index b658da3..6133150 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/EditAlertActivity.java
@@ -17,7 +17,6 @@
 import android.text.InputType;
 import android.text.format.DateFormat;
 import android.text.method.DigitsKeyListener;
-import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import android.util.TypedValue;
 import android.view.MotionEvent;
 import android.view.View;
@@ -31,8 +30,10 @@
 import android.widget.TextView;
 import android.widget.TimePicker;
 import android.widget.Toast;
+import android.graphics.Paint;
 
 import com.eveningoutpost.dexdrip.Models.AlertType;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
@@ -43,6 +44,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
+import java.util.ArrayList;
 
 public class EditAlertActivity extends ActivityWithMenu {
     public static String menu_name = "Edit Alert";
@@ -63,6 +65,7 @@
     private Button buttonPreSnooze;
     private CheckBox checkboxAllDay;
     private CheckBox checkboxVibrate;
+    private CheckBox checkboxDisabled;
 
     private LinearLayout layoutTimeBetween;
     private LinearLayout timeInstructions;
@@ -75,9 +78,6 @@
     private int startMinute = 0;
     private int endHour = 23;
     private int endMinute = 59;
-    private int alertReraise = 1;
-
-    private int defaultSnooze;
 
     private String audioPath;
 
@@ -88,13 +88,14 @@
     private String uuid;
     private Context mContext;
     private boolean above;
-    private final int CHOOSE_FILE = 1;
+    private final int REQUEST_CODE_CHOOSE_FILE = 1;
+    
     private final int MIN_ALERT = 40;
     private final int MAX_ALERT = 400;
 
     private final static String TAG = AlertPlayer.class.getSimpleName();
 
-    String getExtra(Bundle savedInstanceState, String paramName) {
+    String getExtra(Bundle savedInstanceState, String paramName, String defaultVal) {
         String newString;
         if (savedInstanceState == null) {
             Bundle extras = getIntent().getExtras();
@@ -104,11 +105,15 @@ String getExtra(Bundle savedInstanceState, String paramName) {
                 newString= extras.getString(paramName);
             }
         } else {
-            newString= (String) savedInstanceState.getSerializable(paramName);
+            newString = (String) savedInstanceState.getSerializable(paramName);
+        }
+        if (newString != null) {
+        	return newString;
+        } else {
+        	return defaultVal;
         }
-        return newString;
     }
-
+    
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
@@ -130,6 +135,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
         checkboxAllDay = (CheckBox) findViewById(R.id.check_alert_time);
         checkboxVibrate = (CheckBox) findViewById(R.id.check_vibrate);
+        checkboxDisabled = (CheckBox) findViewById(R.id.view_alert_check_disable);
 
         layoutTimeBetween = (LinearLayout) findViewById(R.id.time_between);
         timeInstructions = (LinearLayout) findViewById(R.id.time_instructions);
@@ -153,7 +159,7 @@ protected void onCreate(Bundle savedInstanceState) {
             buttonRemove.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             buttonTest.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             buttonalertMp3.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
-            buttonSave.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            
             buttonPreSnooze.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             alertText.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             alertThreshold.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
@@ -161,6 +167,7 @@ protected void onCreate(Bundle savedInstanceState) {
 
             checkboxAllDay.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             checkboxVibrate.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            checkboxDisabled.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
 
             viewTimeStart.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             viewTimeEnd.setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
@@ -174,6 +181,7 @@ protected void onCreate(Bundle savedInstanceState) {
             ((TextView) findViewById(R.id.view_alert_mp3_file)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             ((TextView) findViewById(R.id.view_alert_time)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
             ((TextView) findViewById(R.id.view_alert_time_between)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
+            ((TextView) findViewById(R.id.view_alert_disable)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 30);
 
         }
         SharedPreferences prefs =  PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
@@ -185,13 +193,16 @@ protected void onCreate(Bundle savedInstanceState) {
             alertThreshold.setKeyListener(DigitsKeyListener.getInstance(false,true));
         }
 
-        uuid = getExtra(savedInstanceState, "uuid");
+        uuid = getExtra(savedInstanceState, "uuid", null);
         String status;
+        int alertReraise;
+        int defaultSnooze;
         if (uuid == null) {
             // This is a new alert
-            above = Boolean.parseBoolean(getExtra(savedInstanceState, "above"));
+            above = Boolean.parseBoolean(getExtra(savedInstanceState, "above", null));
             checkboxAllDay.setChecked(true);
             checkboxVibrate.setChecked(true);
+            checkboxDisabled.setChecked(false);
             checkboxAlertOverride.setChecked(true);
 
             audioPath = "";
@@ -218,18 +229,19 @@ protected void onCreate(Bundle savedInstanceState) {
                 return;
             }
 
-            above =at.above;
+            above = at.above;
             alertText.setText(at.name);
             alertThreshold.setText(unitsConvert2Disp(doMgdl, at.threshold));
             checkboxAllDay.setChecked(at.all_day);
             checkboxVibrate.setChecked(at.vibrate);
+            checkboxDisabled.setChecked(!at.active);
             checkboxAlertOverride.setChecked(at.override_silent_mode);
             defaultSnooze = at.default_snooze;
             if(defaultSnooze == 0) {
                 SnoozeActivity.getDefaultSnooze(above);
             }
 
-            audioPath = at.mp3_file;
+            audioPath = getExtra(savedInstanceState, "audioPath" ,at.mp3_file);
             alertMp3File.setText(shortPath(audioPath));
 
             status = "editing " + (above ? "high" : "low") + " alert";
@@ -253,13 +265,22 @@ protected void onCreate(Bundle savedInstanceState) {
         reraise.setText(String.valueOf(alertReraise));
         alertMp3File.setKeyListener(null);
         viewHeader.setText(status);
-        setDefaultSnoozeSpinner();
+        setDefaultSnoozeSpinner(defaultSnooze);
         setPreSnoozeSpinner();
         enableAllDayControls();
+        setDisabledView();
         enableVibrateControls();
 
 
     }
+    
+    @Override
+    public void onSaveInstanceState(Bundle outState){
+        super.onSaveInstanceState(outState);
+        outState.putString("uuid", uuid);
+        outState.putString("above", String.valueOf(above));
+        outState.putString("audioPath", audioPath);
+    }
 
     @Override
     public String getMenuName() {
@@ -305,6 +326,30 @@ void enableAllDayControls() {
             setTimeRanges();
         }
     }
+    
+    void setDisabledView() {
+    	boolean disabled = checkboxDisabled.isChecked();
+    	
+    	ArrayList<TextView> textViews = new ArrayList<TextView>();
+    	textViews.add((TextView) findViewById(R.id.view_alert_text));
+    	textViews.add((TextView) findViewById(R.id.view_alert_threshold));
+    	textViews.add((TextView) findViewById(R.id.view_alert_default_snooze));
+    	textViews.add((TextView) findViewById(R.id.view_alert_mp3_file));
+    	textViews.add((TextView) findViewById(R.id.view_alert_time_between));
+    	textViews.add((TextView) findViewById(R.id.view_alert_disable));
+    	textViews.add((TextView) findViewById(R.id.view_alert_time));
+    	textViews.add((TextView) findViewById(R.id.view_alert_override_silent));
+    	textViews.add((TextView) findViewById(R.id.view_alert_vibrate));
+    	
+    	for (TextView tv : textViews) {
+    		if(disabled) {
+                tv.setPaintFlags(tv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+            } else {
+            	tv.setPaintFlags(tv.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
+            }
+    	}
+    }
+    
 
     void enableVibrateControls() {
         boolean overrideSilence = checkboxAlertOverride.isChecked();
@@ -325,7 +370,7 @@ private boolean verifyThreshold(double threshold, boolean allDay, int startTime,
         }
         // We want to make sure that for each threashold there is only one alert. Otherwise, which file should we play.
         for (AlertType lowAlert : lowAlerts) {
-            if(lowAlert.threshold == threshold  && overlapping(lowAlert, allDay, startTime, endTime)) {
+            if(lowAlert.threshold == threshold  && overlapping(lowAlert, allDay, startTime, endTime) && lowAlert.active) {
                 if(uuid == null || ! uuid.equals(lowAlert.uuid)){ //new alert or not myself
                     Toast.makeText(getApplicationContext(),
                             "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
@@ -334,7 +379,7 @@ private boolean verifyThreshold(double threshold, boolean allDay, int startTime,
             }
         }
         for (AlertType highAlert : highAlerts) {
-            if(highAlert.threshold == threshold  && overlapping(highAlert, allDay, startTime, endTime)) {
+            if(highAlert.threshold == threshold  && overlapping(highAlert, allDay, startTime, endTime) && highAlert.active) {
                 if(uuid == null || ! uuid.equals(highAlert.uuid)){ //new alert or not myself
                     Toast.makeText(getApplicationContext(),
                             "Each alert should have it's own threshold. Please choose another threshold.",Toast.LENGTH_LONG).show();
@@ -346,7 +391,7 @@ private boolean verifyThreshold(double threshold, boolean allDay, int startTime,
         // high alerts have to be higher than all low alerts...
         if(above) {
             for (AlertType lowAlert : lowAlerts) {
-                if(threshold < lowAlert.threshold  && overlapping(lowAlert, allDay, startTime, endTime)) {
+                if(threshold < lowAlert.threshold  && overlapping(lowAlert, allDay, startTime, endTime) && lowAlert.active) {
                     Toast.makeText(getApplicationContext(),
                             "High alert threshold has to be higher than all low alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
@@ -355,7 +400,7 @@ private boolean verifyThreshold(double threshold, boolean allDay, int startTime,
         } else {
             // low alert has to be lower than all high alerts
             for (AlertType highAlert : highAlerts) {
-                if(threshold > highAlert.threshold  && overlapping(highAlert, allDay, startTime, endTime)) {
+                if(threshold > highAlert.threshold  && overlapping(highAlert, allDay, startTime, endTime) && highAlert.active) {
                     Toast.makeText(getApplicationContext(),
                             "Low alert threshold has to be lower than all high alerts. Please choose another threshold.",Toast.LENGTH_LONG).show();
                     return false;
@@ -412,7 +457,7 @@ private Integer parseInt(String str) {
     }
 
     public void addListenerOnButtons() {
-
+      
         buttonSave.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
                 // Check that values are ok.
@@ -422,11 +467,12 @@ public void onClick(View v) {
 
                 threshold = unitsConvertFromDisp(threshold);
 
-                alertReraise = 1;
+                int alertReraise = 1;
                 Integer alterReraiseInt = parseInt(reraise.getText().toString());
                 if(alterReraiseInt ==null)
                     return;
                 alertReraise = alterReraiseInt;
+                int defaultSnooze = parseInt(editSnooze.getText().toString());
 
                 if(alertReraise < 1) {
                     Toast.makeText(getApplicationContext(), "Reraise Value must be 1 minute or greater", Toast.LENGTH_LONG).show();
@@ -455,17 +501,19 @@ public void onClick(View v) {
                     Toast.makeText(getApplicationContext(), "start time and end time of alert can not be equal",Toast.LENGTH_LONG).show();
                     return;
                 }
-                if(!verifyThreshold(threshold, allDay, timeStart, timeEnd)) {
+                boolean disabled = checkboxDisabled.isChecked();
+                if(!disabled && !verifyThreshold(threshold, allDay, timeStart, timeEnd)) {
                     return;
                 }
                 boolean vibrate = checkboxVibrate.isChecked();
+                
                 boolean overrideSilentMode = checkboxAlertOverride.isChecked();
 
                 String mp3_file = audioPath;
                 if (uuid != null) {
-                    AlertType.update_alert(uuid, alertText.getText().toString(), above, threshold, allDay, alertReraise, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, vibrate);
+                    AlertType.update_alert(uuid, alertText.getText().toString(), above, threshold, allDay, alertReraise, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, vibrate, !disabled);
                 }  else {
-                    AlertType.add_alert(null, alertText.getText().toString(), above, threshold, allDay, alertReraise, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, vibrate);
+                    AlertType.add_alert(null, alertText.getText().toString(), above, threshold, allDay, alertReraise, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, vibrate, !disabled);
                 }
                 Intent returnIntent = new Intent();
                 setResult(RESULT_OK,returnIntent);
@@ -479,7 +527,7 @@ public void onClick(View v) {
 
 
                 if (uuid == null) {
-                    Log.wtf(TAG, "Error remove pressed, while we were removing an alert");
+                    Log.wtf(TAG, "Error remove pressed, while we were adding an alert");
                 }  else {
                     AlertType.remove_alert(uuid);
                 }
@@ -514,7 +562,7 @@ public void onClick(DialogInterface dialog, int which) {
                                     Intent fileIntent = new Intent();
                                     fileIntent.setType("audio/mpeg3");
                                     fileIntent.setAction(Intent.ACTION_GET_CONTENT);
-                                    startActivityForResult(Intent.createChooser(fileIntent, "Select File for Alert"), CHOOSE_FILE);
+                                    startActivityForResult(Intent.createChooser(fileIntent, "Select File for Alert"), REQUEST_CODE_CHOOSE_FILE);
                                 } else {
                                     // Xdrip default was chossen, we live the file name as empty.
                                     audioPath = "";
@@ -534,6 +582,14 @@ public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
             }
         });
 
+        checkboxDisabled.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
+            //          @Override
+            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                setDisabledView();
+            }
+        });
+
+        
         checkboxAlertOverride.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
             //          @Override
             public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
@@ -594,7 +650,7 @@ public void onActivityResult(int requestCode, int resultCode, Intent data) {
                 audioPath = uri.toString();
                 alertMp3File.setText(shortPath(audioPath));
             } else {
-                if (requestCode == CHOOSE_FILE) {
+                if (requestCode == REQUEST_CODE_CHOOSE_FILE) {
                     Uri selectedImageUri = data.getData();
 
                     // Todo this code is very flacky. Probably need a much better understanding of how the different programs
@@ -689,7 +745,7 @@ public String shortPath(String path) {
         }
         return path;
     }
-    public void setDefaultSnoozeSpinner() {
+    public void setDefaultSnoozeSpinner(int defaultSnooze) {
         editSnooze.setText(String.valueOf(defaultSnooze));
         editSnooze.setOnTouchListener(new View.OnTouchListener() {
             @Override
@@ -703,12 +759,12 @@ public boolean onTouch(View mView, MotionEvent mMotionEvent) {
 
                     final NumberPicker snoozeValue = (NumberPicker) d.findViewById(R.id.numberPicker1);
 
-
+                    int defaultSnooze = parseInt(editSnooze.getText().toString());
                     SnoozeActivity.SetSnoozePickerValues(snoozeValue, above, defaultSnooze);
                     b1.setOnClickListener(new View.OnClickListener() {
                         @Override
                         public void onClick(View v) {
-                            defaultSnooze = SnoozeActivity.getTimeFromSnoozeValue(snoozeValue.getValue());
+                            int defaultSnooze = SnoozeActivity.getTimeFromSnoozeValue(snoozeValue.getValue());
                             editSnooze.setText(String.valueOf(defaultSnooze));
 
                             d.dismiss();
@@ -744,6 +800,7 @@ public void onClick(View v) {
 
                 final NumberPicker snoozeValue = (NumberPicker) d.findViewById(R.id.numberPicker1);
 
+                int defaultSnooze = parseInt(editSnooze.getText().toString());
                 SnoozeActivity.SetSnoozePickerValues(snoozeValue, above, defaultSnooze);
                 b1.setOnClickListener(new View.OnClickListener() {
                     @Override
@@ -797,6 +854,7 @@ public void testAlert() {
         boolean vibrate = checkboxVibrate.isChecked();
         boolean overrideSilentMode = checkboxAlertOverride.isChecked();
         String mp3_file = audioPath;
+        int defaultSnooze = parseInt(editSnooze.getText().toString());
         AlertType.testAlert(alertText.getText().toString(), above, threshold, allDay, 1, mp3_file, timeStart, timeEnd, overrideSilentMode, defaultSnooze, vibrate, mContext);
 
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
index 71ce0d3..7033672 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/AlertType.java
@@ -262,7 +262,8 @@ public static void add_alert(
             int end_time_minutes,
             boolean override_silent_mode,
             int snooze,
-            boolean vibrate) {
+            boolean vibrate,
+            boolean active) {
         AlertType at = new AlertType();
         at.name = name;
         at.above = above;
@@ -270,7 +271,7 @@ public static void add_alert(
         at.all_day = all_day;
         at.minutes_between = minutes_between;
         at.uuid = uuid != null? uuid : UUID.randomUUID().toString();
-        at.active = true;
+        at.active = active;
         at.mp3_file = mp3_file;
         at.start_time_minutes = start_time_minutes;
         at.end_time_minutes = end_time_minutes;
@@ -292,21 +293,17 @@ public static void update_alert(
             int end_time_minutes,
             boolean override_silent_mode,
             int snooze,
-            boolean vibrate) {
+            boolean vibrate,
+            boolean active) {
 
-        if(uuid.equals(LOW_ALERT_55)) {
-            // This alert can not be removed/updated
-            return;
-        }
-
-        AlertType at = get_alert(uuid);
+         AlertType at = get_alert(uuid);
         at.name = name;
         at.above = above;
         at.threshold = threshold;
         at.all_day = all_day;
         at.minutes_between = minutes_between;
         at.uuid = uuid;
-        at.active = true;
+        at.active = active;
         at.mp3_file = mp3_file;
         at.start_time_minutes = start_time_minutes;
         at.end_time_minutes = end_time_minutes;
@@ -366,13 +363,24 @@ public static void print_all() {
         return alerts;
     }
 
-
+    public static boolean activeLowAlertExists() {
+        List<AlertType> alerts = getAll(false);
+        if(alerts == null) {
+            return false;
+        }
+        for (AlertType alert : alerts) {
+            if(alert.active) {
+                return true;
+            }
+        }
+        return false;
+    }
 
     // This function is used to make sure that we always have a static alert on 55 low.
     // This alert will not be editable/removable.
     public static void CreateStaticAlerts() {
         if(get_alert(LOW_ALERT_55) == null) {
-            add_alert(LOW_ALERT_55, "low alert (unchangable)", false, 55, true, 1, null, 0, 0, true, 20, true);
+            add_alert(LOW_ALERT_55, "low alert (unchangable)", false, 55, true, 1, null, 0, 0, true, 20, true, true);
         }
     }
 
@@ -380,9 +388,9 @@ public static void CreateStaticAlerts() {
     public static void testAll(Context context) {
 
         remove_all();
-        add_alert(null, "high alert 1", true, 180, true, 10, null, 0, 0, true, 20, true);
-        add_alert(null, "high alert 2", true, 200, true, 10, null, 0, 0, true, 20, true);
-        add_alert(null, "high alert 3", true, 220, true, 10, null, 0, 0, true, 20, true);
+        add_alert(null, "high alert 1", true, 180, true, 10, null, 0, 0, true, 20, true, true);
+        add_alert(null, "high alert 2", true, 200, true, 10, null, 0, 0, true, 20, true, true);
+        add_alert(null, "high alert 3", true, 220, true, 10, null, 0, 0, true, 20, true, true);
         print_all();
         AlertType a1 = get_highest_active_alert(context, 190);
         Log.d(TAG, "a1 = " + a1.toString());
@@ -393,8 +401,8 @@ public static void testAll(Context context) {
         AlertType a3 = get_alert(a1.uuid);
         Log.d(TAG, "a1 == a3 ? need to see true " + (a1==a3) + a1 + " " + a3);
 
-        add_alert(null, "low alert 1", false, 80, true, 10, null, 0, 0, true, 20, true);
-        add_alert(null, "low alert 2", false, 60, true, 10, null, 0, 0, true, 20, true);
+        add_alert(null, "low alert 1", false, 80, true, 10, null, 0, 0, true, 20, true, true);
+        add_alert(null, "low alert 2", false, 60, true, 10, null, 0, 0, true, 20, true, true);
 
         AlertType al1 = get_highest_active_alert(context, 90);
         Log.d(TAG, "al1 should be null  " + al1);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 9d117a8..3b0bfe1 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -43,11 +43,11 @@
 class PointValueExtended extends PointValue {
 	
 	public PointValueExtended(float x, float y, float filtered) {
-		set(x, y);
+		super(x, y);
 		calculatedFilteredValue = filtered;
 	}
 	   public PointValueExtended(float x, float y) {
-	        set(x, y);
+		   super(x, y);
 	        calculatedFilteredValue = -1;
 	    }
 	
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java
index 1376fce..8980076 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/IdempotentMigrations.java
@@ -48,8 +48,8 @@ private void migrateBGAlerts() {
             int bg_low_snooze = Integer.parseInt(prefs.getString("bg_snooze",  Integer.toString(SnoozeActivity.getDefaultSnooze(false))));
 
 
-            AlertType.add_alert(null, "High Alert", true, highMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_high_snooze, true);
-            AlertType.add_alert(null, "Low Alert", false, lowMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_low_snooze, true);
+            AlertType.add_alert(null, "High Alert", true, highMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_high_snooze, true, true);
+            AlertType.add_alert(null, "Low Alert", false, lowMark, true, 1, bg_notification_sound, 0, 0, bg_sound_in_silent, bg_low_snooze, true, true);
             prefs.edit().putBoolean("bg_notifications", false).apply();
         }
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
index a13c5c2..9f3b1c1 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
@@ -1,18 +1,36 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import android.app.Activity;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
 import android.app.Service;
-import android.content.BroadcastReceiver;
+import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.BatteryManager;
+import android.os.Build;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
+import android.widget.Toast;
+
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.getpebble.android.kit.PebbleKit;
 import com.getpebble.android.kit.util.PebbleDictionary;
 
+import java.io.BufferedOutputStream;
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
 import java.util.Date;
 import java.util.TimeZone;
 import java.util.UUID;
@@ -22,14 +40,6 @@
  */
 public class PebbleSync extends Service {
     private final static String TAG = PebbleSync.class.getSimpleName();
-    //    CGM_ICON_KEY = 0x0,		// TUPLE_CSTRING, MAX 2 BYTES (10)
-    //    CGM_BG_KEY = 0x1,		// TUPLE_CSTRING, MAX 4 BYTES (253 OR 22.2)
-    //    CGM_TCGM_KEY = 0x2,		// TUPLE_INT, 4 BYTES (CGM TIME)
-    //    CGM_TAPP_KEY = 0x3,		// TUPLE_INT, 4 BYTES (APP / PHONE TIME)
-    //    CGM_DLTA_KEY = 0x4,		// TUPLE_CSTRING, MAX 5 BYTES (BG DELTA, -100 or -10.0)
-    //    CGM_UBAT_KEY = 0x5,		// TUPLE_CSTRING, MAX 3 BYTES (UPLOADER BATTERY, 100)
-    //    CGM_NAME_KEY = 0x6		// TUPLE_CSTRING, MAX 9 BYTES (xDrip)
-    //public static final UUID PEBBLEAPP_UUID = UUID.fromString("2c3f5ab3-7506-44e7-b8d0-2c63de32e1ec");
     public static final UUID PEBBLEAPP_UUID = UUID.fromString("79f8ecb3-7214-4bfc-b996-cb95148ee6d3");
     public static final int ICON_KEY = 0;
     public static final int BG_KEY = 1;
@@ -38,12 +48,48 @@
     public static final int BG_DELTA_KEY = 4;
     public static final int UPLOADER_BATTERY_KEY = 5;
     public static final int NAME_KEY = 6;
+    public static final int TREND_BEGIN_KEY = 7;
+    public static final int TREND_DATA_KEY = 8;
+    public static final int TREND_END_KEY = 9;
+    public static final int MESSAGE_KEY = 10;
+    public static final int VIBE_KEY = 11;
+    public static final int SYNC_KEY = 1000;
+    public static final int PLATFORM_KEY = 1001;
+    public static final int VERSION_KEY = 1002;
+
+    public static final int CHUNK_SIZE = 100;
+
 
     private Context mContext;
     private BgGraphBuilder bgGraphBuilder;
     private BgReading mBgReading;
-    private static int lastTransactionId;
-    BroadcastReceiver newSavedBgReceiver;
+    private static int lastTransactionId=0;
+    private static int currentTransactionId=0;
+    private static boolean messageInTransit = false;
+    private static boolean transactionFailed = false;
+    private static boolean transactionOk = false;
+    private static boolean done = false;
+    private static boolean sendingData = false;
+    private static int current_size = 0;
+    private static int image_size =0;
+    private static byte [] chunk;
+    private static ByteBuffer buff = null;
+    private static ByteArrayOutputStream stream = null;
+    public static int retries = 0;
+    private boolean no_signal = false;
+    private static long pebble_platform = 0;
+    private static String pebble_app_version = "";
+    private static long pebble_sync_value = 0;
+
+    private static short sendStep = 5;
+    private PebbleDictionary dictionary = new PebbleDictionary();
+//    private AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
+    private static boolean sentInitialSync = false;
+
+
+    // local statics for Pebble side load from app.
+    private static final String WATCHAPP_FILENAME = "xDrip-pebble2.pbw";
+
 
     @Override
     public void onCreate() {
@@ -60,17 +106,31 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopSelf();
             return START_NOT_STICKY;
         }
-        Log.i(TAG, "STARTING SERVICE");
-        sendData();
+        bgGraphBuilder = new BgGraphBuilder(mContext);
+
+        Log.i(TAG, "onStartCommand called.  Sending Sync Request");
+        transactionFailed = false;
+        transactionOk = false;
+        sendStep = 5;
+        messageInTransit = false;
+        done = true;
+        sendingData = false;
+        dictionary.addInt32(SYNC_KEY, 0);
+        PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        dictionary.remove(SYNC_KEY);
+        /*if(pebble_app_version.isEmpty() && !sentInitialSync){
+            setResponseTImer();
+        }*/
+        if(pebble_app_version.isEmpty() && sentInitialSync){
+            Log.d(TAG, "onStartCommand: No Response and no pebble_app_version.  Sideloading...");
+        }
+        Log.d(TAG, "onStart: Pebble App Version not known.  Sending Version Request");
         return START_STICKY;
     }
     @Override
     public void onDestroy() {
-        Log.d(TAG,"onDestroy called");
+        Log.d(TAG, "onDestroy called");
         super.onDestroy();
-        if(newSavedBgReceiver != null) {
-            unregisterReceiver(newSavedBgReceiver);
-        }
     }
     @Override
     public IBinder onBind(Intent intent) {
@@ -85,38 +145,258 @@ private void init() {
             @Override
             public void receiveData(final Context context, final int transactionId, final PebbleDictionary data) {
                 Log.d(TAG, "receiveData: transactionId is " + String.valueOf(transactionId));
-                if (lastTransactionId == 0 || transactionId != lastTransactionId) {
-                    lastTransactionId = transactionId;
-                    Log.d(TAG, "Received Query. data: " + data.size() + ". sending ACK and data");
-                    PebbleKit.sendAckToPebble(context, transactionId);
+                lastTransactionId = transactionId;
+                Log.d(TAG, "Received Query. data: " + data.size() + ".");
+                if(data.size() >0){
+                    pebble_sync_value = data.getUnsignedIntegerAsLong(SYNC_KEY);
+                    pebble_platform = data.getUnsignedIntegerAsLong(PLATFORM_KEY);
+                    pebble_app_version = data.getString(VERSION_KEY);
+                    Log.d(TAG,"receiveData: pebble_sync_value="+pebble_sync_value+", pebble_platform="+pebble_platform+", pebble_app_version="+pebble_app_version);
+                } else {
+                    Log.d(TAG,"receiveData: pebble_app_version not known");
+                }
+                PebbleKit.sendAckToPebble(context, transactionId);
+                transactionFailed = false;
+                transactionOk = false;
+                messageInTransit = false;
+                sendStep = 5;
+                /*if (pebble_app_version.isEmpty()) {
+                    Log.i(TAG,"receiveData: Side Loading Pebble App");
+                    //sideloadInstall(mContext, WATCHAPP_FILENAME);
+                }*/
+                sendData();
+            }
+        });
+
+        PebbleKit.registerReceivedAckHandler(mContext, new PebbleKit.PebbleAckReceiver(PEBBLEAPP_UUID) {
+            @Override
+            public void receiveAck(Context context, int transactionId) {
+                Log.i(TAG, "receiveAck: Got an Ack for transactionId " + transactionId);
+                currentTransactionId++;
+                messageInTransit = false;
+                transactionOk = true;
+                transactionFailed = false;
+                retries = 0;
+                if (!done && sendingData) sendData();
+            }
+        });
+        PebbleKit.registerReceivedNackHandler(mContext, new PebbleKit.PebbleNackReceiver(PEBBLEAPP_UUID) {
+            @Override
+            public void receiveNack(Context context, int transactionId) {
+                Log.i(TAG, "receiveNack: Got an Nack for transactionId " + transactionId + ". Waiting and retrying.");
+
+                if (retries < 3) {
+                    transactionFailed = true;
+                    transactionOk = false;
+                    messageInTransit = false;
+                    retries++;
                     sendData();
                 } else {
-                    Log.d(TAG, "receiveData: lastTransactionId is "+ String.valueOf(lastTransactionId)+ ", sending NACK");
-                    PebbleKit.sendNackToPebble(context,transactionId);
+                    Log.i(TAG, "recieveNAck: exceeded retries.  Giving Up");
+                    transactionFailed = false;
+                    transactionOk = false;
+                    messageInTransit = false;
+                    sendStep = 4;
+                    retries = 0;
+                    done = true;
                 }
             }
         });
     }
 
-    public PebbleDictionary buildDictionary() {
-        PebbleDictionary dictionary = new PebbleDictionary();
+    public void buildDictionary() {
         TimeZone tz = TimeZone.getDefault();
         Date now = new Date();
         int offsetFromUTC = tz.getOffset(now.getTime());
-        Log.v(TAG, "buildDictionary: slopeOrdinal-" + slopeOrdinal() + " bgReading-" + bgReading() + " now-"+ (int) now.getTime()/1000 + " bgTime-" + (int) (mBgReading.timestamp / 1000) + " phoneTime-" + (int) (new Date().getTime() / 1000) + " bgDelta-" + bgDelta());
-        dictionary.addString(ICON_KEY, slopeOrdinal());
-        dictionary.addString(BG_KEY, bgReading());
-        dictionary.addUint32(RECORD_TIME_KEY, (int) (((mBgReading.timestamp + offsetFromUTC) / 1000)));
+        if(dictionary == null){
+            dictionary = new PebbleDictionary();
+        }
+        if(mBgReading != null) {
+            Log.v(TAG, "buildDictionary: slopeOrdinal-" + slopeOrdinal() + " bgReading-" + bgReading() + " now-" + (int) now.getTime() / 1000 + " bgTime-" + (int) (mBgReading.timestamp / 1000) + " phoneTime-" + (int) (new Date().getTime() / 1000) + " bgDelta-" + bgDelta());
+            no_signal = ((new Date().getTime()) - (60000 * 16) - mBgReading.timestamp >0);
+            if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_arrows", false)) {
+                dictionary.addString(ICON_KEY, "0");
+            } else {
+                dictionary.addString(ICON_KEY, slopeOrdinal());
+            }
+            if(no_signal){
+                dictionary.addString(BG_KEY, "?RF");
+                dictionary.addInt8(VIBE_KEY, (byte) 0x01);
+            } else {
+                dictionary.addString(BG_KEY, bgReading());
+                dictionary.addInt8(VIBE_KEY, (byte) 0x00);
+            }
+            dictionary.addUint32(RECORD_TIME_KEY, (int) (((mBgReading.timestamp + offsetFromUTC) / 1000)));
+            if(PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_delta", false)) {
+                if (no_signal) {
+                    dictionary.addString(BG_DELTA_KEY, "No Signal");
+                } else {
+                   dictionary.addString(BG_DELTA_KEY, bgDelta());
+                }
+            } else {
+                dictionary.addString(BG_DELTA_KEY, "");
+            }
+            String msg = PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_special_value","");
+            if(bgReading().compareTo(msg)==0) {
+                dictionary.addString(MESSAGE_KEY, PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_special_text", "BAZINGA!"));
+            }else {
+                dictionary.addString(MESSAGE_KEY, "");
+            }
+        } else {
+            Log.v(TAG, "buildDictionary: latest mBgReading is null, so sending default values");
+            dictionary.addString(ICON_KEY, slopeOrdinal());
+            dictionary.addString(BG_KEY, "?SN");
+            //dictionary.addString(BG_KEY, bgReading());
+            dictionary.addUint32(RECORD_TIME_KEY, (int) ((new Date().getTime() + offsetFromUTC / 1000)));
+            dictionary.addString(BG_DELTA_KEY, "No Sensor");
+            dictionary.addString(MESSAGE_KEY, "");
+        }
         dictionary.addUint32(PHONE_TIME_KEY, (int) ((new Date().getTime() + offsetFromUTC) / 1000));
-        dictionary.addString(BG_DELTA_KEY, bgDelta());
-        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0) {
+        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0 &&
+                PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("display_bridge_battery", true)) {
             dictionary.addString(UPLOADER_BATTERY_KEY, bridgeBatteryString());
             dictionary.addString(NAME_KEY, "Bridge");
         } else {
             dictionary.addString(UPLOADER_BATTERY_KEY, phoneBattery());
             dictionary.addString(NAME_KEY, "Phone");
         }
-        return dictionary;
+    }
+
+    public void sendTrendToPebble () {
+        //create a sparkline bitmap to send to the pebble
+        Log.i(TAG, "sendTrendToPebble called: sendStep= " + sendStep + ", messageInTransit= " + messageInTransit + ", transactionFailed= " + transactionFailed + ", sendStep= " + sendStep);
+        if(!done && (sendStep == 1 && ((!messageInTransit && !transactionOk && !transactionFailed) || (messageInTransit && !transactionOk && transactionFailed)))) {
+            if(!messageInTransit && !transactionOk && !transactionFailed) {
+                if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_display_trend",false)){
+                    sendStep = 5;
+                    transactionFailed = false;
+                    transactionOk = false;
+                    done=true;
+                    current_size = 0;
+                    buff = null;
+
+                }
+                boolean highLine = PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_high_line", false);
+                boolean lowLine = PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_low_line", false);
+                String trendPeriodString = PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_trend_period", "3");
+                Integer trendPeriod = Integer.parseInt(trendPeriodString);
+                Log.d(TAG,"sendTrendToPebble: highLine is " + highLine + ", lowLine is "+ lowLine +",trendPeriod is "+ trendPeriod);
+                //encode the trend bitmap as a PNG
+                int depth = 16;
+                Bitmap bgTrend;
+                if(pebble_platform == 0) {
+                    Log.d(TAG,"sendTrendToPebble: Encoding trend as Monochrome.");
+                    depth = 2;
+                        bgTrend = new BgSparklineBuilder(mContext)
+                            .setBgGraphBuilder(bgGraphBuilder)
+                            .setStart(System.currentTimeMillis() - 60000 * 60 * trendPeriod)
+                            .setEnd(System.currentTimeMillis())
+                            .setHeightPx(63)
+                            .setWidthPx(84)
+                            .showHighLine(highLine)
+                            .showLowLine(lowLine)
+                            .setTinyDots(false)
+                            .setSmallDots(true)
+                            .build();
+                }
+                else {
+                         bgTrend = new BgSparklineBuilder(mContext)
+                            .setBgGraphBuilder(bgGraphBuilder)
+                            .setStart(System.currentTimeMillis() - 60000 * 60 * trendPeriod)
+                            .setEnd(System.currentTimeMillis())
+                            .setHeightPx(84)
+                            .setWidthPx(144)
+                            .showHighLine(highLine)
+                            .showLowLine(lowLine)
+                            .setTinyDots()
+                            .setSmallDots()
+                            .build();
+
+                }
+                byte[] img = SimpleImageEncoder.encodeBitmapAsPNG(bgTrend, true, depth, true);
+                image_size = img.length;
+                buff = ByteBuffer.wrap(img);
+                bgTrend.recycle();
+                //Prepare the TREND_BEGIN_KEY dictionary.  We expect the length of the image to always be less than 65535 bytes.
+                if(buff != null) {
+                    if (dictionary == null) {
+                        dictionary = new PebbleDictionary();
+                    }
+                    dictionary.addInt16(TREND_BEGIN_KEY, (short) image_size);
+                    Log.d(TAG, "sendTrendToPebble: Sending TREND_BEGIN_KEY to pebble, image size is " + image_size);
+                } else {
+                    Log.d(TAG, "sendTrendToPebble: Error converting stream to ByteBuffer, buff is null.");
+                    sendStep = 4;
+                    return;
+                }
+            }
+            transactionFailed = false;
+            transactionOk=false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 1 && !done && !messageInTransit && transactionOk && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_BEGIN_KEY);
+            current_size = 0;
+            sendStep = 2;
+            transactionOk = false;
+        }
+        if(!done && ((sendStep ==  2 && !messageInTransit ) || sendStep ==3 && transactionFailed)){
+            if( !transactionFailed && !messageInTransit){
+                // send image chunks to Pebble.
+                Log.d(TAG, "sendTrendToPebble: current_size is " + current_size + ", image_size is " + image_size);
+                if(current_size < image_size) {
+                    dictionary.remove(TREND_DATA_KEY);
+                    if ((image_size <= (current_size + CHUNK_SIZE))) {
+                        chunk = new byte[image_size - current_size];
+                        Log.d(TAG, "sendTrendToPebble: sending chunk of size " + (image_size - current_size));
+                        buff.get(chunk, 0, image_size - current_size);
+                        sendStep = 3;
+                    } else {
+                        chunk = new byte[CHUNK_SIZE];
+                        Log.d(TAG, "sendTrendToPebble: sending chunk of size " + CHUNK_SIZE);
+                        buff.get(chunk, 0, CHUNK_SIZE);
+                        current_size += CHUNK_SIZE;
+                    }
+                    dictionary.addBytes(TREND_DATA_KEY, chunk);
+                }
+            }
+            Log.d(TAG, "sendTrendToPebble: Sending TREND_DATA_KEY to pebble, current_size is " + current_size);
+            transactionFailed = false;
+            transactionOk = false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 3 && !done && !messageInTransit && transactionOk && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_DATA_KEY);
+            sendStep = 4;
+            transactionOk = false;
+            buff = null;
+            stream = null;
+        }
+        if(!done && (sendStep == 4  && ((!messageInTransit && !transactionOk && !transactionFailed) || (messageInTransit && !transactionOk && transactionFailed)))) {
+            if(!transactionFailed) {
+                // prepare the TREND_END_KEY dictionary and send it.
+                dictionary.addUint8(TREND_END_KEY, (byte) 0);
+                Log.d(TAG, "sendTrendToPebble: Sending TREND_END_KEY to pebble.");
+            }
+            transactionFailed = false;
+            transactionOk = false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 4 && !done && transactionOk && !messageInTransit && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_END_KEY);
+            sendStep = 5;
+            transactionFailed = false;
+            transactionOk = false;
+            done=true;
+            current_size = 0;
+            buff = null;
+        }
     }
 
     public String bridgeBatteryString() {
@@ -124,18 +404,73 @@ public String bridgeBatteryString() {
     }
 
     public void sendData(){
-        mBgReading = BgReading.last();
-        if(mBgReading != null) {
-            sendDownload(buildDictionary());
-        }
+         if (PebbleKit.isWatchConnected(mContext)) {
+             if(sendStep == 5) {
+                 sendStep = 0;
+                 done=false;
+                 dictionary.remove(ICON_KEY);
+                 dictionary.remove(BG_KEY);
+                 dictionary.remove(NAME_KEY);
+                 dictionary.remove(BG_DELTA_KEY);
+                 dictionary.remove(PHONE_TIME_KEY);
+                 dictionary.remove(RECORD_TIME_KEY);
+                 dictionary.remove(UPLOADER_BATTERY_KEY);
+             }
+             Log.i(TAG, "sendData: messageInTransit= " + messageInTransit + ", transactionFailed= " + transactionFailed + ", sendStep= " + sendStep);
+             if (sendStep == 0 && !messageInTransit && !transactionOk && !transactionFailed) {
+                 mBgReading = BgReading.last();
+                 sendingData = true;
+                 buildDictionary();
+                 sendDownload();
+             }
+             if (sendStep == 0 && !messageInTransit && transactionOk && !transactionFailed) {
+                 Log.i(TAG, "sendData: sendStep 0 complete, clearing dictionary");
+                 dictionary.remove(ICON_KEY);
+                 dictionary.remove(BG_KEY);
+                 dictionary.remove(NAME_KEY);
+                 dictionary.remove(BG_DELTA_KEY);
+                 dictionary.remove(PHONE_TIME_KEY);
+                 dictionary.remove(RECORD_TIME_KEY);
+                 dictionary.remove(UPLOADER_BATTERY_KEY);
+                 transactionOk = false;
+                 sendStep = 1;
+             }
+             if (sendStep > 0 && sendStep < 5) {
+                 if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_display_trend",false)){
+                     sendStep = 5;
+                 } else {
+                     sendTrendToPebble();
+                 }
+             }
+             if(sendStep == 5) {
+                 sendStep = 5;
+                 Log.i(TAG, "sendData: finished sending.  sendStep = " +sendStep);
+                 done = true;
+                 transactionFailed = false;
+                 transactionOk = false;
+                 messageInTransit = false;
+                 sendingData = false;
+             }
+         }
     }
 
     public String bgReading() {
+        Sensor sensor = new Sensor();
+        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0 ) {
+            Log.d(TAG, "bgReading: found xBridge wixel, sensor.isActive=" +sensor.isActive()+", sensor.stopped_at="+sensor.currentSensor().stopped_at+", sensor.started_at="+sensor.currentSensor().started_at);
+            if (!(sensor.isActive())) {
+                Log.d(TAG, "bgReading: No active Sensor");
+                return "?SN";
+            }
+            if ((sensor.currentSensor().started_at + 60000 * 60 * 2 >= System.currentTimeMillis())) {
+                return "?CD";
+            }
+        }
         return bgGraphBuilder.unitized_string(mBgReading.calculated_value);
     }
 
     public String bgDelta() {
-        return bgGraphBuilder.unitizedDeltaString(false, false);
+        return new BgGraphBuilder(mContext).unitizedDeltaString(PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_delta_units", false), true);
     }
 
     public String phoneBattery() {
@@ -146,12 +481,14 @@ public String bgUnit() {
         return bgGraphBuilder.unit();
     }
 
-    public void sendDownload(PebbleDictionary dictionary) {
-        if (PebbleKit.isWatchConnected(mContext)) {
-            if (dictionary != null && mContext != null) {
-                Log.d(TAG, "sendDownload: Sending data to pebble");
-                PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
-            }
+    //public void sendDownload(PebbleDictionary dictionary) {
+    public void sendDownload() {
+        if (dictionary != null && mContext != null) {
+            Log.d(TAG, "sendDownload: Sending data to pebble");
+            messageInTransit = true;
+            transactionFailed = false;
+            transactionOk = false;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
         }
     }
 
@@ -164,6 +501,7 @@ public int getBatteryLevel() {
     }
 
     public String slopeOrdinal(){
+        if(mBgReading == null) return "0";
         String arrow_name = mBgReading.slopeName();
         if(arrow_name.compareTo("DoubleDown")==0) return "7";
         if(arrow_name.compareTo("SingleDown")==0) return "6";
@@ -175,5 +513,38 @@ public String slopeOrdinal(){
         if(arrow_name.compareTo("9")==0) return arrow_name;
         return "0";
     }
+
+    public static void sideloadInstall(Context ctx, String assetFilename) {
+        try {
+            // Read .pbw from assets/
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            File file = new File(ctx.getExternalFilesDir(null), assetFilename);
+            InputStream is = ctx.getResources().getAssets().open(assetFilename);
+            OutputStream os = new FileOutputStream(file);
+            byte[] pbw = new byte[is.available()];
+            is.read(pbw);
+            os.write(pbw);
+            is.close();
+            os.close();
+
+            // Install via Pebble Android app
+            intent.setDataAndType(Uri.fromFile(file), "application/pbw");
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            ctx.startActivity(intent);
+        } catch (IOException e) {
+            Toast.makeText(ctx, "App install failed: " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+        }
+    }
+    /*public void setResponseTImer(){
+        long wakeTime = new Date().getTime() + 3000;
+        PendingIntent serviceIntent = PendingIntent.getService(this, 0, new Intent(this, this.getClass()), 0);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            alarm.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            alarm.setExact(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+        } else
+            alarm.set(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+
+    }*/
 }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java
new file mode 100644
index 0000000..7db6b83
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java
@@ -0,0 +1,264 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.util.Log;
+
+import java.io.ByteArrayOutputStream;
+import java.util.TreeMap;
+
+import ar.com.hjg.pngj.ImageInfo;
+import ar.com.hjg.pngj.ImageLineInt;
+import ar.com.hjg.pngj.PngWriter;
+import ar.com.hjg.pngj.chunks.PngChunkPLTE;
+import ar.com.hjg.pngj.chunks.PngChunkTRNS;
+
+/**
+ * Simple PNG encoder for Pebble and Pebble Time
+ *
+ * TODO: alpha support is untested
+ * TODO: better handling for black and white
+ * TODO: threshold detection
+ */
+public class SimpleImageEncoder {
+    private final static String TAG = SimpleImageEncoder.class.getSimpleName();
+    int [] palette = getDefaultPalette();
+
+    // Pebble 64-color palette
+    public static int [] getDefaultPalette () {
+        int [] palette = new int[64];
+
+        for (int i = 0; i < 64; i++) {
+            palette[i] = Color.rgb(
+                    ((i >> 4) & 0x3) * 85,
+                    ((i >> 2) & 0x3) * 85,
+                    ((i >> 0) & 0x3) * 85
+            );
+        }
+
+        return palette;
+    }
+
+    public SimpleImageEncoder() {
+    }
+
+    //public void setPalette (int [] newPalette) { palette = newPalette; }
+
+    public int [] getPalette () {
+        return palette;
+    }
+
+    private static int clamp (double value) {
+        if (value < 0) return 0;
+        else if (value > 255) return 255;
+        else return (int) Math.round(value);
+    }
+
+    // TODO better handling of black and white
+    public void optimizePalette (int [] data, int maxColors, boolean allowTransparent) {
+        int [] counts = new int[palette.length];
+        boolean hasTransparent = false;
+
+        for (int i = 0; i < data.length; i++) {
+            int p = data[i];
+
+            if (Color.alpha(p) == 0 && allowTransparent) {
+                hasTransparent = true;
+            }
+
+            int index = ((Color.red(p) / 85) << 4)
+                    | ((Color.green(p) / 85) << 2)
+                    | ((Color.blue(p) / 85) << 0);
+            counts[index]++;
+        }
+        // Quick and dirty histogram
+        TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
+        for (int i = 0; i < counts.length; i++) {
+            map.put(counts[i], palette[i]);
+        }
+        Log.d(TAG, "optimizePalette: map.size() is " + map.size() + ", map.descendingMap().size() is" + map.descendingMap().size());
+        int colorCount = 0;
+        int [] colors = new int[maxColors];
+
+        if (hasTransparent) {
+            colors[colorCount] = Color.argb(0, 255, 255, 255);
+            colorCount++;
+        }
+
+        // Pick out the top colors
+        for (int color : map.descendingMap().values()) {
+            colors[colorCount] = color;
+            colorCount++;
+            Log.d(TAG, "optimizePalette: palette index " + (map.size()-colorCount+1) + " of " + (map.size()-1) +" has r:" + Color.red(color) + ", g:" + Color.green(color) + ", b:" + Color.blue(color));
+
+            if (colorCount >= maxColors) break;
+        }
+
+        palette = colors;
+    }
+
+
+    public static double getColorDistance (int color, int pColor) {
+        float rd = Color.red(pColor) - Color.red(color);
+        float gd = Color.green(pColor) - Color.green(color);
+        float bd = Color.blue(pColor) - Color.blue(color);
+
+        return Math.sqrt(0.2126*rd*rd + 0.7152*gd*gd + 0.0722*bd*bd);
+        //return Math.sqrt(0.299*rd*rd + 0.587*gd*gd + 0.144*bd*bd);
+        //return Math.sqrt(rd*rd + gd*gd + bd*bd);
+    }
+
+    public byte getNearestColorIndex (int color) {
+        int bestIndex = 0;
+        double bestDistance = Double.MAX_VALUE;
+
+        // If the palette contains a transparent pixel in the first slot,
+        // use this for fully transparent pixels
+        if (Color.alpha(color) == 0 && Color.alpha(palette[0]) == 0) {
+            return 0;
+        }
+        // if it is a monochrome image, chose any colour as it must be black
+        if(palette.length ==2){
+                return 1;
+        } else {
+            // This could be optimized
+            for (int i = 0; i < palette.length; i++) {
+                int pColor = palette[i];
+
+                if (color == pColor) return (byte) i;
+
+                double distance = getColorDistance(pColor, color);
+                //double distance = getColorDistance(color, pColor);
+                if (distance <= bestDistance) {
+                    bestIndex = i;
+                    bestDistance = distance;
+                }
+            }
+        }
+        //Log.d(TAG, "getNearestColorIndex: selecting index " + bestIndex + " of " + palette.length + ", a distance of " + bestDistance +" for r:" + Color.red(color) + ", g:" + Color.green(color) + ", b:" + Color.blue(color));
+
+        return (byte) bestIndex;
+    }
+
+    // Dither image down to the current palette
+    public void quantize (int [] pixels, int width) {
+        final float[] errors = new float[] { 7f/16f, 3f/16f, 5f/16f, 1f/16f };
+        final int[] offsets = new int[] { 1, width - 1, width, width + 1};
+
+        for (int i = 0; i < pixels.length; i++) {
+            int color = pixels[i];
+            int nearestColorIndex = this.getNearestColorIndex(color);
+            int nearestColor = this.palette[nearestColorIndex];
+
+            int rd = Color.red(color) - Color.red(nearestColor);
+            int gd = Color.green(color) - Color.green(nearestColor);
+            int bd = Color.blue(color) - Color.blue(nearestColor);
+
+            pixels[i] = nearestColor;
+
+            // Propagate errors
+            for (int j = 0; j < errors.length; j++) {
+                int offset = offsets[j];
+                if (i + offset >= pixels.length) break;
+                int neighborPixel = pixels[i + offset];
+
+                int red = clamp(Color.red(neighborPixel) + errors[j] * rd);
+                int green = clamp(Color.green(neighborPixel) + errors[j] * gd);
+                int blue = clamp(Color.blue(neighborPixel) + errors[j] * bd);
+
+                pixels[i + offset] = Color.rgb(red, green, blue);
+            }
+        }
+    }
+
+    /**
+     * Encode an Android bitmap as an indexed PNG using Pebble Time colors.
+     * Uses 16 colors for the best balance of quality and size.
+     *
+     * param: bitmap
+     * return: array of bytes in PNG format
+     */
+/*    public static byte [] encodeBitmapAsPNG (Bitmap bitmap, boolean color) {
+        return encodeBitmapAsPNG(bitmap, color, color ? 16 : 2, false);
+    }
+*/
+    /**
+     * Encode an Android bitmap as an indexed PNG using Pebble Time colors.
+     * param: bitmap
+     * param: color Whether the image is color (true) or black-and-white
+     * param: numColors  Should be 2, 4, 16, or 64. Using 16 colors is
+     *                   typically the best tradeoff. Must be 2 if B&W.
+     * param: allowTransparent Allow fully transparent pixels
+     * return: Array of bytes in PNG format
+     */
+    public static byte [] encodeBitmapAsPNG (Bitmap bitmap, boolean color, int numColors, boolean allowTransparent) {
+        int bits;
+
+        if (!color && numColors != 2) throw new IllegalArgumentException("must have 2 colors for black and white");
+
+        if (numColors < 2) throw new IllegalArgumentException("minimum 2 colors");
+        else if (numColors == 2) bits = 1;
+        else if (numColors <= 4) bits = 2;
+        else if (numColors <= 16) bits = 4;
+        else if (numColors <= 64) bits = 8;
+        else throw new IllegalArgumentException("maximum 64 colors");
+
+        SimpleImageEncoder encoder = new SimpleImageEncoder();
+        int [] pixels = new int[bitmap.getWidth() * bitmap.getHeight()];
+
+        bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());
+        encoder.optimizePalette(pixels, numColors, allowTransparent);
+
+        return encoder.encodeIndexedPNG(pixels, bitmap.getWidth(), bitmap.getHeight(), color, bits);
+    }
+
+    public byte [] encodeIndexedPNG (int [] pixels, int width, int height, boolean color, int bits) {
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+
+        int [] palette = getPalette();
+
+        boolean alpha = Color.alpha(palette[0]) == 0;
+        boolean grayscale = !color;
+        //Log.d(TAG, "encodeIndexedPNG: color = "+color +", alpha ="+alpha+", grayscale = "+grayscale);
+
+        //ImageInfo imageInfo = new ImageInfo(width, height, bits, alpha, grayscale, color);
+        ImageInfo imageInfo = new ImageInfo(width, height, bits, false, grayscale, color);
+        PngWriter writer = new PngWriter(bos, imageInfo);
+        writer.getPixelsWriter().setDeflaterCompLevel(9);
+
+        if (color) {
+            PngChunkPLTE paletteChunk = writer.getMetadata().createPLTEChunk();
+            paletteChunk.setNentries(palette.length);
+
+            for (int i = 0; i < palette.length; i++) {
+                int c = palette[i];
+                paletteChunk.setEntry(i, Color.red(c), Color.green(c), Color.blue(c));
+            }
+        }
+
+        if (alpha) {
+            PngChunkTRNS trnsChunk = writer.getMetadata().createTRNSChunk();
+            if (color) {
+                trnsChunk.setIndexEntryAsTransparent(0);
+            } else {
+                trnsChunk.setGray(1);
+            }
+        }
+        else {
+            quantize(pixels, imageInfo.cols);
+        }
+        ImageLineInt line = new ImageLineInt(imageInfo);
+        for (int y = 0; y < imageInfo.rows; y++) {
+            int [] lineData = line.getScanline();
+            for (int x = 0; x < imageInfo.cols; x++) {
+                int pixel = pixels[y * imageInfo.cols + x];
+
+                lineData[x] = getNearestColorIndex(pixel);
+            }
+            writer.writeRow(line);
+        }
+
+        writer.end();
+        return bos.toByteArray();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 72ed615..33438ff 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -22,6 +22,7 @@
 import android.preference.PreferenceManager;
 import android.preference.PreferenceScreen;
 import android.preference.RingtonePreference;
+import android.preference.SwitchPreference;
 import android.text.InputFilter;
 import android.text.TextUtils;
 import android.view.KeyEvent;
@@ -30,6 +31,7 @@
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
+
 import com.eveningoutpost.dexdrip.Services.MissedReadingService;
 import com.eveningoutpost.dexdrip.Services.XDripViewer;
 import com.eveningoutpost.dexdrip.R;
@@ -37,6 +39,9 @@
 import com.eveningoutpost.dexdrip.UtilityModels.PebbleSync;
 import com.eveningoutpost.dexdrip.WidgetUpdateService;
 import com.eveningoutpost.dexdrip.xDripWidget;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+import com.eveningoutpost.dexdrip.WidgetUpdateService;
+import com.eveningoutpost.dexdrip.xDripWidget;
 import com.google.zxing.integration.android.IntentIntegrator;
 import com.google.zxing.integration.android.IntentResult;
 import com.nightscout.core.barcode.NSBarcodeConfig;
@@ -44,6 +49,7 @@
 import net.tribe7.common.base.Joiner;
 
 import java.net.URI;
+import java.text.DecimalFormat;
 import java.util.List;
 
 /**
@@ -247,11 +253,16 @@ public void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
             final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
 
+            DecimalFormat df;
             addPreferencesFromResource(R.xml.pref_license);
             addPreferencesFromResource(R.xml.pref_general);
-            bindPreferenceSummaryToValueAndEnsureNumeric(findPreference("highValue"));
-            bindPreferenceSummaryToValueAndEnsureNumeric(findPreference("lowValue"));
-            bindPreferenceSummaryToValue(findPreference("units"));
+            final EditTextPreference highValue = (EditTextPreference)findPreference("highValue");
+            bindPreferenceSummaryToValueAndEnsureNumeric(highValue);
+            final EditTextPreference lowValue = (EditTextPreference)findPreference("lowValue");
+            bindPreferenceSummaryToValueAndEnsureNumeric(lowValue);
+            final ListPreference units = (ListPreference) findPreference("units");
+
+            bindPreferenceSummaryToValue(units);
 
             addPreferencesFromResource(R.xml.pref_notifications);
             bindPreferenceSummaryToValue(findPreference("bg_alert_profile"));
@@ -276,6 +287,7 @@ public void onCreate(Bundle savedInstanceState) {
             bindPreferenceSummaryToValue(findPreference("cloud_storage_api_base"));
 
             addPreferencesFromResource(R.xml.pref_advanced_settings);
+            //addPreferencesFromResource(R.xml.pref_pebble_settings);
             addPreferencesFromResource(R.xml.pref_community_help);
 
             bindTTSListener();
@@ -312,7 +324,20 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 
             final Preference scanShare = findPreference("scan_share2_barcode");
             final EditTextPreference transmitterId = (EditTextPreference) findPreference("dex_txid");
-            final Preference pebbleSync = findPreference("broadcast_to_pebble");
+            final SwitchPreference pebbleSync = (SwitchPreference) findPreference("broadcast_to_pebble");
+            final Preference pebbleTrend = findPreference("pebble_display_trend");
+            final Preference pebbleHighLine = findPreference("pebble_high_line");
+            final Preference pebbleLowLine = findPreference("pebble_low_line");
+            final Preference pebbleTrendPeriod = findPreference("pebble_trend_period");
+            final Preference pebbleDelta = findPreference("pebble_show_delta");
+            final Preference pebbleDeltaUnits = findPreference("pebble_show_delta_units");
+            final Preference pebbleShowArrows = findPreference("pebble_show_arrows");
+            final EditTextPreference pebbleSpecialValue = (EditTextPreference) findPreference("pebble_special_value");
+            bindPreferenceSummaryToValueAndEnsureNumeric(pebbleSpecialValue);
+            final Preference pebbleSpecialText = findPreference("pebble_special_text");
+            bindPreferenceSummaryToValue(pebbleSpecialText);
+            final SwitchPreference broadcastLocally = (SwitchPreference) findPreference("broadcast_data_through_intents");
+            final PreferenceCategory watchCategory = (PreferenceCategory) findPreference("watch_integration");
             final PreferenceCategory collectionCategory = (PreferenceCategory) findPreference("collection_category");
             final PreferenceCategory otherCategory = (PreferenceCategory) findPreference("other_category");
             final PreferenceScreen calibrationAlertsScreen = (PreferenceScreen) findPreference("calibration_alerts_screen");
@@ -346,7 +371,6 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 prefs.edit().putBoolean("calibration_notifications", false).apply();
             }
 
-
             if ((prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0)
                     && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiBlueToothWixel") != 0)
                     && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiDexbridgeWixel") != 0)) {
@@ -367,19 +391,162 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomG5") == 0) {
                 collectionCategory.addPreference(transmitterId);
             }
-            pebbleSync.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+
+            if(!prefs.getBoolean(pebbleSync.getKey(),false)){
+                //watchCategory.removeAll();
+                watchCategory.removePreference(pebbleTrend);
+                watchCategory.removePreference(pebbleHighLine);
+                watchCategory.removePreference(pebbleLowLine);
+                watchCategory.removePreference(pebbleTrendPeriod);
+                watchCategory.removePreference(pebbleSpecialValue);
+                watchCategory.removePreference(pebbleSpecialText);
+                watchCategory.removePreference(pebbleDelta);
+                watchCategory.removePreference(pebbleDeltaUnits);
+                watchCategory.removePreference(pebbleShowArrows);
+            }
+           if(prefs.getString("units", "mgdl").compareTo("mmol")!=0) {
+               df = new DecimalFormat("#.#");
+               df.setMaximumFractionDigits(0);
+               pebbleSpecialValue.setDefaultValue("99");
+               if(pebbleSpecialValue.getText().compareTo("5.5")==0) {
+                   pebbleSpecialValue.setText(df.format(Double.valueOf(pebbleSpecialValue.getText()) * Constants.MMOLL_TO_MGDL));
+               }
+           }else{
+               df = new DecimalFormat("#.#");
+               df.setMaximumFractionDigits(1);
+               pebbleSpecialValue.setDefaultValue("5.5");
+               if(pebbleSpecialValue.getText().compareTo("99") ==0) {
+                   pebbleSpecialValue.setText(df.format(Double.valueOf(pebbleSpecialValue.getText()) / Constants.MMOLL_TO_MGDL));
+               }
+           }
+           units.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue){
+                   //Context context = preference.getContext();
+                   DecimalFormat df = new DecimalFormat("#.#");
+                   Double tmp = 0.0;
+                   Double highVal = 0.0;
+                   Double lowVal = 0.0;
+                   preference.setSummary(newValue.toString());
+                   if(newValue.toString().compareTo("mgdl")==0) {
+                       df.setMaximumFractionDigits(0);
+                       pebbleSpecialValue.setDefaultValue("99");
+                       tmp=Double.valueOf(pebbleSpecialValue.getText());
+                       tmp= tmp*Constants.MMOLL_TO_MGDL;
+                       highVal = Double.valueOf(highValue.getText());
+                       highVal = highVal*Constants.MMOLL_TO_MGDL;
+                       lowVal = Double.valueOf(lowValue.getText());
+                       lowVal = lowVal*Constants.MMOLL_TO_MGDL;
+                   } else {
+                       df.setMaximumFractionDigits(1);
+                       pebbleSpecialValue.setDefaultValue("5.5");
+                       tmp=Double.valueOf(pebbleSpecialValue.getText());
+                       tmp= tmp/Constants.MMOLL_TO_MGDL;
+                       highVal = Double.valueOf(highValue.getText());
+                       highVal = highVal/Constants.MMOLL_TO_MGDL;
+                       lowVal = Double.valueOf(lowValue.getText());
+                       lowVal = lowVal/Constants.MMOLL_TO_MGDL;
+                   }
+                   pebbleSpecialValue.setText(df.format(tmp));
+                   pebbleSpecialValue.setSummary(pebbleSpecialValue.getText());
+                   highValue.setText(df.format(highVal));
+                   highValue.setSummary(highValue.getText());
+                   lowValue.setText(df.format(lowVal));
+                   lowValue.setSummary(lowValue.getText());
+                   return true;
+               }
+           });
+           pebbleSync.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override
                 public boolean onPreferenceChange(Preference preference, Object newValue) {
                     Context context = preference.getContext();
                     if ((Boolean) newValue) {
                         context.startService(new Intent(context, PebbleSync.class));
+                        watchCategory.addPreference(pebbleTrend);
+                        watchCategory.addPreference(pebbleHighLine);
+                        watchCategory.addPreference(pebbleLowLine);
+                        watchCategory.addPreference(pebbleDelta);
+                        watchCategory.addPreference(pebbleDeltaUnits);
+                        watchCategory.addPreference(pebbleShowArrows);
+                        watchCategory.addPreference(pebbleTrendPeriod);
+                        watchCategory.addPreference(pebbleSpecialValue);
+                        watchCategory.addPreference(pebbleSpecialText);
                     } else {
                         context.stopService(new Intent(context, PebbleSync.class));
+                        watchCategory.removePreference(pebbleTrend);
+                        watchCategory.removePreference(pebbleHighLine);
+                        watchCategory.removePreference(pebbleLowLine);
+                        watchCategory.removePreference(pebbleDelta);
+                        watchCategory.removePreference(pebbleDeltaUnits);
+                        watchCategory.removePreference(pebbleShowArrows);
+                        watchCategory.removePreference(pebbleTrendPeriod);
+                        watchCategory.removePreference(pebbleSpecialValue);
+                        watchCategory.removePreference(pebbleSpecialText);
                     }
                     return true;
                 }
             });
 
+            //bindWidgetUpdater();
+
+            pebbleTrend.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleHighLine.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue){
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+               }
+           });
+
+           pebbleLowLine.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue) {
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+               }
+           });
+
+            pebbleTrendPeriod.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+                }
+            });
+            pebbleDelta.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleDeltaUnits.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleShowArrows.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
             bindWidgetUpdater();
 
             bindPreferenceSummaryToValue(collectionMethod);
@@ -599,6 +766,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
         
         private void bindBgMissedAlertsListener(){
           findPreference("other_alerts_snooze").setOnPreferenceChangeListener(sBgMissedAlertsHandler);
+          findPreference("other_alerts_snooze").setOnPreferenceChangeListener(sBgMissedAlertsHandler);
         }
 
         private static class WidgetListener implements Preference.OnPreferenceChangeListener {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusBroadcastReceier.java b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusBroadcastReceier.java
new file mode 100644
index 0000000..5387afa
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusBroadcastReceier.java
@@ -0,0 +1,19 @@
+package com.eveningoutpost.dexdrip.wearintegration;
+
+import android.content.Context;
+import android.content.Intent;
+import android.support.v4.content.WakefulBroadcastReceiver;
+
+import com.eveningoutpost.dexdrip.Models.UserError;
+
+/**
+ * Created by adrian on 14/02/16.
+ */
+public class ExternalStatusBroadcastReceier extends WakefulBroadcastReceiver {
+    @Override
+    public void onReceive(Context context, Intent intent) {
+        startWakefulService(context, new Intent(context, ExternalStatusService.class)
+                .setAction(ExternalStatusService.ACTION_NEW_EXTERNAL_STATUSLINE)
+                .putExtras(intent));
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusService.java b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusService.java
new file mode 100644
index 0000000..863c749
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/ExternalStatusService.java
@@ -0,0 +1,70 @@
+package com.eveningoutpost.dexdrip.wearintegration;
+
+import android.app.IntentService;
+import android.content.Context;
+import android.content.Intent;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
+import android.support.v4.content.WakefulBroadcastReceiver;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.Home;
+import com.eveningoutpost.dexdrip.Models.UserError;
+import com.eveningoutpost.dexdrip.utils.Preferences;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.wearable.Wearable;
+
+import java.util.Date;
+
+/**
+ * Created by adrian on 14/02/16.
+ */
+public class ExternalStatusService extends IntentService{
+    //constants
+    public static final String EXTRA_STATUSLINE = "com.eveningoutpost.dexdrip.Extras.Statusline";
+    public static final String ACTION_NEW_EXTERNAL_STATUSLINE = "com.eveningoutpost.dexdrip.ExternalStatusline";
+    public static final String RECEIVER_PERMISSION = "com.eveningoutpost.dexdrip.permissions.RECEIVE_EXTERNAL_STATUSLINE";
+    public static final int MAX_LEN = 40;
+
+    public ExternalStatusService() {
+        super("ExternalStatusService");
+        setIntentRedelivery(true);
+    }
+
+
+    @Override
+    protected void onHandleIntent(Intent intent) {
+
+        if (intent == null)
+            return;
+
+        final String action = intent.getAction();
+
+        try {
+
+            if (ACTION_NEW_EXTERNAL_STATUSLINE.equals(action)) {
+                String statusline = intent.getStringExtra(EXTRA_STATUSLINE);
+
+                if(statusline.length() > MAX_LEN){
+                    statusline = statusline.substring(0, MAX_LEN);
+                }
+
+                if(statusline != null) {
+                    // send to wear
+                    if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean("wear_sync", false)) {
+                        startService(new Intent(this, WatchUpdaterService.class).setAction(WatchUpdaterService.ACTION_SEND_STATUS).putExtra("externalStatusString", statusline));
+                        /*By integrating the watch part of Nightwatch we inherited the same wakelock
+                         problems NW had - so adding the same quick fix for now.
+                         TODO: properly "wakelock" the wear (and probably pebble) services
+                        */
+                        PowerManager powerManager = (PowerManager) this.getSystemService(Context.POWER_SERVICE);
+                        powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                                "quickFix4").acquire(15000);
+                    }
+                }
+            }
+        } finally {
+            WakefulBroadcastReceiver.completeWakefulIntent(intent);
+        }
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java
index 8b3cc42..ba97f88 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java
@@ -28,11 +28,14 @@
         GoogleApiClient.OnConnectionFailedListener {
     public static final String ACTION_RESEND = WatchUpdaterService.class.getName().concat(".Resend");
     public static final String ACTION_OPEN_SETTINGS = WatchUpdaterService.class.getName().concat(".OpenSettings");
+    public static final String ACTION_SEND_STATUS = WatchUpdaterService.class.getName().concat(".SendStatus");
 
     private GoogleApiClient googleApiClient;
     public static final String WEARABLE_DATA_PATH = "/nightscout_watch_data";
     public static final String WEARABLE_RESEND_PATH = "/nightscout_watch_data_resend";
     private static final String OPEN_SETTINGS_PATH = "/openwearsettings";
+    private static final String NEW_STATUS_PATH = "/sendstatustowear";
+
 
     boolean wear_integration = false;
     boolean pebble_integration = false;
@@ -98,6 +101,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {
                     resendData();
                 } else if (ACTION_OPEN_SETTINGS.equals(action)) {
                     sendNotification();
+                } else if (ACTION_SEND_STATUS.equals(action)) {
+                    sendStatus(intent.getStringExtra("externalStatusString"));
                 } else {
                     sendData();
                 }
@@ -168,6 +173,19 @@ private void sendNotification() {
         }
     }
 
+    private void sendStatus(String status) {
+        if (googleApiClient.isConnected()) {
+            PutDataMapRequest dataMapRequest = PutDataMapRequest.create(NEW_STATUS_PATH);
+            //unique content
+            dataMapRequest.getDataMap().putDouble("timestamp", System.currentTimeMillis());
+            dataMapRequest.getDataMap().putString("externalStatusString", status);
+            PutDataRequest putDataRequest = dataMapRequest.asPutDataRequest();
+            Wearable.DataApi.putDataItem(googleApiClient, putDataRequest);
+        } else {
+            Log.e("SendStatus", "No connection to wearable available!");
+        }
+    }
+
     private DataMap dataMap(BgReading bg, SharedPreferences sPrefs, BgGraphBuilder bgGraphBuilder) {
         Double highMark = Double.parseDouble(sPrefs.getString("highValue", "170"));
         Double lowMark = Double.parseDouble(sPrefs.getString("lowValue", "70"));
diff --git a/app/src/main/res/layout/activity_edit_alert.xml b/app/src/main/res/layout/activity_edit_alert.xml
index 37190d3..8edabd4 100644
--- a/app/src/main/res/layout/activity_edit_alert.xml
+++ b/app/src/main/res/layout/activity_edit_alert.xml
@@ -323,6 +323,30 @@
                             android:textSize="15sp"/>
 
                     </LinearLayout>
+                    
+                    <LinearLayout
+                        android:orientation="horizontal"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:paddingTop="20dp">
+
+                        <TextView
+                            android:id="@+id/view_alert_disable"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:gravity="left"
+                            android:text="disable alert"
+                            android:textSize="15sp"
+                            />
+
+                        <CheckBox
+                            android:id="@+id/view_alert_check_disable"
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text=""
+                            android:textSize="15sp"/>
+
+                    </LinearLayout>
                 </LinearLayout>
             <LinearLayout
                 android:id="@+id/linear_layout_test_buttons"
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index 14bcbc8..9050e34 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -22,7 +22,18 @@
         <item>LimiTTer</item>
     </string-array>
 
-
+    <string-array name="PebbleTrendPeriods">
+        <item>1hr</item>
+        <item>2hr</item>
+        <item>3hr</item>
+        <item>4hr</item>
+    </string-array>
+    <string-array name="PebbleTrendPeriodValues">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+    </string-array>
 
 
     <string-array name="bgUnitEntries">
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index ed94fbe..b2ff87a 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -115,6 +115,13 @@
     <string name="title_activity_share_test">ShareTest</string>
     <string name="title_activity_system_status">SystemStatus</string>
 
+    <!-- pebble settings -->
+    <string name="pref_pebble_display_trend">Display Trend</string>
+    <string name="pref_summary_display_trend">Show the BG trend on the xDrip Pebble watch face.</string>
+    <string name="pref_pebble_display_high_line">Display High Line</string>
+    <string name="pref_pebble_display_low_line">Display Low Line</string>
+
+
     <string name="toast_crash">Something went wrong :( a report has been sent to help fix the issue.</string>
     <string name="appwidget_text">EXAMPLE</string>
     <string name="add_widget">Add widget</string>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 2d7bef7..fee6c68 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -15,8 +15,61 @@
             android:summary="If you have a pebble watch you can send bg data straight to it"
             android:defaultValue="false">
         </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_trend"
+            android:key="pebble_display_trend"
+            android:summary="@string/pref_summary_display_trend"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_high_line"
+            android:key="pebble_high_line"
+            android:summary="Displays the High Line"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_low_line"
+            android:key="pebble_low_line"
+            android:summary="Displays the Low line"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <ListPreference
+            android:title="Trend Time Period"
+            android:key="pebble_trend_period"
+            android:summary="Set the trend period to display"
+            android:entries="@array/PebbleTrendPeriods"
+            android:entryValues="@array/PebbleTrendPeriodValues"
+            android:defaultValue="3">
+        </ListPreference>
+        <SwitchPreference
+            android:title="Display Delta"
+            android:key="pebble_show_delta"
+            android:summary="Displays the Delta value"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="Display Delta Units"
+            android:key="pebble_show_delta_units"
+            android:summary="Displays the Delta units"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="Display Slope Arrows"
+            android:key="pebble_show_arrows"
+            android:summary="Displays the Slope Arrows"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <EditTextPreference
+            android:key="pebble_special_value"
+            android:title="Special Value"
+            android:summary="Special BGL value to display the message below"
+            android:defaultValue="99"/>
+        <EditTextPreference
+            android:key="pebble_special_text"
+            android:title="Text to display"
+            android:summary="Message to display when BGL hits the special value above"
+            android:defaultValue="BAZINGA!" />
     </PreferenceCategory>
-
     <PreferenceCategory
         android:key="other_category"
         android:title="Other Settings">
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index 453a173..0e499c1 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -17,6 +17,16 @@
             android:key="share_key"
             android:shouldDisableView="true"
             android:defaultValue="SM00000000"/>
+        <EditTextPreference
+            android:key="dex_txid"
+            android:title="Dexcom Transmitter ID"
+            android:summary="ID of your Dexcom Transmitter, eg 12AB3"
+            android:defaultValue="00000" />
+        <CheckBoxPreference
+            android:key="display_bridge_battery"
+            android:title="Display Bridge Battery"
+            android:summary="Choose to display the bridge battery level"
+            android:defaultValue="true" />
         <PreferenceScreen
             android:title="@string/scan_share2_barcode"
             android:key="scan_share2_barcode"
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java
index 7f780fe..d44f109 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java
@@ -14,6 +14,7 @@
 import android.graphics.Point;
 import android.graphics.Rect;
 import android.graphics.Shader;
+import android.os.Bundle;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
@@ -204,7 +205,11 @@ protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
     public class MessageReceiver extends BroadcastReceiver {
         @Override
         public void onReceive(Context context, Intent intent) {
-            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
+            Bundle bundle = intent.getBundleExtra("data");
+            if (bundle ==null){
+                return;
+            }
+            DataMap dataMap = DataMap.fromBundle(bundle);
             if (layoutSet) {
                 wakeLock.acquire(50);
                 sgvLevel = dataMap.getLong("sgvLevel");
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java
index 6d904ef..1e20929 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java
@@ -11,6 +11,7 @@
 import android.graphics.Paint;
 import android.graphics.Point;
 import android.graphics.Rect;
+import android.os.Bundle;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.support.v4.app.NotificationCompat;
@@ -42,7 +43,7 @@
 public  abstract class BaseWatchFace extends WatchFace implements SharedPreferences.OnSharedPreferenceChangeListener {
     public final static IntentFilter INTENT_FILTER;
     public static final long[] vibratePattern = {0,400,300,400,300,400};
-    public TextView mTime, mSgv, mDirection, mTimestamp, mUploaderBattery, mDelta, mRaw;
+    public TextView mTime, mSgv, mDirection, mTimestamp, mUploaderBattery, mDelta, mRaw, mStatus;
     public RelativeLayout mRelativeLayout;
     public LinearLayout mLinearLayout;
     public long sgvLevel = 0;
@@ -69,9 +70,11 @@
     private MessageReceiver messageReceiver;
 
     protected SharedPreferences sharedPrefs;
-    private String rawString = "000 | 000 | 000";
+    // private String rawString = "000 | 000 | 000";
+    private String rawString = "";
     private String batteryString = "--";
     private String sgvString = "--";
+    private String externalStatusString = "no status";
 
     @Override
     public void onCreate() {
@@ -112,13 +115,14 @@ public void onLayoutInflated(WatchViewStub stub) {
                 mDirection = (TextView) stub.findViewById(R.id.direction);
                 mTimestamp = (TextView) stub.findViewById(R.id.timestamp);
                 mRaw = (TextView) stub.findViewById(R.id.raw);
+                mStatus = (TextView) stub.findViewById(R.id.externaltstatus);
                 mUploaderBattery = (TextView) stub.findViewById(R.id.uploader_battery);
                 mDelta = (TextView) stub.findViewById(R.id.delta);
                 mRelativeLayout = (RelativeLayout) stub.findViewById(R.id.main_layout);
                 mLinearLayout = (LinearLayout) stub.findViewById(R.id.secondary_layout);
                 chart = (LineChartView) stub.findViewById(R.id.chart);
                 layoutSet = true;
-                showAgoRawBatt();
+                showAgoRawBattStatus();
                 mRelativeLayout.measure(specW, specH);
                 mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
                         mRelativeLayout.getMeasuredHeight());
@@ -180,7 +184,7 @@ protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
             wakeLock.acquire(50);
             final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BaseWatchFace.this);
             mTime.setText(timeFormat.format(System.currentTimeMillis()));
-            showAgoRawBatt();
+            showAgoRawBattStatus();
 
             if(ageLevel()<=0) {
                 mSgv.setPaintFlags(mSgv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
@@ -198,8 +202,11 @@ protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
     public class MessageReceiver extends BroadcastReceiver {
         @Override
         public void onReceive(Context context, Intent intent) {
-            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
-            if (layoutSet) {
+
+            //data
+            Bundle bundle = intent.getBundleExtra("data");
+            if (layoutSet && bundle != null) {
+                DataMap dataMap = DataMap.fromBundle(bundle);
                 wakeLock.acquire(50);
                 sgvLevel = dataMap.getLong("sgvLevel");
                 batteryLevel = dataMap.getInt("batteryLevel");
@@ -218,7 +225,7 @@ public void onReceive(Context context, Intent intent) {
                 final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BaseWatchFace.this);
                 mTime.setText(timeFormat.format(System.currentTimeMillis()));
 
-                showAgoRawBatt();
+                showAgoRawBattStatus();
 
                 mDirection.setText(dataMap.getString("slopeArrow"));
                 mDelta.setText(dataMap.getString("delta"));
@@ -231,31 +238,61 @@ public void onReceive(Context context, Intent intent) {
                 mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
                         mRelativeLayout.getMeasuredHeight());
                 invalidate();
-            } else {
-                Log.d("ERROR: ", "DATA IS NOT YET SET");
+                setColor();
             }
-            setColor();
+            //status
+            bundle = intent.getBundleExtra("status");
+            if (layoutSet && bundle != null) {
+                DataMap dataMap = DataMap.fromBundle(bundle);
+                wakeLock.acquire(50);
+                externalStatusString = dataMap.getString("externalStatusString");
+
+                showAgoRawBattStatus();
+
+                mRelativeLayout.measure(specW, specH);
+                mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                        mRelativeLayout.getMeasuredHeight());
+                invalidate();
+                setColor();
+            }
+
         }
     }
 
-    private void showAgoRawBatt() {
+    private void showAgoRawBattStatus() {
 
-        if(mRaw == null || mTimestamp == null || mUploaderBattery == null){
+        if(mRaw == null || mTimestamp == null || mUploaderBattery == null|| mStatus == null){
             return;
         }
 
-        if (sharedPrefs.getBoolean("showRaw", false)||
-                (sharedPrefs.getBoolean("showRawNoise", true) && sgvString.equals("???"))
-                ) {
-            mRaw.setVisibility(View.VISIBLE);
-            mRaw.setText("R: " + rawString);
+        boolean showRaw = sharedPrefs.getBoolean("showRaw", false)
+                || (sharedPrefs.getBoolean("showRawNoise", true)
+                        && sgvString.equals("???"));
+
+        boolean showStatus = sharedPrefs.getBoolean("showExternalStatus", false);
+
+        if(showRaw || showStatus){
+            //use short forms
             mTimestamp.setText(readingAge(true));
             mUploaderBattery.setText("U: " + batteryString + "%");
         } else {
-            mRaw.setVisibility(View.GONE);
             mTimestamp.setText(readingAge(false));
             mUploaderBattery.setText("Uploader: " + batteryString + "%");
         }
+
+        if (showRaw) {
+            mRaw.setVisibility(View.VISIBLE);
+            mRaw.setText("R: " + rawString);
+        } else {
+            mRaw.setVisibility(View.GONE);
+        }
+
+        if (showStatus) {
+            mStatus.setVisibility(View.VISIBLE);
+            mStatus.setText("S: " + externalStatusString);
+        } else {
+            mStatus.setVisibility(View.GONE);
+        }
     }
 
     public void setColor() {
@@ -273,7 +310,7 @@ public void setColor() {
     public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key){
         setColor();
         if(layoutSet){
-            showAgoRawBatt();
+            showAgoRawBattStatus();
             mRelativeLayout.measure(specW, specH);
             mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
                     mRelativeLayout.getMeasuredHeight());
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java b/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java
index 0b29c9d..4856c5d 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java
@@ -13,6 +13,7 @@
 import android.graphics.Point;
 import android.graphics.RectF;
 import android.graphics.Shader;
+import android.os.Bundle;
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 import android.support.v4.content.LocalBroadcastManager;
@@ -519,27 +520,29 @@ public void onReceive(Context context, Intent intent) {
             PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
                     "MyWakelockTag");
             wakeLock.acquire(30000);
+            Bundle bundle = intent.getBundleExtra("data");
+            if (bundle!= null) {
+                DataMap dataMap = DataMap.fromBundle(bundle);
+                setSgvLevel((int) dataMap.getLong("sgvLevel"));
+                Log.d("CircleWatchface", "sgv level : " + getSgvLevel());
+                setSgvString(dataMap.getString("sgvString"));
+                Log.d("CircleWatchface", "sgv string : " + getSgvString());
+                setRawString(dataMap.getString("rawString"));
+                setDelta(dataMap.getString("delta"));
+                setDatetime(dataMap.getDouble("timestamp"));
+                addToWatchSet(dataMap);
+
+
+                //start animation?
+                // dataMap.getDataMapArrayList("entries") == null -> not on "resend data".
+                if (sharedPrefs.getBoolean("animation", false) && dataMap.getDataMapArrayList("entries") == null && (getSgvString().equals("100") || getSgvString().equals("5.5") || getSgvString().equals("5,5"))) {
+                    startAnimation();
+                }
 
-            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
-            setSgvLevel((int) dataMap.getLong("sgvLevel"));
-            Log.d("CircleWatchface", "sgv level : " + getSgvLevel());
-            setSgvString(dataMap.getString("sgvString"));
-            Log.d("CircleWatchface", "sgv string : " + getSgvString());
-            setRawString(dataMap.getString("rawString"));
-            setDelta(dataMap.getString("delta"));
-            setDatetime(dataMap.getDouble("timestamp"));
-            addToWatchSet(dataMap);
-
-
-            //start animation?
-            // dataMap.getDataMapArrayList("entries") == null -> not on "resend data".
-            if (sharedPrefs.getBoolean("animation", false) && dataMap.getDataMapArrayList("entries") == null && (getSgvString().equals("100") || getSgvString().equals("5.5") || getSgvString().equals("5,5"))) {
-                startAnimation();
+                prepareLayout();
+                prepareDrawTime();
+                invalidate();
             }
-
-            prepareLayout();
-            prepareDrawTime();
-            invalidate();
             wakeLock.release();
         }
     }
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java b/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java
index c2dc1c4..c3ad7a4 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -46,6 +46,7 @@ protected void setColorDark() {
             mUploaderBattery.setTextColor(Color.RED);
         }
         mRaw.setTextColor(Color.BLACK);
+        mStatus.setTextColor(Color.BLACK);
         if (chart != null) {
             highColor = Color.YELLOW;
            lowColor = Color.RED;
@@ -89,6 +90,8 @@ protected void setColorBright() {
                 mUploaderBattery.setTextColor(Color.RED);
             }
             mRaw.setTextColor(Color.WHITE);
+            mStatus.setTextColor(Color.WHITE);
+
             mTime.setTextColor(Color.BLACK);
             if (chart != null) {
                 highColor = Utils.COLOR_ORANGE;
@@ -115,6 +118,7 @@ protected void setColorBright() {
                 mDelta.setTextColor(Color.RED);
             }
             mRaw.setTextColor(Color.BLACK);
+            mStatus.setTextColor(Color.BLACK);
             mUploaderBattery.setTextColor(Color.BLACK);
             mTimestamp.setTextColor(Color.BLACK);
 
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java b/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java
index dd0a3b3..8aea5d8 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java
@@ -47,6 +47,8 @@ protected void setColorDark(){
         }
 
         mRaw.setTextColor(Color.BLACK);
+        mStatus.setTextColor(Color.BLACK);
+
     }
 
 
@@ -82,6 +84,7 @@ protected void setColorBright() {
                 mUploaderBattery.setTextColor(Color.RED);
             }
             mRaw.setTextColor(Color.WHITE);
+            mStatus.setTextColor(Color.WHITE);
             mTime.setTextColor(Color.BLACK);
         } else {
             mRelativeLayout.setBackgroundColor(Color.BLACK);
@@ -103,6 +106,7 @@ protected void setColorBright() {
             mUploaderBattery.setTextColor(Color.BLACK);
             mTimestamp.setTextColor(Color.BLACK);
             mRaw.setTextColor(Color.BLACK);
+            mStatus.setTextColor(Color.BLACK);
             mTime.setTextColor(Color.WHITE);
         }
     }
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java b/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java
index dc852e3..c060ce6 100644
--- a/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java
@@ -25,6 +25,8 @@
     private static final String WEARABLE_DATA_PATH = "/nightscout_watch_data";
     private static final String WEARABLE_RESEND_PATH = "/nightscout_watch_data_resend";
     private static final String OPEN_SETTINGS = "/openwearsettings";
+    private static final String NEW_STATUS_PATH = "/sendstatustowear";
+
     private static final String ACTION_RESEND = "com.dexdrip.stephenblack.nightwatch.RESEND_DATA";
     private static final String ACTION_RESEND_BULK = "com.dexdrip.stephenblack.nightwatch.RESEND_BULK_DATA";
     GoogleApiClient googleApiClient;
@@ -95,10 +97,15 @@ public void onDataChanged(DataEventBuffer dataEvents) {
                     intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                     startActivity(intent);
 
-                } else {
-
+                } else if (path.equals(NEW_STATUS_PATH)){
                     dataMap = DataMapItem.fromDataItem(event.getDataItem()).getDataMap();
+                    Intent messageIntent = new Intent();
+                    messageIntent.setAction(Intent.ACTION_SEND);
+                    messageIntent.putExtra("status", dataMap.toBundle());
+                    LocalBroadcastManager.getInstance(this).sendBroadcast(messageIntent);
 
+                } else {
+                    dataMap = DataMapItem.fromDataItem(event.getDataItem()).getDataMap();
                     Intent messageIntent = new Intent();
                     messageIntent.setAction(Intent.ACTION_SEND);
                     messageIntent.putExtra("data", dataMap.toBundle());
diff --git a/wear/src/main/res/layout/rect_activity_home.xml b/wear/src/main/res/layout/rect_activity_home.xml
index 445802c..344321f 100644
--- a/wear/src/main/res/layout/rect_activity_home.xml
+++ b/wear/src/main/res/layout/rect_activity_home.xml
@@ -113,7 +113,16 @@
                 <TextView
                     android:id="@+id/raw"
                     android:textSize="10sp"
-                    android:text="000 | 000 | 000"
+                    android:text=""
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/externaltstatus"
+                    android:textSize="10sp"
+                    android:text="S: no status"
                     android:layout_width="wrap_content"
                     android:textAlignment="center"
                     android:textColor="#000000"
diff --git a/wear/src/main/res/layout/rect_activity_home_large.xml b/wear/src/main/res/layout/rect_activity_home_large.xml
index 26cc0f5..20cc6ee 100644
--- a/wear/src/main/res/layout/rect_activity_home_large.xml
+++ b/wear/src/main/res/layout/rect_activity_home_large.xml
@@ -101,12 +101,22 @@
                 <TextView
                     android:id="@+id/raw"
                     android:textSize="12sp"
-                    android:text="000 | 000 | 000"
+                    android:text=""
                     android:layout_width="wrap_content"
                     android:textAlignment="center"
                     android:textColor="#000000"
                     android:paddingLeft="10sp"
                     android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/externaltstatus"
+                    android:textSize="12sp"
+                    android:text="S: no status"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+
 
             </LinearLayout>
 
diff --git a/wear/src/main/res/layout/round_activity_home.xml b/wear/src/main/res/layout/round_activity_home.xml
index ab7c98f..231a091 100644
--- a/wear/src/main/res/layout/round_activity_home.xml
+++ b/wear/src/main/res/layout/round_activity_home.xml
@@ -109,7 +109,16 @@
                 <TextView
                     android:id="@+id/raw"
                     android:textSize="8sp"
-                    android:text="000 | 000 | 000"
+                    android:text=""
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/externaltstatus"
+                    android:textSize="8sp"
+                    android:text="S: no status"
                     android:layout_width="wrap_content"
                     android:textAlignment="center"
                     android:textColor="#000000"
diff --git a/wear/src/main/res/layout/round_activity_home_large.xml b/wear/src/main/res/layout/round_activity_home_large.xml
index 085b616..6217af3 100644
--- a/wear/src/main/res/layout/round_activity_home_large.xml
+++ b/wear/src/main/res/layout/round_activity_home_large.xml
@@ -101,7 +101,16 @@
                 <TextView
                     android:id="@+id/raw"
                     android:textSize="12sp"
-                    android:text="000 | 000 | 000"
+                    android:text=""
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/externaltstatus"
+                    android:textSize="12sp"
+                    android:text="S: no status"
                     android:layout_width="wrap_content"
                     android:textAlignment="center"
                     android:textColor="#000000"
diff --git a/wear/src/main/res/xml/preferences.xml b/wear/src/main/res/xml/preferences.xml
index dd4d5fa..c3e40eb 100644
--- a/wear/src/main/res/xml/preferences.xml
+++ b/wear/src/main/res/xml/preferences.xml
@@ -22,6 +22,11 @@
             android:key="showRawNoise" />
          -->
 
+        <CheckBoxPreference android:title="Show External Status"
+            android:defaultValue="false"
+            android:summary="Show External Staus (HAPP e.g.)."
+            android:key="showExternalStatus" />
+
         <ListPreference
             android:key="chart_timeframe"
             android:title="Chart Timeframe"

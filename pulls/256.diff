diff --git a/app/build.gradle b/app/build.gradle
index 62b335e..3bc420a 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -113,6 +113,7 @@ dependencies {
     compile 'com.nispok:snackbar:2.10.8'
     compile 'com.android.support:appcompat-v7:23.1.0'
     compile 'com.squareup.okhttp:okhttp:2.6.0'
+    compile 'ar.com.hjg:pngj:2.1.0'
     compile 'com.google.code.gson:gson:2.3'
     compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'
     compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
index a13c5c2..a107ebc 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/PebbleSync.java
@@ -1,18 +1,34 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
+import android.app.Activity;
+import android.app.AlarmManager;
+import android.app.PendingIntent;
 import android.app.Service;
-import android.content.BroadcastReceiver;
+import android.content.ActivityNotFoundException;
 import android.content.Context;
 import android.content.Intent;
 import android.content.IntentFilter;
+import android.graphics.Bitmap;
+import android.net.Uri;
 import android.os.BatteryManager;
+import android.os.Build;
 import android.os.IBinder;
 import android.preference.PreferenceManager;
+import android.widget.Toast;
+
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.getpebble.android.kit.PebbleKit;
 import com.getpebble.android.kit.util.PebbleDictionary;
 
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.nio.ByteBuffer;
 import java.util.Date;
 import java.util.TimeZone;
 import java.util.UUID;
@@ -22,14 +38,6 @@
  */
 public class PebbleSync extends Service {
     private final static String TAG = PebbleSync.class.getSimpleName();
-    //    CGM_ICON_KEY = 0x0,		// TUPLE_CSTRING, MAX 2 BYTES (10)
-    //    CGM_BG_KEY = 0x1,		// TUPLE_CSTRING, MAX 4 BYTES (253 OR 22.2)
-    //    CGM_TCGM_KEY = 0x2,		// TUPLE_INT, 4 BYTES (CGM TIME)
-    //    CGM_TAPP_KEY = 0x3,		// TUPLE_INT, 4 BYTES (APP / PHONE TIME)
-    //    CGM_DLTA_KEY = 0x4,		// TUPLE_CSTRING, MAX 5 BYTES (BG DELTA, -100 or -10.0)
-    //    CGM_UBAT_KEY = 0x5,		// TUPLE_CSTRING, MAX 3 BYTES (UPLOADER BATTERY, 100)
-    //    CGM_NAME_KEY = 0x6		// TUPLE_CSTRING, MAX 9 BYTES (xDrip)
-    //public static final UUID PEBBLEAPP_UUID = UUID.fromString("2c3f5ab3-7506-44e7-b8d0-2c63de32e1ec");
     public static final UUID PEBBLEAPP_UUID = UUID.fromString("79f8ecb3-7214-4bfc-b996-cb95148ee6d3");
     public static final int ICON_KEY = 0;
     public static final int BG_KEY = 1;
@@ -38,12 +46,48 @@
     public static final int BG_DELTA_KEY = 4;
     public static final int UPLOADER_BATTERY_KEY = 5;
     public static final int NAME_KEY = 6;
+    public static final int TREND_BEGIN_KEY = 7;
+    public static final int TREND_DATA_KEY = 8;
+    public static final int TREND_END_KEY = 9;
+    public static final int MESSAGE_KEY = 10;
+    public static final int VIBE_KEY = 11;
+    public static final int SYNC_KEY = 1000;
+    public static final int PLATFORM_KEY = 1001;
+    public static final int VERSION_KEY = 1002;
+
+    public static final int CHUNK_SIZE = 100;
+
 
     private Context mContext;
     private BgGraphBuilder bgGraphBuilder;
     private BgReading mBgReading;
-    private static int lastTransactionId;
-    BroadcastReceiver newSavedBgReceiver;
+    private static int lastTransactionId=0;
+    private static int currentTransactionId=0;
+    private static boolean messageInTransit = false;
+    private static boolean transactionFailed = false;
+    private static boolean transactionOk = false;
+    private static boolean done = false;
+    private static boolean sendingData = false;
+    private static int current_size = 0;
+    private static int image_size =0;
+    private static byte [] chunk;
+    private static ByteBuffer buff = null;
+    private static ByteArrayOutputStream stream = null;
+    public static int retries = 0;
+    private boolean no_signal = false;
+    private static long pebble_platform = 0;
+    private static String pebble_app_version = "";
+    private static long pebble_sync_value = 0;
+
+    private static short sendStep = 5;
+    private PebbleDictionary dictionary = new PebbleDictionary();
+//    private AlarmManager alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
+    private static boolean sentInitialSync = false;
+
+
+    // local statics for Pebble side load from app.
+    private static final String WATCHAPP_FILENAME = "xDrip-pebble2.pbw";
+
 
     @Override
     public void onCreate() {
@@ -60,17 +104,31 @@ public int onStartCommand(Intent intent, int flags, int startId) {
             stopSelf();
             return START_NOT_STICKY;
         }
-        Log.i(TAG, "STARTING SERVICE");
-        sendData();
+        bgGraphBuilder = new BgGraphBuilder(mContext);
+
+        Log.i(TAG, "onStartCommand called.  Sending Sync Request");
+        transactionFailed = false;
+        transactionOk = false;
+        sendStep = 5;
+        messageInTransit = false;
+        done = true;
+        sendingData = false;
+        dictionary.addInt32(SYNC_KEY, 0);
+        PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        dictionary.remove(SYNC_KEY);
+        /*if(pebble_app_version.isEmpty() && !sentInitialSync){
+            setResponseTImer();
+        }*/
+        if(pebble_app_version.isEmpty() && sentInitialSync){
+            Log.d(TAG, "onStartCommand: No Response and no pebble_app_version.  Sideloading...");
+        }
+        Log.d(TAG, "onStart: Pebble App Version not known.  Sending Version Request");
         return START_STICKY;
     }
     @Override
     public void onDestroy() {
-        Log.d(TAG,"onDestroy called");
+        Log.d(TAG, "onDestroy called");
         super.onDestroy();
-        if(newSavedBgReceiver != null) {
-            unregisterReceiver(newSavedBgReceiver);
-        }
     }
     @Override
     public IBinder onBind(Intent intent) {
@@ -85,38 +143,243 @@ private void init() {
             @Override
             public void receiveData(final Context context, final int transactionId, final PebbleDictionary data) {
                 Log.d(TAG, "receiveData: transactionId is " + String.valueOf(transactionId));
-                if (lastTransactionId == 0 || transactionId != lastTransactionId) {
-                    lastTransactionId = transactionId;
-                    Log.d(TAG, "Received Query. data: " + data.size() + ". sending ACK and data");
-                    PebbleKit.sendAckToPebble(context, transactionId);
+                lastTransactionId = transactionId;
+                Log.d(TAG, "Received Query. data: " + data.size() + ".");
+                if(data.size() >0){
+                    pebble_sync_value = data.getUnsignedIntegerAsLong(SYNC_KEY);
+                    pebble_platform = data.getUnsignedIntegerAsLong(PLATFORM_KEY);
+                    pebble_app_version = data.getString(VERSION_KEY);
+                    Log.d(TAG,"receiveData: pebble_sync_value="+pebble_sync_value+", pebble_platform="+pebble_platform+", pebble_app_version="+pebble_app_version);
+                } else {
+                    Log.d(TAG,"receiveData: pebble_app_version not known");
+                }
+                PebbleKit.sendAckToPebble(context, transactionId);
+                transactionFailed = false;
+                transactionOk = false;
+                messageInTransit = false;
+                sendStep = 5;
+                /*if (pebble_app_version.isEmpty()) {
+                    Log.i(TAG,"receiveData: Side Loading Pebble App");
+                    //sideloadInstall(mContext, WATCHAPP_FILENAME);
+                }*/
+                sendData();
+            }
+        });
+
+        PebbleKit.registerReceivedAckHandler(mContext, new PebbleKit.PebbleAckReceiver(PEBBLEAPP_UUID) {
+            @Override
+            public void receiveAck(Context context, int transactionId) {
+                Log.i(TAG, "receiveAck: Got an Ack for transactionId " + transactionId);
+                currentTransactionId++;
+                messageInTransit = false;
+                transactionOk = true;
+                transactionFailed = false;
+                retries = 0;
+                if (!done && sendingData) sendData();
+            }
+        });
+        PebbleKit.registerReceivedNackHandler(mContext, new PebbleKit.PebbleNackReceiver(PEBBLEAPP_UUID) {
+            @Override
+            public void receiveNack(Context context, int transactionId) {
+                Log.i(TAG, "receiveNack: Got an Nack for transactionId " + transactionId + ". Waiting and retrying.");
+
+                if (retries < 3) {
+                    transactionFailed = true;
+                    transactionOk = false;
+                    messageInTransit = false;
+                    retries++;
                     sendData();
                 } else {
-                    Log.d(TAG, "receiveData: lastTransactionId is "+ String.valueOf(lastTransactionId)+ ", sending NACK");
-                    PebbleKit.sendNackToPebble(context,transactionId);
+                    Log.i(TAG, "recieveNAck: exceeded retries.  Giving Up");
+                    transactionFailed = false;
+                    transactionOk = false;
+                    messageInTransit = false;
+                    sendStep = 4;
+                    retries = 0;
+                    done = true;
                 }
             }
         });
     }
 
-    public PebbleDictionary buildDictionary() {
-        PebbleDictionary dictionary = new PebbleDictionary();
+    public void buildDictionary() {
         TimeZone tz = TimeZone.getDefault();
         Date now = new Date();
         int offsetFromUTC = tz.getOffset(now.getTime());
-        Log.v(TAG, "buildDictionary: slopeOrdinal-" + slopeOrdinal() + " bgReading-" + bgReading() + " now-"+ (int) now.getTime()/1000 + " bgTime-" + (int) (mBgReading.timestamp / 1000) + " phoneTime-" + (int) (new Date().getTime() / 1000) + " bgDelta-" + bgDelta());
-        dictionary.addString(ICON_KEY, slopeOrdinal());
-        dictionary.addString(BG_KEY, bgReading());
-        dictionary.addUint32(RECORD_TIME_KEY, (int) (((mBgReading.timestamp + offsetFromUTC) / 1000)));
+        if(dictionary == null){
+            dictionary = new PebbleDictionary();
+        }
+        if(mBgReading != null) {
+            Log.v(TAG, "buildDictionary: slopeOrdinal-" + slopeOrdinal() + " bgReading-" + bgReading() + " now-" + (int) now.getTime() / 1000 + " bgTime-" + (int) (mBgReading.timestamp / 1000) + " phoneTime-" + (int) (new Date().getTime() / 1000) + " bgDelta-" + bgDelta());
+            no_signal = ((new Date().getTime()) - (60000 * 11) - mBgReading.timestamp >0);
+            if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_arrows", false)) {
+                dictionary.addString(ICON_KEY, "0");
+            } else {
+                dictionary.addString(ICON_KEY, slopeOrdinal());
+            }
+            if(no_signal){
+                dictionary.addString(BG_KEY, "?RF");
+                dictionary.addInt8(VIBE_KEY, (byte) 0x01);
+            } else {
+                dictionary.addString(BG_KEY, bgReading());
+                dictionary.addInt8(VIBE_KEY, (byte) 0x00);
+            }
+            dictionary.addUint32(RECORD_TIME_KEY, (int) (((mBgReading.timestamp + offsetFromUTC) / 1000)));
+            if(PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_delta", false)) {
+                if (no_signal) {
+                    dictionary.addString(BG_DELTA_KEY, "No Signal");
+                } else {
+                   dictionary.addString(BG_DELTA_KEY, bgDelta());
+                }
+            } else {
+                dictionary.addString(BG_DELTA_KEY, "");
+            }
+            String msg = PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_special_value","");
+            if(bgReading().compareTo(msg)==0) {
+                dictionary.addString(MESSAGE_KEY, PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_special_text", "BAZINGA!"));
+            }else {
+                dictionary.addString(MESSAGE_KEY, "");
+            }
+        } else {
+            Log.v(TAG, "buildDictionary: latest mBgReading is null, so sending default values");
+            dictionary.addString(ICON_KEY, slopeOrdinal());
+            dictionary.addString(BG_KEY, "?SN");
+            //dictionary.addString(BG_KEY, bgReading());
+            dictionary.addUint32(RECORD_TIME_KEY, (int) ((new Date().getTime() + offsetFromUTC / 1000)));
+            dictionary.addString(BG_DELTA_KEY, "No Sensor");
+            dictionary.addString(MESSAGE_KEY, "");
+        }
         dictionary.addUint32(PHONE_TIME_KEY, (int) ((new Date().getTime() + offsetFromUTC) / 1000));
-        dictionary.addString(BG_DELTA_KEY, bgDelta());
-        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0) {
+        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0 &&
+                PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("display_bridge_battery", true)) {
             dictionary.addString(UPLOADER_BATTERY_KEY, bridgeBatteryString());
             dictionary.addString(NAME_KEY, "Bridge");
         } else {
             dictionary.addString(UPLOADER_BATTERY_KEY, phoneBattery());
             dictionary.addString(NAME_KEY, "Phone");
         }
-        return dictionary;
+    }
+
+    public void sendTrendToPebble () {
+        //create a sparkline bitmap to send to the pebble
+        Log.i(TAG, "sendTrendToPebble called: sendStep= " + sendStep + ", messageInTransit= " + messageInTransit + ", transactionFailed= " + transactionFailed + ", sendStep= " + sendStep);
+        if(!done && (sendStep == 1 && ((!messageInTransit && !transactionOk && !transactionFailed) || (messageInTransit && !transactionOk && transactionFailed)))) {
+            if(!messageInTransit && !transactionOk && !transactionFailed) {
+                if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_display_trend",false)){
+                    sendStep = 5;
+                    transactionFailed = false;
+                    transactionOk = false;
+                    done=true;
+                    current_size = 0;
+                    buff = null;
+
+                }
+                boolean highLine = PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_high_line", false);
+                boolean lowLine = PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_low_line", false);
+                String trendPeriodString = PreferenceManager.getDefaultSharedPreferences(mContext).getString("pebble_trend_period", "3");
+                Integer trendPeriod = Integer.parseInt(trendPeriodString);
+                Log.d(TAG,"sendTrendToPebble: highLine is " + highLine + ", lowLine is "+ lowLine +",trendPeriod is "+ trendPeriod);
+                Bitmap bgTrend = new BgSparklineBuilder(mContext)
+                        .setBgGraphBuilder(bgGraphBuilder)
+                        .setStart(System.currentTimeMillis() - 60000 * 60 * trendPeriod)
+                        .setEnd(System.currentTimeMillis())
+                        .setHeightPx(84)
+                        .setWidthPx(144)
+                        .showHighLine(highLine)
+                        .showLowLine(lowLine)
+                        .setTinyDots()
+                        .setSmallDots()
+                        .build();
+                //encode the trend bitmap as a PNG
+                int depth = 16;
+                if(pebble_platform == 0) {
+                    Log.d(TAG,"sendTrendToPebble: Encoding trend as Monochrome.");
+                    depth = 2;
+                }
+                byte[] img = SimpleImageEncoder.encodeBitmapAsPNG(bgTrend, true, depth, true);
+                image_size = img.length;
+                buff = ByteBuffer.wrap(img);
+                bgTrend.recycle();
+                //Prepare the TREND_BEGIN_KEY dictionary.  We expect the length of the image to always be less than 65535 bytes.
+                if(buff != null) {
+                    if (dictionary == null) {
+                        dictionary = new PebbleDictionary();
+                    }
+                    dictionary.addInt16(TREND_BEGIN_KEY, (short) image_size);
+                    Log.d(TAG, "sendTrendToPebble: Sending TREND_BEGIN_KEY to pebble, image size is " + image_size);
+                } else {
+                    Log.d(TAG, "sendTrendToPebble: Error converting stream to ByteBuffer, buff is null.");
+                    sendStep = 4;
+                    return;
+                }
+            }
+            transactionFailed = false;
+            transactionOk=false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 1 && !done && !messageInTransit && transactionOk && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_BEGIN_KEY);
+            current_size = 0;
+            sendStep = 2;
+            transactionOk = false;
+        }
+        if(!done && ((sendStep ==  2 && !messageInTransit ) || sendStep ==3 && transactionFailed)){
+            if( !transactionFailed && !messageInTransit){
+                // send image chunks to Pebble.
+                Log.d(TAG, "sendTrendToPebble: current_size is " + current_size + ", image_size is " + image_size);
+                if(current_size < image_size) {
+                    dictionary.remove(TREND_DATA_KEY);
+                    if ((image_size <= (current_size + CHUNK_SIZE))) {
+                        chunk = new byte[image_size - current_size];
+                        Log.d(TAG, "sendTrendToPebble: sending chunk of size " + (image_size - current_size));
+                        buff.get(chunk, 0, image_size - current_size);
+                        sendStep = 3;
+                    } else {
+                        chunk = new byte[CHUNK_SIZE];
+                        Log.d(TAG, "sendTrendToPebble: sending chunk of size " + CHUNK_SIZE);
+                        buff.get(chunk, 0, CHUNK_SIZE);
+                        current_size += CHUNK_SIZE;
+                    }
+                    dictionary.addBytes(TREND_DATA_KEY, chunk);
+                }
+            }
+            Log.d(TAG, "sendTrendToPebble: Sending TREND_DATA_KEY to pebble, current_size is " + current_size);
+            transactionFailed = false;
+            transactionOk = false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 3 && !done && !messageInTransit && transactionOk && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_DATA_KEY);
+            sendStep = 4;
+            transactionOk = false;
+            buff = null;
+            stream = null;
+        }
+        if(!done && (sendStep == 4  && ((!messageInTransit && !transactionOk && !transactionFailed) || (messageInTransit && !transactionOk && transactionFailed)))) {
+            if(!transactionFailed) {
+                // prepare the TREND_END_KEY dictionary and send it.
+                dictionary.addUint8(TREND_END_KEY, (byte) 0);
+                Log.d(TAG, "sendTrendToPebble: Sending TREND_END_KEY to pebble.");
+            }
+            transactionFailed = false;
+            transactionOk = false;
+            messageInTransit = true;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
+        }
+        if(sendStep == 4 && !done && transactionOk && !messageInTransit && !transactionFailed){
+            Log.i(TAG, "sendTrendToPebble: sendStep "+ sendStep + " complete.");
+            dictionary.remove(TREND_END_KEY);
+            sendStep = 5;
+            transactionFailed = false;
+            transactionOk = false;
+            done=true;
+            current_size = 0;
+            buff = null;
+        }
     }
 
     public String bridgeBatteryString() {
@@ -124,18 +387,73 @@ public String bridgeBatteryString() {
     }
 
     public void sendData(){
-        mBgReading = BgReading.last();
-        if(mBgReading != null) {
-            sendDownload(buildDictionary());
-        }
+         if (PebbleKit.isWatchConnected(mContext)) {
+             if(sendStep == 5) {
+                 sendStep = 0;
+                 done=false;
+                 dictionary.remove(ICON_KEY);
+                 dictionary.remove(BG_KEY);
+                 dictionary.remove(NAME_KEY);
+                 dictionary.remove(BG_DELTA_KEY);
+                 dictionary.remove(PHONE_TIME_KEY);
+                 dictionary.remove(RECORD_TIME_KEY);
+                 dictionary.remove(UPLOADER_BATTERY_KEY);
+             }
+             Log.i(TAG, "sendData: messageInTransit= " + messageInTransit + ", transactionFailed= " + transactionFailed + ", sendStep= " + sendStep);
+             if (sendStep == 0 && !messageInTransit && !transactionOk && !transactionFailed) {
+                 mBgReading = BgReading.last();
+                 sendingData = true;
+                 buildDictionary();
+                 sendDownload();
+             }
+             if (sendStep == 0 && !messageInTransit && transactionOk && !transactionFailed) {
+                 Log.i(TAG, "sendData: sendStep 0 complete, clearing dictionary");
+                 dictionary.remove(ICON_KEY);
+                 dictionary.remove(BG_KEY);
+                 dictionary.remove(NAME_KEY);
+                 dictionary.remove(BG_DELTA_KEY);
+                 dictionary.remove(PHONE_TIME_KEY);
+                 dictionary.remove(RECORD_TIME_KEY);
+                 dictionary.remove(UPLOADER_BATTERY_KEY);
+                 transactionOk = false;
+                 sendStep = 1;
+             }
+             if (sendStep > 0 && sendStep < 5) {
+                 if(!PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_display_trend",false)){
+                     sendStep = 5;
+                 } else {
+                     sendTrendToPebble();
+                 }
+             }
+             if(sendStep == 5) {
+                 sendStep = 5;
+                 Log.i(TAG, "sendData: finished sending.  sendStep = " +sendStep);
+                 done = true;
+                 transactionFailed = false;
+                 transactionOk = false;
+                 messageInTransit = false;
+                 sendingData = false;
+             }
+         }
     }
 
     public String bgReading() {
+        Sensor sensor = new Sensor();
+        if(PreferenceManager.getDefaultSharedPreferences(mContext).getString("dex_collection_method", "DexbridgeWixel").compareTo("DexbridgeWixel")==0 ) {
+            Log.d(TAG, "bgReading: found xBridge wixel, sensor.isActive=" +sensor.isActive()+", sensor.stopped_at="+sensor.currentSensor().stopped_at+", sensor.started_at="+sensor.currentSensor().started_at);
+            if (!(sensor.isActive())) {
+                Log.d(TAG, "bgReading: No active Sensor");
+                return "?SN";
+            }
+            if ((sensor.currentSensor().started_at + 60000 * 60 * 2 >= System.currentTimeMillis())) {
+                return "?CD";
+            }
+        }
         return bgGraphBuilder.unitized_string(mBgReading.calculated_value);
     }
 
     public String bgDelta() {
-        return bgGraphBuilder.unitizedDeltaString(false, false);
+        return new BgGraphBuilder(mContext).unitizedDeltaString(PreferenceManager.getDefaultSharedPreferences(mContext).getBoolean("pebble_show_delta_units", false), true);
     }
 
     public String phoneBattery() {
@@ -146,12 +464,14 @@ public String bgUnit() {
         return bgGraphBuilder.unit();
     }
 
-    public void sendDownload(PebbleDictionary dictionary) {
-        if (PebbleKit.isWatchConnected(mContext)) {
-            if (dictionary != null && mContext != null) {
-                Log.d(TAG, "sendDownload: Sending data to pebble");
-                PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
-            }
+    //public void sendDownload(PebbleDictionary dictionary) {
+    public void sendDownload() {
+        if (dictionary != null && mContext != null) {
+            Log.d(TAG, "sendDownload: Sending data to pebble");
+            messageInTransit = true;
+            transactionFailed = false;
+            transactionOk = false;
+            PebbleKit.sendDataToPebble(mContext, PEBBLEAPP_UUID, dictionary);
         }
     }
 
@@ -164,6 +484,7 @@ public int getBatteryLevel() {
     }
 
     public String slopeOrdinal(){
+        if(mBgReading == null) return "0";
         String arrow_name = mBgReading.slopeName();
         if(arrow_name.compareTo("DoubleDown")==0) return "7";
         if(arrow_name.compareTo("SingleDown")==0) return "6";
@@ -175,5 +496,38 @@ public String slopeOrdinal(){
         if(arrow_name.compareTo("9")==0) return arrow_name;
         return "0";
     }
+
+    public static void sideloadInstall(Context ctx, String assetFilename) {
+        try {
+            // Read .pbw from assets/
+            Intent intent = new Intent(Intent.ACTION_VIEW);
+            File file = new File(ctx.getExternalFilesDir(null), assetFilename);
+            InputStream is = ctx.getResources().getAssets().open(assetFilename);
+            OutputStream os = new FileOutputStream(file);
+            byte[] pbw = new byte[is.available()];
+            is.read(pbw);
+            os.write(pbw);
+            is.close();
+            os.close();
+
+            // Install via Pebble Android app
+            intent.setDataAndType(Uri.fromFile(file), "application/pbw");
+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+            ctx.startActivity(intent);
+        } catch (IOException e) {
+            Toast.makeText(ctx, "App install failed: " + e.getLocalizedMessage(), Toast.LENGTH_LONG).show();
+        }
+    }
+    /*public void setResponseTImer(){
+        long wakeTime = new Date().getTime() + 3000;
+        PendingIntent serviceIntent = PendingIntent.getService(this, 0, new Intent(this, this.getClass()), 0);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+            alarm.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+            alarm.setExact(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+        } else
+            alarm.set(AlarmManager.RTC_WAKEUP, wakeTime, serviceIntent);
+
+    }*/
 }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java
new file mode 100644
index 0000000..b94a85b
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SimpleImageEncoder.java
@@ -0,0 +1,260 @@
+package com.eveningoutpost.dexdrip.UtilityModels;
+
+import android.graphics.Bitmap;
+import android.graphics.Color;
+import android.util.Log;
+
+import java.io.ByteArrayOutputStream;
+import java.util.TreeMap;
+
+import ar.com.hjg.pngj.ImageInfo;
+import ar.com.hjg.pngj.ImageLineInt;
+import ar.com.hjg.pngj.PngWriter;
+import ar.com.hjg.pngj.chunks.PngChunkPLTE;
+import ar.com.hjg.pngj.chunks.PngChunkTRNS;
+
+/**
+ * Simple PNG encoder for Pebble and Pebble Time
+ *
+ * TODO: alpha support is untested
+ * TODO: better handling for black and white
+ * TODO: threshold detection
+ */
+public class SimpleImageEncoder {
+    private final static String TAG = SimpleImageEncoder.class.getSimpleName();
+    int [] palette = getDefaultPalette();
+
+    // Pebble 64-color palette
+    public static int [] getDefaultPalette () {
+        int [] palette = new int[64];
+
+        for (int i = 0; i < 64; i++) {
+            palette[i] = Color.rgb(
+                    ((i >> 4) & 0x3) * 85,
+                    ((i >> 2) & 0x3) * 85,
+                    ((i >> 0) & 0x3) * 85
+            );
+        }
+
+        return palette;
+    }
+
+    public SimpleImageEncoder() {
+    }
+
+    //public void setPalette (int [] newPalette) { palette = newPalette; }
+
+    public int [] getPalette () {
+        return palette;
+    }
+
+    private static int clamp (double value) {
+        if (value < 0) return 0;
+        else if (value > 255) return 255;
+        else return (int) Math.round(value);
+    }
+
+    // TODO better handling of black and white
+    public void optimizePalette (int [] data, int maxColors, boolean allowTransparent) {
+        int [] counts = new int[palette.length];
+        boolean hasTransparent = false;
+
+        for (int i = 0; i < data.length; i++) {
+            int p = data[i];
+
+            if (Color.alpha(p) == 0 && allowTransparent) {
+                hasTransparent = true;
+            }
+
+            int index = ((Color.red(p) / 85) << 4)
+                    | ((Color.green(p) / 85) << 2)
+                    | ((Color.blue(p) / 85) << 0);
+            counts[index]++;
+        }
+        // Quick and dirty histogram
+        TreeMap<Integer, Integer> map = new TreeMap<Integer, Integer>();
+        for (int i = 0; i < counts.length; i++) {
+            map.put(counts[i], palette[i]);
+        }
+        Log.d(TAG, "optimizePalette: map.size() is " + map.size() + ", map.descendingMap().size() is" + map.descendingMap().size());
+        int colorCount = 0;
+        int [] colors = new int[maxColors];
+
+        if (hasTransparent) {
+            colors[colorCount] = Color.argb(0, 255, 255, 255);
+            colorCount++;
+        }
+
+        // Pick out the top colors
+        for (int color : map.descendingMap().values()) {
+            colors[colorCount] = color;
+            colorCount++;
+            Log.d(TAG, "optimizePalette: palette index " + (map.size()-colorCount+1) + " of " + (map.size()-1) +" has r:" + Color.red(color) + ", g:" + Color.green(color) + ", b:" + Color.blue(color));
+
+            if (colorCount >= maxColors) break;
+        }
+
+        palette = colors;
+    }
+
+
+    public static double getColorDistance (int color, int pColor) {
+        float rd = Color.red(pColor) - Color.red(color);
+        float gd = Color.green(pColor) - Color.green(color);
+        float bd = Color.blue(pColor) - Color.blue(color);
+
+        return Math.sqrt(0.2126*rd*rd + 0.7152*gd*gd + 0.0722*bd*bd);
+        //return Math.sqrt(0.299*rd*rd + 0.587*gd*gd + 0.144*bd*bd);
+        //return Math.sqrt(rd*rd + gd*gd + bd*bd);
+    }
+
+    public byte getNearestColorIndex (int color) {
+        int bestIndex = 0;
+        double bestDistance = Double.MAX_VALUE;
+
+        // If the palette contains a transparent pixel in the first slot,
+        // use this for fully transparent pixels
+        if (Color.alpha(color) == 0 && Color.alpha(palette[0]) == 0) {
+            return 0;
+        }
+
+        // This could be optimized
+        for (int i = 0; i < palette.length; i++) {
+            int pColor = palette[i];
+
+            if (color == pColor) return (byte) i;
+
+            double distance = getColorDistance(pColor, color);
+            //double distance = getColorDistance(color, pColor);
+            if (distance <= bestDistance) {
+                bestIndex = i;
+                bestDistance = distance;
+            }
+        }
+        //Log.d(TAG, "getNearestColorIndex: selecting index " + bestIndex + " of " + palette.length + ", a distance of " + bestDistance +" for r:" + Color.red(color) + ", g:" + Color.green(color) + ", b:" + Color.blue(color));
+
+        return (byte) bestIndex;
+    }
+
+    // Dither image down to the current palette
+    public void quantize (int [] pixels, int width) {
+        final float[] errors = new float[] { 7f/16f, 3f/16f, 5f/16f, 1f/16f };
+        final int[] offsets = new int[] { 1, width - 1, width, width + 1};
+
+        for (int i = 0; i < pixels.length; i++) {
+            int color = pixels[i];
+            int nearestColorIndex = this.getNearestColorIndex(color);
+            int nearestColor = this.palette[nearestColorIndex];
+
+            int rd = Color.red(color) - Color.red(nearestColor);
+            int gd = Color.green(color) - Color.green(nearestColor);
+            int bd = Color.blue(color) - Color.blue(nearestColor);
+
+            pixels[i] = nearestColor;
+
+            // Propagate errors
+            for (int j = 0; j < errors.length; j++) {
+                int offset = offsets[j];
+                if (i + offset >= pixels.length) break;
+                int neighborPixel = pixels[i + offset];
+
+                int red = clamp(Color.red(neighborPixel) + errors[j] * rd);
+                int green = clamp(Color.green(neighborPixel) + errors[j] * gd);
+                int blue = clamp(Color.blue(neighborPixel) + errors[j] * bd);
+
+                pixels[i + offset] = Color.rgb(red, green, blue);
+            }
+        }
+    }
+
+    /**
+     * Encode an Android bitmap as an indexed PNG using Pebble Time colors.
+     * Uses 16 colors for the best balance of quality and size.
+     *
+     * param: bitmap
+     * return: array of bytes in PNG format
+     */
+/*    public static byte [] encodeBitmapAsPNG (Bitmap bitmap, boolean color) {
+        return encodeBitmapAsPNG(bitmap, color, color ? 16 : 2, false);
+    }
+*/
+    /**
+     * Encode an Android bitmap as an indexed PNG using Pebble Time colors.
+     * param: bitmap
+     * param: color Whether the image is color (true) or black-and-white
+     * param: numColors  Should be 2, 4, 16, or 64. Using 16 colors is
+     *                   typically the best tradeoff. Must be 2 if B&W.
+     * param: allowTransparent Allow fully transparent pixels
+     * return: Array of bytes in PNG format
+     */
+    public static byte [] encodeBitmapAsPNG (Bitmap bitmap, boolean color, int numColors, boolean allowTransparent) {
+        int bits;
+
+        if (!color && numColors != 2) throw new IllegalArgumentException("must have 2 colors for black and white");
+
+        if (numColors < 2) throw new IllegalArgumentException("minimum 2 colors");
+        else if (numColors == 2) bits = 1;
+        else if (numColors <= 4) bits = 2;
+        else if (numColors <= 16) bits = 4;
+        else if (numColors <= 64) bits = 8;
+        else throw new IllegalArgumentException("maximum 64 colors");
+
+        SimpleImageEncoder encoder = new SimpleImageEncoder();
+        int [] pixels = new int[bitmap.getWidth() * bitmap.getHeight()];
+
+        bitmap.getPixels(pixels, 0, bitmap.getWidth(), 0, 0, bitmap.getWidth(), bitmap.getHeight());
+        encoder.optimizePalette(pixels, numColors, allowTransparent);
+
+        return encoder.encodeIndexedPNG(pixels, bitmap.getWidth(), bitmap.getHeight(), color, bits);
+    }
+
+    public byte [] encodeIndexedPNG (int [] pixels, int width, int height, boolean color, int bits) {
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+
+        int [] palette = getPalette();
+
+        boolean alpha = Color.alpha(palette[0]) == 0;
+        boolean grayscale = !color;
+        //Log.d(TAG, "encodeIndexedPNG: color = "+color +", alpha ="+alpha+", grayscale = "+grayscale);
+
+        //ImageInfo imageInfo = new ImageInfo(width, height, bits, alpha, grayscale, color);
+        ImageInfo imageInfo = new ImageInfo(width, height, bits, false, grayscale, color);
+        PngWriter writer = new PngWriter(bos, imageInfo);
+        writer.getPixelsWriter().setDeflaterCompLevel(9);
+
+        if (color) {
+            PngChunkPLTE paletteChunk = writer.getMetadata().createPLTEChunk();
+            paletteChunk.setNentries(palette.length);
+
+            for (int i = 0; i < palette.length; i++) {
+                int c = palette[i];
+                paletteChunk.setEntry(i, Color.red(c), Color.green(c), Color.blue(c));
+            }
+        }
+
+        if (alpha) {
+            PngChunkTRNS trnsChunk = writer.getMetadata().createTRNSChunk();
+            if (color) {
+                trnsChunk.setIndexEntryAsTransparent(0);
+            } else {
+                trnsChunk.setGray(1);
+            }
+        }
+        else {
+            quantize(pixels, imageInfo.cols);
+        }
+        ImageLineInt line = new ImageLineInt(imageInfo);
+        for (int y = 0; y < imageInfo.rows; y++) {
+            int [] lineData = line.getScanline();
+            for (int x = 0; x < imageInfo.cols; x++) {
+                int pixel = pixels[y * imageInfo.cols + x];
+
+                lineData[x] = getNearestColorIndex(pixel);
+            }
+            writer.writeRow(line);
+        }
+
+        writer.end();
+        return bos.toByteArray();
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
index 72ed615..33438ff 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/Preferences.java
@@ -22,6 +22,7 @@
 import android.preference.PreferenceManager;
 import android.preference.PreferenceScreen;
 import android.preference.RingtonePreference;
+import android.preference.SwitchPreference;
 import android.text.InputFilter;
 import android.text.TextUtils;
 import android.view.KeyEvent;
@@ -30,6 +31,7 @@
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
+
 import com.eveningoutpost.dexdrip.Services.MissedReadingService;
 import com.eveningoutpost.dexdrip.Services.XDripViewer;
 import com.eveningoutpost.dexdrip.R;
@@ -37,6 +39,9 @@
 import com.eveningoutpost.dexdrip.UtilityModels.PebbleSync;
 import com.eveningoutpost.dexdrip.WidgetUpdateService;
 import com.eveningoutpost.dexdrip.xDripWidget;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+import com.eveningoutpost.dexdrip.WidgetUpdateService;
+import com.eveningoutpost.dexdrip.xDripWidget;
 import com.google.zxing.integration.android.IntentIntegrator;
 import com.google.zxing.integration.android.IntentResult;
 import com.nightscout.core.barcode.NSBarcodeConfig;
@@ -44,6 +49,7 @@
 import net.tribe7.common.base.Joiner;
 
 import java.net.URI;
+import java.text.DecimalFormat;
 import java.util.List;
 
 /**
@@ -247,11 +253,16 @@ public void onCreate(Bundle savedInstanceState) {
             super.onCreate(savedInstanceState);
             final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(getActivity());
 
+            DecimalFormat df;
             addPreferencesFromResource(R.xml.pref_license);
             addPreferencesFromResource(R.xml.pref_general);
-            bindPreferenceSummaryToValueAndEnsureNumeric(findPreference("highValue"));
-            bindPreferenceSummaryToValueAndEnsureNumeric(findPreference("lowValue"));
-            bindPreferenceSummaryToValue(findPreference("units"));
+            final EditTextPreference highValue = (EditTextPreference)findPreference("highValue");
+            bindPreferenceSummaryToValueAndEnsureNumeric(highValue);
+            final EditTextPreference lowValue = (EditTextPreference)findPreference("lowValue");
+            bindPreferenceSummaryToValueAndEnsureNumeric(lowValue);
+            final ListPreference units = (ListPreference) findPreference("units");
+
+            bindPreferenceSummaryToValue(units);
 
             addPreferencesFromResource(R.xml.pref_notifications);
             bindPreferenceSummaryToValue(findPreference("bg_alert_profile"));
@@ -276,6 +287,7 @@ public void onCreate(Bundle savedInstanceState) {
             bindPreferenceSummaryToValue(findPreference("cloud_storage_api_base"));
 
             addPreferencesFromResource(R.xml.pref_advanced_settings);
+            //addPreferencesFromResource(R.xml.pref_pebble_settings);
             addPreferencesFromResource(R.xml.pref_community_help);
 
             bindTTSListener();
@@ -312,7 +324,20 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
 
             final Preference scanShare = findPreference("scan_share2_barcode");
             final EditTextPreference transmitterId = (EditTextPreference) findPreference("dex_txid");
-            final Preference pebbleSync = findPreference("broadcast_to_pebble");
+            final SwitchPreference pebbleSync = (SwitchPreference) findPreference("broadcast_to_pebble");
+            final Preference pebbleTrend = findPreference("pebble_display_trend");
+            final Preference pebbleHighLine = findPreference("pebble_high_line");
+            final Preference pebbleLowLine = findPreference("pebble_low_line");
+            final Preference pebbleTrendPeriod = findPreference("pebble_trend_period");
+            final Preference pebbleDelta = findPreference("pebble_show_delta");
+            final Preference pebbleDeltaUnits = findPreference("pebble_show_delta_units");
+            final Preference pebbleShowArrows = findPreference("pebble_show_arrows");
+            final EditTextPreference pebbleSpecialValue = (EditTextPreference) findPreference("pebble_special_value");
+            bindPreferenceSummaryToValueAndEnsureNumeric(pebbleSpecialValue);
+            final Preference pebbleSpecialText = findPreference("pebble_special_text");
+            bindPreferenceSummaryToValue(pebbleSpecialText);
+            final SwitchPreference broadcastLocally = (SwitchPreference) findPreference("broadcast_data_through_intents");
+            final PreferenceCategory watchCategory = (PreferenceCategory) findPreference("watch_integration");
             final PreferenceCategory collectionCategory = (PreferenceCategory) findPreference("collection_category");
             final PreferenceCategory otherCategory = (PreferenceCategory) findPreference("other_category");
             final PreferenceScreen calibrationAlertsScreen = (PreferenceScreen) findPreference("calibration_alerts_screen");
@@ -346,7 +371,6 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
                 prefs.edit().putBoolean("calibration_notifications", false).apply();
             }
 
-
             if ((prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiWixel") != 0)
                     && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiBlueToothWixel") != 0)
                     && (prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("WifiDexbridgeWixel") != 0)) {
@@ -367,19 +391,162 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
             if(prefs.getString("dex_collection_method", "BluetoothWixel").compareTo("DexcomG5") == 0) {
                 collectionCategory.addPreference(transmitterId);
             }
-            pebbleSync.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+
+            if(!prefs.getBoolean(pebbleSync.getKey(),false)){
+                //watchCategory.removeAll();
+                watchCategory.removePreference(pebbleTrend);
+                watchCategory.removePreference(pebbleHighLine);
+                watchCategory.removePreference(pebbleLowLine);
+                watchCategory.removePreference(pebbleTrendPeriod);
+                watchCategory.removePreference(pebbleSpecialValue);
+                watchCategory.removePreference(pebbleSpecialText);
+                watchCategory.removePreference(pebbleDelta);
+                watchCategory.removePreference(pebbleDeltaUnits);
+                watchCategory.removePreference(pebbleShowArrows);
+            }
+           if(prefs.getString("units", "mgdl").compareTo("mmol")!=0) {
+               df = new DecimalFormat("#.#");
+               df.setMaximumFractionDigits(0);
+               pebbleSpecialValue.setDefaultValue("99");
+               if(pebbleSpecialValue.getText().compareTo("5.5")==0) {
+                   pebbleSpecialValue.setText(df.format(Double.valueOf(pebbleSpecialValue.getText()) * Constants.MMOLL_TO_MGDL));
+               }
+           }else{
+               df = new DecimalFormat("#.#");
+               df.setMaximumFractionDigits(1);
+               pebbleSpecialValue.setDefaultValue("5.5");
+               if(pebbleSpecialValue.getText().compareTo("99") ==0) {
+                   pebbleSpecialValue.setText(df.format(Double.valueOf(pebbleSpecialValue.getText()) / Constants.MMOLL_TO_MGDL));
+               }
+           }
+           units.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue){
+                   //Context context = preference.getContext();
+                   DecimalFormat df = new DecimalFormat("#.#");
+                   Double tmp = 0.0;
+                   Double highVal = 0.0;
+                   Double lowVal = 0.0;
+                   preference.setSummary(newValue.toString());
+                   if(newValue.toString().compareTo("mgdl")==0) {
+                       df.setMaximumFractionDigits(0);
+                       pebbleSpecialValue.setDefaultValue("99");
+                       tmp=Double.valueOf(pebbleSpecialValue.getText());
+                       tmp= tmp*Constants.MMOLL_TO_MGDL;
+                       highVal = Double.valueOf(highValue.getText());
+                       highVal = highVal*Constants.MMOLL_TO_MGDL;
+                       lowVal = Double.valueOf(lowValue.getText());
+                       lowVal = lowVal*Constants.MMOLL_TO_MGDL;
+                   } else {
+                       df.setMaximumFractionDigits(1);
+                       pebbleSpecialValue.setDefaultValue("5.5");
+                       tmp=Double.valueOf(pebbleSpecialValue.getText());
+                       tmp= tmp/Constants.MMOLL_TO_MGDL;
+                       highVal = Double.valueOf(highValue.getText());
+                       highVal = highVal/Constants.MMOLL_TO_MGDL;
+                       lowVal = Double.valueOf(lowValue.getText());
+                       lowVal = lowVal/Constants.MMOLL_TO_MGDL;
+                   }
+                   pebbleSpecialValue.setText(df.format(tmp));
+                   pebbleSpecialValue.setSummary(pebbleSpecialValue.getText());
+                   highValue.setText(df.format(highVal));
+                   highValue.setSummary(highValue.getText());
+                   lowValue.setText(df.format(lowVal));
+                   lowValue.setSummary(lowValue.getText());
+                   return true;
+               }
+           });
+           pebbleSync.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
                 @Override
                 public boolean onPreferenceChange(Preference preference, Object newValue) {
                     Context context = preference.getContext();
                     if ((Boolean) newValue) {
                         context.startService(new Intent(context, PebbleSync.class));
+                        watchCategory.addPreference(pebbleTrend);
+                        watchCategory.addPreference(pebbleHighLine);
+                        watchCategory.addPreference(pebbleLowLine);
+                        watchCategory.addPreference(pebbleDelta);
+                        watchCategory.addPreference(pebbleDeltaUnits);
+                        watchCategory.addPreference(pebbleShowArrows);
+                        watchCategory.addPreference(pebbleTrendPeriod);
+                        watchCategory.addPreference(pebbleSpecialValue);
+                        watchCategory.addPreference(pebbleSpecialText);
                     } else {
                         context.stopService(new Intent(context, PebbleSync.class));
+                        watchCategory.removePreference(pebbleTrend);
+                        watchCategory.removePreference(pebbleHighLine);
+                        watchCategory.removePreference(pebbleLowLine);
+                        watchCategory.removePreference(pebbleDelta);
+                        watchCategory.removePreference(pebbleDeltaUnits);
+                        watchCategory.removePreference(pebbleShowArrows);
+                        watchCategory.removePreference(pebbleTrendPeriod);
+                        watchCategory.removePreference(pebbleSpecialValue);
+                        watchCategory.removePreference(pebbleSpecialText);
                     }
                     return true;
                 }
             });
 
+            //bindWidgetUpdater();
+
+            pebbleTrend.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleHighLine.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue){
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+               }
+           });
+
+           pebbleLowLine.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+               @Override
+               public boolean onPreferenceChange(Preference preference, Object newValue) {
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+               }
+           });
+
+            pebbleTrendPeriod.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                   Context context = preference.getContext();
+                   context.startService(new Intent(context, PebbleSync.class));
+                   return true;
+                }
+            });
+            pebbleDelta.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleDeltaUnits.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
+            pebbleShowArrows.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener() {
+                @Override
+                public boolean onPreferenceChange(Preference preference, Object newValue){
+                    Context context = preference.getContext();
+                    context.startService(new Intent(context, PebbleSync.class));
+                    return true;
+                }
+            });
             bindWidgetUpdater();
 
             bindPreferenceSummaryToValue(collectionMethod);
@@ -599,6 +766,7 @@ public boolean onPreferenceChange(Preference preference, Object newValue) {
         
         private void bindBgMissedAlertsListener(){
           findPreference("other_alerts_snooze").setOnPreferenceChangeListener(sBgMissedAlertsHandler);
+          findPreference("other_alerts_snooze").setOnPreferenceChangeListener(sBgMissedAlertsHandler);
         }
 
         private static class WidgetListener implements Preference.OnPreferenceChangeListener {
diff --git a/app/src/main/res/values/arrays.xml b/app/src/main/res/values/arrays.xml
index 14bcbc8..9050e34 100644
--- a/app/src/main/res/values/arrays.xml
+++ b/app/src/main/res/values/arrays.xml
@@ -22,7 +22,18 @@
         <item>LimiTTer</item>
     </string-array>
 
-
+    <string-array name="PebbleTrendPeriods">
+        <item>1hr</item>
+        <item>2hr</item>
+        <item>3hr</item>
+        <item>4hr</item>
+    </string-array>
+    <string-array name="PebbleTrendPeriodValues">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+    </string-array>
 
 
     <string-array name="bgUnitEntries">
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index ed94fbe..b2ff87a 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -115,6 +115,13 @@
     <string name="title_activity_share_test">ShareTest</string>
     <string name="title_activity_system_status">SystemStatus</string>
 
+    <!-- pebble settings -->
+    <string name="pref_pebble_display_trend">Display Trend</string>
+    <string name="pref_summary_display_trend">Show the BG trend on the xDrip Pebble watch face.</string>
+    <string name="pref_pebble_display_high_line">Display High Line</string>
+    <string name="pref_pebble_display_low_line">Display Low Line</string>
+
+
     <string name="toast_crash">Something went wrong :( a report has been sent to help fix the issue.</string>
     <string name="appwidget_text">EXAMPLE</string>
     <string name="add_widget">Add widget</string>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 2d7bef7..fee6c68 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -15,8 +15,61 @@
             android:summary="If you have a pebble watch you can send bg data straight to it"
             android:defaultValue="false">
         </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_trend"
+            android:key="pebble_display_trend"
+            android:summary="@string/pref_summary_display_trend"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_high_line"
+            android:key="pebble_high_line"
+            android:summary="Displays the High Line"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="@string/pref_pebble_display_low_line"
+            android:key="pebble_low_line"
+            android:summary="Displays the Low line"
+            android:defaultValue="false" >
+        </SwitchPreference>
+        <ListPreference
+            android:title="Trend Time Period"
+            android:key="pebble_trend_period"
+            android:summary="Set the trend period to display"
+            android:entries="@array/PebbleTrendPeriods"
+            android:entryValues="@array/PebbleTrendPeriodValues"
+            android:defaultValue="3">
+        </ListPreference>
+        <SwitchPreference
+            android:title="Display Delta"
+            android:key="pebble_show_delta"
+            android:summary="Displays the Delta value"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="Display Delta Units"
+            android:key="pebble_show_delta_units"
+            android:summary="Displays the Delta units"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <SwitchPreference
+            android:title="Display Slope Arrows"
+            android:key="pebble_show_arrows"
+            android:summary="Displays the Slope Arrows"
+            android:defaultValue="true" >
+        </SwitchPreference>
+        <EditTextPreference
+            android:key="pebble_special_value"
+            android:title="Special Value"
+            android:summary="Special BGL value to display the message below"
+            android:defaultValue="99"/>
+        <EditTextPreference
+            android:key="pebble_special_text"
+            android:title="Text to display"
+            android:summary="Message to display when BGL hits the special value above"
+            android:defaultValue="BAZINGA!" />
     </PreferenceCategory>
-
     <PreferenceCategory
         android:key="other_category"
         android:title="Other Settings">
diff --git a/app/src/main/res/xml/pref_data_source.xml b/app/src/main/res/xml/pref_data_source.xml
index 453a173..0e499c1 100644
--- a/app/src/main/res/xml/pref_data_source.xml
+++ b/app/src/main/res/xml/pref_data_source.xml
@@ -17,6 +17,16 @@
             android:key="share_key"
             android:shouldDisableView="true"
             android:defaultValue="SM00000000"/>
+        <EditTextPreference
+            android:key="dex_txid"
+            android:title="Dexcom Transmitter ID"
+            android:summary="ID of your Dexcom Transmitter, eg 12AB3"
+            android:defaultValue="00000" />
+        <CheckBoxPreference
+            android:key="display_bridge_battery"
+            android:title="Display Bridge Battery"
+            android:summary="Choose to display the bridge battery level"
+            android:defaultValue="true" />
         <PreferenceScreen
             android:title="@string/scan_share2_barcode"
             android:key="scan_share2_barcode"

diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
index f3882c3..7947794 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/AddCalibration.java
@@ -10,6 +10,7 @@
 import android.widget.EditText;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
index a183a06..718600a 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationCheckInActivity.java
@@ -16,7 +16,7 @@
 import com.eveningoutpost.dexdrip.Home;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.SyncingService;
 import com.eveningoutpost.dexdrip.R;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
 public class CalibrationCheckInActivity extends ActivityWithMenu {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
index 091aa06..467d850 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/CalibrationOverride.java
@@ -14,6 +14,7 @@
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java b/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
index 2be34b3..b9321e8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/DoubleCalibrationActivity.java
@@ -9,6 +9,7 @@
 import android.widget.EditText;
 
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 1e9a1cb..af83369 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -34,6 +34,7 @@
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Models.UserError;
 import com.eveningoutpost.dexdrip.Services.WixelReader;
 import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index 6b2c1ca..03da19e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -13,7 +13,7 @@
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.EGVRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.SensorRecord;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.ShareModels.ShareUploadableBg;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
index da49926..bf3301d 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Calibration.java
@@ -13,7 +13,7 @@
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalRecord;
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.records.CalSubrecord;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.CalibrationSendQueue;
 import com.eveningoutpost.dexdrip.UtilityModels.Constants;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Sensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Sensor.java
new file mode 100644
index 0000000..1c0c3fe
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Sensor.java
@@ -0,0 +1,117 @@
+package com.eveningoutpost.dexdrip.Models;
+
+import android.provider.BaseColumns;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.activeandroid.query.Select;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import com.eveningoutpost.dexdrip.UtilityModels.SensorSendQueue;
+
+import java.util.Date;
+import java.util.UUID;
+
+/**
+ * Created by stephenblack on 10/29/14.
+ */
+
+@Table(name = "Sensors", id = BaseColumns._ID)
+public class Sensor extends Model {
+
+//    @Expose
+    @Column(name = "started_at", index = true)
+    public long started_at;
+
+//    @Expose
+    @Column(name = "stopped_at")
+    public long stopped_at;
+
+//    @Expose
+    //latest minimal battery level
+    @Column(name = "latest_battery_level")
+    public int latest_battery_level;
+
+//    @Expose
+    @Column(name = "uuid", index = true)
+    public String uuid;
+
+//  @Expose
+  @Column(name = "sensor_location")
+  public String sensor_location;
+
+    public static Sensor create(long started_at) {
+        Sensor sensor = new Sensor();
+        sensor.started_at = started_at;
+        sensor.uuid = UUID.randomUUID().toString();
+
+        sensor.save();
+        SensorSendQueue.addToQueue(sensor);
+        Log.d("SENSOR MODEL:", sensor.toString());
+        return sensor;
+    }
+    
+    public static void stopSensor() {
+        Sensor sensor = currentSensor();
+        if(sensor == null) {
+            return;
+        }
+        sensor.stopped_at = new Date().getTime();
+        Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
+        sensor.save();
+        SensorSendQueue.addToQueue(sensor);
+        
+    }
+
+    public static Sensor currentSensor() {
+        Sensor sensor = new Select()
+                .from(Sensor.class)
+                .where("started_at != 0")
+                .where("stopped_at = 0")
+                .orderBy("_ID desc")
+                .limit(1)
+                .executeSingle();
+        return sensor;
+    }
+
+    public static boolean isActive() {
+        Sensor sensor = new Select()
+                .from(Sensor.class)
+                .where("started_at != 0")
+                .where("stopped_at = 0")
+                .orderBy("_ID desc")
+                .limit(1)
+                .executeSingle();
+        if(sensor == null) {
+            return false;
+        } else {
+            return true;
+        }
+    }
+
+    public static void updateBatteryLevel(Sensor sensor, int sensorBatteryLevel) {
+        int startBatteryLevel = sensor.latest_battery_level;
+        if(sensor.latest_battery_level == 0) {
+            sensor.latest_battery_level = sensorBatteryLevel;
+        } else {
+            sensor.latest_battery_level = Math.min(sensor.latest_battery_level, sensorBatteryLevel);
+        }
+        if(startBatteryLevel == sensor.latest_battery_level) {
+            // no need to update anything if nothing has changed.
+            return;
+        }
+        sensor.save();
+        SensorSendQueue.addToQueue(sensor);
+    }
+    
+    public static void updateSensorLocation(String sensor_location) {
+        Sensor sensor = currentSensor();
+        if (sensor == null) {
+            Log.e("SENSOR MODEL:", "updateSensorLocation called but sensor is null");
+            return;
+        }
+        sensor.sensor_location = sensor_location;
+        sensor.save();
+    }
+}
+
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index 8733f44..acdbc60 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -7,6 +7,7 @@
 
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Tables.BgReadingTable;
 import com.eveningoutpost.dexdrip.Tables.CalibrationDataTable;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NewSensorLocation.java b/app/src/main/java/com/eveningoutpost/dexdrip/NewSensorLocation.java
index 725dfcd..6cff5ee 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NewSensorLocation.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NewSensorLocation.java
@@ -21,6 +21,7 @@
 import android.widget.TimePicker;
 import android.widget.Toast;
 
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
deleted file mode 100644
index d6b2f7c..0000000
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Sensor.java
+++ /dev/null
@@ -1,89 +0,0 @@
-package com.eveningoutpost.dexdrip;
-
-import android.provider.BaseColumns;
-
-import com.activeandroid.Model;
-import com.activeandroid.annotation.Column;
-import com.activeandroid.annotation.Table;
-import com.activeandroid.query.Select;
-import com.eveningoutpost.dexdrip.Models.UserError.Log;
-import com.eveningoutpost.dexdrip.UtilityModels.SensorSendQueue;
-
-import java.util.UUID;
-
-/**
- * Created by stephenblack on 10/29/14.
- */
-
-@Table(name = "Sensors", id = BaseColumns._ID)
-public class Sensor extends Model {
-
-//    @Expose
-    @Column(name = "started_at", index = true)
-    public long started_at;
-
-//    @Expose
-    @Column(name = "stopped_at")
-    public long stopped_at;
-
-//    @Expose
-    //latest minimal battery level
-    @Column(name = "latest_battery_level")
-    public int latest_battery_level;
-
-//    @Expose
-    @Column(name = "uuid", index = true)
-    public String uuid;
-
-//  @Expose
-  @Column(name = "sensor_location")
-  public String sensor_location;
-
-    public static Sensor create(long started_at) {
-        Sensor sensor = new Sensor();
-        sensor.started_at = started_at;
-        sensor.uuid = UUID.randomUUID().toString();
-
-        sensor.save();
-        SensorSendQueue.addToQueue(sensor);
-        Log.d("SENSOR MODEL:", sensor.toString());
-        return sensor;
-    }
-
-    public static Sensor currentSensor() {
-        Sensor sensor = new Select()
-                .from(Sensor.class)
-                .where("started_at != 0")
-                .where("stopped_at = 0")
-                .orderBy("_ID desc")
-                .limit(1)
-                .executeSingle();
-        return sensor;
-    }
-
-    public static boolean isActive() {
-        Sensor sensor = new Select()
-                .from(Sensor.class)
-                .where("started_at != 0")
-                .where("stopped_at = 0")
-                .orderBy("_ID desc")
-                .limit(1)
-                .executeSingle();
-        if(sensor == null) {
-            return false;
-        } else {
-            return true;
-        }
-    }
-
-    public static void updateSensorLocation(String sensor_location) {
-        Sensor sensor = currentSensor();
-        if (sensor == null) {
-            Log.e("SENSOR MODEL:", "updateSensorLocation called but sensor is null");
-            return;
-        }
-        sensor.sensor_location = sensor_location;
-        sensor.save();
-    }
-}
-
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
index 13fec32..585b061 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexCollectionService.java
@@ -40,7 +40,7 @@
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.TransmitterData;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.HM10Attributes;
@@ -507,9 +507,7 @@ private void processNewTransmitterData(TransmitterData transmitterData, long tim
             return;
         }
 
-        sensor.latest_battery_level = (sensor.latest_battery_level!=0)?Math.min(sensor.latest_battery_level, transmitterData.sensor_battery_level):transmitterData.sensor_battery_level;
-        sensor.save();
-
+        Sensor.updateBatteryLevel(sensor, transmitterData.sensor_battery_level);
         BgReading.create(transmitterData.raw_data, transmitterData.filtered_data, this, timestamp);
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
index 257dc43..fe487f9 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/DexShareCollectionService.java
@@ -31,7 +31,7 @@
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.DexShareAttributes;
 import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
index 2d1c00c..a9489a1 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/MissedReadingService.java
@@ -17,7 +17,7 @@
 import com.eveningoutpost.dexdrip.ImportedLibraries.dexcom.ReadDataShare;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.UserNotification;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.UtilityModels.ForegroundServiceStarter;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
index f11f496..85a6d2e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/WixelReader.java
@@ -10,7 +10,7 @@
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.TransmitterData;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.utils.BgToSpeech;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
@@ -505,9 +505,8 @@ public void setSerialDataToTransmitterRawData(int raw_data, int filtered_data ,i
         if (transmitterData != null) {
             Sensor sensor = Sensor.currentSensor();
             if (sensor != null) {
+                Sensor.updateBatteryLevel(sensor, transmitterData.sensor_battery_level);
                 BgReading bgReading = BgReading.create(transmitterData.raw_data, filtered_data, mContext, CaptureTime);
-                sensor.latest_battery_level = (sensor.latest_battery_level!=0)?Math.min(sensor.latest_battery_level, transmitterData.sensor_battery_level):transmitterData.sensor_battery_level;;
-                sensor.save();
             } else {
                 Log.d(TAG, "No Active Sensor, Data only stored in Transmitter Data");
             }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
index a222d30..5ab070b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StartNewSensor.java
@@ -11,6 +11,7 @@
 import android.widget.Toast;
 
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
index 966133e..ca01f74 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/StopSensor.java
@@ -7,6 +7,7 @@
 import android.widget.Button;
 import android.widget.Toast;
 
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.UtilityModels.AlertPlayer;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 
@@ -41,15 +42,7 @@ public void addListenerOnButton() {
 
         button.setOnClickListener(new View.OnClickListener() {
             public void onClick(View v) {
-                Sensor sensor = Sensor.currentSensor();
-                sensor.stopped_at = new Date().getTime();
-                Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
-                sensor.save();
-                if(sensor != null) {
-                    sensor.stopped_at = new Date().getTime();
-                    Log.i("NEW SENSOR", "Sensor stopped at " + sensor.stopped_at);
-                    sensor.save();
-                }
+                Sensor.stopSensor();
                 AlertPlayer.getPlayer().stopAlert(getApplicationContext(),true, false);
 
                 Toast.makeText(getApplicationContext(), "Sensor stopped", Toast.LENGTH_LONG).show();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java b/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
index d385b1b..03f6002 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/SystemStatus.java
@@ -22,6 +22,7 @@
 import com.eveningoutpost.dexdrip.Models.ActiveBluetoothDevice;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Models.TransmitterData;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.UtilityModels.CollectionServiceStarter;
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
index 0685335..7dee16e 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
@@ -6,6 +6,7 @@
 import android.os.PowerManager;
 import android.preference.PreferenceManager;
 
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
@@ -51,21 +52,26 @@ private boolean sendData() {
         	boolean xDripViewerMode = prefs.getBoolean("xDripViewer_upload_mode", false);
             List<CalibrationSendQueue>calibrationsQueue = CalibrationSendQueue.mongoQueue(xDripViewerMode);
             List<BgSendQueue> bgsQueue = BgSendQueue.mongoQueue( xDripViewerMode);
+            List<SensorSendQueue> sensorsQueue = SensorSendQueue.mongoQueue( xDripViewerMode);
 
             try {
                 List<BgReading> bgReadings = new ArrayList<BgReading>();
                 List<Calibration> calibrations = new ArrayList<Calibration>();
+                List<Sensor> sensors = new ArrayList<Sensor>();
                 for (CalibrationSendQueue job : calibrationsQueue) {
                     calibrations.add(job.calibration);
                 }
                 for (BgSendQueue job : bgsQueue) {
                     bgReadings.add(job.bgReading);
                 }
+                for (SensorSendQueue job : sensorsQueue) {
+                    sensors.add(job.sensor);
+                }
 
-                if(bgReadings.size() + calibrations.size() > 0) {
+                if(bgReadings.size() + calibrations.size() + sensors.size()> 0) {
                 	Log.i(TAG, "uoader.upload called " + bgReadings.size());
                     NightscoutUploader uploader = new NightscoutUploader(context);
-                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations, xDripViewerMode);
+                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations, sensors, xDripViewerMode);
                     if (uploadStatus) {
                     	Log.i(TAG, "Starting to delete objects from queue " + bgsQueue.size() + calibrationsQueue.size());
                         for (CalibrationSendQueue calibration : calibrationsQueue) {
@@ -74,6 +80,9 @@ private boolean sendData() {
                         for (BgSendQueue bgReading : bgsQueue) {
                             bgReading.deleteThis();
                         }
+                        for (SensorSendQueue sensor : sensorsQueue) {
+                            sensor.deleteThis();
+                        }
                         Log.i(TAG, "finished deleting objects from queue " + bgReadings.size());
                     } else {
                     	Log.e(TAG, "uploader.upload returned false - exiting");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index aba0b8f..2d93511 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -7,6 +7,8 @@
 import android.os.BatteryManager;
 import android.preference.PreferenceManager;
 
+import com.activeandroid.annotation.Column;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
@@ -98,27 +100,27 @@ public NightscoutUploader(Context context) {
             enableMongoUpload = prefs.getBoolean("cloud_storage_mongodb_enable", false);
         }
 
-        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
+        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) {
             boolean mongoStatus = false;
             boolean apiStatus = false;
 
             if (enableRESTUpload) {
                 long start = System.currentTimeMillis();
                 Log.i(TAG, String.format("Starting upload of %s record using a REST API", glucoseDataSets.size()));
-                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a REST API in %s ms", glucoseDataSets.size(), System.currentTimeMillis() - start));
             }
 
             if (enableMongoUpload) {
                 double start = new Date().getTime();
-                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a Mongo in %s ms", glucoseDataSets.size() + meterRecords.size(), System.currentTimeMillis() - start));
             }
 
             return apiStatus || mongoStatus;
         }
 
-        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
+        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords,List<Sensor> sensors, boolean xDripViewerMode) {
             String baseURLSettings = prefs.getString("cloud_storage_api_base", "");
             ArrayList<String> baseURIs = new ArrayList<String>();
 
@@ -155,7 +157,7 @@ private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDat
 
                     if (apiVersion == 1) {
                         String hashedSecret = Hashing.sha1().hashBytes(secret.getBytes(Charsets.UTF_8)).toString();
-                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
+                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords, sensors, xDripViewerMode);
                     } else {
                         doLegacyRESTUploadTo(nightscoutService, glucoseDataSets);
                     }
@@ -177,11 +179,14 @@ private void doLegacyRESTUploadTo(NightscoutService nightscoutService, List<BgRe
             postDeviceStatus(nightscoutService, null);
         }
 
-        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) throws Exception {
+        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) throws Exception {
             JSONArray array = new JSONArray();
             for (BgReading record : glucoseDataSets) {
                 populateV1APIBGEntry(array, record, xDripViewerMode);
             }
+            for (Sensor record : sensors) {
+                populateV1APISensorEntry(array, record);
+            }
             for (Calibration record : meterRecords) {
                 populateV1APIMeterReadingEntry(array, record, xDripViewerMode);
             }
@@ -252,6 +257,9 @@ private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record,
 	            json.put("xDrip_slope_confidence", record.slope_confidence);
 	            json.put("xDrip_sensor_confidence", record.sensor_confidence);
 	            json.put("xDrip_raw_timestamp", record.raw_timestamp);
+	            if(record.sensor != null) {
+	                json.put("xDrip_sensor_uuid", record.sensor.uuid);
+	            }
             }
             json.put("sysTime", format.format(record.timestamp));
             array.put(json);
@@ -275,6 +283,19 @@ private void populateV1APICalibrationEntry(JSONArray array, Calibration record)
             json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
+        
+        private void populateV1APISensorEntry(JSONArray array, Sensor record) throws Exception {
+            JSONObject json = new JSONObject();
+            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
+            format.setTimeZone(TimeZone.getDefault());
+            json.put("type", "sensor");
+            json.put("xDrip_started_at", record.started_at);
+            json.put("xDrip_stopped_at", record.stopped_at);
+            json.put("xDrip_latest_battery_level", record.latest_battery_level);
+            json.put("xDrip_uuid", record.uuid);
+            json.put("sysTime", format.format(record.started_at));
+            array.put(json);
+        }
 
         private void postDeviceStatus(NightscoutService nightscoutService, String apiSecret) throws Exception {
             JSONObject json = new JSONObject();
@@ -289,7 +310,7 @@ private void postDeviceStatus(NightscoutService nightscoutService, String apiSec
         }
 
         private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets,
-                                      List<Calibration> meterRecords,  List<Calibration> calRecords, boolean xDripViewerMode) {
+                                      List<Calibration> meterRecords,  List<Calibration> calRecords, List<Sensor> sensors, boolean xDripViewerMode) {
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
 
@@ -338,6 +359,20 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
 
+                        Log.i(TAG, "The number of sensor records being sent to MongoDB is " + meterRecords.size());
+                        for (Sensor sensor : sensors) {
+                            // make db object
+                            BasicDBObject testData = new BasicDBObject();
+                            testData.put("type", "sensor");
+                            testData.put("xDrip_started_at", sensor.started_at);
+                            testData.put("xDrip_stopped_at", sensor.stopped_at);
+                            testData.put("xDrip_latest_battery_level", sensor.latest_battery_level);
+                            testData.put("xDrip_uuid", sensor.uuid);
+                            testData.put("sysTime", format.format(sensor.started_at));
+                            BasicDBObject query = new BasicDBObject("type", "sensor").append("sysTime", format.format(sensor.started_at));
+                            dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
+                        }
+
                         Log.i(TAG, "The number of MBG records being sent to MongoDB is " + meterRecords.size());
                         for (Calibration meterRecord : meterRecords) {
                             // make db object
@@ -354,6 +389,9 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
 	                            testData.put("xDrip_slope_confidence", meterRecord.slope_confidence);
 	                            testData.put("xDrip_sensor_confidence", meterRecord.sensor_confidence);
 	                            testData.put("xDrip_raw_timestamp", meterRecord.raw_timestamp);
+	                            if(meterRecord.sensor != null) {
+	                                testData.put("xDrip_sensor_uuid", meterRecord.sensor.uuid);
+	                            }
                             }               
                             testData.put("sysTime", format.format(meterRecord.timestamp));
                             BasicDBObject query = new BasicDBObject("type", "mbg").append("sysTime", format.format(meterRecord.timestamp));
@@ -362,7 +400,9 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
 
                         for (Calibration calRecord : calRecords) {
                             //do not upload undefined slopes
-                            if(calRecord.slope == 0d) break;
+                            if(calRecord.slope == 0d) {
+                                continue;
+                            }
                             // make db object
                             BasicDBObject testData = new BasicDBObject();
                             testData.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
@@ -378,6 +418,7 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             BasicDBObject query = new BasicDBObject("type", "cal").append("sysTime", format.format(calRecord.timestamp));
                             dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
+                        
 
                         // TODO: quick port from original code, revisit before release
                         DBCollection dsCollection = db.getCollection(dsCollectionName);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
index 51b06a3..aa4996b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/Notifications.java
@@ -23,6 +23,7 @@
 import android.support.v4.app.NotificationCompat;
 import android.support.v4.app.NotificationManagerCompat;
 import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import com.eveningoutpost.dexdrip.Models.Sensor;
 
 import com.eveningoutpost.dexdrip.AddCalibration;
 import com.eveningoutpost.dexdrip.DoubleCalibrationActivity;
@@ -37,7 +38,6 @@
 import com.eveningoutpost.dexdrip.Services.MissedReadingService;
 
 import com.eveningoutpost.dexdrip.R;
-import com.eveningoutpost.dexdrip.Sensor;
 
 import java.util.Calendar;
 import java.util.Date;
@@ -307,7 +307,7 @@ private long calcuatleArmTime(Context ctx, long now) {
           if (alert != null) {
               wakeTime = activeBgAlert.next_alert_at ;
               Log.d(TAG , "ArmTimer waking at: "+ new Date(wakeTime) +" in " +  (wakeTime - now)/60000d + " minutes");
-              if (wakeTime < now + 60000) {
+              if (wakeTime < now) {
                   // next alert should be at least one minute from now.
                   wakeTime = now + 60000;
                   Log.w(TAG , "setting next alert to 1 minute from now (no problem right now, but needs a fix someplace else)");
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
index 61f8c6f..38724a1 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/SensorSendQueue.java
@@ -6,7 +6,8 @@
 import com.activeandroid.annotation.Column;
 import com.activeandroid.annotation.Table;
 import com.activeandroid.query.Select;
-import com.eveningoutpost.dexdrip.Sensor;
+import com.eveningoutpost.dexdrip.Models.Sensor;
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 
 import java.util.List;
 
@@ -22,23 +23,15 @@
     @Column(name = "success", index = true)
     public boolean success;
 
-
-    public static SensorSendQueue nextSensorJob() {
-        SensorSendQueue job = new Select()
+    
+    public static List<SensorSendQueue> mongoQueue(boolean xDripViewerMode) {
+        List<SensorSendQueue> values = new Select()
                 .from(SensorSendQueue.class)
-                .where("success =", false)
-                .orderBy("_ID desc")
-                .limit(1)
-                .executeSingle();
-        return job;
-    }
-
-    public static List<SensorSendQueue> queue() {
-        return new Select()
-                .from(SensorSendQueue.class)
-                .where("success = ?", false)
-                .orderBy("_ID desc")
+                .orderBy("_ID asc")
+                .limit(100 )
                 .execute();
+        return values;
+        
     }
 
     public static void addToQueue(Sensor sensor) {
@@ -46,5 +39,10 @@ public static void addToQueue(Sensor sensor) {
         sensorSendQueue.sensor = sensor;
         sensorSendQueue.success = false;
         sensorSendQueue.save();
+        Log.d("SensorQueue", "New value added to queue!");
+    }
+    
+    public void deleteThis() {
+        this.delete();
     }
 }

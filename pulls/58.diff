diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index c760661..6d7ab2f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -47,6 +47,7 @@
 import com.nispok.snackbar.SnackbarManager;
 import com.nispok.snackbar.enums.SnackbarType;
 import com.nispok.snackbar.listeners.ActionClickListener;
+
 import lecho.lib.hellocharts.ViewportChangeListener;
 import lecho.lib.hellocharts.gesture.ZoomType;
 import lecho.lib.hellocharts.model.Viewport;
@@ -56,12 +57,6 @@
 
 public class Home extends ActivityWithMenu {
     public static String menu_name = "xDrip";
-    private NavigationDrawerFragment mNavigationDrawerFragment;
-    private LineChartView chart;
-    private PreviewLineChartView previewChart;
-    SharedPreferences prefs;
-    Viewport tempViewport = new Viewport();
-    Viewport holdViewport = new Viewport();
     public float left;
     public float right;
     public float top;
@@ -69,14 +64,19 @@
     public boolean updateStuff;
     public boolean updatingPreviewViewport = false;
     public boolean updatingChartViewport = false;
+    public BgGraphBuilder bgGraphBuilder;
+    SharedPreferences prefs;
+    Viewport tempViewport = new Viewport();
+    Viewport holdViewport = new Viewport();
     boolean isBTWixel;
     boolean isDexbridgeWixel;
     boolean isBTShare;
     boolean isWifiWixel;
-
-    public BgGraphBuilder bgGraphBuilder;
     BroadcastReceiver _broadcastReceiver;
     BroadcastReceiver newDataReceiver;
+    private NavigationDrawerFragment mNavigationDrawerFragment;
+    private LineChartView chart;
+    private PreviewLineChartView previewChart;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
@@ -108,7 +108,7 @@ public void checkEula() {
     }
 
     @Override
-    protected void onResume(){
+    protected void onResume() {
         super.onResume();
         checkEula();
         _broadcastReceiver = new BroadcastReceiver() {
@@ -154,37 +154,8 @@ public void setupCharts() {
         setViewport();
     }
 
-    private class ChartViewPortListener implements ViewportChangeListener {
-        @Override
-        public void onViewportChanged(Viewport newViewport) {
-            if (!updatingPreviewViewport) {
-                updatingChartViewport = true;
-                previewChart.setZoomType(ZoomType.HORIZONTAL);
-                previewChart.setCurrentViewport(newViewport, false);
-                updatingChartViewport = false;
-            }
-        }
-    }
-
-    private class ViewportListener implements ViewportChangeListener {
-        @Override
-        public void onViewportChanged(Viewport newViewport) {
-            if (!updatingChartViewport) {
-                updatingPreviewViewport = true;
-                chart.setZoomType(ZoomType.HORIZONTAL);
-                chart.setCurrentViewport(newViewport, false);
-                tempViewport = newViewport;
-                updatingPreviewViewport = false;
-            }
-            if (updateStuff) {
-                holdViewport.set(newViewport.left, newViewport.top, newViewport.right, newViewport.bottom);
-            }
-        }
-
-    }
-
     public void setViewport() {
-        if (tempViewport.left == 0.0 || holdViewport.left == 0.0 || holdViewport.right  >= (new Date().getTime())) {
+        if (tempViewport.left == 0.0 || holdViewport.left == 0.0 || holdViewport.right >= (new Date().getTime())) {
             previewChart.setCurrentViewport(bgGraphBuilder.advanceViewport(chart, previewChart), false);
         } else {
             previewChart.setCurrentViewport(holdViewport, false);
@@ -197,20 +168,20 @@ public void onPause() {
         if (_broadcastReceiver != null) {
             unregisterReceiver(_broadcastReceiver);
         }
-        if(newDataReceiver != null) {
+        if (newDataReceiver != null) {
             unregisterReceiver(newDataReceiver);
         }
     }
 
     public void updateCurrentBgInfo() {
-        final TextView notificationText = (TextView)findViewById(R.id.notices);
+        final TextView notificationText = (TextView) findViewById(R.id.notices);
         notificationText.setText("");
         isBTWixel = CollectionServiceStarter.isBTWixel(getApplicationContext());
         isDexbridgeWixel = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
         isBTShare = CollectionServiceStarter.isBTShare(getApplicationContext());
         isWifiWixel = CollectionServiceStarter.isWifiWixel(getApplicationContext());
-        if(isBTShare) {
-            if((android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN_MR2)) {
+        if (isBTShare) {
+            if ((android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN_MR2)) {
                 notificationText.setText("Unfortunately your android version does not support Bluetooth Low Energy");
             } else {
                 String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
@@ -233,7 +204,7 @@ public void updateCurrentBgInfo() {
                 }
             }
         }
-        if(isBTWixel || isDexbridgeWixel) {
+        if (isBTWixel || isDexbridgeWixel) {
             if ((android.os.Build.VERSION.SDK_INT < android.os.Build.VERSION_CODES.JELLY_BEAN_MR2)) {
                 notificationText.setText("Unfortunately your android version does not support Bluetooth Low Energy");
             } else {
@@ -252,7 +223,7 @@ public void updateCurrentBgInfo() {
                                 notificationText.setText("Please enter two calibrations to get started!");
                             }
                         } else {
-                            if(BgReading.latestUnCalculated(2).size() < 2) {
+                            if (BgReading.latestUnCalculated(2).size() < 2) {
                                 notificationText.setText("Please wait, need 2 readings from transmitter first.");
                             } else {
                                 List<Calibration> calibrations = Calibration.latest(2);
@@ -270,7 +241,7 @@ public void updateCurrentBgInfo() {
                 }
             }
         }
-        if(isWifiWixel) {
+        if (isWifiWixel) {
             if (!WixelReader.IsConfigured(getApplicationContext())) {
                 notificationText.setText("First configure your wifi wixel reader ip addresses");
             } else {
@@ -296,7 +267,7 @@ public void updateCurrentBgInfo() {
                 }
             }
         }
-        if(prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
+        if (prefs.getLong("alerts_disabled_until", 0) > new Date().getTime()) {
             notificationText.append("\n ALERTS CURRENTLY DISABLED");
         }
         mNavigationDrawerFragment = (NavigationDrawerFragment) getFragmentManager().findFragmentById(R.id.navigation_drawer);
@@ -310,34 +281,37 @@ public void displayCurrentInfo() {
         boolean isDexbridge = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
         int bridgeBattery = prefs.getInt("bridge_battery", 0);
 
-        final TextView dexbridgeBattery = (TextView)findViewById(R.id.textBridgeBattery);
-        if(isDexbridge) {
-            if(bridgeBattery == 0){
+        final TextView dexbridgeBattery = (TextView) findViewById(R.id.textBridgeBattery);
+        if (isDexbridge) {
+            if (bridgeBattery == 0) {
                 dexbridgeBattery.setText("Waiting for packet");
             } else {
                 dexbridgeBattery.setText("Bridge Battery: " + bridgeBattery + "%");
             }
-            if(bridgeBattery < 50) dexbridgeBattery.setTextColor(Color.YELLOW);
-            if(bridgeBattery < 25) dexbridgeBattery.setTextColor(Color.RED); else dexbridgeBattery.setTextColor(Color.GREEN);
+            if (bridgeBattery < 50) dexbridgeBattery.setTextColor(Color.YELLOW);
+            if (bridgeBattery < 25) dexbridgeBattery.setTextColor(Color.RED);
+            else dexbridgeBattery.setTextColor(Color.GREEN);
             dexbridgeBattery.setVisibility(View.VISIBLE);
         } else {
             dexbridgeBattery.setVisibility(View.INVISIBLE);
         }
-        final TextView currentBgValueText = (TextView)findViewById(R.id.currentBgValueRealTime);
-        final TextView notificationText = (TextView)findViewById(R.id.notices);
+        final TextView currentBgValueText = (TextView) findViewById(R.id.currentBgValueRealTime);
+        final TextView notificationText = (TextView) findViewById(R.id.notices);
         if ((currentBgValueText.getPaintFlags() & Paint.STRIKE_THRU_TEXT_FLAG) > 0) {
             currentBgValueText.setPaintFlags(currentBgValueText.getPaintFlags() & (~Paint.STRIKE_THRU_TEXT_FLAG));
             dexbridgeBattery.setPaintFlags(dexbridgeBattery.getPaintFlags() & (~Paint.STRIKE_THRU_TEXT_FLAG));
         }
         BgReading lastBgreading = BgReading.lastNoSenssor();
         boolean predictive = PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean("predictive_bg", false);
-        if(isBTShare) { predictive = false; }
+        if (isBTShare) {
+            predictive = false;
+        }
         if (lastBgreading != null) {
             double estimate = 0;
             if ((new Date().getTime()) - (60000 * 11) - lastBgreading.timestamp > 0) {
                 notificationText.setText("Signal Missed");
-                if(!predictive){
-                    estimate=lastBgreading.calculated_value;
+                if (!predictive) {
+                    estimate = lastBgreading.calculated_value;
                 } else {
                     estimate = BgReading.estimated_bg(lastBgreading.timestamp + (6000 * 7));
                 }
@@ -345,23 +319,23 @@ public void displayCurrentInfo() {
                 currentBgValueText.setPaintFlags(currentBgValueText.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
                 dexbridgeBattery.setPaintFlags(dexbridgeBattery.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
             } else {
-                if(!predictive){
-                    estimate=lastBgreading.calculated_value;
+                if (!predictive) {
+                    estimate = lastBgreading.calculated_value;
                     String stringEstimate = bgGraphBuilder.unitized_string(estimate);
                     String slope_arrow = BgReading.slopeArrow((lastBgreading.calculated_value_slope * 60000));
-                    if(lastBgreading.hide_slope) {
+                    if (lastBgreading.hide_slope) {
                         slope_arrow = "";
                     }
-                    currentBgValueText.setText( stringEstimate + " " + slope_arrow);
+                    currentBgValueText.setText(stringEstimate + " " + slope_arrow);
                 } else {
                     estimate = BgReading.activePrediction();
                     String stringEstimate = bgGraphBuilder.unitized_string(estimate);
-                    currentBgValueText.setText( stringEstimate + " " + BgReading.slopeArrow());
+                    currentBgValueText.setText(stringEstimate + " " + BgReading.slopeArrow());
                 }
             }
-            if(bgGraphBuilder.unitized(estimate) <= bgGraphBuilder.lowMark) {
+            if (bgGraphBuilder.unitized(estimate) <= bgGraphBuilder.lowMark) {
                 currentBgValueText.setTextColor(Color.parseColor("#C30909"));
-            } else if(bgGraphBuilder.unitized(estimate) >= bgGraphBuilder.highMark) {
+            } else if (bgGraphBuilder.unitized(estimate) >= bgGraphBuilder.highMark) {
                 currentBgValueText.setTextColor(Color.parseColor("#FFBB33"));
             } else {
                 currentBgValueText.setTextColor(Color.WHITE);
@@ -376,22 +350,6 @@ public boolean onCreateOptionsMenu(Menu menu) {
         return super.onCreateOptionsMenu(menu);
     }
 
-    class SnackbarUriListener implements ActionClickListener {
-        Uri uri;
-        SnackbarUriListener(Uri uri) {
-            this.uri = uri;
-        }
-
-        @Override
-        public void onActionClicked(Snackbar snackbar) {
-            Intent shareIntent = new Intent();
-            shareIntent.setAction(Intent.ACTION_SEND);
-            shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
-            shareIntent.setType("application/octet-stream");
-            startActivity(Intent.createChooser(shareIntent, "Share database..."));
-        }
-    }
-
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         if (item.getItemId() == R.id.action_export_database) {
@@ -404,14 +362,18 @@ protected String doInBackground(Void... params) {
                 @Override
                 protected void onPostExecute(String filename) {
                     super.onPostExecute(filename);
-                    SnackbarManager.show(
-                            Snackbar.with(Home.this)
-                                    .type(SnackbarType.MULTI_LINE)
-                                    .duration(4000)
-                                    .text("Exported to " + filename) // text to display
-                                    .actionLabel("Share") // action button label
-                                    .actionListener(new SnackbarUriListener(Uri.fromFile(new File(filename)))),
-                            Home.this);
+                    if (filename != null) {
+                        SnackbarManager.show(
+                                Snackbar.with(Home.this)
+                                        .type(SnackbarType.MULTI_LINE)
+                                        .duration(4000)
+                                        .text("Exported to " + filename) // text to display
+                                        .actionLabel("Share") // action button label
+                                        .actionListener(new SnackbarUriListener(Uri.fromFile(new File(filename)))),
+                                Home.this);
+                    } else {
+                        Toast.makeText(Home.this, "Could not export Database :(", Toast.LENGTH_LONG).show();
+                    }
                 }
             }.execute();
 
@@ -419,4 +381,50 @@ protected void onPostExecute(String filename) {
         }
         return super.onOptionsItemSelected(item);
     }
+
+    private class ChartViewPortListener implements ViewportChangeListener {
+        @Override
+        public void onViewportChanged(Viewport newViewport) {
+            if (!updatingPreviewViewport) {
+                updatingChartViewport = true;
+                previewChart.setZoomType(ZoomType.HORIZONTAL);
+                previewChart.setCurrentViewport(newViewport, false);
+                updatingChartViewport = false;
+            }
+        }
+    }
+
+    private class ViewportListener implements ViewportChangeListener {
+        @Override
+        public void onViewportChanged(Viewport newViewport) {
+            if (!updatingChartViewport) {
+                updatingPreviewViewport = true;
+                chart.setZoomType(ZoomType.HORIZONTAL);
+                chart.setCurrentViewport(newViewport, false);
+                tempViewport = newViewport;
+                updatingPreviewViewport = false;
+            }
+            if (updateStuff) {
+                holdViewport.set(newViewport.left, newViewport.top, newViewport.right, newViewport.bottom);
+            }
+        }
+
+    }
+
+    class SnackbarUriListener implements ActionClickListener {
+        Uri uri;
+
+        SnackbarUriListener(Uri uri) {
+            this.uri = uri;
+        }
+
+        @Override
+        public void onActionClicked(Snackbar snackbar) {
+            Intent shareIntent = new Intent();
+            shareIntent.setAction(Intent.ACTION_SEND);
+            shareIntent.putExtra(Intent.EXTRA_STREAM, uri);
+            shareIntent.setType("application/octet-stream");
+            startActivity(Intent.createChooser(shareIntent, "Share database..."));
+        }
+    }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java b/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
index 13b3877..6fc3611 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/utils/DatabaseUtil.java
@@ -4,12 +4,15 @@
 import android.net.Uri;
 import android.os.Environment;
 import android.text.format.DateFormat;
+import android.util.Log;
+import android.widget.Toast;
 
 import com.activeandroid.Configuration;
 
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
+import java.io.IOException;
 import java.nio.channels.FileChannel;
 
 import static com.eveningoutpost.dexdrip.utils.FileUtils.*;
@@ -19,7 +22,17 @@
  */
 public class DatabaseUtil {
 
+    public static final String TAG = DatabaseUtil.class.getSimpleName();
+
+
     public static String saveSql(Context context) {
+
+        FileInputStream srcStream = null;
+        FileChannel src = null;
+        FileOutputStream destStream = null;
+        FileChannel dst = null;
+        String filename = null;
+
         try {
 
             final String databaseName = new Configuration.Builder(context).create().getDatabaseName();
@@ -33,51 +46,103 @@ public static String saveSql(Context context) {
             sb.append(DateFormat.format("yyyyMMdd-kkmmss", System.currentTimeMillis()));
             sb.append(".sqlite");
 
-            final String filename = sb.toString();
+            filename = sb.toString();
             final File sd = Environment.getExternalStorageDirectory();
             if (sd.canWrite()) {
                 final File currentDB = context.getDatabasePath(databaseName);
                 final File backupDB = new File(filename);
                 if (currentDB.exists()) {
-                    final FileInputStream srcStream = new FileInputStream(currentDB);
-                    final FileChannel src = srcStream.getChannel();
-                    final FileOutputStream destStream = new FileOutputStream(backupDB);
-                    final FileChannel dst = destStream.getChannel();
+                    srcStream = new FileInputStream(currentDB);
+                    src = srcStream.getChannel();
+                    destStream = new FileOutputStream(backupDB);
+                    dst = destStream.getChannel();
                     dst.transferFrom(src, 0, src.size());
-                    src.close();
-                    srcStream.close();
-                    dst.close();
-                    destStream.close();
+                } else {
+                    Toast.makeText(context, "Problem: No current DB found!", Toast.LENGTH_LONG).show();
+                    Log.d(TAG, "Problem: No current DB found");
                 }
+            } else {
+                Toast.makeText(context, "SD card not writable!", Toast.LENGTH_LONG).show();
+                Log.d(TAG, "SD card not writable!");
             }
 
-            return filename;
-        } catch (final Exception e) {
-            throw new RuntimeException(e);
+        } catch (IOException e) {
+            Toast.makeText(context, "SD card not writable!", Toast.LENGTH_LONG).show();
+            Log.e(TAG, "Exception while writing DB", e);
+        } finally {
+            if (src != null) try {
+                src.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (destStream != null) try {
+                destStream.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (srcStream != null) try {
+                srcStream.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (dst != null) try {
+                dst.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
         }
+        return filename;
     }
 
-    public static void loadSql(Context context, Uri uri) {
-        try {
-            final String databaseName = new Configuration.Builder(context).create().getDatabaseName();
+    public static void loadSql(Context context, String path) {
+
+        FileInputStream srcStream = null;
+        FileChannel src = null;
+        FileOutputStream destStream = null;
+        FileChannel dst = null;
 
-            final File currentDB = context.getDatabasePath(databaseName);
-            final File replacement = new File(uri.getPath());
+        try {
+            String databaseName = new Configuration.Builder(context).create().getDatabaseName();
+            File currentDB = context.getDatabasePath(databaseName);
+            File replacement = new File(path);
+            if (!replacement.exists()) {
+                Log.d(TAG, "File does not exist: " + path);
+                return;
+            }
             if (currentDB.canWrite()) {
-                final FileInputStream srcStream = new FileInputStream(replacement);
-                final FileChannel src = srcStream.getChannel();
-                final FileOutputStream destStream = new FileOutputStream(currentDB);
-                final FileChannel dst = destStream.getChannel();
+                srcStream = new FileInputStream(replacement);
+                src = srcStream.getChannel();
+                destStream = new FileOutputStream(currentDB);
+                dst = destStream.getChannel();
                 dst.transferFrom(src, 0, src.size());
+            } else {
+                Log.v(TAG, "loadSql: No Write access");
+            }
+        } catch (IOException e) {
+            Log.e(TAG, "Something went wrong importing Database", e);
+
+        } finally {
+            if (src != null) try {
                 src.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (destStream != null) try {
+                destStream.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (srcStream != null) try {
                 srcStream.close();
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+            }
+            if (dst != null) try {
                 dst.close();
-                destStream.close();
-            } else {
-                throw new RuntimeException("Couldn't write to " + currentDB);
+            } catch (IOException e1) {
+                Log.e(TAG, "Something went wrong closing: ", e1);
+
             }
-        } catch (final Exception e) {
-            throw new RuntimeException(e);
         }
     }
 }

diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 4db6be9..2caf46a 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -35,7 +35,7 @@
             android:value="DexDrip.db" />
         <meta-data
             android:name="AA_DB_VERSION"
-            android:value="37" />
+            android:value="41" />
 
         <provider
             android:name="com.activeandroid.content.ContentProvider"
diff --git a/app/src/main/assets/migrations/38.sql b/app/src/main/assets/migrations/38.sql
new file mode 100644
index 0000000..421a4cb
--- /dev/null
+++ b/app/src/main/assets/migrations/38.sql
@@ -0,0 +1 @@
+ALTER TABLE BgReadings ADD COLUMN filtered_calculated_value REAL DEFAULT 0;
diff --git a/app/src/main/assets/migrations/41.sql b/app/src/main/assets/migrations/41.sql
new file mode 100644
index 0000000..e8239a1
--- /dev/null
+++ b/app/src/main/assets/migrations/41.sql
@@ -0,0 +1,3 @@
+DELETE FROM BgReadings WHERE rowid NOT IN (SELECT MAX(rowid) FROM BgReadings GROUP BY uuid);
+DROP INDEX index_BgReadings_uuid;
+CREATE UNIQUE INDEX index_BgReadings_uuid on BgReadings(uuid);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
index fc9a147..c1d8aee 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/BgReading.java
@@ -74,6 +74,10 @@
     public double calculated_value;
 
     @Expose
+    @Column(name = "filtered_calculated_value")
+    public double filtered_calculated_value;
+
+    @Expose
     @Column(name = "calculated_value_slope")
     public double calculated_value_slope;
 
@@ -101,7 +105,7 @@
     @Column(name = "rc")
     public double rc;
     @Expose
-    @Column(name = "uuid", index = true)
+    @Column(name = "uuid", unique = true , onUniqueConflicts = Column.ConflictAction.IGNORE)
     public String uuid;
 
     @Expose
@@ -343,6 +347,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
                 double calSlope = (calibration.first_scale / firstAdjSlope)*1000;
                 double calIntercept = ((calibration.first_scale * calibration.first_intercept) / firstAdjSlope)*-1;
                 bgReading.calculated_value = (((calSlope * bgReading.raw_data) + calIntercept) - 5);
+                bgReading.filtered_calculated_value = (((calSlope * bgReading.ageAdjustedFiltered()) + calIntercept) -5);
 
             } else {
                 BgReading lastBgReading = BgReading.last();
@@ -352,6 +357,7 @@ public static BgReading create(double raw_data, double filtered_data, Context co
                     }
                 }
                 bgReading.calculated_value = ((calibration.slope * bgReading.age_adjusted_raw_value) + calibration.intercept);
+                bgReading.filtered_calculated_value = ((calibration.slope * bgReading.ageAdjustedFiltered()) + calibration.intercept);
             }
             updateCalculatedValue(bgReading);
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/Treatments.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Treatments.java
new file mode 100644
index 0000000..67e0917
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/Treatments.java
@@ -0,0 +1,50 @@
+package com.eveningoutpost.dexdrip.Models;
+
+/**
+ * Created by jamorham on 20/02/2016.
+ */
+
+import android.provider.BaseColumns;
+
+import com.activeandroid.Model;
+import com.activeandroid.annotation.Column;
+import com.activeandroid.annotation.Table;
+import com.google.gson.annotations.Expose;
+
+// Nightscout Treatments database fields
+
+@Table(name = "Treatments", id = BaseColumns._ID)
+public class Treatments extends Model {
+    @Expose
+    @Column(name = "timestamp", index = true)
+    public long timestamp;
+
+    @Expose
+    @Column(name = "eventType")
+    public String eventType;
+
+    @Expose
+    @Column(name = "enteredBy")
+    public String enteredBy;
+
+    @Expose
+    @Column(name = "notes")
+    public String notes;
+
+    @Expose
+    @Column(name = "uuid", unique = true, onUniqueConflicts = Column.ConflictAction.IGNORE)
+    public String uuid;
+
+    @Expose
+    @Column(name = "carbs")
+    public double carbs;
+
+    @Expose
+    @Column(name = "insulin")
+    public double insulin;
+
+    @Expose
+    @Column(name = "created_at")
+    public String created_at;
+
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
index 80da44b..d3fdf85 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgGraphBuilder.java
@@ -9,8 +9,10 @@
 import android.text.format.DateFormat;
 import android.widget.Toast;
 
+import com.eveningoutpost.dexdrip.Home;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
+import com.eveningoutpost.dexdrip.Models.UserError;
 
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
@@ -51,7 +53,7 @@
     final int axisTextSize;
     final int previewAxisTextSize;
     final int hoursPreviewStep;
-
+    private final static double timeshift = 500000;
     private static final int NUM_VALUES =(60/5)*24;
     private final List<BgReading> bgReadings;
     private final List<Calibration> calibrations;
@@ -59,6 +61,7 @@
     private List<PointValue> highValues = new ArrayList<PointValue>();
     private List<PointValue> lowValues = new ArrayList<PointValue>();
     private List<PointValue> rawInterpretedValues = new ArrayList<PointValue>();
+    private List<PointValue> filteredValues = new ArrayList<PointValue>();
     private List<PointValue> calibrationValues = new ArrayList<PointValue>();
     static final boolean LINE_VISIBLE = true;
     static final boolean FILL_UNDER_LINE = false;
@@ -106,9 +109,13 @@ public LineChartData previewLineData() {
         LineChartData previewLineData = new LineChartData(lineData());
         previewLineData.setAxisYLeft(yAxis());
         previewLineData.setAxisXBottom(previewXAxis());
-        previewLineData.getLines().get(5).setPointRadius(2);
-        previewLineData.getLines().get(6).setPointRadius(2);
-        previewLineData.getLines().get(7).setPointRadius(2);
+        // because the lines array can now be a varying size we
+        // offset from the end instead of hardcoded values. This
+        // is still brittle but better than absolute offsets.
+        final int array_offset = previewLineData.getLines().size()-5;
+        previewLineData.getLines().get(array_offset).setPointRadius(2);
+        previewLineData.getLines().get(array_offset+1).setPointRadius(2);
+        previewLineData.getLines().get(array_offset+2).setPointRadius(2);
         return previewLineData;
     }
 
@@ -121,6 +128,15 @@ public LineChartData previewLineData() {
         lines.add(maxShowLine());
         lines.add(highLine());
         lines.add(lowLine());
+
+        if (prefs.getBoolean("show_filtered_curve", false)) {
+            final ArrayList<Line> filtered_lines = filteredLines();
+            for (Line thisline : filtered_lines) {
+                lines.add(thisline);
+            }
+        }
+        // these last entries cannot be moved if
+        // the point size change in previewLineData is to work
         lines.add(inRangeValuesLine());
         lines.add(lowValuesLine());
         lines.add(highValuesLine());
@@ -164,6 +180,37 @@ public Line rawInterpretedLine() {
         return line;
     }
 
+    // Produce an array of cubic lines, split as needed
+    public ArrayList<Line> filteredLines() {
+        ArrayList<Line> line_array = new ArrayList<Line>();
+        float last_x_pos = -999999; // bogus mark value
+        final float jump_threshold = 15; // in minutes
+        List<PointValue> local_points = new ArrayList<PointValue>();
+
+        if (filteredValues.size() > 0) {
+            final float end_marker = filteredValues.get(filteredValues.size() - 1).getX();
+
+            for (PointValue current_point : filteredValues) {
+                // a jump too far for a line? make it a new one
+                if (((last_x_pos != -999999) && (Math.abs(current_point.getX() - last_x_pos) > jump_threshold))
+                        || current_point.getX() == end_marker) {
+                    Line line = new Line(local_points);
+                    line.setHasPoints(true);
+                    line.setPointRadius(2);
+                    line.setStrokeWidth(1);
+                    line.setColor(Color.parseColor("#a0a0a0"));
+                    line.setCubic(true);
+                    line.setHasLines(true);
+                    line_array.add(line);
+                    local_points = new ArrayList<PointValue>();
+                }
+                last_x_pos = current_point.getX();
+                local_points.add(current_point); // grow current line list
+            }
+        }
+        return line_array;
+    }
+
     public Line[] calibrationValuesLine() {
         Line[] lines = new Line[2];
         lines[0] = new Line(calibrationValues);
@@ -181,23 +228,29 @@ public Line rawInterpretedLine() {
 
 
     private void addBgReadingValues() {
+        final boolean show_filtered = prefs.getBoolean("show_filtered_curve", false);
+
         for (BgReading bgReading : bgReadings) {
             if (bgReading.raw_calculated != 0 && prefs.getBoolean("interpret_raw", false)) {
-                rawInterpretedValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.raw_calculated)));
+                rawInterpretedValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(bgReading.raw_calculated)));
             } else if (bgReading.calculated_value >= 400) {
-                highValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(400)));
+                highValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(400)));
             } else if (unitized(bgReading.calculated_value) >= highMark) {
-                highValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
+                highValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (unitized(bgReading.calculated_value) >= lowMark) {
-                inRangeValues.add(new PointValue((float) (bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
+                inRangeValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (bgReading.calculated_value >= 40) {
-                lowValues.add(new PointValue((float)(bgReading.timestamp/ FUZZER), (float) unitized(bgReading.calculated_value)));
+                lowValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(bgReading.calculated_value)));
             } else if (bgReading.calculated_value > 13) {
-                lowValues.add(new PointValue((float)(bgReading.timestamp/ FUZZER), (float) unitized(40)));
+                lowValues.add(new PointValue((float) (bgReading.timestamp / FUZZER), (float) unitized(40)));
+            }
+
+            if ((show_filtered) && (bgReading.filtered_calculated_value > 0) && (bgReading.filtered_calculated_value != bgReading.calculated_value)) {
+                filteredValues.add(new PointValue((float) ((bgReading.timestamp - timeshift) / FUZZER), (float) unitized(bgReading.filtered_calculated_value)));
             }
         }
         for (Calibration calibration : calibrations) {
-            calibrationValues.add(new PointValue((float)(calibration.timestamp/ FUZZER), (float) unitized(calibration.bg)));
+            calibrationValues.add(new PointValue((float) (calibration.timestamp / FUZZER), (float) unitized(calibration.bg)));
         }
     }
 
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 140d4de..2d7bef7 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -37,6 +37,11 @@
             android:summary="If using Share, DexDrip will show values when they are normally hidden on the receiver."
             android:defaultValue="false" />
         <CheckBoxPreference
+            android:defaultValue="false"
+            android:key="show_filtered_curve"
+            android:summary="Useful for noise and missed readings"
+            android:title="Display filtered plot" />
+        <CheckBoxPreference
             android:key="bg_to_speech"
             android:title="Speak Readings"
             android:summary="If the phone has text-to-speech capabilities it will read new readings out loud."

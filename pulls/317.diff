diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
index 8b9d894..5f5f481 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/G5CollectionService.java
@@ -109,7 +109,6 @@
     private BluetoothDevice device;
     private long startTimeInterval = -1;
     private int lastBattery = 216;
-    private long lastRead = new Date().getTime() - (5 * 60 *1000);
     private Boolean isBondedOrBonding = false;
 
     private static final ScheduledExecutorService worker =
@@ -194,11 +193,10 @@ public void keepAlive() {
         PowerManager powerManager = (PowerManager) getApplicationContext().getSystemService(POWER_SERVICE);
         PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
         wakeLock.acquire(20 * 1000);
-
         alarm = (AlarmManager) getSystemService(ALARM_SERVICE);
         if (pendingIntent != null)
             alarm.cancel(pendingIntent);
-        long wakeTime = (long) (SystemClock.elapsedRealtime() + (4.9 * 1000 * 60));
+        long wakeTime = (long) (SystemClock.elapsedRealtime() + (4.5 * 1000 * 60));
         pendingIntent = PendingIntent.getService(this, 0, new Intent(this, this.getClass()), 0);
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
             alarm.setExactAndAllowWhileIdle(AlarmManager.ELAPSED_REALTIME_WAKEUP, wakeTime, pendingIntent);
@@ -252,14 +250,12 @@ public void startScan() {
     }
     
     void scanAfterDelay() {
-        
         Runnable task = new Runnable() {
             public void run() {
                 startScan();
             }
         };
-        worker.schedule(task, 0, TimeUnit.SECONDS);
-        
+        worker.schedule(task, 10, TimeUnit.SECONDS);
     }
 
     private ScanCallback mScanCallback;
@@ -297,8 +293,12 @@ public void onBatchScanResults(List<ScanResult> results) {
             @Override
             public void onScanFailed(int errorCode) {
                 android.util.Log.e(TAG, "Scan Failed Error Code: " + errorCode);
-                stopScan();
-                scanAfterDelay();
+                if (errorCode == 1) {
+                    android.util.Log.e(TAG, "Already Scanning");
+                } else {
+                    stopScan();
+                    scanAfterDelay();
+                }
             }
         };
     }
@@ -373,9 +373,6 @@ public void onServicesDiscovered(BluetoothGatt gatt, int status) {
             } else {
                 Log.w(TAG, "onServicesDiscovered received: " + status);
             }
-
-
-
         }
 
         @Override
@@ -396,13 +393,14 @@ public void onCharacteristicWrite(BluetoothGatt gatt, BluetoothGattCharacteristi
             if (status == BluetoothGatt.GATT_SUCCESS) {
                 if (String.valueOf(characteristic.getUuid()).equalsIgnoreCase(String.valueOf(authCharacteristic.getUuid()))) {
                     android.util.Log.i(TAG, "auth? " + String.valueOf(characteristic.getUuid()));
-                    gatt.readCharacteristic(characteristic);
+                    if (characteristic.getValue() != null && characteristic.getValue()[0] != 0x7 && characteristic.getValue()[0] != 0x6) {
+                        gatt.readCharacteristic(characteristic);
+                    }
                 } else {
                     android.util.Log.i(TAG, "control?" + String.valueOf(characteristic.getUuid()));
 
                 }
             }
-
 //            mGatt.setCharacteristicNotification(characteristic, false);
         }
 
@@ -495,36 +493,25 @@ public void onCharacteristicChanged(BluetoothGatt gatt, BluetoothGattCharacteris
             if (firstByte == 0x2f) {
                 SensorRxMessage sensorRx = new SensorRxMessage(characteristic.getValue());
 
-                long timeSince = new Date().getTime() - lastRead;
-                android.util.Log.i("ms since", Long.toString(timeSince));
-                if (timeSince > 3 * 60 * 1000) {
-                    TransmitterData txData = new TransmitterData();
-                    ByteBuffer sensorData = ByteBuffer.allocate(buffer.length);
-                    sensorData.order(ByteOrder.LITTLE_ENDIAN);
-                    sensorData.put(buffer, 0, buffer.length);
-                    txData.raw_data = sensorRx.unfiltered;
-                    txData.filtered_data = sensorRx.filtered;
-
-                    if (sensorRx.status == TransmitterStatus.BRICKED) {
-                        //TODO Handle this in UI/Notification
-                    } else if (sensorRx.status == TransmitterStatus.LOW) {
-                        txData.sensor_battery_level = 206;
-                    } else {
-                        txData.sensor_battery_level = 216;
-                    }
+                ByteBuffer sensorData = ByteBuffer.allocate(buffer.length);
+                sensorData.order(ByteOrder.LITTLE_ENDIAN);
+                sensorData.put(buffer, 0, buffer.length);
+
+                int sensor_battery_level = 0;
+                if (sensorRx.status == TransmitterStatus.BRICKED) {
+                    //TODO Handle this in UI/Notification
+                } else if (sensorRx.status == TransmitterStatus.LOW) {
+                    sensor_battery_level = 206;
+                } else {
+                    sensor_battery_level = 216;
+                }
 
-                    txData.uuid = UUID.randomUUID().toString();
-                    txData.timestamp = new Date().getTime();
-                    lastRead = txData.timestamp;
-//                    lastRead = startTimeInterval + sensorRx.timestamp;
-//                    txData.timestamp = lastRead;
-                    android.util.Log.i("timestamp", Long.toString(txData.timestamp));
-
-                    processNewTransmitterData(txData, txData.timestamp);
-                    if (pendingIntent != null)
-                        alarm.cancel(pendingIntent);
-                    keepAlive();
+                processNewTransmitterData(sensorRx.unfiltered, sensorRx.filtered, sensor_battery_level, new Date().getTime());
+                if (pendingIntent != null) {
+                    alarm.cancel(pendingIntent);
                 }
+                keepAlive();
+                
                 doDisconnectMessage(gatt, characteristic);
                 gatt.setCharacteristicNotification(characteristic, false);
             }
@@ -549,11 +536,13 @@ else if (firstByte == 0x25) {
     };
 
 
-    private void processNewTransmitterData(TransmitterData transmitterData, long timestamp) {
+    private void processNewTransmitterData(int raw_data , int filtered_data,int sensor_battery_level, long CaptureTime) {
+
+        TransmitterData transmitterData = TransmitterData.create(raw_data, sensor_battery_level, CaptureTime);
         if (transmitterData == null) {
+            Log.i(TAG, "TransmitterData.create failed: Duplicate packet");
             return;
         }
-
         Sensor sensor = Sensor.currentSensor();
         if (sensor == null) {
             Log.i(TAG, "setSerialDataToTransmitterRawData: No Active Sensor, Data only stored in Transmitter Data");
@@ -563,8 +552,8 @@ private void processNewTransmitterData(TransmitterData transmitterData, long tim
         Sensor.updateBatteryLevel(sensor, transmitterData.sensor_battery_level);
         android.util.Log.i("timestamp create", Long.toString(transmitterData.timestamp));
 
-        BgReading.create(transmitterData.raw_data, transmitterData.filtered_data, this, transmitterData.timestamp);
-        transmitterData.save();
+        BgReading.create(transmitterData.raw_data, filtered_data, this, transmitterData.timestamp);
+
 
     }
 

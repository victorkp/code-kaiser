diff --git a/app/build.gradle b/app/build.gradle
index 988ab9d..98a2276 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -92,6 +92,7 @@ android {
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
+    wearApp project(':wear')
     testCompile 'com.squareup.okhttp:mockwebserver:2.5.0'
     compile 'com.nispok:snackbar:2.10.8'
     compile 'com.android.support:appcompat-v7:23.1.0'
@@ -102,7 +103,7 @@ dependencies {
     compile 'com.getpebble:pebblekit:3.0.0'
     compile 'io.reactivex:rxjava:1.0.0'
     compile 'com.github.lecho:hellocharts-android:v1.5.5'
-
+    compile 'com.google.android.gms:play-services-wearable:7.5.0'
     compile 'com.google.guava:guava:18.0'
 
     compile('com.github.nightscout:android-uploader:CORE_FOR_XDRIP') {
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
index 3a8e00b..b97bae9 100644
--- a/app/src/main/AndroidManifest.xml
+++ b/app/src/main/AndroidManifest.xml
@@ -9,6 +9,7 @@
         android:required="true" />
     <uses-feature android:name="android.hardware.usb.host" />
 
+    <uses-permission android:name="com.google.android.permission.PROVIDE_BACKGROUND" />
     <uses-permission android:name="android.permission.BLUETOOTH" />
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
@@ -68,6 +69,10 @@
             android:exported="true" >
         </service>
 
+        <service android:name=".wearintegration.WatchUpdaterService" android:exported="true" >
+            <intent-filter> <action android:name="com.google.android.gms.wearable.BIND_LISTENER" /> </intent-filter>
+        </service>
+
         <activity
             android:name=".Tables.BgReadingTable"
             android:label="Bg Readings Table" >
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index 4af8cc0..7765479 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -41,6 +41,7 @@
 import com.eveningoutpost.dexdrip.UtilityModels.Intents;
 import com.eveningoutpost.dexdrip.utils.ActivityWithMenu;
 import com.eveningoutpost.dexdrip.utils.DatabaseUtil;
+import com.eveningoutpost.dexdrip.wearintegration.WatchUpdaterService;
 import com.nispok.snackbar.Snackbar;
 import com.nispok.snackbar.SnackbarManager;
 import com.nispok.snackbar.enums.SnackbarType;
@@ -460,6 +461,14 @@ private void displayCurrentInfoFromReading(BgReading lastBgReading, boolean pred
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         getMenuInflater().inflate(R.menu.menu_home, menu);
+
+        //wear integration
+        if (!prefs.getBoolean("wear_sync", false)) {
+            menu.removeItem(R.id.action_open_watch_settings);
+            menu.removeItem(R.id.action_resend_last_bg);
+        }
+
+        //speak readings
         MenuItem menuItem =  menu.findItem(R.id.action_toggle_speakreadings);
         if(prefs.getBoolean("bg_to_speech_shortcut", false)){
             menuItem.setVisible(true);
@@ -476,6 +485,15 @@ public boolean onCreateOptionsMenu(Menu menu) {
 
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
+
+        switch (item.getItemId()) {
+            case R.id.action_resend_last_bg:
+                startService(new Intent(this, WatchUpdaterService.class).setAction(WatchUpdaterService.ACTION_RESEND));
+                break;
+            case R.id.action_open_watch_settings:
+                startService(new Intent(this, WatchUpdaterService.class).setAction(WatchUpdaterService.ACTION_OPEN_SETTINGS));
+        }
+
         if (item.getItemId() == R.id.action_export_database) {
             new AsyncTask<Void, Void, String>() {
                 @Override
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index 67475e4..e7c0872 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -25,9 +25,9 @@
 import com.eveningoutpost.dexdrip.utils.BgToSpeech;
 import com.eveningoutpost.dexdrip.ShareModels.BgUploader;
 import com.eveningoutpost.dexdrip.WidgetUpdateService;
+import com.eveningoutpost.dexdrip.wearintegration.WatchUpdaterService;
 import com.eveningoutpost.dexdrip.xDripWidget;
 
-import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -107,38 +107,11 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
                 bundle.putInt(Intents.EXTRA_SENSOR_BATTERY, getBatteryLevel(context));
                 bundle.putLong(Intents.EXTRA_TIMESTAMP, bgReading.timestamp);
 
-                //raw value
-                double slope = 0, intercept = 0, scale = 0, filtered = 0, unfiltered = 0, raw = 0;
                 Calibration cal = Calibration.last();
-                if (cal != null){
-                    // slope/intercept/scale like uploaded to NightScout (NightScoutUploader.java)
-                    if(cal.check_in) {
-                        slope = cal.first_slope;
-                        intercept= cal.first_intercept;
-                        scale =  cal.first_scale;
-                    } else {
-                        slope = 1000/cal.slope;
-                        intercept=  (cal.intercept * -1000) / (cal.slope);
-                        scale = 1;
-                    }
-                    unfiltered= bgReading.usedRaw()*1000;
-                    filtered = bgReading.ageAdjustedFiltered()*1000;
-                }
-                //raw logic from https://github.com/nightscout/cgm-remote-monitor/blob/master/lib/plugins/rawbg.js#L59
-                if (slope != 0 && intercept != 0 && scale != 0) {
-                    if (filtered == 0 || bgReading.calculated_value < 40) {
-                        raw = scale * (unfiltered - intercept) / slope;
-                    } else {
-                        double ratio = scale * (filtered - intercept) / slope / bgReading.calculated_value;
-                        raw = scale * (unfiltered - intercept) / slope / ratio;
-                    }
-                }
-                bundle.putDouble(Intents.EXTRA_RAW, raw);
+                bundle.putDouble(Intents.EXTRA_RAW, NightscoutUploader.getNightscoutRaw(bgReading, cal));
                 Intent intent = new Intent(Intents.ACTION_NEW_BG_ESTIMATE);
                 intent.putExtras(bundle);
                 intent.addFlags(Intent.FLAG_INCLUDE_STOPPED_PACKAGES);
-
-
                 context.sendBroadcast(intent, Intents.RECEIVER_PERMISSION);
 
                 //just keep it alive for 3 more seconds to allow the watch to be updated
@@ -148,10 +121,25 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
 
             }
 
+            // send to wear
+            if (prefs.getBoolean("wear_sync", false)) {
+
+                /*By integrating the watch part of Nightwatch we inherited the same wakelock
+                    problems NW had - so adding the same quick fix for now.
+                    TODO: properly "wakelock" the wear (and probably pebble) services
+                 */
+                context.startService(new Intent(context, WatchUpdaterService.class));
+                powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                        "quickFix3").acquire(15000);
+            }
+
+            // send to pebble
             if(prefs.getBoolean("broadcast_to_pebble", false)) {
                 context.startService(new Intent(context, PebbleSync.class));
             }
 
+
+
             if (prefs.getBoolean("share_upload", false)) {
                 Log.d("ShareRest", "About to call ShareRest!!");
                 String receiverSn = prefs.getString("share_key", "SM00000000").toUpperCase();
@@ -169,7 +157,7 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
             wakeLock.release();
         }
     }
-    
+
     public void deleteThis() {
         this.delete();
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index c4814e6..aba0b8f 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -61,7 +61,9 @@
         private SharedPreferences prefs;
         private OkHttpClient client;
 
-        public interface NightscoutService {
+
+
+    public interface NightscoutService {
             @POST("entries")
             Call<ResponseBody> upload(@Header("api-secret") String secret, @Body RequestBody body);
 
@@ -267,15 +269,9 @@ private void populateV1APICalibrationEntry(JSONArray array, Calibration record)
             json.put("type", "cal");
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
-            if(record.check_in) {
-                json.put("slope", (record.first_slope));
-                json.put("intercept", ((record.first_intercept)));
-                json.put("scale", record.first_scale);
-            } else {
-                json.put("slope", (1000/record.slope));
-                json.put("intercept", ((record.intercept * -1000) / (record.slope)));
-                json.put("scale", 1);
-            }
+            json.put("slope", getNightscoutSlope(record));
+            json.put("intercept", getNightscoutIntercept(record));
+            json.put("scale", getNightscoutScale(record));
             json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
@@ -372,15 +368,9 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             testData.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
                             testData.put("date", calRecord.timestamp);
                             testData.put("dateString", format.format(calRecord.timestamp));
-                            if (calRecord.check_in) {
-                                testData.put("slope", (calRecord.first_slope));
-                                testData.put("intercept", ((calRecord.first_intercept)));
-                                testData.put("scale", calRecord.first_scale);
-                            } else {
-                                testData.put("slope",  (1000/calRecord.slope));
-                                testData.put("intercept", ((calRecord.intercept * -1000) / (calRecord.slope)));
-                                testData.put("scale", 1);
-                            }
+                            testData.put("slope", getNightscoutSlope(calRecord));
+                            testData.put("intercept", getNightscoutIntercept(calRecord));
+                            testData.put("scale", getNightscoutScale(calRecord));
 
                             testData.put("type", "cal");
                             
@@ -422,4 +412,50 @@ public int getBatteryLevel() {
             return (int) (((float) level / (float) scale) * 100.0f);
         } else return 50;
     }
+    public static double getNightscoutRaw(BgReading bgReading, Calibration cal) {
+        double slope = 0, intercept = 0, scale = 0, filtered = 0, unfiltered = 0, nightscoutRaw = 0;
+        if (cal != null){
+            // slope/intercept/scale like uploaded to NightScout (NightScoutUploader.java)
+            slope = getNightscoutSlope(cal);
+            intercept = getNightscoutIntercept(cal);
+            scale = getNightscoutScale(cal);
+            unfiltered= bgReading.usedRaw()*1000;
+            filtered = bgReading.ageAdjustedFiltered()*1000;
+        }
+        //nightscoutRaw logic from https://github.com/nightscout/cgm-remote-monitor/blob/master/lib/plugins/rawbg.js#L59
+        if (slope != 0 && intercept != 0 && scale != 0) {
+            if (filtered == 0 || bgReading.calculated_value < 40) {
+                nightscoutRaw = scale * (unfiltered - intercept) / slope;
+            } else {
+                double ratio = scale * (filtered - intercept) / slope / bgReading.calculated_value;
+                nightscoutRaw = scale * (unfiltered - intercept) / slope / ratio;
+            }
+        }
+        return nightscoutRaw;
+    }
+
+    public static double getNightscoutScale(Calibration cal) {
+        if(cal.check_in) {
+            return  cal.first_scale;
+        } else {
+            return 1;
+        }
+    }
+
+    public static double getNightscoutIntercept(Calibration cal) {
+        if(cal.check_in) {
+            return cal.first_intercept;
+        } else {
+            return (cal.intercept * -1000) / (cal.slope);
+        }
+    }
+
+    public static double getNightscoutSlope(Calibration cal) {
+        if(cal.check_in) {
+            return cal.first_slope;
+        } else {
+            return 1000/cal.slope;
+        }
+    }
+    
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/SendToDataLayerThread.java b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/SendToDataLayerThread.java
new file mode 100644
index 0000000..4c94566
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/SendToDataLayerThread.java
@@ -0,0 +1,46 @@
+package com.eveningoutpost.dexdrip.wearintegration;
+
+import android.os.AsyncTask;
+import android.util.Log;
+
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.wearable.DataApi;
+import com.google.android.gms.wearable.DataMap;
+import com.google.android.gms.wearable.Node;
+import com.google.android.gms.wearable.NodeApi;
+import com.google.android.gms.wearable.PutDataMapRequest;
+import com.google.android.gms.wearable.PutDataRequest;
+import com.google.android.gms.wearable.Wearable;
+
+/**
+ * Created by stephenblack on 12/26/14.
+ */
+class SendToDataLayerThread extends AsyncTask<DataMap,Void,Void> {
+    private GoogleApiClient googleApiClient;
+    String path;
+
+    SendToDataLayerThread(String path, GoogleApiClient pGoogleApiClient) {
+        this.path = path;
+        googleApiClient = pGoogleApiClient;
+    }
+
+    @Override
+    protected Void doInBackground(DataMap... params) {
+        NodeApi.GetConnectedNodesResult nodes = Wearable.NodeApi.getConnectedNodes(googleApiClient).await();
+        for (Node node : nodes.getNodes()) {
+            for (DataMap dataMap : params) {
+                PutDataMapRequest putDMR = PutDataMapRequest.create(path);
+                putDMR.getDataMap().putAll(dataMap);
+                PutDataRequest request = putDMR.asPutDataRequest();
+                DataApi.DataItemResult result = Wearable.DataApi.putDataItem(googleApiClient,request).await();
+                if (result.getStatus().isSuccess()) {
+                    Log.d("SendDataThread", "DataMap: " + dataMap + " sent to: " + node.getDisplayName());
+                } else {
+                    Log.d("SendDataThread", "ERROR: failed to send DataMap");
+                }
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java
new file mode 100644
index 0000000..8b3cc42
--- /dev/null
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/wearintegration/WatchUpdaterService.java
@@ -0,0 +1,249 @@
+package com.eveningoutpost.dexdrip.wearintegration;
+
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Bundle;
+import android.preference.PreferenceManager;
+import android.util.Log;
+
+import com.eveningoutpost.dexdrip.Models.BgReading;
+import com.eveningoutpost.dexdrip.UtilityModels.BgGraphBuilder;
+import com.eveningoutpost.dexdrip.UtilityModels.BgSendQueue;
+import com.eveningoutpost.dexdrip.UtilityModels.Constants;
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.wearable.DataMap;
+import com.google.android.gms.wearable.MessageEvent;
+import com.google.android.gms.wearable.PutDataMapRequest;
+import com.google.android.gms.wearable.PutDataRequest;
+import com.google.android.gms.wearable.Wearable;
+import com.google.android.gms.wearable.WearableListenerService;
+
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.List;
+
+public class WatchUpdaterService extends WearableListenerService implements
+        GoogleApiClient.ConnectionCallbacks,
+        GoogleApiClient.OnConnectionFailedListener {
+    public static final String ACTION_RESEND = WatchUpdaterService.class.getName().concat(".Resend");
+    public static final String ACTION_OPEN_SETTINGS = WatchUpdaterService.class.getName().concat(".OpenSettings");
+
+    private GoogleApiClient googleApiClient;
+    public static final String WEARABLE_DATA_PATH = "/nightscout_watch_data";
+    public static final String WEARABLE_RESEND_PATH = "/nightscout_watch_data_resend";
+    private static final String OPEN_SETTINGS_PATH = "/openwearsettings";
+
+    boolean wear_integration = false;
+    boolean pebble_integration = false;
+    SharedPreferences mPrefs;
+    SharedPreferences.OnSharedPreferenceChangeListener mPreferencesListener;
+
+    @Override
+    public void onCreate() {
+        mPrefs = PreferenceManager.getDefaultSharedPreferences(getApplicationContext());
+        listenForChangeInSettings();
+        setSettings();
+        if (wear_integration) {
+            googleApiConnect();
+        }
+    }
+
+    public void listenForChangeInSettings() {
+        mPreferencesListener = new SharedPreferences.OnSharedPreferenceChangeListener() {
+            public void onSharedPreferenceChanged(SharedPreferences prefs, String key) {
+                setSettings();
+            }
+        };
+        mPrefs.registerOnSharedPreferenceChangeListener(mPreferencesListener);
+    }
+
+    public void setSettings() {
+        wear_integration = mPrefs.getBoolean("wear_sync", false);
+        if (wear_integration) {
+            googleApiConnect();
+        }
+    }
+
+    public void googleApiConnect() {
+        if(googleApiClient != null && (googleApiClient.isConnected() || googleApiClient.isConnecting())) { googleApiClient.disconnect(); }
+        googleApiClient = new GoogleApiClient.Builder(this)
+                .addConnectionCallbacks(this)
+                .addOnConnectionFailedListener(this)
+                .addApi(Wearable.API)
+                .build();
+        Wearable.MessageApi.addListener(googleApiClient, this);
+        if (googleApiClient.isConnected()) {
+            Log.d("WatchUpdater", "API client is connected");
+        } else {
+            googleApiClient.connect();
+        }
+    }
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        double timestamp = 0;
+        if (intent != null) {
+            timestamp = intent.getDoubleExtra("timestamp", 0);
+        }
+
+        String action = null;
+        if (intent != null) {
+            action = intent.getAction();
+        }
+
+        if (wear_integration) {
+            if (googleApiClient.isConnected()) {
+                if (ACTION_RESEND.equals(action)) {
+                    resendData();
+                } else if (ACTION_OPEN_SETTINGS.equals(action)) {
+                    sendNotification();
+                } else {
+                    sendData();
+                }
+            } else {
+                googleApiClient.connect();
+            }
+        }
+
+        if (pebble_integration) {
+            sendData();
+        }
+        return START_STICKY;
+    }
+
+
+    @Override
+    public void onConnected(Bundle connectionHint) {
+        sendData();
+    }
+
+    @Override
+    public void onMessageReceived(MessageEvent event) {
+        if (wear_integration) {
+            if (event != null && event.getPath().equals(WEARABLE_RESEND_PATH))
+                resendData();
+        }
+    }
+
+    public void sendData() {
+        BgReading bg = BgReading.last();
+        if (bg != null) {
+            if(googleApiClient != null && !googleApiClient.isConnected() && !googleApiClient.isConnecting()) { googleApiConnect(); }
+            if (wear_integration) {
+                new SendToDataLayerThread(WEARABLE_DATA_PATH, googleApiClient).execute(dataMap(bg, mPrefs, new BgGraphBuilder(getApplicationContext())));
+            }
+        }
+    }
+
+    private void resendData() {
+        if(googleApiClient != null && !googleApiClient.isConnected() && !googleApiClient.isConnecting()) { googleApiConnect(); }
+        long startTime = new Date().getTime() - (60000 * 60 * 24);
+        BgReading last_bg = BgReading.last();
+        List<BgReading> graph_bgs = BgReading.latestForGraph(60, startTime);
+        BgGraphBuilder bgGraphBuilder = new BgGraphBuilder(getApplicationContext());
+        if (!graph_bgs.isEmpty()) {
+            DataMap entries = dataMap(last_bg, mPrefs, bgGraphBuilder);
+            final ArrayList<DataMap> dataMaps = new ArrayList<>(graph_bgs.size());
+            for (BgReading bg : graph_bgs) {
+                dataMaps.add(dataMap(bg, mPrefs, bgGraphBuilder));
+            }
+            entries.putDataMapArrayList("entries", dataMaps);
+
+            new SendToDataLayerThread(WEARABLE_DATA_PATH, googleApiClient).execute(entries);
+        }
+    }
+
+
+    private void sendNotification() {
+        if (googleApiClient.isConnected()) {
+            PutDataMapRequest dataMapRequest = PutDataMapRequest.create(OPEN_SETTINGS_PATH);
+            //unique content
+            dataMapRequest.getDataMap().putDouble("timestamp", System.currentTimeMillis());
+            dataMapRequest.getDataMap().putString("openSettings", "openSettings");
+            PutDataRequest putDataRequest = dataMapRequest.asPutDataRequest();
+            Wearable.DataApi.putDataItem(googleApiClient, putDataRequest);
+        } else {
+            Log.e("OpenSettings", "No connection to wearable available!");
+        }
+    }
+
+    private DataMap dataMap(BgReading bg, SharedPreferences sPrefs, BgGraphBuilder bgGraphBuilder) {
+        Double highMark = Double.parseDouble(sPrefs.getString("highValue", "170"));
+        Double lowMark = Double.parseDouble(sPrefs.getString("lowValue", "70"));
+        DataMap dataMap = new DataMap();
+
+        int battery = BgSendQueue.getBatteryLevel(getApplicationContext());
+
+        dataMap.putString("sgvString", bgGraphBuilder.unitized_string(bg.calculated_value));
+        dataMap.putString("slopeArrow", bg.slopeArrow());
+        dataMap.putDouble("timestamp", bg.timestamp); //TODO: change that to long (was like that in NW)
+        dataMap.putString("delta", bgGraphBuilder.unitizedDeltaString(true, true));
+        dataMap.putString("battery", "" + battery);
+        dataMap.putLong("sgvLevel", sgvLevel(bg.calculated_value, sPrefs, bgGraphBuilder));
+        dataMap.putInt("batteryLevel", (battery>=30)?1:0);
+        dataMap.putDouble("sgvDouble", bg.calculated_value);
+        dataMap.putDouble("high", inMgdl(highMark, sPrefs));
+        dataMap.putDouble("low", inMgdl(lowMark, sPrefs));
+        //TODO: Add raw again
+        //dataMap.putString("rawString", threeRaw((prefs.getString("units", "mgdl").equals("mgdl"))));
+        return dataMap;
+    }
+
+
+    // TODO: Integrate these helper methods into BGGraphBuilder.
+    // TODO: clean them up  (no "if(boolean){return true; else return false;").
+    // TODO: Make the needed methods in BgGraphBuilder static.
+
+    public long sgvLevel(double sgv_double, SharedPreferences prefs, BgGraphBuilder bgGB) {
+        Double highMark = Double.parseDouble(prefs.getString("highValue", "170"));
+        Double lowMark = Double.parseDouble(prefs.getString("lowValue", "70"));
+        if(bgGB.unitized(sgv_double) >= highMark) {
+            return 1;
+        } else if (bgGB.unitized(sgv_double) >= lowMark) {
+            return 0;
+        } else {
+            return -1;
+        }
+    }
+
+    public double inMgdl(double value, SharedPreferences sPrefs) {
+        if (!doMgdl(sPrefs)) {
+            return value * Constants.MMOLL_TO_MGDL;
+        } else {
+            return value;
+        }
+
+    }
+
+    public boolean doMgdl(SharedPreferences sPrefs) {
+        String unit = sPrefs.getString("units", "mgdl");
+        if (unit.compareTo("mgdl") == 0) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+
+
+
+
+    @Override
+    public void onDestroy() {
+        if (googleApiClient != null && googleApiClient.isConnected()) {
+            googleApiClient.disconnect();
+        }
+        if (mPrefs != null && mPreferencesListener != null) {
+            mPrefs.unregisterOnSharedPreferenceChangeListener(mPreferencesListener);
+        }
+    }
+
+    @Override
+    public void onConnectionSuspended(int cause) {
+    }
+
+    @Override
+    public void onConnectionFailed(ConnectionResult connectionResult) {
+    }
+}
diff --git a/app/src/main/res/menu/menu_home.xml b/app/src/main/res/menu/menu_home.xml
index 1cfec86..24b0d3f 100644
--- a/app/src/main/res/menu/menu_home.xml
+++ b/app/src/main/res/menu/menu_home.xml
@@ -1,27 +1,40 @@
 <?xml version="1.0" encoding="utf-8"?>
-<menu xmlns:android="http://schemas.android.com/apk/res/android">
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+
+    <item
+        android:id="@+id/action_resend_last_bg"
+        android:orderInCategory="100"
+        android:title="@string/action_resend_to_watch"
+        app:showAsAction="never" />
+    <item
+        android:id="@+id/action_open_watch_settings"
+        android:orderInCategory="100"
+        android:title="@string/action_open_watch_setting"
+        app:showAsAction="never" />
+
     <item android:id="@+id/action_export_database"
         android:title="@string/menu_export_database"
         android:checkable="false"
         android:orderInCategory="1"
-        android:showAsAction="never"/>
+        app:showAsAction="never"/>
 
     <item android:id="@+id/action_import_db"
         android:title="@string/menu_import_db"
         android:checkable="false"
         android:orderInCategory="1"
-        android:showAsAction="never"/>
+        app:showAsAction="never"/>
 
     <item android:id="@+id/action_export_csv_sidiary"
         android:title="@string/menu_export_csv_sidiary"
         android:checkable="false"
         android:orderInCategory="1"
-        android:showAsAction="never"/>
+        app:showAsAction="never"/>
 
     <item android:id="@+id/action_toggle_speakreadings"
         android:title="@string/menu_toggle_speakreadings"
         android:checkable="true"
         android:orderInCategory="2"
         android:visible="false"
-        android:showAsAction="never"/>
+        app:showAsAction="never"/>
 </menu>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
index 237d161..d594ec6 100644
--- a/app/src/main/res/values/strings.xml
+++ b/app/src/main/res/values/strings.xml
@@ -132,4 +132,6 @@
         The database verions number may change with xDrip updates.
         It is best to import the database with the same version of the xDrip app it was exported and then update xDrip.
     </string>
+    <string name="action_resend_to_watch">Resend glucose to watch</string>
+    <string name="action_open_watch_setting">Open Settings on Wear</string>
 </resources>
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index aad375a..3946e82 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -1,5 +1,22 @@
 <?xml version="1.0" encoding="utf-8"?>
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+
+    <PreferenceCategory
+        android:title="Watch Integration"
+        android:key="watch_integration">
+        <CheckBoxPreference
+            android:key="wear_sync"
+            android:title="Android Wear Integration"
+            android:summary="Send data to Android Wear Watchface."
+            android:defaultValue="false" />
+        <SwitchPreference
+            android:title="Send to Pebble"
+            android:key="broadcast_to_pebble"
+            android:summary="If you have a pebble watch you can send bg data straight to it"
+            android:defaultValue="false">
+        </SwitchPreference>
+    </PreferenceCategory>
+
     <PreferenceCategory
         android:key="other_category"
         android:title="Other Settings">
@@ -9,12 +26,6 @@
             android:summary="@string/pref_summary_broadcast_enabled"
             android:defaultValue="false" >
         </SwitchPreference>
-        <SwitchPreference
-            android:title="Send to Pebble"
-            android:key="broadcast_to_pebble"
-            android:summary="If you have a pebble watch you can send bg data straight to it"
-            android:defaultValue="false">
-        </SwitchPreference>
         <CheckBoxPreference
             android:key="predictive_bg"
             android:title="Display Predictive Values"
diff --git a/settings.gradle b/settings.gradle
index e7b4def..9ccfb61 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':app'
+include ':app', ':wear'
diff --git a/wear/.gitignore b/wear/.gitignore
new file mode 100644
index 0000000..796b96d
--- /dev/null
+++ b/wear/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/wear/build.gradle b/wear/build.gradle
new file mode 100644
index 0000000..45d4511
--- /dev/null
+++ b/wear/build.gradle
@@ -0,0 +1,28 @@
+apply plugin: 'com.android.application'
+
+
+android {
+    compileSdkVersion 23
+    buildToolsVersion "22.0.1"
+
+    defaultConfig {
+        applicationId "com.eveningoutpost.dexdrip"
+        minSdkVersion 20
+        targetSdkVersion 23
+        versionCode 1
+        versionName "1.0.2"
+    }
+    buildTypes {
+        release {
+            minifyEnabled false
+            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
+        }
+    }
+}
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.ustwo.android:clockwise-wearable:1.0.2'
+    compile 'com.google.android.support:wearable:1.1.0'
+    compile 'com.google.android.gms:play-services-wearable:7.3.0'
+}
diff --git a/wear/libs/hellocharts-library-1.1.jar b/wear/libs/hellocharts-library-1.1.jar
new file mode 100644
index 0000000..85b2651
Binary files /dev/null and b/wear/libs/hellocharts-library-1.1.jar differ
diff --git a/wear/proguard-rules.pro b/wear/proguard-rules.pro
new file mode 100644
index 0000000..3278718
--- /dev/null
+++ b/wear/proguard-rules.pro
@@ -0,0 +1,17 @@
+# Add project specific ProGuard rules here.
+# By default, the flags in this file are appended to flags specified
+# in /Users/stephenblack/Library/Android/sdk/tools/proguard/proguard-android.txt
+# You can edit the include path and order by changing the proguardFiles
+# directive in build.gradle.
+#
+# For more details, see
+#   http://developer.android.com/guide/developing/tools/proguard.html
+
+# Add any project specific keep options here:
+
+# If your project uses WebView with JS, uncomment the following
+# and specify the fully qualified class name to the JavaScript interface
+# class:
+#-keepclassmembers class fqcn.of.javascript.interface.for.webview {
+#   public *;
+#}
diff --git a/wear/src/main/AndroidManifest.xml b/wear/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..149d405
--- /dev/null
+++ b/wear/src/main/AndroidManifest.xml
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="com.eveningoutpost.dexdrip" >
+
+    <uses-feature android:name="android.hardware.type.watch" />
+    <uses-permission android:name="com.google.android.permission.PROVIDE_BACKGROUND" />
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+
+    <application
+        android:allowBackup="true"
+        android:icon="@drawable/ic_icon"
+        android:label="@string/app_name"
+        android:theme="@android:style/Theme.DeviceDefault" >
+        <meta-data
+                android:name="com.google.android.gms.version"
+                android:value="@integer/google_play_services_version" />
+        <service
+            android:name=".Home"
+            android:allowEmbedded="true"
+            android:label="xDrip"
+            android:permission="android.permission.BIND_WALLPAPER">
+            <meta-data android:name="android.service.wallpaper"
+                       android:resource="@xml/watch_face"/>
+            <meta-data android:name="com.google.android.wearable.watchface.preview" android:resource="@drawable/watchface_graph" />
+            <intent-filter>
+                <action android:name="android.service.wallpaper.WallpaperService" />
+                <category android:name="com.google.android.wearable.watchface.category.WATCH_FACE" />
+            </intent-filter>
+        </service>
+
+        <service
+            android:name=".LargeHome"
+            android:allowEmbedded="true"
+            android:label="xDrip(Large)"
+            android:permission="android.permission.BIND_WALLPAPER">
+            <meta-data android:name="android.service.wallpaper"
+                       android:resource="@xml/watch_face"/>
+            <meta-data android:name="com.google.android.wearable.watchface.preview" android:resource="@drawable/watchface_dark" />
+            <intent-filter>
+                <action android:name="android.service.wallpaper.WallpaperService" />
+                <category android:name="com.google.android.wearable.watchface.category.WATCH_FACE" />
+            </intent-filter>
+        </service>
+
+        <service
+            android:name=".BIGChart"
+            android:allowEmbedded="true"
+            android:label="xDrip(BigChart)"
+            android:permission="android.permission.BIND_WALLPAPER">
+            <meta-data android:name="android.service.wallpaper"
+                android:resource="@xml/watch_face"/>
+            <meta-data android:name="com.google.android.wearable.watchface.preview" android:resource="@drawable/watchface_bigchart" />
+            <intent-filter>
+                <action android:name="android.service.wallpaper.WallpaperService" />
+                <category android:name="com.google.android.wearable.watchface.category.WATCH_FACE" />
+            </intent-filter>
+        </service>
+
+        <service
+            android:name=".CircleWatchface"
+            android:allowEmbedded="true"
+            android:label="xDrip(Circle)"
+            android:permission="android.permission.BIND_WALLPAPER">
+            <meta-data android:name="android.service.wallpaper"
+                android:resource="@xml/watch_face"/>
+            <meta-data android:name="com.google.android.wearable.watchface.preview" android:resource="@drawable/watchface_circle" />
+            <intent-filter>
+                <action android:name="android.service.wallpaper.WallpaperService" />
+                <category android:name="com.google.android.wearable.watchface.category.WATCH_FACE" />
+            </intent-filter>
+        </service>
+
+
+        <service android:name=".ListenerService">
+            <intent-filter>
+                <action android:name="com.google.android.gms.wearable.BIND_LISTENER" />
+            </intent-filter>
+        </service>
+        <activity
+            android:name=".NWPreferences"
+            android:label="@string/app_name" >
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+        </activity>
+
+    </application>
+
+</manifest>
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java
new file mode 100644
index 0000000..8093d2b
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BIGChart.java
@@ -0,0 +1,507 @@
+package com.eveningoutpost.dexdrip;
+
+import android.app.NotificationManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.LinearGradient;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.graphics.Shader;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.wearable.view.WatchViewStub;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.Display;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.WindowInsets;
+import android.view.WindowManager;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.google.android.gms.wearable.DataMap;
+import com.ustwo.clockwise.WatchFace;
+import com.ustwo.clockwise.WatchFaceTime;
+import com.ustwo.clockwise.WatchMode;
+import com.ustwo.clockwise.WatchShape;
+
+import java.util.ArrayList;
+import java.util.Date;
+
+import lecho.lib.hellocharts.util.Utils;
+import lecho.lib.hellocharts.view.LineChartView;
+
+/**
+ * Created by stephenblack on 12/29/14.
+ */
+public class BIGChart extends WatchFace implements SharedPreferences.OnSharedPreferenceChangeListener {
+    public final static IntentFilter INTENT_FILTER;
+    public static final long[] vibratePattern = {0,400,300,400,300,400};
+    public TextView mTime, mSgv, mTimestamp, mDelta;
+    public RelativeLayout mRelativeLayout;
+    //public LinearLayout mLinearLayout;
+    public long sgvLevel = 0;
+    public int batteryLevel = 1;
+    public int ageLevel = 1;
+    public int highColor = Color.YELLOW;
+    public int lowColor = Color.RED;
+    public int midColor = Color.WHITE;
+    public int pointSize = 2;
+    public boolean singleLine = false;
+    public boolean layoutSet = false;
+    public int missed_readings_alert_id = 818;
+    public BgGraphBuilder bgGraphBuilder;
+    public LineChartView chart;
+    public double datetime;
+    public ArrayList<BgWatchData> bgDataList = new ArrayList<>();
+    public PowerManager.WakeLock wakeLock;
+    // related to manual layout
+    public View layoutView;
+    private final Point displaySize = new Point();
+    private int specW, specH;
+    private int animationAngle = 0;
+    private boolean isAnimated = false;
+
+    private LocalBroadcastManager localBroadcastManager;
+    private MessageReceiver messageReceiver;
+
+    protected SharedPreferences sharedPrefs;
+    private String rawString = "000 | 000 | 000";
+    private String batteryString = "--";
+    private String sgvString = "--";
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE))
+                .getDefaultDisplay();
+        display.getSize(displaySize);
+        wakeLock = ((PowerManager) getSystemService(Context.POWER_SERVICE)).newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Clock");
+
+        specW = View.MeasureSpec.makeMeasureSpec(displaySize.x,
+                View.MeasureSpec.EXACTLY);
+        specH = View.MeasureSpec.makeMeasureSpec(displaySize.y,
+                View.MeasureSpec.EXACTLY);
+        sharedPrefs = PreferenceManager
+                .getDefaultSharedPreferences(this);
+        sharedPrefs.registerOnSharedPreferenceChangeListener(this);
+        LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        layoutView = inflater.inflate(R.layout.activity_bigchart, null);
+        performViewSetup();
+    }
+
+    @Override
+    protected void onLayout(WatchShape shape, Rect screenBounds, WindowInsets screenInsets) {
+        super.onLayout(shape, screenBounds, screenInsets);
+        layoutView.onApplyWindowInsets(screenInsets);
+    }
+
+    public void performViewSetup() {
+        final WatchViewStub stub = (WatchViewStub) layoutView.findViewById(R.id.watch_view_stub);
+        IntentFilter messageFilter = new IntentFilter(Intent.ACTION_SEND);
+
+        messageReceiver = new MessageReceiver();
+        localBroadcastManager = LocalBroadcastManager.getInstance(this);
+        localBroadcastManager.registerReceiver(messageReceiver, messageFilter);
+
+        stub.setOnLayoutInflatedListener(new WatchViewStub.OnLayoutInflatedListener() {
+            @Override
+            public void onLayoutInflated(WatchViewStub stub) {
+                mTime = (TextView) stub.findViewById(R.id.watch_time);
+                mSgv = (TextView) stub.findViewById(R.id.sgv);
+                mTimestamp = (TextView) stub.findViewById(R.id.timestamp);
+                mDelta = (TextView) stub.findViewById(R.id.delta);
+                mRelativeLayout = (RelativeLayout) stub.findViewById(R.id.main_layout);
+                chart = (LineChartView) stub.findViewById(R.id.chart);
+                layoutSet = true;
+                showAgoRawBatt();
+                mRelativeLayout.measure(specW, specH);
+                mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                        mRelativeLayout.getMeasuredHeight());
+            }
+        });
+        ListenerService.requestData(this);
+        wakeLock.acquire(50);
+    }
+
+    public int ageLevel() {
+        if(timeSince() <= (1000 * 60 * 12)) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    public double timeSince() {
+        return System.currentTimeMillis() - datetime;
+    }
+
+    public String readingAge(boolean shortString) {
+        if (datetime == 0) { return shortString?"--'":"-- Minute ago"; }
+        int minutesAgo = (int) Math.floor(timeSince()/(1000*60));
+        if (minutesAgo == 1) {
+            return minutesAgo + (shortString?"'":" Minute ago");
+        }
+        return minutesAgo + (shortString?"'":" Minutes ago");
+    }
+
+    @Override
+    public void onDestroy() {
+        if(localBroadcastManager != null && messageReceiver != null){
+            localBroadcastManager.unregisterReceiver(messageReceiver);}
+        if (sharedPrefs != null){
+            sharedPrefs.unregisterOnSharedPreferenceChangeListener(this);
+        }
+        super.onDestroy();
+    }
+
+    static {
+        INTENT_FILTER = new IntentFilter();
+        INTENT_FILTER.addAction(Intent.ACTION_TIME_TICK);
+        INTENT_FILTER.addAction(Intent.ACTION_TIMEZONE_CHANGED);
+        INTENT_FILTER.addAction(Intent.ACTION_TIME_CHANGED);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if(layoutSet) {
+            this.mRelativeLayout.draw(canvas);
+            Log.d("onDraw", "draw");
+        }
+    }
+
+    @Override
+    protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
+        if (layoutSet && (newTime.hasHourChanged(oldTime) || newTime.hasMinuteChanged(oldTime))) {
+            wakeLock.acquire(50);
+            final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BIGChart.this);
+            mTime.setText(timeFormat.format(System.currentTimeMillis()));
+            showAgoRawBatt();
+
+            if(ageLevel()<=0) {
+                mSgv.setPaintFlags(mSgv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+            } else {
+                mSgv.setPaintFlags(mSgv.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
+            }
+
+            missedReadingAlert();
+            mRelativeLayout.measure(specW, specH);
+            mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                    mRelativeLayout.getMeasuredHeight());
+        }
+    }
+
+    public class MessageReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
+            if (layoutSet) {
+                wakeLock.acquire(50);
+                sgvLevel = dataMap.getLong("sgvLevel");
+                batteryLevel = dataMap.getInt("batteryLevel");
+                datetime = dataMap.getDouble("timestamp");
+                rawString = dataMap.getString("rawString");
+                sgvString = dataMap.getString("sgvString");
+                batteryString = dataMap.getString("battery");
+                mSgv.setText(dataMap.getString("sgvString"));
+
+                if(ageLevel()<=0) {
+                    mSgv.setPaintFlags(mSgv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+                } else {
+                    mSgv.setPaintFlags(mSgv.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
+                }
+
+                final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BIGChart.this);
+                mTime.setText(timeFormat.format(System.currentTimeMillis()));
+
+                showAgoRawBatt();
+
+                String delta = dataMap.getString("delta");
+
+                if (delta.endsWith(" mg/dl")) {
+                    mDelta.setText(delta.substring(0, delta.length() - 6));
+                } else if (delta.endsWith(" mmol")) {
+                    mDelta.setText(delta.substring(0, delta.length() - 5));
+                }
+
+                if (chart != null) {
+                    addToWatchSet(dataMap);
+                    setupCharts();
+                }
+                mRelativeLayout.measure(specW, specH);
+                mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                        mRelativeLayout.getMeasuredHeight());
+                invalidate();
+                setColor();
+
+                //start animation?
+                // dataMap.getDataMapArrayList("entries") == null -> not on "resend data".
+                if (sharedPrefs.getBoolean("animation", false) && dataMap.getDataMapArrayList("entries") == null && (sgvString.equals("100") || sgvString.equals("5.5") || sgvString.equals("5,5"))) {
+                    startAnimation();
+                }
+
+
+            } else {
+                Log.d("ERROR: ", "DATA IS NOT YET SET");
+            }
+        }
+    }
+
+    private void showAgoRawBatt() {
+
+        if( mTimestamp == null){
+            return;
+        }
+        mTimestamp.setText(readingAge(true));
+    }
+
+    public void setColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            setColorDark();
+        } else {
+            setColorBright();
+        }
+
+    }
+
+
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key){
+        setColor();
+        if(layoutSet){
+            showAgoRawBatt();
+            mRelativeLayout.measure(specW, specH);
+            mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                    mRelativeLayout.getMeasuredHeight());
+        }
+        invalidate();
+    }
+
+    protected void updateRainbow() {
+        animationAngle = (animationAngle + 1) % 360;
+        //Animation matrix:
+        int[] rainbow = {Color.RED, Color.YELLOW, Color.GREEN, Color.BLUE
+                , Color.CYAN};
+        Shader shader = new LinearGradient(0, 0, 0, 20, rainbow,
+                null, Shader.TileMode.MIRROR);
+        Matrix matrix = new Matrix();
+        matrix.setRotate(animationAngle);
+        shader.setLocalMatrix(matrix);
+        mSgv.getPaint().setShader(shader);
+        invalidate();
+    }
+
+    private synchronized boolean isAnimated() {
+        return isAnimated;
+    }
+
+    private synchronized void setIsAnimated(boolean isAnimated) {
+        this.isAnimated = isAnimated;
+    }
+
+    void startAnimation() {
+        Log.d("CircleWatchface", "start startAnimation");
+
+        Thread animator = new Thread() {
+
+
+            public void run() {
+                //TODO:Wakelock?
+                setIsAnimated(true);
+                for (int i = 0; i <= 8 * 1000 / 40; i++) {
+                    updateRainbow();
+                    try {
+                        Thread.sleep(40);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+                mSgv.getPaint().setShader(null);
+                setIsAnimated(false);
+                invalidate();
+                setColor();
+
+                System.gc();
+            }
+        };
+
+        animator.start();
+    }
+
+
+    protected void setColorDark() {
+        mTime.setTextColor(Color.WHITE);
+        mRelativeLayout.setBackgroundColor(Color.BLACK);
+        if (sgvLevel == 1) {
+            mSgv.setTextColor(Color.YELLOW);
+            mDelta.setTextColor(Color.YELLOW);
+        } else if (sgvLevel == 0) {
+            mSgv.setTextColor(Color.WHITE);
+            mDelta.setTextColor(Color.WHITE);
+        } else if (sgvLevel == -1) {
+            mSgv.setTextColor(Color.RED);
+            mDelta.setTextColor(Color.RED);
+        }
+
+
+        if (ageLevel == 1) {
+            mTimestamp.setTextColor(Color.WHITE);
+        } else {
+            mTimestamp.setTextColor(Color.RED);
+        }
+
+        if (batteryLevel == 1) {
+        } else {
+        }
+        if (chart != null) {
+            highColor = Color.YELLOW;
+            lowColor = Color.RED;
+            midColor = Color.WHITE;
+            singleLine = false;
+            pointSize = 2;
+            setupCharts();
+        }
+
+    }
+
+
+    protected void setColorBright() {
+
+        if (getCurrentWatchMode() == WatchMode.INTERACTIVE) {
+            mRelativeLayout.setBackgroundColor(Color.WHITE);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Utils.COLOR_ORANGE);
+                mDelta.setTextColor(Utils.COLOR_ORANGE);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.BLACK);
+                mDelta.setTextColor(Color.BLACK);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+
+            if (ageLevel == 1) {
+                mTimestamp.setTextColor(Color.BLACK);
+            } else {
+                mTimestamp.setTextColor(Color.RED);
+            }
+
+
+            mTime.setTextColor(Color.BLACK);
+            if (chart != null) {
+                highColor = Utils.COLOR_ORANGE;
+                midColor = Color.BLUE;
+                lowColor = Color.RED;
+                singleLine = false;
+                pointSize = 2;
+                setupCharts();
+            }
+        } else {
+            mRelativeLayout.setBackgroundColor(Color.BLACK);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Color.YELLOW);
+                mDelta.setTextColor(Color.YELLOW);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.WHITE);
+                mDelta.setTextColor(Color.WHITE);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+            mTimestamp.setTextColor(Color.WHITE);
+
+            mTime.setTextColor(Color.WHITE);
+            if (chart != null) {
+                highColor = Color.YELLOW;
+                midColor = Color.WHITE;
+                lowColor = Color.RED;
+                singleLine = true;
+                pointSize = 2;
+                setupCharts();
+            }
+        }
+
+    }
+
+
+    public void missedReadingAlert() {
+        int minutes_since   = (int) Math.floor(timeSince()/(1000*60));
+        if(minutes_since >= 16 && ((minutes_since - 16) % 5) == 0) {
+            NotificationCompat.Builder notification = new NotificationCompat.Builder(getApplicationContext())
+                    .setContentTitle("Missed BG Readings")
+                    .setVibrate(vibratePattern);
+            NotificationManager mNotifyMgr = (NotificationManager) getApplicationContext().getSystemService(getApplicationContext().NOTIFICATION_SERVICE);
+            mNotifyMgr.notify(missed_readings_alert_id, notification.build());
+            ListenerService.requestData(this); // attempt to recover missing data
+        }
+    }
+
+    public void addToWatchSet(DataMap dataMap) {
+
+        ArrayList<DataMap> entries = dataMap.getDataMapArrayList("entries");
+        if (entries != null) {
+            for (DataMap entry : entries) {
+                double sgv = entry.getDouble("sgvDouble");
+                double high = entry.getDouble("high");
+                double low = entry.getDouble("low");
+                double timestamp = entry.getDouble("timestamp");
+
+                final int size = bgDataList.size();
+                if (size > 0) {
+                    if (bgDataList.get(size - 1).timestamp == timestamp)
+                        continue; // Ignore duplicates.
+                }
+
+                bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+            }
+        } else {
+            double sgv = dataMap.getDouble("sgvDouble");
+            double high = dataMap.getDouble("high");
+            double low = dataMap.getDouble("low");
+            double timestamp = dataMap.getDouble("timestamp");
+
+            final int size = bgDataList.size();
+            if (size > 0) {
+                if (bgDataList.get(size - 1).timestamp == timestamp)
+                    return; // Ignore duplicates.
+            }
+
+            bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+        }
+
+        for (int i = 0; i < bgDataList.size(); i++) {
+            if (bgDataList.get(i).timestamp < (new Date().getTime() - (1000 * 60 * 60 * 5))) {
+                bgDataList.remove(i); //Get rid of anything more than 5 hours old
+                break;
+            }
+        }
+    }
+
+    public void setupCharts() {
+        if(bgDataList.size() > 0) { //Dont crash things just because we dont have values, people dont like crashy things
+            int timeframe = Integer.parseInt(sharedPrefs.getString("chart_timeframe", "5"));
+            if (singleLine) {
+                bgGraphBuilder = new BgGraphBuilder(getApplicationContext(), bgDataList, pointSize, midColor, timeframe);
+            } else {
+                bgGraphBuilder = new BgGraphBuilder(getApplicationContext(), bgDataList, pointSize, highColor, lowColor, midColor, timeframe);
+            }
+
+            chart.setLineChartData(bgGraphBuilder.lineData());
+            chart.setViewportCalculationEnabled(true);
+            chart.setMaximumViewport(chart.getMaximumViewport());
+        } else {
+            ListenerService.requestData(this);
+        }
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java
new file mode 100644
index 0000000..7d88e7e
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BaseWatchFace.java
@@ -0,0 +1,356 @@
+package com.eveningoutpost.dexdrip;
+
+import android.app.NotificationManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.content.LocalBroadcastManager;
+import android.support.wearable.view.WatchViewStub;
+import android.text.format.DateFormat;
+import android.util.Log;
+import android.view.Display;
+import android.view.View;
+import android.view.WindowInsets;
+import android.view.WindowManager;
+import android.widget.LinearLayout;
+import android.widget.RelativeLayout;
+import android.widget.TextView;
+
+import com.google.android.gms.wearable.DataMap;
+import com.ustwo.clockwise.WatchFace;
+import com.ustwo.clockwise.WatchFaceTime;
+import com.ustwo.clockwise.WatchShape;
+
+import java.util.ArrayList;
+import java.util.Date;
+
+import lecho.lib.hellocharts.view.LineChartView;
+
+/**
+ * Created by stephenblack on 12/29/14.
+ */
+public  abstract class BaseWatchFace extends WatchFace implements SharedPreferences.OnSharedPreferenceChangeListener {
+    public final static IntentFilter INTENT_FILTER;
+    public static final long[] vibratePattern = {0,400,300,400,300,400};
+    public TextView mTime, mSgv, mDirection, mTimestamp, mUploaderBattery, mDelta, mRaw;
+    public RelativeLayout mRelativeLayout;
+    public LinearLayout mLinearLayout;
+    public long sgvLevel = 0;
+    public int batteryLevel = 1;
+    public int ageLevel = 1;
+    public int highColor = Color.YELLOW;
+    public int lowColor = Color.RED;
+    public int midColor = Color.WHITE;
+    public int pointSize = 2;
+    public boolean singleLine = false;
+    public boolean layoutSet = false;
+    public int missed_readings_alert_id = 818;
+    public BgGraphBuilder bgGraphBuilder;
+    public LineChartView chart;
+    public double datetime;
+    public ArrayList<BgWatchData> bgDataList = new ArrayList<>();
+    public PowerManager.WakeLock wakeLock;
+    // related to manual layout
+    public View layoutView;
+    private final Point displaySize = new Point();
+    private int specW, specH;
+
+    private LocalBroadcastManager localBroadcastManager;
+    private MessageReceiver messageReceiver;
+
+    protected SharedPreferences sharedPrefs;
+    private String rawString = "000 | 000 | 000";
+    private String batteryString = "--";
+    private String sgvString = "--";
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE))
+                .getDefaultDisplay();
+        display.getSize(displaySize);
+        wakeLock = ((PowerManager) getSystemService(Context.POWER_SERVICE)).newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "Clock");
+
+        specW = View.MeasureSpec.makeMeasureSpec(displaySize.x,
+                View.MeasureSpec.EXACTLY);
+        specH = View.MeasureSpec.makeMeasureSpec(displaySize.y,
+                View.MeasureSpec.EXACTLY);
+        sharedPrefs = PreferenceManager
+                .getDefaultSharedPreferences(this);
+        sharedPrefs.registerOnSharedPreferenceChangeListener(this);
+    }
+
+    @Override
+    protected void onLayout(WatchShape shape, Rect screenBounds, WindowInsets screenInsets) {
+        super.onLayout(shape, screenBounds, screenInsets);
+        layoutView.onApplyWindowInsets(screenInsets);
+    }
+
+    public void performViewSetup() {
+        final WatchViewStub stub = (WatchViewStub) layoutView.findViewById(R.id.watch_view_stub);
+        IntentFilter messageFilter = new IntentFilter(Intent.ACTION_SEND);
+
+        messageReceiver = new MessageReceiver();
+        localBroadcastManager = LocalBroadcastManager.getInstance(this);
+        localBroadcastManager.registerReceiver(messageReceiver, messageFilter);
+
+        stub.setOnLayoutInflatedListener(new WatchViewStub.OnLayoutInflatedListener() {
+            @Override
+            public void onLayoutInflated(WatchViewStub stub) {
+                mTime = (TextView) stub.findViewById(R.id.watch_time);
+                mSgv = (TextView) stub.findViewById(R.id.sgv);
+                mDirection = (TextView) stub.findViewById(R.id.direction);
+                mTimestamp = (TextView) stub.findViewById(R.id.timestamp);
+                mRaw = (TextView) stub.findViewById(R.id.raw);
+                mUploaderBattery = (TextView) stub.findViewById(R.id.uploader_battery);
+                mDelta = (TextView) stub.findViewById(R.id.delta);
+                mRelativeLayout = (RelativeLayout) stub.findViewById(R.id.main_layout);
+                mLinearLayout = (LinearLayout) stub.findViewById(R.id.secondary_layout);
+                chart = (LineChartView) stub.findViewById(R.id.chart);
+                layoutSet = true;
+                showAgoRawBatt();
+                mRelativeLayout.measure(specW, specH);
+                mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                        mRelativeLayout.getMeasuredHeight());
+            }
+        });
+        ListenerService.requestData(this);
+        wakeLock.acquire(50);
+    }
+
+    public int ageLevel() {
+        if(timeSince() <= (1000 * 60 * 12)) {
+            return 1;
+        } else {
+            return 0;
+        }
+    }
+
+    public double timeSince() {
+        return System.currentTimeMillis() - datetime;
+    }
+
+    public String readingAge(boolean shortString) {
+        if (datetime == 0) { return shortString?"--'":"-- Minute ago"; }
+        int minutesAgo = (int) Math.floor(timeSince()/(1000*60));
+        if (minutesAgo == 1) {
+            return minutesAgo + (shortString?"'":" Minute ago");
+        }
+        return minutesAgo + (shortString?"'":" Minutes ago");
+    }
+
+    @Override
+    public void onDestroy() {
+        if(localBroadcastManager != null && messageReceiver != null){
+            localBroadcastManager.unregisterReceiver(messageReceiver);}
+        if (sharedPrefs != null){
+            sharedPrefs.unregisterOnSharedPreferenceChangeListener(this);
+        }
+        super.onDestroy();
+    }
+
+    static {
+        INTENT_FILTER = new IntentFilter();
+        INTENT_FILTER.addAction(Intent.ACTION_TIME_TICK);
+        INTENT_FILTER.addAction(Intent.ACTION_TIMEZONE_CHANGED);
+        INTENT_FILTER.addAction(Intent.ACTION_TIME_CHANGED);
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        if(layoutSet) {
+            this.mRelativeLayout.draw(canvas);
+            Log.d("onDraw", "draw");
+        }
+    }
+
+    @Override
+    protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
+        if (layoutSet && (newTime.hasHourChanged(oldTime) || newTime.hasMinuteChanged(oldTime))) {
+            wakeLock.acquire(50);
+            final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BaseWatchFace.this);
+            mTime.setText(timeFormat.format(System.currentTimeMillis()));
+            showAgoRawBatt();
+
+            if(ageLevel()<=0) {
+                mSgv.setPaintFlags(mSgv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+            } else {
+                mSgv.setPaintFlags(mSgv.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
+            }
+
+            missedReadingAlert();
+            mRelativeLayout.measure(specW, specH);
+            mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                    mRelativeLayout.getMeasuredHeight());
+        }
+    }
+
+    public class MessageReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
+            if (layoutSet) {
+                wakeLock.acquire(50);
+                sgvLevel = dataMap.getLong("sgvLevel");
+                batteryLevel = dataMap.getInt("batteryLevel");
+                datetime = dataMap.getDouble("timestamp");
+                rawString = dataMap.getString("rawString");
+                sgvString = dataMap.getString("sgvString");
+                batteryString = dataMap.getString("battery");
+                mSgv.setText(dataMap.getString("sgvString"));
+
+                if(ageLevel()<=0) {
+                    mSgv.setPaintFlags(mSgv.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
+                } else {
+                    mSgv.setPaintFlags(mSgv.getPaintFlags() & ~Paint.STRIKE_THRU_TEXT_FLAG);
+                }
+
+                final java.text.DateFormat timeFormat = DateFormat.getTimeFormat(BaseWatchFace.this);
+                mTime.setText(timeFormat.format(System.currentTimeMillis()));
+
+                showAgoRawBatt();
+
+                mDirection.setText(dataMap.getString("slopeArrow"));
+                mDelta.setText(dataMap.getString("delta"));
+
+                if (chart != null) {
+                    addToWatchSet(dataMap);
+                    setupCharts();
+                }
+                mRelativeLayout.measure(specW, specH);
+                mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                        mRelativeLayout.getMeasuredHeight());
+                invalidate();
+            } else {
+                Log.d("ERROR: ", "DATA IS NOT YET SET");
+            }
+            setColor();
+        }
+    }
+
+    private void showAgoRawBatt() {
+
+        if(mRaw == null || mTimestamp == null || mUploaderBattery == null){
+            return;
+        }
+
+        if (sharedPrefs.getBoolean("showRaw", false)||
+                (sharedPrefs.getBoolean("showRawNoise", true) && sgvString.equals("???"))
+                ) {
+            mRaw.setVisibility(View.VISIBLE);
+            mRaw.setText("R: " + rawString);
+            mTimestamp.setText(readingAge(true));
+            mUploaderBattery.setText("U: " + batteryString + "%");
+        } else {
+            mRaw.setVisibility(View.GONE);
+            mTimestamp.setText(readingAge(false));
+            mUploaderBattery.setText("Uploader: " + batteryString + "%");
+        }
+    }
+
+    public void setColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            setColorDark();
+        } else {
+            setColorBright();
+        }
+
+    }
+
+    
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key){
+        setColor();
+        if(layoutSet){
+            showAgoRawBatt();
+            mRelativeLayout.measure(specW, specH);
+            mRelativeLayout.layout(0, 0, mRelativeLayout.getMeasuredWidth(),
+                    mRelativeLayout.getMeasuredHeight());
+        }
+        invalidate();
+    }
+protected abstract void setColorDark();
+    protected abstract void setColorBright();
+
+
+    public void missedReadingAlert() {
+        int minutes_since   = (int) Math.floor(timeSince()/(1000*60));
+        if(minutes_since >= 16 && ((minutes_since - 16) % 5) == 0) {
+            NotificationCompat.Builder notification = new NotificationCompat.Builder(getApplicationContext())
+                        .setContentTitle("Missed BG Readings")
+                        .setVibrate(vibratePattern);
+            NotificationManager mNotifyMgr = (NotificationManager) getApplicationContext().getSystemService(getApplicationContext().NOTIFICATION_SERVICE);
+            mNotifyMgr.notify(missed_readings_alert_id, notification.build());
+            ListenerService.requestData(this); // attempt to recover missing data
+        }
+    }
+
+    public void addToWatchSet(DataMap dataMap) {
+
+        ArrayList<DataMap> entries = dataMap.getDataMapArrayList("entries");
+        if (entries != null) {
+            for (DataMap entry : entries) {
+                double sgv = entry.getDouble("sgvDouble");
+                double high = entry.getDouble("high");
+                double low = entry.getDouble("low");
+                double timestamp = entry.getDouble("timestamp");
+
+                final int size = bgDataList.size();
+                if (size > 0) {
+                    if (bgDataList.get(size - 1).timestamp == timestamp)
+                        continue; // Ignore duplicates.
+                }
+
+                bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+            }
+        } else {
+            double sgv = dataMap.getDouble("sgvDouble");
+            double high = dataMap.getDouble("high");
+            double low = dataMap.getDouble("low");
+            double timestamp = dataMap.getDouble("timestamp");
+
+            final int size = bgDataList.size();
+            if (size > 0) {
+                if (bgDataList.get(size - 1).timestamp == timestamp)
+                    return; // Ignore duplicates.
+            }
+
+            bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+        }
+
+        for (int i = 0; i < bgDataList.size(); i++) {
+            if (bgDataList.get(i).timestamp < (new Date().getTime() - (1000 * 60 * 60 * 5))) {
+                bgDataList.remove(i); //Get rid of anything more than 5 hours old
+                break;
+            }
+        }
+    }
+
+    public void setupCharts() {
+        if(bgDataList.size() > 0) { //Dont crash things just because we dont have values, people dont like crashy things
+            int timeframe = Integer.parseInt(sharedPrefs.getString("chart_timeframe", "5"));
+            if (singleLine) {
+                bgGraphBuilder = new BgGraphBuilder(getApplicationContext(), bgDataList, pointSize, midColor, timeframe);
+            } else {
+                bgGraphBuilder = new BgGraphBuilder(getApplicationContext(), bgDataList, pointSize, highColor, lowColor, midColor, timeframe);
+            }
+
+            chart.setLineChartData(bgGraphBuilder.lineData());
+            chart.setViewportCalculationEnabled(true);
+            chart.setMaximumViewport(chart.getMaximumViewport());
+        } else {
+            ListenerService.requestData(this);
+        }
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BgGraphBuilder.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BgGraphBuilder.java
new file mode 100644
index 0000000..856e2a8
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BgGraphBuilder.java
@@ -0,0 +1,237 @@
+package com.eveningoutpost.dexdrip;
+
+import android.content.Context;
+import android.text.format.DateFormat;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.GregorianCalendar;
+import java.util.List;
+import java.util.TimeZone;
+
+import lecho.lib.hellocharts.model.Axis;
+import lecho.lib.hellocharts.model.AxisValue;
+import lecho.lib.hellocharts.model.Line;
+import lecho.lib.hellocharts.model.LineChartData;
+import lecho.lib.hellocharts.model.PointValue;
+import lecho.lib.hellocharts.model.Viewport;
+
+/**
+ * Created by stephenblack on 11/15/14.
+ */
+public class BgGraphBuilder {
+    private int timespan;
+    public double end_time;
+    public double start_time;
+    public double fuzzyTimeDenom = (1000 * 60 * 1);
+    public Context context;
+    public double highMark;
+    public double lowMark;
+    public List<BgWatchData> bgDataList = new ArrayList<BgWatchData>();
+
+    public int pointSize;
+    public int highColor;
+    public int lowColor;
+    public int midColor;
+    public boolean singleLine = false;
+
+    private double endHour;
+    private List<PointValue> inRangeValues = new ArrayList<PointValue>();
+    private List<PointValue> highValues = new ArrayList<PointValue>();
+    private List<PointValue> lowValues = new ArrayList<PointValue>();
+    public Viewport viewport;
+
+    public BgGraphBuilder(Context context, List<BgWatchData> aBgList, int aPointSize, int aMidColor, int timespan) {
+        end_time = new Date().getTime() + (1000 * 60 * 6 * timespan); //Now plus 30 minutes padding (for 5 hours. Less if less.)
+        start_time = new Date().getTime()  - (1000 * 60 * 60 * timespan); //timespan hours ago
+        this.bgDataList = aBgList;
+        this.context = context;
+        this.highMark = aBgList.get(aBgList.size() - 1).high;
+        this.lowMark = aBgList.get(aBgList.size() - 1).low;
+        this.pointSize = aPointSize;
+        this.singleLine = true;
+        this.midColor = aMidColor;
+        this.lowColor = aMidColor;
+        this.highColor = aMidColor;
+        this.timespan = timespan;
+    }
+
+    public BgGraphBuilder(Context context, List<BgWatchData> aBgList, int aPointSize, int aHighColor, int aLowColor, int aMidColor, int timespan) {
+        end_time = new Date().getTime() + (1000 * 60 * 6 * timespan); //Now plus 30 minutes padding (for 5 hours. Less if less.)
+        start_time = new Date().getTime()  - (1000 * 60 * 60 * timespan); //timespan hours ago
+        this.bgDataList = aBgList;
+        this.context = context;
+        this.highMark = aBgList.get(aBgList.size() - 1).high;
+        this.lowMark = aBgList.get(aBgList.size() - 1).low;
+        this.pointSize = aPointSize;
+        this.highColor = aHighColor;
+        this.lowColor = aLowColor;
+        this.midColor = aMidColor;
+        this.timespan = timespan;
+    }
+
+    public LineChartData lineData() {
+        LineChartData lineData = new LineChartData(defaultLines());
+        lineData.setAxisYLeft(yAxis());
+        lineData.setAxisXBottom(xAxis());
+        return lineData;
+    }
+
+    public List<Line> defaultLines() {
+        addBgReadingValues();
+        List<Line> lines = new ArrayList<Line>();
+        lines.add(highLine());
+        lines.add(lowLine());
+        lines.add(inRangeValuesLine());
+        lines.add(lowValuesLine());
+        lines.add(highValuesLine());
+        return lines;
+    }
+
+    public Line highValuesLine() {
+        Line highValuesLine = new Line(highValues);
+        highValuesLine.setColor(highColor);
+        highValuesLine.setHasLines(false);
+        highValuesLine.setPointRadius(pointSize);
+        highValuesLine.setHasPoints(true);
+        return highValuesLine;
+    }
+
+    public Line lowValuesLine() {
+        Line lowValuesLine = new Line(lowValues);
+        lowValuesLine.setColor(lowColor);
+        lowValuesLine.setHasLines(false);
+        lowValuesLine.setPointRadius(pointSize);
+        lowValuesLine.setHasPoints(true);
+        return lowValuesLine;
+    }
+
+    public Line inRangeValuesLine() {
+        Line inRangeValuesLine = new Line(inRangeValues);
+        inRangeValuesLine.setColor(midColor);
+        if(singleLine) {
+            inRangeValuesLine.setHasLines(true);
+            inRangeValuesLine.setHasPoints(false);
+            inRangeValuesLine.setStrokeWidth(pointSize);
+        } else {
+            inRangeValuesLine.setPointRadius(pointSize);
+            inRangeValuesLine.setHasPoints(true);
+            inRangeValuesLine.setHasLines(false);
+        }
+        return inRangeValuesLine;
+    }
+
+    private void addBgReadingValues() {
+        if(singleLine) {
+            for (BgWatchData bgReading : bgDataList) {
+                if(bgReading.timestamp > start_time) {
+                    if (bgReading.sgv >= 400) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) 400));
+                    } else if (bgReading.sgv >= highMark) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= lowMark) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= 40) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= 11) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) 40));
+                    }
+                }
+            }
+        } else {
+            for (BgWatchData bgReading : bgDataList) {
+                if (bgReading.timestamp > start_time) {
+                    if (bgReading.sgv >= 400) {
+                        highValues.add(new PointValue(fuzz(bgReading.timestamp), (float) 400));
+                    } else if (bgReading.sgv >= highMark) {
+                        highValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= lowMark) {
+                        inRangeValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= 40) {
+                        lowValues.add(new PointValue(fuzz(bgReading.timestamp), (float) bgReading.sgv));
+                    } else if (bgReading.sgv >= 11) {
+                        lowValues.add(new PointValue(fuzz(bgReading.timestamp), (float) 40));
+                    }
+                }
+            }
+        }
+    }
+
+    public Line highLine() {
+        List<PointValue> highLineValues = new ArrayList<PointValue>();
+        highLineValues.add(new PointValue(fuzz(start_time), (float) highMark));
+        highLineValues.add(new PointValue(fuzz(end_time), (float) highMark));
+        Line highLine = new Line(highLineValues);
+        highLine.setHasPoints(false);
+        highLine.setStrokeWidth(1);
+        highLine.setColor(highColor);
+        return highLine;
+    }
+
+    public Line lowLine() {
+        List<PointValue> lowLineValues = new ArrayList<PointValue>();
+        lowLineValues.add(new PointValue(fuzz(start_time), (float) lowMark));
+        lowLineValues.add(new PointValue(fuzz(end_time), (float) lowMark));
+        Line lowLine = new Line(lowLineValues);
+        lowLine.setHasPoints(false);
+        lowLine.setColor(lowColor);
+        lowLine.setStrokeWidth(1);
+        return lowLine;
+    }
+
+    /////////AXIS RELATED//////////////
+    public Axis yAxis() {
+        Axis yAxis = new Axis();
+        yAxis.setAutoGenerated(true);
+        List<AxisValue> axisValues = new ArrayList<AxisValue>();
+        yAxis.setValues(axisValues);
+        yAxis.setHasLines(false);
+        return yAxis;
+    }
+
+    public Axis xAxis() {
+        final boolean is24 = DateFormat.is24HourFormat(context);
+        Axis xAxis = new Axis();
+        xAxis.setAutoGenerated(false);
+        List<AxisValue> xAxisValues = new ArrayList<AxisValue>();
+        GregorianCalendar now = new GregorianCalendar();
+        GregorianCalendar today = new GregorianCalendar(now.get(Calendar.YEAR), now.get(Calendar.MONTH), now.get(Calendar.DAY_OF_MONTH));
+        SimpleDateFormat timeFormat = new SimpleDateFormat(is24? "HH" : "h a");
+        timeFormat.setTimeZone(TimeZone.getDefault());
+        double start_hour = today.getTime().getTime();
+        double timeNow = new Date().getTime();
+        for (int l = 0; l <= 24; l++) {
+            if ((start_hour + (60000 * 60 * (l))) < timeNow) {
+                if ((start_hour + (60000 * 60 * (l + 1))) >= timeNow) {
+                    endHour = start_hour + (60000 * 60 * (l));
+                    l = 25;
+                }
+            }
+        }
+        //Display current time on the graph
+        SimpleDateFormat longTimeFormat = new SimpleDateFormat(is24? "HH:mm" : "h:mm a");
+        xAxisValues.add(new AxisValue(fuzz(timeNow), (longTimeFormat.format(timeNow)).toCharArray()));
+
+        //Add whole hours to the axis (as long as they are more than 15 mins away from the current time)
+        for (int l = 0; l <= 24; l++) {
+            double timestamp = endHour - (60000 * 60 * l);
+            if((timestamp - timeNow < 0) && (timestamp > start_time)) {
+                if(Math.abs(timestamp - timeNow) > (1000 * 60 * 8 * timespan)){
+                    xAxisValues.add(new AxisValue(fuzz(timestamp), (timeFormat.format(timestamp)).toCharArray()));
+                }else {
+                    xAxisValues.add(new AxisValue(fuzz(timestamp), "".toCharArray()));
+                }
+            }
+        }
+        xAxis.setValues(xAxisValues);
+        xAxis.setTextSize(10);
+        xAxis.setHasLines(true);
+        return xAxis;
+    }
+
+    public float fuzz(double value) {
+        return (float) Math.round(value / fuzzyTimeDenom);
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/BgWatchData.java b/wear/src/main/java/com/eveningoutpost/dexdrip/BgWatchData.java
new file mode 100644
index 0000000..315e4f9
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/BgWatchData.java
@@ -0,0 +1,39 @@
+package com.eveningoutpost.dexdrip;
+
+/**
+ * Created by stephenblack on 1/7/15.
+ */
+public class BgWatchData implements Comparable<BgWatchData>{
+    public double sgv;
+    public double high;
+    public double low;
+    public double timestamp;
+
+    public BgWatchData(double aSgv, double aHigh, double aLow, double aTimestamp) {
+        this.sgv = aSgv;
+        this.high = aHigh;
+        this.low = aLow;
+        this.timestamp = aTimestamp;
+    }
+
+    @Override
+    public boolean equals(Object that){
+        if(! (that instanceof BgWatchData)){
+            return  false;
+        }
+        return this.timestamp == ((BgWatchData) that).timestamp;
+    }
+
+    @Override
+    public int hashCode(){
+        return (int) (timestamp%Integer.MAX_VALUE);
+    }
+
+    @Override
+    public int compareTo(BgWatchData that) {
+        // reverse order to get latest first
+        if(this.timestamp < that.timestamp) return 1;
+        if(this.timestamp > that.timestamp) return  -1;
+        return 0;
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java b/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java
new file mode 100644
index 0000000..86fac19
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/CircleWatchface.java
@@ -0,0 +1,688 @@
+package com.eveningoutpost.dexdrip;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.SharedPreferences;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.LinearGradient;
+import android.graphics.Matrix;
+import android.graphics.Paint;
+import android.graphics.Point;
+import android.graphics.RectF;
+import android.graphics.Shader;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
+import android.support.v4.content.LocalBroadcastManager;
+import android.util.Log;
+import android.util.TypedValue;
+import android.view.Display;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.WindowManager;
+import android.widget.TextView;
+
+import com.google.android.gms.wearable.DataMap;
+import com.ustwo.clockwise.WatchFace;
+import com.ustwo.clockwise.WatchFaceTime;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.HashSet;
+import java.util.TreeSet;
+
+
+public class CircleWatchface extends WatchFace implements SharedPreferences.OnSharedPreferenceChangeListener {
+    public final float PADDING = 20f;
+    public final float CIRCLE_WIDTH = 10f;
+    public final int BIG_HAND_WIDTH = 16;
+    public final int SMALL_HAND_WIDTH = 8;
+    public final int NEAR = 2; //how near do the hands have to be to activate overlapping mode
+    public final boolean ALWAYS_HIGHLIGT_SMALL = false;
+
+    //variables for time
+    private float angleBig = 0f;
+    private float angleSMALL = 0f;
+    private int hour, minute;
+    private int color;
+    private Paint circlePaint = new Paint();
+    private Paint removePaint = new Paint();
+    private RectF rect, rectDelete;
+    private boolean overlapping;
+
+    private int animationAngle = 0;
+    private boolean isAnimated = false;
+
+
+    public Point displaySize = new Point();
+    private MessageReceiver messageReceiver = new MessageReceiver();
+
+    private int sgvLevel = 0;
+    private String sgvString = "999";
+    private String rawString = "x | x | x";
+
+
+    private int batteryLevel = 0;
+    private double datetime = 0;
+    private String direction = "";
+    private String delta = "";
+    public TreeSet<BgWatchData> bgDataList = new TreeSet<BgWatchData>();
+
+    private View layoutView;
+    private int specW;
+    private int specH;
+    private View myLayout;
+
+    protected SharedPreferences sharedPrefs;
+
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+
+        PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+        PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "CreateWakelock");
+        wakeLock.acquire(30000);
+
+        Display display = ((WindowManager) getSystemService(Context.WINDOW_SERVICE))
+                .getDefaultDisplay();
+        display.getSize(displaySize);
+
+        specW = View.MeasureSpec.makeMeasureSpec(displaySize.x,
+                View.MeasureSpec.EXACTLY);
+        specH = View.MeasureSpec.makeMeasureSpec(displaySize.y,
+                View.MeasureSpec.EXACTLY);
+
+        sharedPrefs = PreferenceManager
+                .getDefaultSharedPreferences(this);
+        sharedPrefs.registerOnSharedPreferenceChangeListener(this);
+
+        //register Message Receiver
+        LocalBroadcastManager.getInstance(this).registerReceiver(messageReceiver, new IntentFilter(Intent.ACTION_SEND));
+
+        LayoutInflater inflater = (LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE);
+        myLayout = inflater.inflate(R.layout.modern_layout, null);
+        prepareLayout();
+        prepareDrawTime();
+
+        //ListenerService.requestData(this); //usually connection is not set up yet
+
+        wakeLock.release();
+    }
+
+
+    @Override
+    public void onDestroy() {
+        if (messageReceiver != null) {
+            LocalBroadcastManager.getInstance(this).unregisterReceiver(messageReceiver);
+        }
+        if (sharedPrefs != null) {
+            sharedPrefs.unregisterOnSharedPreferenceChangeListener(this);
+        }
+        super.onDestroy();
+    }
+
+    @Override
+    protected synchronized void onDraw(Canvas canvas) {
+        Log.d("CircleWatchface", "start onDraw");
+        canvas.drawColor(getBackgroundColor());
+        drawTime(canvas);
+        drawOtherStuff(canvas);
+        myLayout.draw(canvas);
+
+    }
+
+    private synchronized void prepareLayout() {
+
+        Log.d("CircleWatchface", "start startPrepareLayout");
+
+        // prepare fields
+
+        TextView textView = null;
+
+        textView = (TextView) myLayout.findViewById(R.id.sgvString);
+        if (sharedPrefs.getBoolean("showBG", true)) {
+            textView.setVisibility(View.VISIBLE);
+            textView.setText(getSgvString());
+            textView.setTextColor(getTextColor());
+
+        } else {
+            //Also possible: View.INVISIBLE instead of View.GONE (no layout change)
+            textView.setVisibility(View.INVISIBLE);
+        }
+
+        textView = (TextView) myLayout.findViewById(R.id.rawString);
+        if (sharedPrefs.getBoolean("showRaw", false)||
+                (sharedPrefs.getBoolean("showRawNoise", true) && getSgvString().equals("???"))
+                ) {
+            textView.setVisibility(View.VISIBLE);
+            textView.setText(getRawString());
+            textView.setTextColor(getTextColor());
+
+        } else {
+            //Also possible: View.INVISIBLE instead of View.GONE (no layout change)
+            textView.setVisibility(View.GONE);
+        }
+
+        textView = (TextView) myLayout.findViewById(R.id.agoString);
+        if (sharedPrefs.getBoolean("showAgo", true)) {
+            textView.setVisibility(View.VISIBLE);
+
+            if (sharedPrefs.getBoolean("showBigNumbers", false)) {
+                textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 26);
+            } else {
+                ((TextView) myLayout.findViewById(R.id.agoString)).setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
+            }
+            textView.setText(getMinutes());
+            textView.setTextColor(getTextColor());
+        } else {
+            //Also possible: View.INVISIBLE instead of View.GONE (no layout change)
+            textView.setVisibility(View.INVISIBLE);
+        }
+
+        textView = (TextView) myLayout.findViewById(R.id.deltaString);
+        if (sharedPrefs.getBoolean("showDelta", true)) {
+            textView.setVisibility(View.VISIBLE);
+            textView.setText(getDelta());
+            textView.setTextColor(getTextColor());
+            if (sharedPrefs.getBoolean("showBigNumbers", false)) {
+                textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 25);
+                if (delta.endsWith(" mg/dl")) {
+                    textView.setText(getDelta().substring(0, delta.length() - 6));
+                } else if (delta.endsWith(" mmol")) {
+                    textView.setText(getDelta().substring(0, delta.length() - 5));
+                }
+            } else {
+                textView.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);
+                textView.setText(getDelta());
+            }
+        } else {
+            //Also possible: View.INVISIBLE instead of View.GONE (no layout change)
+            textView.setVisibility(View.INVISIBLE);
+        }
+        //TODO: add more view elements?
+
+        myLayout.measure(specW, specH);
+        myLayout.layout(0, 0, myLayout.getMeasuredWidth(),
+                myLayout.getMeasuredHeight());
+    }
+
+    public String getMinutes() {
+        String minutes = "--\'";
+        if (getDatetime() != 0) {
+            minutes = ((int) Math.floor((System.currentTimeMillis() - getDatetime()) / 60000)) + "\'";
+        }
+        return minutes;
+    }
+
+    private void drawTime(Canvas canvas) {
+
+        //draw circle
+        circlePaint.setColor(color);
+        circlePaint.setStrokeWidth(CIRCLE_WIDTH);
+        canvas.drawArc(rect, 0, 360, false, circlePaint);
+        //"remove" hands from circle
+        removePaint.setStrokeWidth(CIRCLE_WIDTH * 3);
+
+        canvas.drawArc(rectDelete, angleBig, (float) BIG_HAND_WIDTH, false, removePaint);
+        canvas.drawArc(rectDelete, angleSMALL, (float) SMALL_HAND_WIDTH, false, removePaint);
+
+
+        if (overlapping) {
+            //add small hand with extra
+            circlePaint.setStrokeWidth(CIRCLE_WIDTH * 2);
+            circlePaint.setColor(color);
+            canvas.drawArc(rect, angleSMALL, (float) SMALL_HAND_WIDTH, false, circlePaint);
+
+            //remove inner part of hands
+            removePaint.setStrokeWidth(CIRCLE_WIDTH);
+            canvas.drawArc(rect, angleBig, (float) BIG_HAND_WIDTH, false, removePaint);
+            canvas.drawArc(rect, angleSMALL, (float) SMALL_HAND_WIDTH, false, removePaint);
+        }
+
+    }
+
+    private synchronized void prepareDrawTime() {
+        Log.d("CircleWatchface", "start prepareDrawTime");
+
+        hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY) % 12;
+        minute = Calendar.getInstance().get(Calendar.MINUTE);
+        angleBig = (((hour + minute / 60f) / 12f * 360) - 90 - BIG_HAND_WIDTH / 2f + 360) % 360;
+        angleSMALL = ((minute / 60f * 360) - 90 - SMALL_HAND_WIDTH / 2f + 360) % 360;
+
+
+        color = 0;
+        switch (getSgvLevel()) {
+            case -1:
+                color = getLowColor();
+                break;
+            case 0:
+                color = getInRangeColor();
+                break;
+            case 1:
+                color = getHighColor();
+                break;
+        }
+
+
+        if (isAnimated()) {
+            //Animation matrix:
+            int[] rainbow = {Color.RED, Color.YELLOW, Color.GREEN, Color.BLUE
+                    , Color.CYAN};
+            Shader shader = new LinearGradient(0, 0, 0, 20, rainbow,
+                    null, Shader.TileMode.MIRROR);
+            Matrix matrix = new Matrix();
+            matrix.setRotate(animationAngle);
+            shader.setLocalMatrix(matrix);
+            circlePaint.setShader(shader);
+        } else {
+            circlePaint.setShader(null);
+        }
+
+
+        circlePaint.setStyle(Paint.Style.STROKE);
+        circlePaint.setStrokeWidth(CIRCLE_WIDTH);
+        circlePaint.setAntiAlias(true);
+        circlePaint.setColor(color);
+
+        removePaint.setStyle(Paint.Style.STROKE);
+        removePaint.setStrokeWidth(CIRCLE_WIDTH);
+        removePaint.setAntiAlias(true);
+        removePaint.setColor(getBackgroundColor());
+
+        ;
+
+        rect = new RectF(PADDING, PADDING, (float) (displaySize.x - PADDING), (float) (displaySize.y - PADDING));
+        rectDelete = new RectF(PADDING - CIRCLE_WIDTH / 2, PADDING - CIRCLE_WIDTH / 2, (float) (displaySize.x - PADDING + CIRCLE_WIDTH / 2), (float) (displaySize.y - PADDING + CIRCLE_WIDTH / 2));
+        overlapping = ALWAYS_HIGHLIGT_SMALL || areOverlapping(angleSMALL, angleSMALL + SMALL_HAND_WIDTH + NEAR, angleBig, angleBig + BIG_HAND_WIDTH + NEAR);
+        Log.d("CircleWatchface", "end prepareDrawTime");
+
+    }
+
+    synchronized void animationStep() {
+        animationAngle = (animationAngle + 1) % 360;
+        prepareDrawTime();
+        invalidate();
+    }
+
+
+    private boolean areOverlapping(float aBegin, float aEnd, float bBegin, float bEnd) {
+        return
+                aBegin <= bBegin && aEnd >= bBegin ||
+                        aBegin <= bBegin && (bEnd > 360) && bEnd % 360 > aBegin ||
+                        bBegin <= aBegin && bEnd >= aBegin ||
+                        bBegin <= aBegin && aEnd > 360 && aEnd % 360 > bBegin;
+    }
+
+    @Override
+    protected void onTimeChanged(WatchFaceTime oldTime, WatchFaceTime newTime) {
+        if (oldTime.hasMinuteChanged(newTime)) {
+            PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+            PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "TimeChangedWakelock");
+            wakeLock.acquire(30000);
+            /*Preparing the layout just on every minute tick:
+            *  - hopefully better battery life
+            *  - drawback: might update the minutes since last reading up to one minute late*/
+            prepareLayout();
+            prepareDrawTime();
+            invalidate();  //redraw the time
+            wakeLock.release();
+
+        }
+    }
+
+
+    // defining color for dark and bright
+    public int getLowColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            return Color.argb(255, 255, 120, 120);
+        } else {
+            return Color.argb(255, 255, 80, 80);
+        }
+    }
+
+    public int getInRangeColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            return Color.argb(255, 120, 255, 120);
+        } else {
+            return Color.argb(255, 0, 240, 0);
+
+        }
+    }
+
+    public int getHighColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            return Color.argb(255, 255, 255, 120);
+        } else {
+            return Color.argb(255, 255, 200, 0);
+        }
+
+    }
+
+    public int getBackgroundColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            return Color.BLACK;
+        } else {
+            return Color.WHITE;
+
+        }
+    }
+
+    public int getTextColor() {
+        if (sharedPrefs.getBoolean("dark", false)) {
+            return Color.WHITE;
+        } else {
+            return Color.BLACK;
+
+        }
+    }
+
+    public void drawOtherStuff(Canvas canvas) {
+        Log.d("CircleWatchface", "start onDrawOtherStuff. bgDataList.size(): " + bgDataList.size());
+
+        if (isAnimated()) return; // too many repaints when animated
+        if (sharedPrefs.getBoolean("showRingHistory", false)) {
+            //Perfect low and High indicators
+            if (bgDataList.size() > 0) {
+                addIndicator(canvas, 100, Color.LTGRAY);
+                addIndicator(canvas, (float) bgDataList.iterator().next().low, getLowColor());
+                addIndicator(canvas, (float) bgDataList.iterator().next().high, getHighColor());
+
+
+                if (sharedPrefs.getBoolean("softRingHistory", true)) {
+                    for (BgWatchData data : bgDataList) {
+                        addReadingSoft(canvas, data);
+                    }
+                } else {
+                    for (BgWatchData data : bgDataList) {
+                        addReading(canvas, data);
+                    }
+                }
+            }
+        }
+    }
+
+    public int holdInMemory() {
+        return 6;
+    }
+
+    //getters & setters
+
+    private synchronized int getSgvLevel() {
+        return sgvLevel;
+    }
+
+    private synchronized void setSgvLevel(int sgvLevel) {
+        this.sgvLevel = sgvLevel;
+    }
+
+    private synchronized int getBatteryLevel() {
+        return batteryLevel;
+    }
+
+    private synchronized void setBatteryLevel(int batteryLevel) {
+        this.batteryLevel = batteryLevel;
+    }
+
+
+    private synchronized double getDatetime() {
+        return datetime;
+    }
+
+    private synchronized void setDatetime(double datetime) {
+        this.datetime = datetime;
+    }
+
+    private synchronized String getDirection() {
+        return direction;
+    }
+
+    private void setDirection(String direction) {
+        this.direction = direction;
+    }
+
+    String getSgvString() {
+        return sgvString;
+    }
+
+    void setSgvString(String sgvString) {
+        this.sgvString = sgvString;
+    }
+
+    String getRawString() {
+        return rawString;
+    }
+
+    void setRawString(String rawString) {
+        this.rawString = rawString;
+    }
+
+    public String getDelta() {
+        return delta;
+    }
+
+    private void setDelta(String delta) {
+        this.delta = delta;
+    }
+
+
+    @Override
+    public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {
+        prepareDrawTime();
+        prepareLayout();
+        invalidate();
+    }
+
+    private synchronized boolean isAnimated() {
+        return isAnimated;
+    }
+
+    private synchronized void setIsAnimated(boolean isAnimated) {
+        this.isAnimated = isAnimated;
+    }
+
+    void startAnimation() {
+        Log.d("CircleWatchface", "start startAnimation");
+
+        Thread animator = new Thread() {
+
+
+            public void run() {
+                //TODO:Wakelock?
+                setIsAnimated(true);
+                for (int i = 0; i <= 8 * 1000 / 40; i++) {
+                    animationStep();
+                    try {
+                        Thread.sleep(40);
+                    } catch (InterruptedException e) {
+                        e.printStackTrace();
+                    }
+                }
+                setIsAnimated(false);
+                prepareDrawTime();
+                invalidate();
+                System.gc();
+            }
+        };
+
+        animator.start();
+    }
+
+
+    public class MessageReceiver extends BroadcastReceiver {
+        @Override
+        public void onReceive(Context context, Intent intent) {
+            PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
+            PowerManager.WakeLock wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
+                    "MyWakelockTag");
+            wakeLock.acquire(30000);
+
+            DataMap dataMap = DataMap.fromBundle(intent.getBundleExtra("data"));
+            setSgvLevel((int) dataMap.getLong("sgvLevel"));
+            Log.d("CircleWatchface", "sgv level : " + getSgvLevel());
+            setSgvString(dataMap.getString("sgvString"));
+            Log.d("CircleWatchface", "sgv string : " + getSgvString());
+            setRawString(dataMap.getString("rawString"));
+            setDelta(dataMap.getString("delta"));
+            setDatetime(dataMap.getDouble("timestamp"));
+            addToWatchSet(dataMap);
+
+
+            //start animation?
+            // dataMap.getDataMapArrayList("entries") == null -> not on "resend data".
+            if (sharedPrefs.getBoolean("animation", false) && dataMap.getDataMapArrayList("entries") == null && (getSgvString().equals("100") || getSgvString().equals("5.5") || getSgvString().equals("5,5"))) {
+                startAnimation();
+            }
+
+            prepareLayout();
+            prepareDrawTime();
+            invalidate();
+            wakeLock.release();
+        }
+    }
+
+    public synchronized void addToWatchSet(DataMap dataMap) {
+
+        if(!sharedPrefs.getBoolean("showRingHistory", false)){
+            bgDataList.clear();
+            return;
+        }
+
+        Log.d("CircleWatchface", "start addToWatchSet");
+        ArrayList<DataMap> entries = dataMap.getDataMapArrayList("entries");
+        if (entries == null) {
+            double sgv = dataMap.getDouble("sgvDouble");
+            double high = dataMap.getDouble("high");
+            double low = dataMap.getDouble("low");
+            double timestamp = dataMap.getDouble("timestamp");
+            bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+        } else if (!sharedPrefs.getBoolean("animation", false)) {
+            // don't load history at once if animations are set (less resource consumption)
+            Log.d("addToWatchSet", "entries.size(): " + entries.size());
+
+            for (DataMap entry : entries) {
+                double sgv = entry.getDouble("sgvDouble");
+                double high = entry.getDouble("high");
+                double low = entry.getDouble("low");
+                double timestamp = entry.getDouble("timestamp");
+                bgDataList.add(new BgWatchData(sgv, high, low, timestamp));
+            }
+        } else
+
+            Log.d("addToWatchSet", "start removing bgDataList.size(): " + bgDataList.size());
+        HashSet removeSet = new HashSet();
+        double threshold = (new Date().getTime() - (1000 * 60 * 5 * holdInMemory()));
+        for (BgWatchData data : bgDataList) {
+            if (data.timestamp < threshold) {
+                removeSet.add(data);
+
+            }
+        }
+        bgDataList.removeAll(removeSet);
+        Log.d("addToWatchSet", "after bgDataList.size(): " + bgDataList.size());
+        removeSet = null;
+        System.gc();
+    }
+
+    public int darken(int color, double fraction) {
+        int red = Color.red(color);
+        int green = Color.green(color);
+        int blue = Color.blue(color);
+        red = darkenColor(red, fraction);
+        green = darkenColor(green, fraction);
+        blue = darkenColor(blue, fraction);
+        int alpha = Color.alpha(color);
+
+        return Color.argb(alpha, red, green, blue);
+    }
+
+    private int darkenColor(int color, double fraction) {
+
+        //if (sharedPrefs.getBoolean("dark", false)) {
+        return (int) Math.max(color - (color * fraction), 0);
+        //}
+        // return (int)Math.min(color + (color * fraction), 255);
+    }
+
+
+    public void addArch(Canvas canvas, float offset, int color, float size) {
+        Paint paint = new Paint();
+        paint.setColor(color);
+        RectF rectTemp = new RectF(PADDING + offset - CIRCLE_WIDTH / 2, PADDING + offset - CIRCLE_WIDTH / 2, (displaySize.x - PADDING - offset + CIRCLE_WIDTH / 2), (displaySize.y - PADDING - offset + CIRCLE_WIDTH / 2));
+        canvas.drawArc(rectTemp, 270, size, true, paint);
+    }
+
+    public void addArch(Canvas canvas, float start, float offset, int color, float size) {
+        Paint paint = new Paint();
+        paint.setColor(color);
+        RectF rectTemp = new RectF(PADDING + offset - CIRCLE_WIDTH / 2, PADDING + offset - CIRCLE_WIDTH / 2, (displaySize.x - PADDING - offset + CIRCLE_WIDTH / 2), (displaySize.y - PADDING - offset + CIRCLE_WIDTH / 2));
+        canvas.drawArc(rectTemp, start + 270, size, true, paint);
+    }
+
+    public void addIndicator(Canvas canvas, float bg, int color) {
+        float convertedBg;
+        convertedBg = bgToAngle(bg);
+        convertedBg += 270;
+        Paint paint = new Paint();
+        paint.setColor(color);
+        float offset = 9;
+        RectF rectTemp = new RectF(PADDING + offset - CIRCLE_WIDTH / 2, PADDING + offset - CIRCLE_WIDTH / 2, (displaySize.x - PADDING - offset + CIRCLE_WIDTH / 2), (displaySize.y - PADDING - offset + CIRCLE_WIDTH / 2));
+        canvas.drawArc(rectTemp, convertedBg, 2, true, paint);
+    }
+
+    private float bgToAngle(float bg) {
+        if (bg > 100) {
+            return (((bg - 100f) / 300f) * 225f) + 135;
+        } else {
+            return ((bg / 100) * 135);
+        }
+    }
+
+
+    public void addReadingSoft(Canvas canvas, BgWatchData entry) {
+
+        Log.d("CircleWatchface", "addReadingSoft");
+        double size;
+        int color = Color.LTGRAY;
+        if (sharedPrefs.getBoolean("dark", false)) {
+            color = Color.DKGRAY;
+        }
+
+        float offsetMultiplier = (((displaySize.x / 2f) - PADDING) / 12f);
+        float offset = (float) Math.max(1, Math.ceil((new Date().getTime() - entry.timestamp) / (1000 * 60 * 5)));
+        size = bgToAngle((float) entry.sgv);
+        addArch(canvas, offset * offsetMultiplier + 10, color, (float) size);
+        addArch(canvas, (float) size, offset * offsetMultiplier + 10, getBackgroundColor(), (float) (360 - size));
+        addArch(canvas, (offset + .8f) * offsetMultiplier + 10, getBackgroundColor(), 360);
+    }
+
+    public void addReading(Canvas canvas, BgWatchData entry) {
+        Log.d("CircleWatchface", "addReading");
+
+        double size;
+        int color = Color.LTGRAY;
+        int indicatorColor = Color.DKGRAY;
+        if (sharedPrefs.getBoolean("dark", false)) {
+            color = Color.DKGRAY;
+            indicatorColor = Color.LTGRAY;
+        }
+        int barColor = Color.GRAY;
+        if (entry.sgv >= entry.high) {
+            indicatorColor = getHighColor();
+            barColor = darken(getHighColor(), .5);
+        } else if (entry.sgv <= entry.low) {
+            indicatorColor = getLowColor();
+            barColor = darken(getLowColor(), .5);
+        }
+        float offsetMultiplier = (((displaySize.x / 2f) - PADDING) / 12f);
+        float offset = (float) Math.max(1, Math.ceil((new Date().getTime() - entry.timestamp) / (1000 * 60 * 5)));
+        size = bgToAngle((float) entry.sgv);
+        addArch(canvas, offset * offsetMultiplier + 11, barColor, (float) size - 2); // Dark Color Bar
+        addArch(canvas, (float) size - 2, offset * offsetMultiplier + 11, indicatorColor, 2f); // Indicator at end of bar
+        addArch(canvas, (float) size, offset * offsetMultiplier + 11, color, (float) (360f - size)); // Dark fill
+        addArch(canvas, (offset + .8f) * offsetMultiplier + 11, getBackgroundColor(), 360);
+    }
+}
\ No newline at end of file
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java b/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java
new file mode 100644
index 0000000..c2dc1c4
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -0,0 +1,133 @@
+package com.eveningoutpost.dexdrip;
+
+import android.graphics.Color;
+import android.view.LayoutInflater;
+
+import com.ustwo.clockwise.WatchMode;
+
+import lecho.lib.hellocharts.util.Utils;
+
+public class Home extends BaseWatchFace {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
+        layoutView = inflater.inflate(R.layout.activity_home, null);
+        performViewSetup();
+    }
+
+    protected void setColorDark() {
+        mTime.setTextColor(Color.WHITE);
+        mRelativeLayout.setBackgroundColor(Color.BLACK);
+        mLinearLayout.setBackgroundColor(Color.WHITE);
+        if (sgvLevel == 1) {
+            mSgv.setTextColor(Color.YELLOW);
+            mDirection.setTextColor(Color.YELLOW);
+            mDelta.setTextColor(Color.YELLOW);
+        } else if (sgvLevel == 0) {
+            mSgv.setTextColor(Color.WHITE);
+            mDirection.setTextColor(Color.WHITE);
+            mDelta.setTextColor(Color.WHITE);
+        } else if (sgvLevel == -1) {
+            mSgv.setTextColor(Color.RED);
+            mDirection.setTextColor(Color.RED);
+            mDelta.setTextColor(Color.RED);
+        }
+        if (ageLevel == 1) {
+            mTimestamp.setTextColor(Color.BLACK);
+        } else {
+            mTimestamp.setTextColor(Color.RED);
+        }
+
+        if (batteryLevel == 1) {
+            mUploaderBattery.setTextColor(Color.BLACK);
+        } else {
+            mUploaderBattery.setTextColor(Color.RED);
+        }
+        mRaw.setTextColor(Color.BLACK);
+        if (chart != null) {
+            highColor = Color.YELLOW;
+           lowColor = Color.RED;
+            midColor = Color.WHITE;
+            singleLine = false;
+            pointSize = 2;
+            setupCharts();
+        }
+
+    }
+
+
+    protected void setColorBright() {
+
+        if (getCurrentWatchMode() == WatchMode.INTERACTIVE) {
+            mRelativeLayout.setBackgroundColor(Color.WHITE);
+            mLinearLayout.setBackgroundColor(Color.BLACK);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Utils.COLOR_ORANGE);
+                mDirection.setTextColor(Utils.COLOR_ORANGE);
+                mDelta.setTextColor(Utils.COLOR_ORANGE);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.BLACK);
+                mDirection.setTextColor(Color.BLACK);
+                mDelta.setTextColor(Color.BLACK);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDirection.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+
+            if (ageLevel == 1) {
+                mTimestamp.setTextColor(Color.WHITE);
+            } else {
+                mTimestamp.setTextColor(Color.RED);
+            }
+
+            if (batteryLevel == 1) {
+                mUploaderBattery.setTextColor(Color.WHITE);
+            } else {
+                mUploaderBattery.setTextColor(Color.RED);
+            }
+            mRaw.setTextColor(Color.WHITE);
+            mTime.setTextColor(Color.BLACK);
+            if (chart != null) {
+                highColor = Utils.COLOR_ORANGE;
+                midColor = Color.BLUE;
+                lowColor = Color.RED;
+                singleLine = false;
+                pointSize = 2;
+                setupCharts();
+            }
+        } else {
+            mRelativeLayout.setBackgroundColor(Color.BLACK);
+            mLinearLayout.setBackgroundColor(Color.WHITE);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Color.YELLOW);
+                mDirection.setTextColor(Color.YELLOW);
+                mDelta.setTextColor(Color.YELLOW);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.WHITE);
+                mDirection.setTextColor(Color.WHITE);
+                mDelta.setTextColor(Color.WHITE);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDirection.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+            mRaw.setTextColor(Color.BLACK);
+            mUploaderBattery.setTextColor(Color.BLACK);
+            mTimestamp.setTextColor(Color.BLACK);
+
+            mTime.setTextColor(Color.WHITE);
+            if (chart != null) {
+                highColor = Color.YELLOW;
+                midColor = Color.WHITE;
+                lowColor = Color.RED;
+                singleLine = true;
+                pointSize = 2;
+                setupCharts();
+            }
+        }
+
+    }
+    }
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java b/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java
new file mode 100644
index 0000000..dd0a3b3
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/LargeHome.java
@@ -0,0 +1,109 @@
+package com.eveningoutpost.dexdrip;
+
+import android.graphics.Color;
+import android.view.LayoutInflater;
+
+import com.ustwo.clockwise.WatchMode;
+
+public class LargeHome extends BaseWatchFace {
+
+    @Override
+    public void onCreate() {
+        super.onCreate();
+        LayoutInflater inflater = (LayoutInflater) getSystemService(LAYOUT_INFLATER_SERVICE);
+        layoutView = inflater.inflate(R.layout.activity_home_large, null);
+        performViewSetup();
+    }
+
+
+    @Override
+    protected void setColorDark(){
+        mTime.setTextColor(Color.WHITE);
+        mRelativeLayout.setBackgroundColor(Color.BLACK);
+        mLinearLayout.setBackgroundColor(Color.WHITE);
+        if (sgvLevel == 1) {
+            mSgv.setTextColor(Color.YELLOW);
+            mDirection.setTextColor(Color.YELLOW);
+            mDelta.setTextColor(Color.YELLOW);
+        } else if (sgvLevel == 0) {
+            mSgv.setTextColor(Color.WHITE);
+            mDirection.setTextColor(Color.WHITE);
+            mDelta.setTextColor(Color.WHITE);
+        } else if (sgvLevel == -1) {
+            mSgv.setTextColor(Color.RED);
+            mDirection.setTextColor(Color.RED);
+            mDelta.setTextColor(Color.RED);
+        }
+        if (ageLevel == 1) {
+            mTimestamp.setTextColor(Color.BLACK);
+        } else {
+            mTimestamp.setTextColor(Color.RED);
+        }
+
+        if (batteryLevel == 1) {
+            mUploaderBattery.setTextColor(Color.BLACK);
+        } else {
+            mUploaderBattery.setTextColor(Color.RED);
+        }
+
+        mRaw.setTextColor(Color.BLACK);
+    }
+
+
+
+    @Override
+    protected void setColorBright() {
+        if (getCurrentWatchMode() == WatchMode.INTERACTIVE) {
+            mRelativeLayout.setBackgroundColor(Color.WHITE);
+            mLinearLayout.setBackgroundColor(Color.BLACK);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Color.YELLOW);
+                mDirection.setTextColor(Color.YELLOW);
+                mDelta.setTextColor(Color.YELLOW);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.BLACK);
+                mDirection.setTextColor(Color.BLACK);
+                mDelta.setTextColor(Color.BLACK);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDirection.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+
+            if (ageLevel == 1) {
+                mTimestamp.setTextColor(Color.WHITE);
+            } else {
+                mTimestamp.setTextColor(Color.RED);
+            }
+
+            if (batteryLevel == 1) {
+                mUploaderBattery.setTextColor(Color.WHITE);
+            } else {
+                mUploaderBattery.setTextColor(Color.RED);
+            }
+            mRaw.setTextColor(Color.WHITE);
+            mTime.setTextColor(Color.BLACK);
+        } else {
+            mRelativeLayout.setBackgroundColor(Color.BLACK);
+            mLinearLayout.setBackgroundColor(Color.LTGRAY);
+            if (sgvLevel == 1) {
+                mSgv.setTextColor(Color.YELLOW);
+                mDirection.setTextColor(Color.YELLOW);
+                mDelta.setTextColor(Color.YELLOW);
+            } else if (sgvLevel == 0) {
+                mSgv.setTextColor(Color.WHITE);
+                mDirection.setTextColor(Color.WHITE);
+                mDelta.setTextColor(Color.WHITE);
+            } else if (sgvLevel == -1) {
+                mSgv.setTextColor(Color.RED);
+                mDirection.setTextColor(Color.RED);
+                mDelta.setTextColor(Color.RED);
+            }
+
+            mUploaderBattery.setTextColor(Color.BLACK);
+            mTimestamp.setTextColor(Color.BLACK);
+            mRaw.setTextColor(Color.BLACK);
+            mTime.setTextColor(Color.WHITE);
+        }
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java b/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java
new file mode 100644
index 0000000..75f5ed3
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/ListenerService.java
@@ -0,0 +1,142 @@
+package com.eveningoutpost.dexdrip;
+
+import android.content.Context;
+import android.content.Intent;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.support.v4.content.LocalBroadcastManager;
+
+import com.google.android.gms.common.ConnectionResult;
+import com.google.android.gms.common.api.GoogleApiClient;
+import com.google.android.gms.wearable.DataEvent;
+import com.google.android.gms.wearable.DataEventBuffer;
+import com.google.android.gms.wearable.DataMap;
+import com.google.android.gms.wearable.DataMapItem;
+import com.google.android.gms.wearable.Node;
+import com.google.android.gms.wearable.NodeApi;
+import com.google.android.gms.wearable.Wearable;
+import com.google.android.gms.wearable.WearableListenerService;
+
+/**
+ * Created by stephenblack on 12/26/14.
+ */
+public class ListenerService extends WearableListenerService implements GoogleApiClient.ConnectionCallbacks,
+        GoogleApiClient.OnConnectionFailedListener {
+    private static final String WEARABLE_DATA_PATH = "/nightscout_watch_data";
+    private static final String WEARABLE_RESEND_PATH = "/nightscout_watch_data_resend";
+    private static final String OPEN_SETTINGS = "/openwearsettings";
+    private static final String ACTION_RESEND = "com.dexdrip.stephenblack.nightwatch.RESEND_DATA";
+    private static final String ACTION_RESEND_BULK = "com.dexdrip.stephenblack.nightwatch.RESEND_BULK_DATA";
+    GoogleApiClient googleApiClient;
+    private long lastRequest = 0;
+
+    public class DataRequester extends AsyncTask<Void, Void, Void> {
+        Context mContext;
+
+        DataRequester(Context context) {
+            mContext = context;
+        }
+
+        @Override
+        protected Void doInBackground(Void... params) {
+            if (googleApiClient.isConnected()) {
+                if (System.currentTimeMillis() - lastRequest > 20 * 1000) { // enforce 20-second debounce period
+                    lastRequest = System.currentTimeMillis();
+
+                    NodeApi.GetConnectedNodesResult nodes =
+                            Wearable.NodeApi.getConnectedNodes(googleApiClient).await();
+                    for (Node node : nodes.getNodes()) {
+                        Wearable.MessageApi.sendMessage(googleApiClient, node.getId(), WEARABLE_RESEND_PATH, null);
+                    }
+                }
+            } else
+                googleApiClient.connect();
+            return null;
+        }
+    }
+
+    public void requestData() {
+        new DataRequester(this).execute();
+    }
+
+    public void googleApiConnect() {
+        googleApiClient = new GoogleApiClient.Builder(this)
+                .addConnectionCallbacks(this)
+                .addOnConnectionFailedListener(this)
+                .addApi(Wearable.API)
+                .build();
+        Wearable.MessageApi.addListener(googleApiClient, this);
+    }
+
+
+    @Override
+    public int onStartCommand(Intent intent, int flags, int startId) {
+        if (intent.getAction().equals(ACTION_RESEND)) {
+            googleApiConnect();
+            requestData();
+        }
+        return START_STICKY;
+    }
+
+    @Override
+    public void onDataChanged(DataEventBuffer dataEvents) {
+
+        DataMap dataMap;
+
+        for (DataEvent event : dataEvents) {
+
+            if (event.getType() == DataEvent.TYPE_CHANGED) {
+
+
+                String path = event.getDataItem().getUri().getPath();
+                if (path.equals(OPEN_SETTINGS)) {
+                    //TODO: OpenSettings
+                    Intent intent = new Intent(this, NWPreferences.class);
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    startActivity(intent);
+
+                } else {
+
+                    dataMap = DataMapItem.fromDataItem(event.getDataItem()).getDataMap();
+
+                    Intent messageIntent = new Intent();
+                    messageIntent.setAction(Intent.ACTION_SEND);
+                    messageIntent.putExtra("data", dataMap.toBundle());
+                    LocalBroadcastManager.getInstance(this).sendBroadcast(messageIntent);
+                }
+            }
+        }
+    }
+
+    public static void requestData(Context context) {
+        Intent intent = new Intent(context, ListenerService.class);
+        intent.setAction(ACTION_RESEND);
+        context.startService(intent);
+    }
+
+    @Override
+    public void onConnected(Bundle bundle) {
+        requestData();
+    }
+
+    @Override
+    public void onConnectionSuspended(int i) {
+
+    }
+
+    @Override
+    public void onConnectionFailed(ConnectionResult connectionResult) {
+
+    }
+
+    @Override
+    public void onDestroy() {
+        super.onDestroy();
+        if (googleApiClient != null && googleApiClient.isConnected()) {
+            googleApiClient.disconnect();
+        }
+        if (googleApiClient != null) {
+            Wearable.MessageApi.removeListener(googleApiClient, this);
+        }
+    }
+}
diff --git a/wear/src/main/java/com/eveningoutpost/dexdrip/NWPreferences.java b/wear/src/main/java/com/eveningoutpost/dexdrip/NWPreferences.java
new file mode 100644
index 0000000..4463ca3
--- /dev/null
+++ b/wear/src/main/java/com/eveningoutpost/dexdrip/NWPreferences.java
@@ -0,0 +1,18 @@
+package com.eveningoutpost.dexdrip;
+
+
+import android.os.Bundle;
+import android.preference.PreferenceActivity;
+
+import com.eveningoutpost.dexdrip.R;
+
+public class NWPreferences extends PreferenceActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        // TODO Auto-generated method stub
+        super.onCreate(savedInstanceState);
+        addPreferencesFromResource(R.xml.preferences);
+    }
+
+}
\ No newline at end of file
diff --git a/wear/src/main/res/drawable-hdpi/ic_launcher.png b/wear/src/main/res/drawable-hdpi/ic_launcher.png
new file mode 100644
index 0000000..55621cc
Binary files /dev/null and b/wear/src/main/res/drawable-hdpi/ic_launcher.png differ
diff --git a/wear/src/main/res/drawable-mdpi/ic_launcher.png b/wear/src/main/res/drawable-mdpi/ic_launcher.png
new file mode 100644
index 0000000..11ec206
Binary files /dev/null and b/wear/src/main/res/drawable-mdpi/ic_launcher.png differ
diff --git a/wear/src/main/res/drawable-nodpi/ic_icon.png b/wear/src/main/res/drawable-nodpi/ic_icon.png
new file mode 100755
index 0000000..700e274
Binary files /dev/null and b/wear/src/main/res/drawable-nodpi/ic_icon.png differ
diff --git a/wear/src/main/res/drawable-xhdpi/ic_launcher.png b/wear/src/main/res/drawable-xhdpi/ic_launcher.png
new file mode 100644
index 0000000..7c02b78
Binary files /dev/null and b/wear/src/main/res/drawable-xhdpi/ic_launcher.png differ
diff --git a/wear/src/main/res/drawable-xxhdpi/ic_launcher.png b/wear/src/main/res/drawable-xxhdpi/ic_launcher.png
new file mode 100644
index 0000000..915d914
Binary files /dev/null and b/wear/src/main/res/drawable-xxhdpi/ic_launcher.png differ
diff --git a/wear/src/main/res/drawable/ic_icon.png b/wear/src/main/res/drawable/ic_icon.png
new file mode 100755
index 0000000..700e274
Binary files /dev/null and b/wear/src/main/res/drawable/ic_icon.png differ
diff --git a/wear/src/main/res/drawable/watchface_bigchart.png b/wear/src/main/res/drawable/watchface_bigchart.png
new file mode 100644
index 0000000..34d267e
Binary files /dev/null and b/wear/src/main/res/drawable/watchface_bigchart.png differ
diff --git a/wear/src/main/res/drawable/watchface_circle.png b/wear/src/main/res/drawable/watchface_circle.png
new file mode 100644
index 0000000..d33ae99
Binary files /dev/null and b/wear/src/main/res/drawable/watchface_circle.png differ
diff --git a/wear/src/main/res/drawable/watchface_dark.png b/wear/src/main/res/drawable/watchface_dark.png
new file mode 100644
index 0000000..9ad14f5
Binary files /dev/null and b/wear/src/main/res/drawable/watchface_dark.png differ
diff --git a/wear/src/main/res/drawable/watchface_graph.png b/wear/src/main/res/drawable/watchface_graph.png
new file mode 100644
index 0000000..af9e88a
Binary files /dev/null and b/wear/src/main/res/drawable/watchface_graph.png differ
diff --git a/wear/src/main/res/layout/activity_bigchart.xml b/wear/src/main/res/layout/activity_bigchart.xml
new file mode 100644
index 0000000..1fa3cda
--- /dev/null
+++ b/wear/src/main/res/layout/activity_bigchart.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.wearable.view.WatchViewStub
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:id="@+id/watch_view_stub"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:rectLayout="@layout/rect_activity_bigchart"
+        app:roundLayout="@layout/round_activity_bigchart"
+        tools:context=".Home"
+        tools:deviceIds="wear"/>
diff --git a/wear/src/main/res/layout/activity_home.xml b/wear/src/main/res/layout/activity_home.xml
new file mode 100644
index 0000000..152f786
--- /dev/null
+++ b/wear/src/main/res/layout/activity_home.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.wearable.view.WatchViewStub
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:id="@+id/watch_view_stub"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:rectLayout="@layout/rect_activity_home"
+        app:roundLayout="@layout/round_activity_home"
+        tools:context=".Home"
+        tools:deviceIds="wear"/>
diff --git a/wear/src/main/res/layout/activity_home_large.xml b/wear/src/main/res/layout/activity_home_large.xml
new file mode 100644
index 0000000..3af1882
--- /dev/null
+++ b/wear/src/main/res/layout/activity_home_large.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<android.support.wearable.view.WatchViewStub
+        xmlns:android="http://schemas.android.com/apk/res/android"
+        xmlns:app="http://schemas.android.com/apk/res-auto"
+        xmlns:tools="http://schemas.android.com/tools"
+        android:id="@+id/watch_view_stub"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:rectLayout="@layout/rect_activity_home_large"
+        app:roundLayout="@layout/round_activity_home_large"
+        tools:context=".Home"
+        tools:deviceIds="wear"/>
diff --git a/wear/src/main/res/layout/modern_layout.xml b/wear/src/main/res/layout/modern_layout.xml
new file mode 100644
index 0000000..835dcfc
--- /dev/null
+++ b/wear/src/main/res/layout/modern_layout.xml
@@ -0,0 +1,53 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:orientation="vertical" android:layout_width="match_parent"
+    android:layout_height="match_parent">
+    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:orientation="vertical" android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center_vertical|center_horizontal"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentStart="true">
+
+
+        <TextView android:id="@+id/agoString"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="18sp"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:text="99'"
+            android:layout_gravity="center"
+            android:layout_marginBottom="-5dp" />
+
+        <TextView android:id="@+id/sgvString"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textSize="55sp"
+        android:layout_centerHorizontal="true"
+        android:layout_centerVertical="true"
+        android:text="999"
+        android:layout_gravity="center" />
+
+        <TextView android:id="@+id/rawString"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="18sp"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:text="x | x | x"
+            android:layout_gravity="center"
+            android:layout_marginTop="-5dp" />
+
+        <TextView android:id="@+id/deltaString"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textSize="18sp"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:text="+99"
+            android:layout_gravity="center"
+            android:layout_marginTop="-5dp" />
+
+</LinearLayout>
+</RelativeLayout>
\ No newline at end of file
diff --git a/wear/src/main/res/layout/rect_activity_bigchart.xml b/wear/src/main/res/layout/rect_activity_bigchart.xml
new file mode 100644
index 0000000..511ac6d
--- /dev/null
+++ b/wear/src/main/res/layout/rect_activity_bigchart.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_square"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center"
+        android:gravity="center_horizontal"
+        android:weightSum="1">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="5dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="-5dp"
+            android:gravity="center_horizontal">
+
+
+            <TextView
+                android:id="@+id/delta"
+                android:textSize="30sp"
+                android:text="--- mg/dl"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="bottom"
+                android:gravity="center_horizontal|bottom"
+                android:layout_marginRight="5dp" />
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="41sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="center_horizontal"
+                android:gravity="center_horizontal" />
+
+        </LinearLayout>
+
+         <lecho.lib.hellocharts.view.LineChartView
+            android:id="@+id/chart"
+            android:layout_width="match_parent"
+            android:layout_height="77dp"
+            android:layout_gravity="bottom"
+            android:gravity="center_horizontal|top" />
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:textAlignment="center"
+            android:gravity="center_horizontal"
+            android:weightSum="1">
+
+            <TextView
+                android:id="@+id/watch_time"
+                android:textSize="35sp"
+                android:text="12:00"
+                android:layout_centerHorizontal="true"
+                android:layout_centerVertical="true"
+                android:textColor="#FFFFFF"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_marginRight="6dp"
+                android:layout_gravity="center_horizontal|top" />
+
+            <TextView
+                android:id="@+id/timestamp"
+                android:textSize="26sp"
+                android:text="-- '"
+                android:layout_width="wrap_content"
+                android:textAlignment="center"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="top"
+                android:layout_height="match_parent" />
+        </LinearLayout>
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/layout/rect_activity_home.xml b/wear/src/main/res/layout/rect_activity_home.xml
new file mode 100644
index 0000000..445802c
--- /dev/null
+++ b/wear/src/main/res/layout/rect_activity_home.xml
@@ -0,0 +1,148 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_square"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center"
+        android:gravity="center_horizontal"
+        android:weightSum="1">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="5dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="-5dp"
+            android:gravity="center_horizontal">
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="41sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="bottom"
+                android:gravity="bottom|right"
+                android:layout_marginBottom="-2dp"
+                android:paddingTop="-2dp"
+                android:layout_marginRight="5dp" />
+
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:weightSum="1"
+                android:textAlignment="center"
+                android:baselineAligned="false"
+                android:layout_gravity="center_horizontal"
+                android:gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/direction"
+                    android:textSize="30sp"
+                    android:textStyle="bold"
+                    android:text="--"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal|bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:layout_marginBottom="-5dp"
+                    android:layout_marginTop="-2dp"
+                    android:paddingTop="1dp" />
+
+                <TextView
+                    android:id="@+id/delta"
+                    android:textSize="10sp"
+                    android:text="--- mg/dl"
+                    android:layout_width="wrap_content"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:layout_gravity="bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:textStyle="bold" />
+
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/light_grey"
+            android:id="@+id/secondary_layout"
+            android:padding="1dp">
+
+            <LinearLayout
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/timestamp"
+                    android:textSize="10sp"
+                    android:text="-- Minutes ago"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/uploader_battery"
+                    android:textSize="10sp"
+                    android:text="Uploader: ---%"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/raw"
+                    android:textSize="10sp"
+                    android:text="000 | 000 | 000"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/watch_time"
+            android:textSize="35sp"
+            android:text="12:00"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:textColor="#FFFFFF"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:layout_gravity="center_horizontal|top" />
+
+        <lecho.lib.hellocharts.view.LineChartView
+            android:id="@+id/chart"
+            android:layout_width="match_parent"
+            android:layout_height="77dp"
+            android:layout_gravity="bottom"
+            android:gravity="center_horizontal|top" />
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/layout/rect_activity_home_large.xml b/wear/src/main/res/layout/rect_activity_home_large.xml
new file mode 100644
index 0000000..26cc0f5
--- /dev/null
+++ b/wear/src/main/res/layout/rect_activity_home_large.xml
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_square"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="147dp"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="15dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal">
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="50sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="55dp"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="bottom"
+                android:gravity="bottom|right" />
+
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:weightSum="1"
+                android:textAlignment="center"
+                android:baselineAligned="false"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/direction"
+                    android:textSize="27sp"
+                    android:textStyle="bold"
+                    android:text="--"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal|bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:paddingTop="1dp" />
+
+                <TextView
+                    android:id="@+id/delta"
+                    android:textSize="10sp"
+                    android:text="--- mg/dl"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:layout_gravity="bottom"
+                    android:gravity="center_horizontal" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/light_grey"
+            android:id="@+id/secondary_layout"
+            android:padding="2dp">
+
+            <LinearLayout
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/timestamp"
+                    android:textSize="12sp"
+                    android:text="-- Minutes ago"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/uploader_battery"
+                    android:textSize="12sp"
+                    android:text="Uploader: ---%"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/raw"
+                    android:textSize="12sp"
+                    android:text="000 | 000 | 000"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/watch_time"
+            android:textSize="55sp"
+            android:text="12:00"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:textColor="#FFFFFF"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:layout_gravity="center_horizontal|top" />
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/layout/round_activity_bigchart.xml b/wear/src/main/res/layout/round_activity_bigchart.xml
new file mode 100644
index 0000000..c2d7646
--- /dev/null
+++ b/wear/src/main/res/layout/round_activity_bigchart.xml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_square"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center"
+        android:gravity="center_horizontal"
+        android:weightSum="1">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="5dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="-5dp"
+            android:gravity="center_horizontal">
+
+
+            <TextView
+                android:id="@+id/delta"
+                android:textSize="30sp"
+                android:text="--- mg/dl"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="bottom"
+                android:gravity="center_horizontal|bottom"
+                android:layout_marginRight="5dp" />
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="41sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="center_horizontal"
+                android:gravity="center_horizontal" />
+
+        </LinearLayout>
+
+        <lecho.lib.hellocharts.view.LineChartView
+            android:id="@+id/chart"
+            android:layout_width="match_parent"
+            android:layout_height="77dp"
+            android:layout_gravity="bottom"
+            android:gravity="center_horizontal|top" />
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="fill_parent"
+            android:textAlignment="center"
+            android:gravity="center_horizontal"
+            android:weightSum="1">
+
+            <TextView
+                android:id="@+id/watch_time"
+                android:textSize="35sp"
+                android:text="12:00"
+                android:layout_centerHorizontal="true"
+                android:layout_centerVertical="true"
+                android:textColor="#FFFFFF"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_marginRight="6dp"
+                android:layout_gravity="center_horizontal|top" />
+
+            <TextView
+                android:id="@+id/timestamp"
+                android:textSize="26sp"
+                android:text="-- '"
+                android:layout_width="wrap_content"
+                android:textAlignment="center"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="top"
+                android:layout_height="match_parent" />
+        </LinearLayout>
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/layout/round_activity_home.xml b/wear/src/main/res/layout/round_activity_home.xml
new file mode 100644
index 0000000..ab7c98f
--- /dev/null
+++ b/wear/src/main/res/layout/round_activity_home.xml
@@ -0,0 +1,146 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_round"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center"
+        android:weightSum="1">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="15dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal"
+            android:gravity="center_horizontal"
+            android:layout_marginTop="-5dp">
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="41sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="center_horizontal|bottom"
+                android:gravity="bottom|right"
+                android:paddingRight="5dp"
+                android:layout_marginBottom="-2dp"
+                android:paddingTop="-2dp" />
+
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="wrap_content"
+                android:layout_height="fill_parent"
+                android:weightSum="1"
+                android:textAlignment="center"
+                android:baselineAligned="false"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/direction"
+                    android:textSize="30sp"
+                    android:text="--"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal|bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:layout_marginBottom="-5dp"
+                    android:layout_marginTop="-2dp"
+                    android:textStyle="bold" />
+
+                <TextView
+                    android:id="@+id/delta"
+                    android:textSize="10sp"
+                    android:text="--- mg/dl"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:layout_gravity="bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:textStyle="bold" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/light_grey"
+            android:id="@+id/secondary_layout"
+            android:padding="1dp">
+
+            <LinearLayout
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/timestamp"
+                    android:textSize="8sp"
+                    android:text="-- Minutes ago"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/uploader_battery"
+                    android:textSize="8sp"
+                    android:text="Uploader: ---%"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/raw"
+                    android:textSize="8sp"
+                    android:text="000 | 000 | 000"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/watch_time"
+            android:textSize="30sp"
+            android:text="12:00"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:textColor="#FFFFFF"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:layout_gravity="center_horizontal"
+            android:layout_marginTop="-2dp"
+            android:layout_marginBottom="-3dp" />
+
+        <lecho.lib.hellocharts.view.LineChartView
+            android:id="@+id/chart"
+            android:layout_width="match_parent"
+            android:layout_height="77dp"
+            android:layout_gravity="bottom"
+            android:gravity="center_horizontal|top" />
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/layout/round_activity_home_large.xml b/wear/src/main/res/layout/round_activity_home_large.xml
new file mode 100644
index 0000000..085b616
--- /dev/null
+++ b/wear/src/main/res/layout/round_activity_home_large.xml
@@ -0,0 +1,129 @@
+<?xml version="1.0" encoding="utf-8"?>
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools" android:layout_width="match_parent"
+    android:layout_height="match_parent" tools:context=".Home" tools:deviceIds="wear_round"
+    android:background="@color/black"
+    android:id="@+id/main_layout">
+
+    <LinearLayout
+        android:orientation="vertical"
+        android:layout_width="fill_parent"
+        android:layout_height="fill_parent"
+        android:textAlignment="center">
+
+        <LinearLayout
+            android:orientation="horizontal"
+            android:layout_width="147dp"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:paddingTop="29dp"
+            android:weightSum="1"
+            android:layout_gravity="center_horizontal">
+
+            <TextView
+                android:id="@+id/sgv"
+                android:textSize="50sp"
+                android:text="---"
+                android:layout_width="wrap_content"
+                android:layout_height="55dp"
+                android:textColor="#FFFFFF"
+                android:layout_gravity="bottom"
+                android:gravity="bottom|right" />
+
+            <LinearLayout
+                android:orientation="vertical"
+                android:layout_width="fill_parent"
+                android:layout_height="fill_parent"
+                android:weightSum="1"
+                android:textAlignment="center"
+                android:baselineAligned="false"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/direction"
+                    android:textSize="27sp"
+                    android:textStyle="bold"
+                    android:text="--"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:textAlignment="center"
+                    android:layout_gravity="center_horizontal|bottom"
+                    android:gravity="center_horizontal|bottom"
+                    android:paddingTop="1dp" />
+
+                <TextView
+                    android:id="@+id/delta"
+                    android:textSize="10sp"
+                    android:text="--- mg/dl"
+                    android:layout_width="fill_parent"
+                    android:layout_height="wrap_content"
+                    android:textColor="#FFFFFF"
+                    android:layout_gravity="bottom"
+                    android:gravity="center_horizontal" />
+
+                </LinearLayout>
+
+        </LinearLayout>
+
+        <LinearLayout
+            android:orientation="vertical"
+            android:layout_width="fill_parent"
+            android:layout_height="wrap_content"
+            android:background="@color/light_grey"
+            android:id="@+id/secondary_layout"
+            android:padding="2dp">
+
+            <LinearLayout
+                android:orientation="horizontal"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:textAlignment="center"
+                android:layout_gravity="center_horizontal">
+
+                <TextView
+                    android:id="@+id/timestamp"
+                    android:textSize="12sp"
+                    android:text="-- Minutes ago"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/uploader_battery"
+                    android:textSize="12sp"
+                    android:text="Uploader: ---%"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+                <TextView
+                    android:id="@+id/raw"
+                    android:textSize="12sp"
+                    android:text="000 | 000 | 000"
+                    android:layout_width="wrap_content"
+                    android:textAlignment="center"
+                    android:textColor="#000000"
+                    android:paddingLeft="10sp"
+                    android:layout_height="wrap_content" />
+
+            </LinearLayout>
+
+        </LinearLayout>
+
+        <TextView
+            android:id="@+id/watch_time"
+            android:textSize="55sp"
+            android:text="12:00"
+            android:layout_centerHorizontal="true"
+            android:layout_centerVertical="true"
+            android:textColor="#FFFFFF"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:textAlignment="center"
+            android:layout_gravity="center_horizontal|top" />
+
+    </LinearLayout>
+
+</RelativeLayout>
diff --git a/wear/src/main/res/values/strings.xml b/wear/src/main/res/values/strings.xml
new file mode 100644
index 0000000..c9f4ba1
--- /dev/null
+++ b/wear/src/main/res/values/strings.xml
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+
+    <string name="app_name">XDrip Prefs.</string>
+
+    <string-array name="chart_timeframe">
+        <item>1 hour</item>
+        <item>2 hours</item>
+        <item>3 hours</item>
+        <item>4 hours</item>
+        <item>5 hours</item>
+
+    </string-array>
+    <string-array name="chart_timeframe_values">
+        <item>1</item>
+        <item>2</item>
+        <item>3</item>
+        <item>4</item>
+        <item>5</item>
+    </string-array>
+
+</resources>
diff --git a/wear/src/main/res/xml/preferences.xml b/wear/src/main/res/xml/preferences.xml
new file mode 100644
index 0000000..a23b639
--- /dev/null
+++ b/wear/src/main/res/xml/preferences.xml
@@ -0,0 +1,70 @@
+<?xml version="1.0" encoding="utf-8"?>
+<PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android">
+    <PreferenceCategory
+        android:title="XDrip Settings"
+        android:key="category"
+        android:selectable="false">
+
+    <CheckBoxPreference android:title="Dark"
+        android:defaultValue="true"
+        android:summary="Dark theme"
+        android:key="dark" />
+
+        <!-- TODO: reenable raw
+        <CheckBoxPreference android:title="Show Raw"
+            android:defaultValue="false"
+            android:summary="Show Raw."
+            android:key="showRaw" />
+
+        <CheckBoxPreference android:title="Show Raw on ???"
+            android:defaultValue="true"
+            android:summary="Show Raw on ???."
+            android:key="showRawNoise" />
+         -->
+
+        <ListPreference
+            android:key="chart_timeframe"
+            android:title="Chart Timeframe"
+            android:summary="Chart Timeframe"
+            android:entries="@array/chart_timeframe"
+            android:entryValues="@array/chart_timeframe_values"
+            android:defaultValue="5" />
+
+        <CheckBoxPreference android:title="Show Ago"
+            android:defaultValue="true"
+            android:summary="Minutes since last reading. (Circle WF)"
+            android:key="showAgo" />
+
+        <CheckBoxPreference android:title="Show Delta"
+            android:defaultValue="true"
+            android:summary="Show delta. (Circle WF)"
+            android:key="showDelta" />
+
+        <CheckBoxPreference android:title="Show BG"
+            android:defaultValue="true"
+            android:summary="Show BG. (Circle WF)"
+            android:key="showBG" />
+
+        <CheckBoxPreference android:title="Show Big Numbers"
+            android:defaultValue="false"
+            android:summary="Big numbers. (Circle WF)"
+            android:key="showBigNumbers" />
+
+        <CheckBoxPreference android:title="Show Ring History"
+            android:defaultValue="false"
+            android:summary="Graphical history. (Circle WF)"
+            android:key="showRingHistory" />
+
+        <CheckBoxPreference android:title="Light Ring History"
+            android:defaultValue="true"
+            android:summary="Less eyecandy. (Circle WF)"
+            android:key="softRingHistory" />
+
+
+        <CheckBoxPreference android:title="Show Animations"
+            android:defaultValue="true"
+            android:summary="Animations. (Circle WF)"
+            android:key="animation" />
+
+    </PreferenceCategory>
+</PreferenceScreen>
diff --git a/wear/src/main/res/xml/watch_face.xml b/wear/src/main/res/xml/watch_face.xml
new file mode 100644
index 0000000..699f056
--- /dev/null
+++ b/wear/src/main/res/xml/watch_face.xml
@@ -0,0 +1,2 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<wallpaper xmlns:android="http://schemas.android.com/apk/res/android" />
\ No newline at end of file
diff --git a/wear/wear.iml b/wear/wear.iml
new file mode 100644
index 0000000..9022657
--- /dev/null
+++ b/wear/wear.iml
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module external.linked.project.id=":wear" external.linked.project.path="$MODULE_DIR$" external.root.project.path="$MODULE_DIR$/.." external.system.id="GRADLE" external.system.module.group="xDrip-Experimental" external.system.module.version="unspecified" type="JAVA_MODULE" version="4">
+  <component name="FacetManager">
+    <facet type="android-gradle" name="Android-Gradle">
+      <configuration>
+        <option name="GRADLE_PROJECT_PATH" value=":wear" />
+      </configuration>
+    </facet>
+    <facet type="android" name="Android">
+      <configuration>
+        <option name="SELECTED_BUILD_VARIANT" value="debug" />
+        <option name="SELECTED_TEST_ARTIFACT" value="_android_test_" />
+        <option name="ASSEMBLE_TASK_NAME" value="assembleDebug" />
+        <option name="COMPILE_JAVA_TASK_NAME" value="compileDebugSources" />
+        <option name="ASSEMBLE_TEST_TASK_NAME" value="assembleDebugAndroidTest" />
+        <option name="COMPILE_JAVA_TEST_TASK_NAME" value="compileDebugAndroidTestSources" />
+        <afterSyncTasks>
+          <task>generateDebugAndroidTestSources</task>
+          <task>generateDebugSources</task>
+        </afterSyncTasks>
+        <option name="ALLOW_USER_CONFIGURATION" value="false" />
+        <option name="MANIFEST_FILE_RELATIVE_PATH" value="/src/main/AndroidManifest.xml" />
+        <option name="RES_FOLDER_RELATIVE_PATH" value="/src/main/res" />
+        <option name="RES_FOLDERS_RELATIVE_PATH" value="file://$MODULE_DIR$/src/main/res" />
+        <option name="ASSETS_FOLDER_RELATIVE_PATH" value="/src/main/assets" />
+      </configuration>
+    </facet>
+  </component>
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_7" inherit-compiler-output="false">
+    <output url="file://$MODULE_DIR$/build/intermediates/classes/debug" />
+    <output-test url="file://$MODULE_DIR$/build/intermediates/classes/androidTest/debug" />
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/debug" isTestSource="false" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/debug" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/r/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/aidl/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/buildConfig/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/source/rs/androidTest/debug" isTestSource="true" generated="true" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/rs/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/build/generated/res/resValues/androidTest/debug" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/debug/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/res" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/assets" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/aidl" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/jni" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/rs" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/res" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/resources" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/assets" type="java-test-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/aidl" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/java" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/jni" isTestSource="true" />
+      <sourceFolder url="file://$MODULE_DIR$/src/androidTest/rs" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/assets" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/recyclerview-v7/21.0.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.android.support/support-v4/22.0.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-base/7.3.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.gms/play-services-wearable/7.3.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.google.android.support/wearable/1.1.0/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/exploded-aar/com.ustwo.android/clockwise-wearable/1.0.2/jars" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/incremental" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/manifests" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/res" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/rs" />
+      <excludeFolder url="file://$MODULE_DIR$/build/intermediates/symbols" />
+      <excludeFolder url="file://$MODULE_DIR$/build/outputs" />
+    </content>
+    <orderEntry type="jdk" jdkName="Android API 23 Platform" jdkType="Android SDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" exported="" name="wearable-1.1.0" level="project" />
+    <orderEntry type="library" exported="" name="recyclerview-v7-21.0.0" level="project" />
+    <orderEntry type="library" exported="" name="play-services-wearable-7.3.0" level="project" />
+    <orderEntry type="library" exported="" name="support-v4-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="clockwise-wearable-1.0.2" level="project" />
+    <orderEntry type="library" exported="" name="support-annotations-22.0.0" level="project" />
+    <orderEntry type="library" exported="" name="hellocharts-library-1.1" level="project" />
+    <orderEntry type="library" exported="" name="play-services-base-7.3.0" level="project" />
+  </component>
+</module>
\ No newline at end of file

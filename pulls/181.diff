diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
index 64ea052..5df5b6b 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/BluetoothScan.java
@@ -318,8 +318,12 @@ protected void onListItemClick(ListView l, View v, int position, long id) {
             } else returnToHome();
 
         } else if(device.getName().toLowerCase().contains("drip")) {
-            if (!CollectionServiceStarter.isBTWixel(getApplicationContext()))
+            if (!
+                    (CollectionServiceStarter.isBTWixel(getApplicationContext())
+                            || CollectionServiceStarter.isWifiandBTWixel(getApplicationContext())
+                    )) {
                 prefs.edit().putString("dex_collection_method", "BluetoothWixel").apply();
+            }
             returnToHome();
         } else {
             returnToHome();
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
index da4a304..00a7639 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Home.java
@@ -377,12 +377,8 @@ private void displayCurrentInfo() {
         boolean isDexbridge = CollectionServiceStarter.isDexbridgeWixel(getApplicationContext());
         int bridgeBattery = prefs.getInt("bridge_battery", 0);
 
-        if (isDexbridge) {
-            if (bridgeBattery == 0) {
-                dexbridgeBattery.setText("Waiting for packet");
-            } else {
-                dexbridgeBattery.setText("Bridge Battery: " + bridgeBattery + "%");
-            }
+        if (isDexbridge && bridgeBattery > 0) {//if bridgeBattery == 0 then possibly an xdrip without the resistor to measure the battery voltage  but with xBridge software installed - no need to display anything at all
+            dexbridgeBattery.setText("Bridge Battery: " + bridgeBattery + "%");
             if (bridgeBattery < 50) dexbridgeBattery.setTextColor(Color.YELLOW);
             if (bridgeBattery < 25) dexbridgeBattery.setTextColor(Color.RED);
             else dexbridgeBattery.setTextColor(Color.GREEN);
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
index ba0b30d..a9ca002 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Models/TransmitterData.java
@@ -36,7 +36,7 @@
     @Column(name = "uuid", index = true)
     public String uuid;
 
-    public static TransmitterData create(byte[] buffer, int len, Long timestamp) {
+    public static synchronized TransmitterData create(byte[] buffer, int len, Long timestamp) {
         if (len < 6) { return null; }
         TransmitterData transmitterData = new TransmitterData();
         if (buffer[0] == 0x11 && buffer[1] == 0x00) {
@@ -56,22 +56,25 @@ public static TransmitterData create(byte[] buffer, int len, Long timestamp) {
             for (int i = 0; i < len; ++i) { data_string.append((char) buffer[i]); }
             String[] data = data_string.toString().split("\\s+");
 
-            randomDelay(100, 1000);
-            TransmitterData lastTransmitterData = TransmitterData.last();
-            if (lastTransmitterData != null && lastTransmitterData.raw_data == Integer.parseInt(data[0]) && Math.abs(lastTransmitterData.timestamp - timestamp) < (120000)) { //Stop allowing duplicate data, its bad! // jamorham: increased to 120 seconds for additional safety with multiple collection modes operating at the same time
-                return null;
+            if (data.length > 1) { 
+                transmitterData.sensor_battery_level = Integer.parseInt(data[1]); 
             }
-            if (data.length > 1) { transmitterData.sensor_battery_level = Integer.parseInt(data[1]); }
             transmitterData.raw_data = Integer.parseInt(data[0]);
             transmitterData.filtered_data = Integer.parseInt(data[0]);
         }
+        //Stop allowing duplicate data, its bad!
+        TransmitterData lastTransmitterData = TransmitterData.last();
+        if (lastTransmitterData != null && lastTransmitterData.raw_data == transmitterData.raw_data && Math.abs(lastTransmitterData.timestamp - timestamp) < (120000)) {
+            return null;
+        }
+
         transmitterData.timestamp = timestamp;
         transmitterData.uuid = UUID.randomUUID().toString();
         transmitterData.save();
         return transmitterData;
     }
 
-    public static TransmitterData create(int raw_data ,int sensor_battery_level, long timestamp) {
+    public static synchronized TransmitterData create(int raw_data ,int sensor_battery_level, long timestamp) {
         TransmitterData lastTransmitterData = TransmitterData.last();
         if (lastTransmitterData != null && lastTransmitterData.raw_data == raw_data && Math.abs(lastTransmitterData.timestamp - new Date().getTime()) < (120000)) { //Stop allowing duplicate data, its bad!
             return null;
@@ -93,13 +96,4 @@ public static TransmitterData last() {
                 .executeSingle();
     }
 
-    public static void randomDelay(float min, float max){
-        int random = (int)(max * Math.random() + min);
-        try {
-            Log.d(TAG, "randomDelay: Sleeping for " + random + "ms");
-            Thread.sleep(random);
-        } catch (InterruptedException e) {
-            Log.e(TAG, "randomDelay: INTERUPTED");
-        }
-    }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
index d44dfe8..8733f44 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/NavDrawerBuilder.java
@@ -84,7 +84,7 @@ public NavDrawerBuilder(Context aContext) {
         }
 
         if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.JELLY_BEAN_MR2) {
-            if(CollectionServiceStarter.isBTWixel(context) || CollectionServiceStarter.isDexbridgeWixel(context)|| CollectionServiceStarter.isBTShare(context)) {
+            if(CollectionServiceStarter.isBTWixel(context) || CollectionServiceStarter.isDexbridgeWixel(context)|| CollectionServiceStarter.isBTShare(context) ||CollectionServiceStarter.isWifiandBTWixel(context)) {
                 this.nav_drawer_options.add(BluetoothScan.menu_name);
                 this.nav_drawer_intents.add(new Intent(context, BluetoothScan.class));
             }
diff --git a/app/src/main/res/layout/activity_home.xml b/app/src/main/res/layout/activity_home.xml
index e45f027..e72b777 100644
--- a/app/src/main/res/layout/activity_home.xml
+++ b/app/src/main/res/layout/activity_home.xml
@@ -63,7 +63,7 @@
                     android:layout_width="wrap_content"
                     android:layout_height="wrap_content"
                     android:textAppearance="?android:attr/textAppearanceSmall"
-                    android:text="100%"
+                    android:text="Bridge Battery level unknown"
                     android:id="@+id/textBridgeBattery"
                     android:textStyle="normal"
                     android:textSize="12sp"

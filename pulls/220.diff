diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
index 8a2f27a..f6f5938 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/Services/SyncService.java
@@ -37,8 +37,10 @@ protected void onHandleIntent(Intent intent) {
         attemptSend();
     }
 
-    public void attemptSend() {
-        if (enableRESTUpload || enableMongoUpload) { syncToMogoDb(); }
+    private void attemptSend() {
+        if (enableRESTUpload || enableMongoUpload) { 
+            syncToMogoDb(); 
+        }
         setRetryTimer();
     }
 
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
index c83b446..1516427 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/BgSendQueue.java
@@ -27,6 +27,7 @@
 import com.eveningoutpost.dexdrip.WidgetUpdateService;
 import com.eveningoutpost.dexdrip.xDripWidget;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -47,24 +48,19 @@
     @Column(name = "operation_type")
     public String operation_type;
 
-/*
-    public static List<BgSendQueue> queue() {
-        return new Select()
-                .from(BgSendQueue.class)
-                .where("success = ?", false)
-                .orderBy("_ID asc")
-                .limit(20)
-                .execute();
-    }
-*/
-    public static List<BgSendQueue> mongoQueue() {
-        return new Select()
+    public static List<BgSendQueue> mongoQueue(boolean xDripViewerMode) {
+    	List<BgSendQueue> values = new Select()
                 .from(BgSendQueue.class)
                 .where("mongo_success = ?", false)
                 .where("operation_type = ?", "create")
                 .orderBy("_ID desc")
-                .limit(30)
+                .limit(xDripViewerMode ? 500 : 30)
                 .execute();
+    	if (xDripViewerMode) {
+    		 java.util.Collections.reverse(values);
+    	}
+    	return values;
+    	
     }
 
     private static void addToQueue(BgReading bgReading, String operation_type) {
@@ -83,7 +79,8 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
                 "sendQueue");
         wakeLock.acquire();
         try {
-            addToQueue(bgReading, operation_type);
+        	
+       		addToQueue(bgReading, operation_type);
 
             SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
 
@@ -172,10 +169,9 @@ public static void handleNewBgReading(BgReading bgReading, String operation_type
             wakeLock.release();
         }
     }
-
-    public void markMongoSuccess() {
-        mongo_success = true;
-        save();
+    
+    public void deleteThis() {
+        this.delete();
     }
 
     public static int getBatteryLevel(Context context) {
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CalibrationSendQueue.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CalibrationSendQueue.java
index 3cd31fd..fcd6bd8 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CalibrationSendQueue.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/CalibrationSendQueue.java
@@ -11,6 +11,7 @@
 import com.activeandroid.query.Select;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -28,22 +29,18 @@
     @Column(name = "mongo_success", index = true)
     public boolean mongo_success;
 
-    /*
-    public static List<CalibrationSendQueue> queue() {
-        return new Select()
-                .from(CalibrationSendQueue.class)
-                .where("success = ?", false)
-                .orderBy("_ID asc")
-                .execute();
-    }
-    */
-    public static List<CalibrationSendQueue> mongoQueue() {
-        return new Select()
+    public static List<CalibrationSendQueue> mongoQueue(boolean xDripViewerMode) {
+    	List<CalibrationSendQueue> values =  new Select()
                 .from(CalibrationSendQueue.class)
                 .where("mongo_success = ?", false)
                 .orderBy("_ID desc")
-                .limit(20)
+                .limit(4)
                 .execute();
+        
+    	if (xDripViewerMode) {
+   		 	java.util.Collections.reverse(values);
+    	}
+    	return values;
     }
     public static void addToQueue(Calibration calibration, Context context) {
         CalibrationSendQueue calibrationSendQueue = new CalibrationSendQueue();
@@ -52,9 +49,8 @@ public static void addToQueue(Calibration calibration, Context context) {
         calibrationSendQueue.mongo_success = false;
         calibrationSendQueue.save();
     }
-
-    public void markMongoSuccess() {
-        mongo_success = true;
-        save();
+    
+    public void deleteThis() {
+        this.delete();
     }
 }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
index 04c56c3..0685335 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/MongoSendTask.java
@@ -1,9 +1,12 @@
 package com.eveningoutpost.dexdrip.UtilityModels;
 
 import android.content.Context;
+import android.content.SharedPreferences;
 import android.os.AsyncTask;
-import com.eveningoutpost.dexdrip.Models.UserError.Log;
+import android.os.PowerManager;
+import android.preference.PreferenceManager;
 
+import com.eveningoutpost.dexdrip.Models.UserError.Log;
 import com.eveningoutpost.dexdrip.Models.BgReading;
 import com.eveningoutpost.dexdrip.Models.Calibration;
 import com.eveningoutpost.dexdrip.Services.SyncService;
@@ -16,20 +19,40 @@
  */
 public class MongoSendTask extends AsyncTask<String, Void, Void> {
         private Context context;
-        public List<BgSendQueue> bgsQueue = new ArrayList<BgSendQueue>();
-        public List<CalibrationSendQueue> calibrationsQueue = new ArrayList<CalibrationSendQueue>();
 
+        PowerManager.WakeLock wakeLock;
+        private static int lockCounter = 0;
         private Exception exception;
         private static final String TAG = MongoSendTask.class.getSimpleName();
 
         public MongoSendTask(Context pContext) {
-            calibrationsQueue = CalibrationSendQueue.mongoQueue();
-            bgsQueue = BgSendQueue.mongoQueue();
             context = pContext;
+            PowerManager pm = (PowerManager) context.getSystemService(Context.POWER_SERVICE);
+            wakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MongoSendTask");
+            wakeLock.acquire();
+            lockCounter++;
+            Log.e(TAG,"MongosendTask - wakelock acquired " + lockCounter);
+
         }
 
         public Void doInBackground(String... urls) {
             try {
+               	sendData();
+            } finally {
+                wakeLock.release();
+                lockCounter--;
+                Log.e(TAG,"MongosendTask wakelock released " + lockCounter);
+            }
+            return null;
+        }
+        
+        private boolean sendData() {
+        	SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
+        	boolean xDripViewerMode = prefs.getBoolean("xDripViewer_upload_mode", false);
+            List<CalibrationSendQueue>calibrationsQueue = CalibrationSendQueue.mongoQueue(xDripViewerMode);
+            List<BgSendQueue> bgsQueue = BgSendQueue.mongoQueue( xDripViewerMode);
+
+            try {
                 List<BgReading> bgReadings = new ArrayList<BgReading>();
                 List<Calibration> calibrations = new ArrayList<Calibration>();
                 for (CalibrationSendQueue job : calibrationsQueue) {
@@ -42,26 +65,30 @@ public Void doInBackground(String... urls) {
                 if(bgReadings.size() + calibrations.size() > 0) {
                 	Log.i(TAG, "uoader.upload called " + bgReadings.size());
                     NightscoutUploader uploader = new NightscoutUploader(context);
-                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations);
+                    boolean uploadStatus = uploader.upload(bgReadings, calibrations, calibrations, xDripViewerMode);
                     if (uploadStatus) {
+                    	Log.i(TAG, "Starting to delete objects from queue " + bgsQueue.size() + calibrationsQueue.size());
                         for (CalibrationSendQueue calibration : calibrationsQueue) {
-                            calibration.markMongoSuccess();
+                            calibration.deleteThis();
                         }
                         for (BgSendQueue bgReading : bgsQueue) {
-                            bgReading.markMongoSuccess();
+                            bgReading.deleteThis();
                         }
+                        Log.i(TAG, "finished deleting objects from queue " + bgReadings.size());
+                    } else {
+                    	Log.e(TAG, "uploader.upload returned false - exiting");
+                    	return false;
                     }
+                } else {
+                    return false;
                 }
             } catch (Exception e) {
             	Log.e(TAG, "cought exception", e);
                 this.exception = e;
-                return null;
+                // We will try again soon, But I want to make sure we are not in infinite loop.
+                return false;
             }
-            return null;
+            return true;
         }
 
-//        protected void onPostExecute(RSSFeed feed) {
-//            // TODO: check this.exception
-//            // TODO: do something with the feed
-//        }
     }
diff --git a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
index 224668b..c914989 100644
--- a/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
+++ b/app/src/main/java/com/eveningoutpost/dexdrip/UtilityModels/NightscoutUploader.java
@@ -96,27 +96,27 @@ public NightscoutUploader(Context context) {
             enableMongoUpload = prefs.getBoolean("cloud_storage_mongodb_enable", false);
         }
 
-        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords) {
+        public boolean upload(List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
             boolean mongoStatus = false;
             boolean apiStatus = false;
 
             if (enableRESTUpload) {
                 long start = System.currentTimeMillis();
                 Log.i(TAG, String.format("Starting upload of %s record using a REST API", glucoseDataSets.size()));
-                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords);
+                apiStatus = doRESTUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a REST API in %s ms", glucoseDataSets.size(), System.currentTimeMillis() - start));
             }
 
             if (enableMongoUpload) {
                 double start = new Date().getTime();
-                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords);
+                mongoStatus = doMongoUpload(prefs, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
                 Log.i(TAG, String.format("Finished upload of %s record using a Mongo in %s ms", glucoseDataSets.size() + meterRecords.size(), System.currentTimeMillis() - start));
             }
 
             return apiStatus || mongoStatus;
         }
 
-        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords) {
+        private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) {
             String baseURLSettings = prefs.getString("cloud_storage_api_base", "");
             ArrayList<String> baseURIs = new ArrayList<String>();
 
@@ -153,7 +153,7 @@ private boolean doRESTUpload(SharedPreferences prefs, List<BgReading> glucoseDat
 
                     if (apiVersion == 1) {
                         String hashedSecret = Hashing.sha1().hashBytes(secret.getBytes(Charsets.UTF_8)).toString();
-                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords);
+                        doRESTUploadTo(nightscoutService, hashedSecret, glucoseDataSets, meterRecords, calRecords, xDripViewerMode);
                     } else {
                         doLegacyRESTUploadTo(nightscoutService, glucoseDataSets);
                     }
@@ -175,14 +175,13 @@ private void doLegacyRESTUploadTo(NightscoutService nightscoutService, List<BgRe
             postDeviceStatus(nightscoutService, null);
         }
 
-        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords) throws Exception {
+        private void doRESTUploadTo(NightscoutService nightscoutService, String secret, List<BgReading> glucoseDataSets, List<Calibration> meterRecords, List<Calibration> calRecords, boolean xDripViewerMode) throws Exception {
             JSONArray array = new JSONArray();
-
             for (BgReading record : glucoseDataSets) {
-                populateV1APIBGEntry(array, record);
+                populateV1APIBGEntry(array, record, xDripViewerMode);
             }
             for (Calibration record : meterRecords) {
-                populateV1APIMeterReadingEntry(array, record);
+                populateV1APIMeterReadingEntry(array, record, xDripViewerMode);
             }
             for (Calibration record : calRecords) {
                 populateV1APICalibrationEntry(array, record);
@@ -195,20 +194,31 @@ private void doRESTUploadTo(NightscoutService nightscoutService, String secret,
             postDeviceStatus(nightscoutService, secret);
         }
 
-        private void populateV1APIBGEntry(JSONArray array, BgReading record) throws Exception {
+        private void populateV1APIBGEntry(JSONArray array, BgReading record, boolean xDripViewerMode) throws Exception {
+            
+            Log.e(TAG, "populateV1APIBGEntry preparing bg with data " + record.timestamp);
+            
             JSONObject json = new JSONObject();
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
             json.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
-            json.put("sgv", (int)record.calculated_value);
+            json.put("sgv", Math.round(record.calculated_value));
             json.put("direction", record.slopeName());
             json.put("type", "sgv");
             json.put("filtered", record.ageAdjustedFiltered() * 1000);
             json.put("unfiltered", record.usedRaw() * 1000);
             json.put("rssi", 100);
             json.put("noise", record.noiseValue());
+            if(xDripViewerMode) {
+	            json.put("xDrip_raw", record.raw_data);
+	            json.put("xDrip_filtered", record.filtered_data);
+	            json.put("xDrip_calculated_value", record.calculated_value);
+	            json.put("xDrip_age_adjusted_raw_value", record.age_adjusted_raw_value);
+	            json.put("xDrip_calculated_current_slope", record.currentSlope());
+            }
+            json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
 
@@ -219,12 +229,12 @@ private RequestBody populateLegacyAPIEntry(BgReading record) throws Exception {
             json.put("device", "xDrip-"+prefs.getString("dex_collection_method", "BluetoothWixel"));
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
-            json.put("sgv", (int)record.calculated_value);
+            json.put("sgv", Math.round(record.calculated_value));
             json.put("direction", record.slopeName());
             return RequestBody.create(MediaType.parse("application/json"), json.toString());
         }
 
-        private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record) throws Exception {
+        private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record, boolean xDripViewerMode) throws Exception {
             JSONObject json = new JSONObject();
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
@@ -233,6 +243,15 @@ private void populateV1APIMeterReadingEntry(JSONArray array, Calibration record)
             json.put("date", record.timestamp);
             json.put("dateString", format.format(record.timestamp));
             json.put("mbg", record.bg);
+            if(xDripViewerMode) {
+	            json.put("xDrip_slope", record.slope);
+	            json.put("xDrip_intercept", record.intercept);
+	            json.put("xDrip_estimate_raw_at_time_of_calibration", record.estimate_raw_at_time_of_calibration);
+	            json.put("xDrip_slope_confidence", record.slope_confidence);
+	            json.put("xDrip_sensor_confidence", record.sensor_confidence);
+	            json.put("xDrip_raw_timestamp", record.raw_timestamp);
+            }
+            json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
 
@@ -253,6 +272,7 @@ private void populateV1APICalibrationEntry(JSONArray array, Calibration record)
                 json.put("intercept", (long) ((record.intercept * -1000) / (record.slope * 1000)));
                 json.put("scale", 1);
             }
+            json.put("sysTime", format.format(record.timestamp));
             array.put(json);
         }
 
@@ -269,7 +289,7 @@ private void postDeviceStatus(NightscoutService nightscoutService, String apiSec
         }
 
         private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDataSets,
-                                      List<Calibration> meterRecords,  List<Calibration> calRecords) {
+                                      List<Calibration> meterRecords,  List<Calibration> calRecords, boolean xDripViewerMode) {
             SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ", Locale.US);
             format.setTimeZone(TimeZone.getDefault());
 
@@ -291,9 +311,10 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                     DBCollection dexcomData = db.getCollection(collectionName.trim());
 
                     try {
-                        Log.i(TAG, "The number of EGV records being sent to MongoDB is " + glucoseDataSets.size());
+                        Log.e(TAG, "The number of EGV records being sent to MongoDB is " + glucoseDataSets.size());
                         for (BgReading record : glucoseDataSets) {
                             // make db object
+                            Log.e(TAG, "uploading bg with data " + record.timestamp);
                             BasicDBObject testData = new BasicDBObject();
                             testData.put("device", "xDrip-" + prefs.getString("dex_collection_method", "BluetoothWixel"));
                             testData.put("date", record.timestamp);
@@ -305,7 +326,16 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             testData.put("unfiltered", record.usedRaw() * 1000);
                             testData.put("rssi", 100);
                             testData.put("noise", record.noiseValue());
-                            dexcomData.insert(testData, WriteConcern.UNACKNOWLEDGED);
+                            if(xDripViewerMode) {
+	                            testData.put("xDrip_raw", record.raw_data);
+	                            testData.put("xDrip_filtered", record.filtered_data);
+	                            testData.put("xDrip_calculated_value", record.calculated_value);
+	                            testData.put("xDrip_calculated_current_slope", record.currentSlope());
+	                            testData.put("xDrip_age_adjusted_raw_value", record.age_adjusted_raw_value);
+                            }
+                            testData.put("sysTime", format.format(record.timestamp));
+                            BasicDBObject query = new BasicDBObject("type", "sgv").append("sysTime", format.format(record.timestamp));
+                            dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
 
                         Log.i(TAG, "The number of MBG records being sent to MongoDB is " + meterRecords.size());
@@ -317,7 +347,17 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                             testData.put("date", meterRecord.timestamp);
                             testData.put("dateString", format.format(meterRecord.timestamp));
                             testData.put("mbg", meterRecord.bg);
-                            dexcomData.insert(testData, WriteConcern.UNACKNOWLEDGED);
+                            if(xDripViewerMode) {
+	                            testData.put("xDrip_slope", meterRecord.slope);
+	                            testData.put("xDrip_intercept", meterRecord.intercept);
+	                            testData.put("xDrip_estimate_raw_at_time_of_calibration", meterRecord.estimate_raw_at_time_of_calibration);
+	                            testData.put("xDrip_slope_confidence", meterRecord.slope_confidence);
+	                            testData.put("xDrip_sensor_confidence", meterRecord.sensor_confidence);
+	                            testData.put("xDrip_raw_timestamp", meterRecord.raw_timestamp);
+                            }               
+                            testData.put("sysTime", format.format(meterRecord.timestamp));
+                            BasicDBObject query = new BasicDBObject("type", "mbg").append("sysTime", format.format(meterRecord.timestamp));
+                            dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
 
                         for (Calibration calRecord : calRecords) {
@@ -335,8 +375,12 @@ private boolean doMongoUpload(SharedPreferences prefs, List<BgReading> glucoseDa
                                 testData.put("intercept", (long) ((calRecord.intercept * -1000) / (calRecord.slope * 1000)));
                                 testData.put("scale", 1);
                             }
+
                             testData.put("type", "cal");
-                            dexcomData.insert(testData, WriteConcern.UNACKNOWLEDGED);
+                            
+                            testData.put("sysTime", format.format(calRecord.timestamp));
+                            BasicDBObject query = new BasicDBObject("type", "cal").append("sysTime", format.format(calRecord.timestamp));
+                            dexcomData.update(query, testData, true, false,  WriteConcern.UNACKNOWLEDGED);
                         }
 
                         // TODO: quick port from original code, revisit before release
diff --git a/app/src/main/res/xml/pref_advanced_settings.xml b/app/src/main/res/xml/pref_advanced_settings.xml
index 64606d2..aad375a 100644
--- a/app/src/main/res/xml/pref_advanced_settings.xml
+++ b/app/src/main/res/xml/pref_advanced_settings.xml
@@ -50,6 +50,11 @@
             android:title="Disable Battery Warning"
             android:summary="Disable the warning for low transmitter battery state on the home screen. (Only relevant for DIY receivers.)"
             android:defaultValue="false" />
+        <CheckBoxPreference
+            android:key="xDripViewer_upload_mode"
+            android:title="xDripViewer upload mode"
+            android:summary="Upload more fields needed for optimum xDripViewer functioning"
+            android:defaultValue="false" />
         <Preference
             android:title="View Recent Errors/Warnings"
             android:key="recent_errors">

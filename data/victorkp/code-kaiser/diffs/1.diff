diff --git a/Makefile b/Makefile
index a5b3030..458fc48 100644
--- a/Makefile
+++ b/Makefile
@@ -13,5 +13,6 @@ test-opened:
 
 install-dependencies:
 	sudo cpan install --force Async Text::Diff::Parser HTTP::Server::Simple::CGI Data::Dumper \
-							  JSON DateTime DateTime::Format::Builder DateTime::Format::ISO8601
+							  JSON DateTime DateTime::Format::Builder DateTime::Format::ISO8601 \
+							  Data::Structure::Util
 	sudo dnf install -y perl-DateTime*
diff --git a/lib/CodeKaiser/PRStatus.pm b/lib/CodeKaiser/PRStatus.pm
index 7ab9cff..dc37802 100755
--- a/lib/CodeKaiser/PRStatus.pm
+++ b/lib/CodeKaiser/PRStatus.pm
@@ -6,8 +6,11 @@
      
     use File::Spec;
     use File::Basename;
+    use File::Slurp;
     use Scalar::Util;
     use Data::Dumper;
+    use JSON;
+    use Data::Structure::Util qw( unbless );
 
     use CodeKaiser::Logger qw(log_debug log_error log_verbose log_line);
 
@@ -28,8 +31,11 @@
                       status_message
                       recheck_time
                       write_status
+                      TO_JSON
                      );
 
+    my $JSON = JSON->new->allow_blessed->convert_blessed->pretty;
+
     # Status file path key
     my  $STATUS_FILE              = 'status_file';
 
@@ -247,29 +253,56 @@
         my $dirname = dirname($status->{$STATUS_FILE});
         system "mkdir -p $dirname" if $dirname;
 
+        # Open, write, and close file
         open(my $STATUS, ">$status->{$STATUS_FILE}")
                 or die "Could not write status: $status->{$STATUS_FILE}";
-
-        print $STATUS "$PR_NAME          : \'", $status->{$PR_NAME},  "\'\n";
-        print $STATUS "$PR_CREATOR       : \'", $status->{$PR_CREATOR},  "\'\n";
-        print $STATUS "$PR_MERGER        : \'", $status->{$PR_MERGER},  "\'\n";
-        print $STATUS "$PR_SHA           : \'", $status->{$PR_SHA},  "\'\n";
-        print $STATUS "$BRANCH_BASE      : \'", $status->{$BRANCH_BASE},  "\'\n";
-        print $STATUS "$BRANCH_HEAD      : \'", $status->{$BRANCH_HEAD},  "\'\n";
-        print $STATUS "$PR_STATUS        : \'", $status->{$PR_STATUS},  "\'\n";
-        print $STATUS "$MERGE_STATUS     : \'", $status->{$MERGE_STATUS},  "\'\n";
-        print $STATUS "$STATUS_MESSAGE   : \'", $status->{$STATUS_MESSAGE}, "\'\n";
-        print $STATUS "$RECHECK_TIME     : ",   $status->{$RECHECK_TIME},   "\n";
+        print $STATUS $JSON->encode($status);
         close($STATUS);
     }
 
-    # Load a configuration file into a hash,
-    # creating a new configuration with defaults,
-    # if needed
+    # Load a status file into a hash,
+    # using a new default status if needed
     sub load_status {
         my ($status_file) = @_;
 
-        # Start with default values
+        my $status = make_default_status($status_file);
+
+        # Write defaults at least, if no status present
+        if (! -e $status_file) {
+            log_debug "Writing default status file";
+            write_status($status);
+            return $status;
+        }
+        
+        open(my $STATUS, "<$status_file")
+            or die "Could not read status: $status_file";
+        my $file_text = read_file($STATUS);
+        close($STATUS);
+
+        my $loaded_status = $JSON->decode($file_text);
+
+        if(!$loaded_status) {
+            log_debug "Writing default status file";
+            write_status($status);
+            return $status;
+        }
+        
+        # Overlay all loaded values on top of default values.
+        # For cases where the stored status is missing a member,
+        # this enfoces a default value for that key
+        while (my ($key, $value) = each (%{$loaded_status})) {
+            $status->{$key} = $value;
+        }
+
+        return $status;
+    }
+
+    ## Make default status, with mostly empty values
+    # Arguments: status_file_path
+    # Return: hash reference of default status
+    sub make_default_status {
+        my ($status_file) = @_;
+
         my %config_hash = ( $PR_NAME          => '',
                             $PR_CREATOR       => '',
                             $PR_MERGER        => '',
@@ -282,58 +315,20 @@
                             $STATUS_MESSAGE   => '',
                             $RECHECK_TIME     => 0);
 
-        my $config = \%config_hash;
+        return \%config_hash;
+    }
 
-        # Write defaults at least, if no config present
-        if (! -e $status_file) {
-            log_debug "Writing default status file";
-            write_status($config);
-            return $config;
-        }
-        
-        open(my $CONFIG, "<$config->{$STATUS_FILE}")
-            or die "Could not read config: $config->{$STATUS_FILE}";
-        
-        while(my $line = <$CONFIG>) {
-            chomp($line);
-            parse_config_line($config, $line);
-        }
+    sub TO_JSON {
+        my ($status) = @_;
 
-        close($CONFIG);
-        return $config;
-    }
+        # Remove underlying file store, and
+        # don't have a blessing as an object
+        my %copy = %{$status};
+        delete($copy{$STATUS_FILE});
+        unbless \%copy;
 
-    sub parse_config_line($) {
-        my ($self, $line) = @_;
-        
-        if ($line =~ m/^$PR_NAME\s*:\s*'(.*)'\s*/) {
-            $self->{$PR_NAME} = $1;
-        } elsif ($line =~ m/^$PR_CREATOR\s*:\s*'(.*)'\s*/) {
-            $self->{$PR_CREATOR} = $1;
-        } elsif ($line =~ m/^$PR_MERGER\s*:\s*'(.*)'\s*/) {
-            $self->{$PR_MERGER} = $1;
-        } elsif ($line =~ m/^$PR_SHA\s*:\s*'(.*)'\s*/) {
-            $self->{$PR_SHA} = $1;
-        } elsif ($line =~ m/^$BRANCH_BASE\s*:\s*'(.*)'\s*/) {
-            $self->{$BRANCH_BASE} = $1;
-        } elsif ($line =~ m/^$BRANCH_HEAD\s*:\s*'(.*)'\s*/) {
-            $self->{$BRANCH_HEAD} = $1;
-        } elsif ($line =~ m/^$PR_STATUS\s*:\s*'(.*)'\s*/) {
-            $self->{$PR_STATUS} = $1;
-        } elsif($line =~ m/^$MERGE_STATUS\s*:\s*'(.+)'\s*/) {
-            $self->{$MERGE_STATUS} = $1;
-        } elsif ($line =~ m/^$STATUS_MESSAGE\s*:\s*'(.*)'\s*/) {
-            $self->{$STATUS_MESSAGE} = $1;
-        } elsif ($line =~ m/^$RECHECK_TIME\s*:\s*(\d+)\s*/) {
-            if(Scalar::Util::looks_like_number($1)) {           
-                $self->{$RECHECK_TIME} = $1;
-            } else {
-                log_error "Bad configuration line, non-numeric: $line\n";
-            }
-        } else {
-            log_error "Bad configuration line: $line\n";
-        }
+        return \%copy;
     }
-    
+
     1;
 }
diff --git a/lib/CodeKaiser/RepoConfig.pm b/lib/CodeKaiser/RepoConfig.pm
index 9caf5dd..21bd45e 100755
--- a/lib/CodeKaiser/RepoConfig.pm
+++ b/lib/CodeKaiser/RepoConfig.pm
@@ -6,8 +6,11 @@
      
     use File::Spec;
     use File::Basename;
+    use File::Slurp;
     use Scalar::Util;
     use Data::Dumper;
+    use JSON;
+    use Data::Structure::Util qw( unbless );
 
     use CodeKaiser::Logger qw(log_debug log_error log_verbose log_line);
 
@@ -22,8 +25,11 @@
                       reviewers_needed
                       blocking_enabled
                       blocking_timeout
+                      TO_JSON
                      );
 
+    my $JSON = JSON->new->allow_blessed->convert_blessed->pretty;
+
     # Configuration File path key
     my  $CONFIG_FILE              = 'config_file';
 
@@ -146,11 +152,9 @@
         my $dirname = dirname($config->{$CONFIG_FILE});
         system "mkdir -p $dirname" if $dirname;
 
-        open(my $CONFIG, ">$config->{$CONFIG_FILE}") or die "Could not write config: $config->{$CONFIG_FILE}";
-        print $CONFIG "$GITHUB_TOKEN     : $config->{$GITHUB_TOKEN}\n";
-        print $CONFIG "$REVIEWERS_NEEDED : $config->{$REVIEWERS_NEEDED}\n";
-        print $CONFIG "$BLOCKING_ENABLED : $config->{$BLOCKING_ENABLED}\n";
-        print $CONFIG "$BLOCKING_TIMEOUT : $config->{$BLOCKING_TIMEOUT}\n";
+        open(my $CONFIG, ">$config->{$CONFIG_FILE}")
+            or die "Could not write config: $config->{$CONFIG_FILE}";
+        print $CONFIG $JSON->encode($config);
         close($CONFIG);
     }
 
@@ -161,61 +165,61 @@
         my ($config_file) = @_;
 
         # Start with default values
-        my %config_hash = ( $CONFIG_FILE      => $config_file,
-                            $GITHUB_TOKEN     => $DEFAULT_GITHUB_TOKEN,
-                            $REVIEWERS_NEEDED => $DEFAULT_REVIEWERS_NEEDED,
-                            $BLOCKING_ENABLED => $DEFAULT_BLOCKING_ENABLED,
-                            $BLOCKING_TIMEOUT => $DEFAULT_BLOCKING_TIMEOUT );
-
-        my $config = \%config_hash;
+        my $config = make_default_config($config_file);
 
         # Write defaults at least, if no config present
         if (! -e $config_file) {
+            log_debug "Writing default repo config file";
             write_config($config);
             return $config;
         }
+
         
-        open(my $CONFIG, "<$config->{$CONFIG_FILE}") or die "Could not read config: $config->{$CONFIG_FILE}";
+        open(my $CONFIG, "<$config->{$CONFIG_FILE}")
+            or die "Could not read repo config: $config->{$CONFIG_FILE}";
+
+        my $file_text = read_file($CONFIG);
+        close($CONFIG);
+
+        my $loaded_config = $JSON->decode($file_text);
+
+        if(!$loaded_config) {
+            log_debug "Writing default repo config file";
+            write_status($config);
+            return $config;
+        }
         
-        while(my $line = <$CONFIG>) {
-            chomp($line);
-            parse_config_line($config, $line);
+        # Overlay all loaded values on top of default values.
+        # For cases where the stored config is missing a member,
+        # this enfoces a default value for that key
+        while (my ($key, $value) = each (%{$loaded_config})) {
+            $config->{$key} = $value;
         }
 
-        close($CONFIG);
         return $config;
     }
 
-    sub parse_config_line($) {
-        my ($self, $line) = @_;
-        
-        if($line =~ m/^$GITHUB_TOKEN\s*:\s*(.+)\s*/) {
-            if($line =~ m/^$GITHUB_TOKEN\s*:\s*([0-9a-fA-F]+)\s*/) {
-                $self->{$GITHUB_TOKEN} = $1;
-            } else {
-                log_error "Bad configuration line, non-hex token: $line\n";
-            }
-        } elsif ($line =~ m/^$REVIEWERS_NEEDED\s*:\s*(.+)\s*/) {
-            if(Scalar::Util::looks_like_number($1)) {           
-                $self->{$REVIEWERS_NEEDED} = $1;
-            } else {
-                log_error "Bad configuration line, non-numeric: $line\n";
-            }
-        } elsif ($line =~ m/^$BLOCKING_ENABLED\s*:\s*(\d+)\s*/) {
-            if(Scalar::Util::looks_like_number($1)) {           
-                $self->{$BLOCKING_ENABLED} = $1;
-            } else {
-                log_error "Bad configuration line, non-numeric: $line\n";
-            }
-        } elsif ($line =~ m/^$BLOCKING_TIMEOUT\s*:\s*(\d+)\s*/) {
-            if(Scalar::Util::looks_like_number($1)) {           
-                $self->{$BLOCKING_TIMEOUT} = $1;
-            } else {
-                log_error "Bad configuration line, non-numeric: $line\n";
-            }
-        } else {
-            log_error "Bad configuration line: $line\n";
-        }
+    sub make_default_config {
+        my ($config_file) = @_;
+
+        my %config_hash = ( $CONFIG_FILE      => $config_file,
+                            $GITHUB_TOKEN     => $DEFAULT_GITHUB_TOKEN,
+                            $REVIEWERS_NEEDED => $DEFAULT_REVIEWERS_NEEDED,
+                            $BLOCKING_ENABLED => $DEFAULT_BLOCKING_ENABLED,
+                            $BLOCKING_TIMEOUT => $DEFAULT_BLOCKING_TIMEOUT );
+        return \%config_hash;
+    }
+
+    sub TO_JSON {
+        my ($config) = @_;
+
+        # Remove underlying file store, and
+        # don't have a blessing as an object
+        my %copy = %{$config};
+        delete($copy{$CONFIG_FILE});
+        unbless \%copy;
+
+        return \%copy;
     }
     
     1;
diff --git a/server.pl b/server.pl
index d726b43..3ea5658 100755
--- a/server.pl
+++ b/server.pl
@@ -172,34 +172,3 @@
 # start the server on port 8080
 CodeKaiser->new(8080)->run();
 
-# my $api = CodeKaiser::GitHubApi->new(token      => '236ceea5c4582dbdd71400ad2166e298a9b7c822',
-#                                      repo_owner => 'victorkp',
-#                                      repo_name  => 'dummy-test');
-# 
-# print $api->token . "\n";
-# print $api->repo_owner . "\n";
-# print $api->repo_name . "\n\n";
-# 
-# my $response = $api->get_issue_comments(2);
-# print $response->request()->uri() . "\n";
-# print $response->status_line() . "\n";
-# if ($response->is_success) {
-#     my @payload = @{decode_json($response->decoded_content)};
-# 
-#     for my $comment(@payload){
-#         print "Comment:\n";
-#         printf "    User: %s\n", $comment->{user}{login};
-#         printf "    Body: %s\n", $comment->{body};
-#         printf "    Time: %s\n", $comment->{updated_at};
-#         printf "    Time: %s\n", $comment->{html_url};
-#     }
-# }
-# 
-# print "\n\n";
-# $response = $api->post_status("144fe97f8bc30ea81138509e7cbce2432d836d78",
-#                               response->STATUS_FAILURE, 
-#                               "victorkp blocked merge");
-# print $response->request()->uri() . "\n";
-# print $response->status_line() . "\n";
-#     print $response->decoded_content;
-
diff --git a/test/PRStatusTest.pm b/test/PRStatusTest.pm
index d348444..3c11c5c 100755
--- a/test/PRStatusTest.pm
+++ b/test/PRStatusTest.pm
@@ -40,6 +40,7 @@ $status->recheck_time(100);
 $status->status_message("test");
 $status->branch_base("base");
 $status->branch_head("head");
+$status->write_status();
 $status = CodeKaiser::PRStatus->new(status_file => 'tmp/test-status');
 $status->pr_name()               eq "test-name"                         or die;
 $status->pr_sha()                eq "abcd1234"                          or die;
